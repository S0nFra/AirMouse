
AirMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d4c  08011b38  08011b38  00021b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012884  08012884  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012884  08012884  00022884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801288c  0801288c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801288c  0801288c  0002288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012890  08012890  00022890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012894  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006348  200001f8  08012a8c  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006540  08012a8c  00036540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028213  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000569a  00000000  00000000  0005843b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  0005dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  0005fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de21  00000000  00000000  000617b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002913f  00000000  00000000  0007f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1280  00000000  00000000  000a8718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095a4  00000000  00000000  001499e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011b1c 	.word	0x08011b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08011b1c 	.word	0x08011b1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <Mount_SD>:



FRESULT Mount_SD (const TCHAR* path)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <Mount_SD+0x3c>)
 8000f1e:	f009 fbcf 	bl	800a6c0 <f_mount>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <Mount_SD+0x40>)
 8000f28:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <Mount_SD+0x40>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <Mount_SD+0x2a>
 8000f32:	4808      	ldr	r0, [pc, #32]	; (8000f54 <Mount_SD+0x44>)
 8000f34:	f7ff ffe2 	bl	8000efc <Send_Uart>
 8000f38:	e002      	b.n	8000f40 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <Mount_SD+0x48>)
 8000f3c:	f7ff ffde 	bl	8000efc <Send_Uart>
	return fresult;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <Mount_SD+0x40>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000214 	.word	0x20000214
 8000f50:	20000690 	.word	0x20000690
 8000f54:	08011b38 	.word	0x08011b38
 8000f58:	08011b5c 	.word	0x08011b5c

08000f5c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000f64:	4940      	ldr	r1, [pc, #256]	; (8001068 <Create_File+0x10c>)
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f00a f82f 	bl	800afca <f_stat>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <Create_File+0x110>)
 8000f72:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <Create_File+0x110>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000f7c:	2064      	movs	r0, #100	; 0x64
 8000f7e:	f00d fc63 	bl	800e848 <pvPortMalloc>
 8000f82:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	493a      	ldr	r1, [pc, #232]	; (8001070 <Create_File+0x114>)
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f00e fcf9 	bl	800f980 <siprintf>
		Send_Uart(buf);
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f7ff ffb4 	bl	8000efc <Send_Uart>
		vPortFree(buf);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f00d fd23 	bl	800e9e0 <vPortFree>
	    return fresult;
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <Create_File+0x110>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	e05f      	b.n	8001060 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000fa0:	220b      	movs	r2, #11
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4833      	ldr	r0, [pc, #204]	; (8001074 <Create_File+0x118>)
 8000fa6:	f009 fbef 	bl	800a788 <f_open>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <Create_File+0x110>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <Create_File+0x110>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000fba:	2064      	movs	r0, #100	; 0x64
 8000fbc:	f00d fc44 	bl	800e848 <pvPortMalloc>
 8000fc0:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <Create_File+0x110>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	492b      	ldr	r1, [pc, #172]	; (8001078 <Create_File+0x11c>)
 8000fcc:	6938      	ldr	r0, [r7, #16]
 8000fce:	f00e fcd7 	bl	800f980 <siprintf>
			Send_Uart(buf);
 8000fd2:	6938      	ldr	r0, [r7, #16]
 8000fd4:	f7ff ff92 	bl	8000efc <Send_Uart>
			vPortFree(buf);
 8000fd8:	6938      	ldr	r0, [r7, #16]
 8000fda:	f00d fd01 	bl	800e9e0 <vPortFree>
		    return fresult;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <Create_File+0x110>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	e03d      	b.n	8001060 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f00d fc2f 	bl	800e848 <pvPortMalloc>
 8000fea:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4923      	ldr	r1, [pc, #140]	; (800107c <Create_File+0x120>)
 8000ff0:	69f8      	ldr	r0, [r7, #28]
 8000ff2:	f00e fcc5 	bl	800f980 <siprintf>
			Send_Uart(buf);
 8000ff6:	69f8      	ldr	r0, [r7, #28]
 8000ff8:	f7ff ff80 	bl	8000efc <Send_Uart>
			vPortFree(buf);
 8000ffc:	69f8      	ldr	r0, [r7, #28]
 8000ffe:	f00d fcef 	bl	800e9e0 <vPortFree>
		}

		fresult = f_close(&fil);
 8001002:	481c      	ldr	r0, [pc, #112]	; (8001074 <Create_File+0x118>)
 8001004:	f009 ffb2 	bl	800af6c <f_close>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <Create_File+0x110>)
 800100e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <Create_File+0x110>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d012      	beq.n	800103e <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001018:	2064      	movs	r0, #100	; 0x64
 800101a:	f00d fc15 	bl	800e848 <pvPortMalloc>
 800101e:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <Create_File+0x110>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4915      	ldr	r1, [pc, #84]	; (8001080 <Create_File+0x124>)
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f00e fca8 	bl	800f980 <siprintf>
			Send_Uart(buf);
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ff63 	bl	8000efc <Send_Uart>
			vPortFree(buf);
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f00d fcd2 	bl	800e9e0 <vPortFree>
 800103c:	e00e      	b.n	800105c <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800103e:	2064      	movs	r0, #100	; 0x64
 8001040:	f00d fc02 	bl	800e848 <pvPortMalloc>
 8001044:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <Create_File+0x128>)
 800104a:	69b8      	ldr	r0, [r7, #24]
 800104c:	f00e fc98 	bl	800f980 <siprintf>
			Send_Uart(buf);
 8001050:	69b8      	ldr	r0, [r7, #24]
 8001052:	f7ff ff53 	bl	8000efc <Send_Uart>
			vPortFree(buf);
 8001056:	69b8      	ldr	r0, [r7, #24]
 8001058:	f00d fcc2 	bl	800e9e0 <vPortFree>
		}
	}
    return fresult;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <Create_File+0x110>)
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000678 	.word	0x20000678
 800106c:	20000690 	.word	0x20000690
 8001070:	08011d78 	.word	0x08011d78
 8001074:	20000448 	.word	0x20000448
 8001078:	08011db0 	.word	0x08011db0
 800107c:	08011dd8 	.word	0x08011dd8
 8001080:	08011e18 	.word	0x08011e18
 8001084:	08011d58 	.word	0x08011d58

08001088 <bcd2Dec>:
* @brief       Convert BCD to Decimal
* @param[in]   val value to convert from BCD to Decimal
* @return      res Converted value
*/
uint8_t bcd2Dec ( uint8_t val )
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    uint8_t res = ((val/16*10) + (val % 16));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
    return res;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <rtc_init>:
    return res;
}


int8_t rtc_init(I2C_HandleTypeDef* I2Cx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	I2C_Port = I2Cx;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <rtc_init+0x38>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_IsDeviceReady(I2C_Port, DS3231_ADDRESS, MAX_RETRY, HAL_MAX_DELAY);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <rtc_init+0x38>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2203      	movs	r2, #3
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f005 f84b 	bl	8006170 <HAL_I2C_IsDeviceReady>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <rtc_init+0x2e>
	{
		return DS3231_I2C_ERR;
 80010e4:	f06f 0301 	mvn.w	r3, #1
 80010e8:	e000      	b.n	80010ec <rtc_init+0x30>
	}
	return DS3231_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000698 	.word	0x20000698

080010f8 <rtc_get_date_time>:

int8_t rtc_get_date_time(date_time_t* datetime)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef returnValue;
	uint8_t in_buff[DATA_TRANSFER_SIZE];
	memset(&in_buff,0,DATA_TRANSFER_SIZE);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2207      	movs	r2, #7
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00d feb8 	bl	800ee7e <memset>

	returnValue = HAL_I2C_Mem_Read(I2C_Port, DS3231_ADDRESS, DS3231_SECONDS, ADDRESS_SIZE, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <rtc_get_date_time+0xc0>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2307      	movs	r3, #7
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2200      	movs	r2, #0
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	f004 fdfc 	bl	8005d24 <HAL_I2C_Mem_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <rtc_get_date_time+0x44>
	{
		return DS3231_I2C_ERR;
 8001136:	f06f 0301 	mvn.w	r3, #1
 800113a:	e038      	b.n	80011ae <rtc_get_date_time+0xb6>
	}

	datetime->seconds = bcd2Dec(in_buff[0]);
 800113c:	7a3b      	ldrb	r3, [r7, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffa2 	bl	8001088 <bcd2Dec>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	701a      	strb	r2, [r3, #0]
	datetime->minutes = bcd2Dec(in_buff[1]);
 800114c:	7a7b      	ldrb	r3, [r7, #9]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff9a 	bl	8001088 <bcd2Dec>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	705a      	strb	r2, [r3, #1]
	datetime->hours = bcd2Dec(in_buff[2]);
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff92 	bl	8001088 <bcd2Dec>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	709a      	strb	r2, [r3, #2]
	datetime->day = bcd2Dec(in_buff[3]);
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff8a 	bl	8001088 <bcd2Dec>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	70da      	strb	r2, [r3, #3]
	datetime->date = bcd2Dec(in_buff[4]);
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff82 	bl	8001088 <bcd2Dec>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	711a      	strb	r2, [r3, #4]
	datetime->month = bcd2Dec(in_buff[5]);
 800118c:	7b7b      	ldrb	r3, [r7, #13]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff7a 	bl	8001088 <bcd2Dec>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	715a      	strb	r2, [r3, #5]
	datetime->year = bcd2Dec(in_buff[6]);
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff72 	bl	8001088 <bcd2Dec>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	80da      	strh	r2, [r3, #6]

	return DS3231_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000698 	.word	0x20000698

080011bc <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2101      	movs	r1, #1
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <SELECT+0x14>)
 80011c6:	f004 f92b 	bl	8005420 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020400 	.word	0x40020400

080011d4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2101      	movs	r1, #1
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DESELECT+0x14>)
 80011de:	f004 f91f 	bl	8005420 <HAL_GPIO_WritePin>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020400 	.word	0x40020400

080011ec <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80011f6:	bf00      	nop
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <SPI_TxByte+0x30>)
 80011fa:	f006 fcee 	bl	8007bda <HAL_SPI_GetState>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d1f9      	bne.n	80011f8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8001204:	1df9      	adds	r1, r7, #7
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	2201      	movs	r2, #1
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPI_TxByte+0x30>)
 800120e:	f006 fa06 	bl	800761e <HAL_SPI_Transmit>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200007d4 	.word	0x200007d4

08001220 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 800122e:	bf00      	nop
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <SPI_RxByte+0x38>)
 8001232:	f006 fcd2 	bl	8007bda <HAL_SPI_GetState>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d1f9      	bne.n	8001230 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 800123c:	1dba      	adds	r2, r7, #6
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <SPI_RxByte+0x38>)
 800124a:	f006 fb24 	bl	8007896 <HAL_SPI_TransmitReceive>
  
  return data;
 800124e:	79bb      	ldrb	r3, [r7, #6]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200007d4 	.word	0x200007d4

0800125c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001264:	f7ff ffdc 	bl	8001220 <SPI_RxByte>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <SD_ReadyWait+0x34>)
 8001280:	2232      	movs	r2, #50	; 0x32
 8001282:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001284:	f7ff ffcc 	bl	8001220 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001288:	f7ff ffca 	bl	8001220 <SPI_RxByte>
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d004      	beq.n	80012a0 <SD_ReadyWait+0x28>
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SD_ReadyWait+0x34>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f3      	bne.n	8001288 <SD_ReadyWait+0x10>
  
  return res;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000876 	.word	0x20000876

080012b0 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80012b6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80012ba:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80012bc:	f7ff ff8a 	bl	80011d4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e005      	b.n	80012d2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80012c6:	20ff      	movs	r0, #255	; 0xff
 80012c8:	f7ff ff90 	bl	80011ec <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3301      	adds	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	ddf6      	ble.n	80012c6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80012d8:	f7ff ff70 	bl	80011bc <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80012f0:	2395      	movs	r3, #149	; 0x95
 80012f2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e009      	b.n	800130e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80012fa:	1d3a      	adds	r2, r7, #4
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff72 	bl	80011ec <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b05      	cmp	r3, #5
 8001312:	ddf2      	ble.n	80012fa <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001314:	e002      	b.n	800131c <SD_PowerOn+0x6c>
  {
    Count--;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3b01      	subs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800131c:	f7ff ff80 	bl	8001220 <SPI_RxByte>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d002      	beq.n	800132c <SD_PowerOn+0x7c>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f4      	bne.n	8001316 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800132c:	f7ff ff52 	bl	80011d4 <DESELECT>
  SPI_TxByte(0XFF);
 8001330:	20ff      	movs	r0, #255	; 0xff
 8001332:	f7ff ff5b 	bl	80011ec <SPI_TxByte>
  
  PowerFlag = 1;
 8001336:	4b03      	ldr	r3, [pc, #12]	; (8001344 <SD_PowerOn+0x94>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000069d 	.word	0x2000069d

08001348 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <SD_PowerOff+0x14>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	2000069d 	.word	0x2000069d

08001360 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <SD_CheckPower+0x14>)
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000069d 	.word	0x2000069d

08001378 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <SD_RxDataBlock+0x68>)
 8001384:	220a      	movs	r2, #10
 8001386:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001388:	f7ff ff4a 	bl	8001220 <SPI_RxByte>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d104      	bne.n	80013a0 <SD_RxDataBlock+0x28>
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <SD_RxDataBlock+0x68>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f3      	bne.n	8001388 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2bfe      	cmp	r3, #254	; 0xfe
 80013a4:	d001      	beq.n	80013aa <SD_RxDataBlock+0x32>
    return FALSE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e016      	b.n	80013d8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff53 	bl	800125c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff4d 	bl	800125c <SPI_RxBytePtr>
  } while(btr -= 2);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ed      	bne.n	80013aa <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80013ce:	f7ff ff27 	bl	8001220 <SPI_RxByte>
  SPI_RxByte();
 80013d2:	f7ff ff25 	bl	8001220 <SPI_RxByte>
  
  return TRUE;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000875 	.word	0x20000875

080013e4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80013f4:	f7ff ff40 	bl	8001278 <SD_ReadyWait>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d001      	beq.n	8001402 <SD_TxDataBlock+0x1e>
    return FALSE;
 80013fe:	2300      	movs	r3, #0
 8001400:	e040      	b.n	8001484 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fef1 	bl	80011ec <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2bfd      	cmp	r3, #253	; 0xfd
 800140e:	d031      	beq.n	8001474 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fee5 	bl	80011ec <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fede 	bl	80011ec <SPI_TxByte>
    } while (--wc);
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	3b01      	subs	r3, #1
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1eb      	bne.n	8001414 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800143c:	f7ff fef0 	bl	8001220 <SPI_RxByte>
    SPI_RxByte();
 8001440:	f7ff feee 	bl	8001220 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001444:	e00b      	b.n	800145e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001446:	f7ff feeb 	bl	8001220 <SPI_RxByte>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2b05      	cmp	r3, #5
 8001456:	d006      	beq.n	8001466 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	3301      	adds	r3, #1
 800145c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	2b40      	cmp	r3, #64	; 0x40
 8001462:	d9f0      	bls.n	8001446 <SD_TxDataBlock+0x62>
 8001464:	e000      	b.n	8001468 <SD_TxDataBlock+0x84>
        break;
 8001466:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001468:	bf00      	nop
 800146a:	f7ff fed9 	bl	8001220 <SPI_RxByte>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0fa      	beq.n	800146a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2b05      	cmp	r3, #5
 800147c:	d101      	bne.n	8001482 <SD_TxDataBlock+0x9e>
    return TRUE;
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001498:	f7ff feee 	bl	8001278 <SD_ReadyWait>
 800149c:	4603      	mov	r3, r0
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d001      	beq.n	80014a6 <SD_SendCmd+0x1a>
    return 0xFF;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	e040      	b.n	8001528 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe9f 	bl	80011ec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	0e1b      	lsrs	r3, r3, #24
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe99 	bl	80011ec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe93 	bl	80011ec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe8d 	bl	80011ec <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe88 	bl	80011ec <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d101      	bne.n	80014ea <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80014e6:	2395      	movs	r3, #149	; 0x95
 80014e8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b48      	cmp	r3, #72	; 0x48
 80014ee:	d101      	bne.n	80014f4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80014f0:	2387      	movs	r3, #135	; 0x87
 80014f2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe78 	bl	80011ec <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b4c      	cmp	r3, #76	; 0x4c
 8001500:	d101      	bne.n	8001506 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001502:	f7ff fe8d 	bl	8001220 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001506:	230a      	movs	r3, #10
 8001508:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800150a:	f7ff fe89 	bl	8001220 <SPI_RxByte>
 800150e:	4603      	mov	r3, r0
 8001510:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001512:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da05      	bge.n	8001526 <SD_SendCmd+0x9a>
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	3b01      	subs	r3, #1
 800151e:	73bb      	strb	r3, [r7, #14]
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f1      	bne.n	800150a <SD_SendCmd+0x7e>
  
  return res;
 8001526:	7b7b      	ldrb	r3, [r7, #13]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001540:	2301      	movs	r3, #1
 8001542:	e0d5      	b.n	80016f0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001544:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <SD_disk_initialize+0x1c8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <SD_disk_initialize+0x2a>
    return Stat;        
 8001552:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <SD_disk_initialize+0x1c8>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	e0ca      	b.n	80016f0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800155a:	f7ff fea9 	bl	80012b0 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800155e:	f7ff fe2d 	bl	80011bc <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001566:	2100      	movs	r1, #0
 8001568:	2040      	movs	r0, #64	; 0x40
 800156a:	f7ff ff8f 	bl	800148c <SD_SendCmd>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 80a5 	bne.w	80016c0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001576:	4b61      	ldr	r3, [pc, #388]	; (80016fc <SD_disk_initialize+0x1cc>)
 8001578:	2264      	movs	r2, #100	; 0x64
 800157a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800157c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001580:	2048      	movs	r0, #72	; 0x48
 8001582:	f7ff ff83 	bl	800148c <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d158      	bne.n	800163e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e00c      	b.n	80015ac <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001592:	7bfc      	ldrb	r4, [r7, #15]
 8001594:	f7ff fe44 	bl	8001220 <SPI_RxByte>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	f104 0310 	add.w	r3, r4, #16
 80015a0:	443b      	add	r3, r7
 80015a2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9ef      	bls.n	8001592 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 8083 	bne.w	80016c0 <SD_disk_initialize+0x190>
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	2baa      	cmp	r3, #170	; 0xaa
 80015be:	d17f      	bne.n	80016c0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80015c0:	2100      	movs	r1, #0
 80015c2:	2077      	movs	r0, #119	; 0x77
 80015c4:	f7ff ff62 	bl	800148c <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d807      	bhi.n	80015de <SD_disk_initialize+0xae>
 80015ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015d2:	2069      	movs	r0, #105	; 0x69
 80015d4:	f7ff ff5a 	bl	800148c <SD_SendCmd>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <SD_disk_initialize+0x1cc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1eb      	bne.n	80015c0 <SD_disk_initialize+0x90>
 80015e8:	e000      	b.n	80015ec <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80015ea:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <SD_disk_initialize+0x1cc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d064      	beq.n	80016c0 <SD_disk_initialize+0x190>
 80015f6:	2100      	movs	r1, #0
 80015f8:	207a      	movs	r0, #122	; 0x7a
 80015fa:	f7ff ff47 	bl	800148c <SD_SendCmd>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d15d      	bne.n	80016c0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e00c      	b.n	8001624 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800160a:	7bfc      	ldrb	r4, [r7, #15]
 800160c:	f7ff fe08 	bl	8001220 <SPI_RxByte>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	f104 0310 	add.w	r3, r4, #16
 8001618:	443b      	add	r3, r7
 800161a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	3301      	adds	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d9ef      	bls.n	800160a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800162a:	7a3b      	ldrb	r3, [r7, #8]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SD_disk_initialize+0x108>
 8001634:	2306      	movs	r3, #6
 8001636:	e000      	b.n	800163a <SD_disk_initialize+0x10a>
 8001638:	2302      	movs	r3, #2
 800163a:	73bb      	strb	r3, [r7, #14]
 800163c:	e040      	b.n	80016c0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800163e:	2100      	movs	r1, #0
 8001640:	2077      	movs	r0, #119	; 0x77
 8001642:	f7ff ff23 	bl	800148c <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d808      	bhi.n	800165e <SD_disk_initialize+0x12e>
 800164c:	2100      	movs	r1, #0
 800164e:	2069      	movs	r0, #105	; 0x69
 8001650:	f7ff ff1c 	bl	800148c <SD_SendCmd>
 8001654:	4603      	mov	r3, r0
 8001656:	2b01      	cmp	r3, #1
 8001658:	d801      	bhi.n	800165e <SD_disk_initialize+0x12e>
 800165a:	2302      	movs	r3, #2
 800165c:	e000      	b.n	8001660 <SD_disk_initialize+0x130>
 800165e:	2301      	movs	r3, #1
 8001660:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d10e      	bne.n	8001686 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001668:	2100      	movs	r1, #0
 800166a:	2077      	movs	r0, #119	; 0x77
 800166c:	f7ff ff0e 	bl	800148c <SD_SendCmd>
 8001670:	4603      	mov	r3, r0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d80e      	bhi.n	8001694 <SD_disk_initialize+0x164>
 8001676:	2100      	movs	r1, #0
 8001678:	2069      	movs	r0, #105	; 0x69
 800167a:	f7ff ff07 	bl	800148c <SD_SendCmd>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001684:	e00d      	b.n	80016a2 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001686:	2100      	movs	r1, #0
 8001688:	2041      	movs	r0, #65	; 0x41
 800168a:	f7ff feff 	bl	800148c <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <SD_disk_initialize+0x1cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e1      	bne.n	8001662 <SD_disk_initialize+0x132>
 800169e:	e000      	b.n	80016a2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80016a0:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <SD_disk_initialize+0x1cc>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <SD_disk_initialize+0x18c>
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	2050      	movs	r0, #80	; 0x50
 80016b2:	f7ff feeb 	bl	800148c <SD_SendCmd>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <SD_disk_initialize+0x1d0>)
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80016c6:	f7ff fd85 	bl	80011d4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80016ca:	f7ff fda9 	bl	8001220 <SPI_RxByte>
  
  if (type) 
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <SD_disk_initialize+0x1c8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SD_disk_initialize+0x1c8>)
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e001      	b.n	80016ea <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016e6:	f7ff fe2f 	bl	8001348 <SD_PowerOff>
  }
  
  return Stat;
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <SD_disk_initialize+0x1c8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000875 	.word	0x20000875
 8001700:	2000069c 	.word	0x2000069c

08001704 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001714:	2301      	movs	r3, #1
 8001716:	e002      	b.n	800171e <SD_disk_status+0x1a>
  
  return Stat;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <SD_disk_status+0x28>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <SD_disk_read+0x1c>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <SD_disk_read+0x20>
    return RES_PARERR;
 800174c:	2304      	movs	r3, #4
 800174e:	e051      	b.n	80017f4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <SD_disk_read+0xcc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800175e:	2303      	movs	r3, #3
 8001760:	e048      	b.n	80017f4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <SD_disk_read+0xd0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001774:	f7ff fd22 	bl	80011bc <SELECT>
  
  if (count == 1) 
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d111      	bne.n	80017a2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2051      	movs	r0, #81	; 0x51
 8001782:	f7ff fe83 	bl	800148c <SD_SendCmd>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d129      	bne.n	80017e0 <SD_disk_read+0xb0>
 800178c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f7ff fdf1 	bl	8001378 <SD_RxDataBlock>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d021      	beq.n	80017e0 <SD_disk_read+0xb0>
      count = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	e01e      	b.n	80017e0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	2052      	movs	r0, #82	; 0x52
 80017a6:	f7ff fe71 	bl	800148c <SD_SendCmd>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d117      	bne.n	80017e0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	68b8      	ldr	r0, [r7, #8]
 80017b6:	f7ff fddf 	bl	8001378 <SD_RxDataBlock>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017c6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ed      	bne.n	80017b0 <SD_disk_read+0x80>
 80017d4:	e000      	b.n	80017d8 <SD_disk_read+0xa8>
          break;
 80017d6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80017d8:	2100      	movs	r1, #0
 80017da:	204c      	movs	r0, #76	; 0x4c
 80017dc:	f7ff fe56 	bl	800148c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80017e0:	f7ff fcf8 	bl	80011d4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80017e4:	f7ff fd1c 	bl	8001220 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000000 	.word	0x20000000
 8001800:	2000069c 	.word	0x2000069c

08001804 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <SD_disk_write+0x1c>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <SD_disk_write+0x20>
    return RES_PARERR;
 8001820:	2304      	movs	r3, #4
 8001822:	e06b      	b.n	80018fc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <SD_disk_write+0x100>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001832:	2303      	movs	r3, #3
 8001834:	e062      	b.n	80018fc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <SD_disk_write+0x100>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001844:	2302      	movs	r3, #2
 8001846:	e059      	b.n	80018fc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <SD_disk_write+0x104>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800185a:	f7ff fcaf 	bl	80011bc <SELECT>
  
  if (count == 1) 
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d110      	bne.n	8001886 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	2058      	movs	r0, #88	; 0x58
 8001868:	f7ff fe10 	bl	800148c <SD_SendCmd>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d13a      	bne.n	80018e8 <SD_disk_write+0xe4>
 8001872:	21fe      	movs	r1, #254	; 0xfe
 8001874:	68b8      	ldr	r0, [r7, #8]
 8001876:	f7ff fdb5 	bl	80013e4 <SD_TxDataBlock>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d033      	beq.n	80018e8 <SD_disk_write+0xe4>
      count = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	e030      	b.n	80018e8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <SD_disk_write+0x104>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001892:	2100      	movs	r1, #0
 8001894:	2077      	movs	r0, #119	; 0x77
 8001896:	f7ff fdf9 	bl	800148c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	2057      	movs	r0, #87	; 0x57
 800189e:	f7ff fdf5 	bl	800148c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	2059      	movs	r0, #89	; 0x59
 80018a6:	f7ff fdf1 	bl	800148c <SD_SendCmd>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d11b      	bne.n	80018e8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80018b0:	21fc      	movs	r1, #252	; 0xfc
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f7ff fd96 	bl	80013e4 <SD_TxDataBlock>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018c4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ee      	bne.n	80018b0 <SD_disk_write+0xac>
 80018d2:	e000      	b.n	80018d6 <SD_disk_write+0xd2>
          break;
 80018d4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80018d6:	21fd      	movs	r1, #253	; 0xfd
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fd83 	bl	80013e4 <SD_TxDataBlock>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80018e8:	f7ff fc74 	bl	80011d4 <DESELECT>
  SPI_RxByte();
 80018ec:	f7ff fc98 	bl	8001220 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	2000069c 	.word	0x2000069c

0800190c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	603a      	str	r2, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	460b      	mov	r3, r1
 800191a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001926:	2304      	movs	r3, #4
 8001928:	e11b      	b.n	8001b62 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d129      	bne.n	800198a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d017      	beq.n	800196e <SD_disk_ioctl+0x62>
 800193e:	2b02      	cmp	r3, #2
 8001940:	dc1f      	bgt.n	8001982 <SD_disk_ioctl+0x76>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <SD_disk_ioctl+0x40>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d00b      	beq.n	8001962 <SD_disk_ioctl+0x56>
 800194a:	e01a      	b.n	8001982 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800194c:	f7ff fd08 	bl	8001360 <SD_CheckPower>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001956:	f7ff fcf7 	bl	8001348 <SD_PowerOff>
      res = RES_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001960:	e0fd      	b.n	8001b5e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001962:	f7ff fca5 	bl	80012b0 <SD_PowerOn>
      res = RES_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800196c:	e0f7      	b.n	8001b5e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	1c5c      	adds	r4, r3, #1
 8001972:	f7ff fcf5 	bl	8001360 <SD_CheckPower>
 8001976:	4603      	mov	r3, r0
 8001978:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001980:	e0ed      	b.n	8001b5e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001982:	2304      	movs	r3, #4
 8001984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001988:	e0e9      	b.n	8001b5e <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800198a:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <SD_disk_ioctl+0x260>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001998:	2303      	movs	r3, #3
 800199a:	e0e2      	b.n	8001b62 <SD_disk_ioctl+0x256>
    
    SELECT();
 800199c:	f7ff fc0e 	bl	80011bc <SELECT>
    
    switch (ctrl) 
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	2b0d      	cmp	r3, #13
 80019a4:	f200 80cc 	bhi.w	8001b40 <SD_disk_ioctl+0x234>
 80019a8:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <SD_disk_ioctl+0xa4>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	08001aab 	.word	0x08001aab
 80019b4:	080019e9 	.word	0x080019e9
 80019b8:	08001a9b 	.word	0x08001a9b
 80019bc:	08001b41 	.word	0x08001b41
 80019c0:	08001b41 	.word	0x08001b41
 80019c4:	08001b41 	.word	0x08001b41
 80019c8:	08001b41 	.word	0x08001b41
 80019cc:	08001b41 	.word	0x08001b41
 80019d0:	08001b41 	.word	0x08001b41
 80019d4:	08001b41 	.word	0x08001b41
 80019d8:	08001b41 	.word	0x08001b41
 80019dc:	08001abd 	.word	0x08001abd
 80019e0:	08001ae1 	.word	0x08001ae1
 80019e4:	08001b05 	.word	0x08001b05
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80019e8:	2100      	movs	r1, #0
 80019ea:	2049      	movs	r0, #73	; 0x49
 80019ec:	f7ff fd4e 	bl	800148c <SD_SendCmd>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80a8 	bne.w	8001b48 <SD_disk_ioctl+0x23c>
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2110      	movs	r1, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fcba 	bl	8001378 <SD_RxDataBlock>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 809e 	beq.w	8001b48 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10e      	bne.n	8001a34 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a2a:	8bfb      	ldrh	r3, [r7, #30]
 8001a2c:	029a      	lsls	r2, r3, #10
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e02e      	b.n	8001a92 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a34:	7c7b      	ldrb	r3, [r7, #17]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	7dbb      	ldrb	r3, [r7, #22]
 8001a3e:	09db      	lsrs	r3, r3, #7
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	7d7b      	ldrb	r3, [r7, #21]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 0306 	and.w	r3, r3, #6
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	3302      	adds	r3, #2
 8001a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a5c:	7d3b      	ldrb	r3, [r7, #20]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a84:	8bfa      	ldrh	r2, [r7, #30]
 8001a86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a8a:	3b09      	subs	r3, #9
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001a98:	e056      	b.n	8001b48 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aa8:	e055      	b.n	8001b56 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001aaa:	f7ff fbe5 	bl	8001278 <SD_ReadyWait>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2bff      	cmp	r3, #255	; 0xff
 8001ab2:	d14b      	bne.n	8001b4c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001aba:	e047      	b.n	8001b4c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001abc:	2100      	movs	r1, #0
 8001abe:	2049      	movs	r0, #73	; 0x49
 8001ac0:	f7ff fce4 	bl	800148c <SD_SendCmd>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d142      	bne.n	8001b50 <SD_disk_ioctl+0x244>
 8001aca:	2110      	movs	r1, #16
 8001acc:	6a38      	ldr	r0, [r7, #32]
 8001ace:	f7ff fc53 	bl	8001378 <SD_RxDataBlock>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d03b      	beq.n	8001b50 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ade:	e037      	b.n	8001b50 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	204a      	movs	r0, #74	; 0x4a
 8001ae4:	f7ff fcd2 	bl	800148c <SD_SendCmd>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d132      	bne.n	8001b54 <SD_disk_ioctl+0x248>
 8001aee:	2110      	movs	r1, #16
 8001af0:	6a38      	ldr	r0, [r7, #32]
 8001af2:	f7ff fc41 	bl	8001378 <SD_RxDataBlock>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02b      	beq.n	8001b54 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b02:	e027      	b.n	8001b54 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001b04:	2100      	movs	r1, #0
 8001b06:	207a      	movs	r0, #122	; 0x7a
 8001b08:	f7ff fcc0 	bl	800148c <SD_SendCmd>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b18:	e00b      	b.n	8001b32 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001b1a:	6a3c      	ldr	r4, [r7, #32]
 8001b1c:	1c63      	adds	r3, r4, #1
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	f7ff fb7e 	bl	8001220 <SPI_RxByte>
 8001b24:	4603      	mov	r3, r0
 8001b26:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d9ef      	bls.n	8001b1a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001b40:	2304      	movs	r3, #4
 8001b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b46:	e006      	b.n	8001b56 <SD_disk_ioctl+0x24a>
      break;
 8001b48:	bf00      	nop
 8001b4a:	e004      	b.n	8001b56 <SD_disk_ioctl+0x24a>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e002      	b.n	8001b56 <SD_disk_ioctl+0x24a>
      break;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <SD_disk_ioctl+0x24a>
      break;
 8001b54:	bf00      	nop
    }
    
    DESELECT();
 8001b56:	f7ff fb3d 	bl	80011d4 <DESELECT>
    SPI_RxByte();
 8001b5a:	f7ff fb61 	bl	8001220 <SPI_RxByte>
  }
  
  return res;
 8001b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	372c      	adds	r7, #44	; 0x2c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <logMovement>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* This function is used to log a relative movement of the mouse with x and y as values in their respective axes.*/
void logMovement(int x, int y) {
 8001b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b74:	b0eb      	sub	sp, #428	; 0x1ac
 8001b76:	af1e      	add	r7, sp, #120	; 0x78
 8001b78:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001b7a:	65b9      	str	r1, [r7, #88]	; 0x58
	char log[LOG_STRING_LEN];
	/* Get the current timestamp and print the string */
	date_time_t datetime;
	rtc_get_date_time(&datetime);
 8001b7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fab9 	bl	80010f8 <rtc_get_date_time>
	sprintf(log,
			"[%d-%d-%d - %d:%d:%d]\tEVENT: relative movement x:%d y:%d\t========\tAcc. Values: {T: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f || I: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f}\n",
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001b86:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
	sprintf(log,
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001b8c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
	sprintf(log,
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001b92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	sprintf(log,
 8001b96:	461e      	mov	r6, r3
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001b98:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
	sprintf(log,
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
			datetime.minutes, datetime.seconds, x, y, mpu_pol.accelerometer_X,
 8001b9e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
	sprintf(log,
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
			datetime.minutes, datetime.seconds, x, y, mpu_pol.accelerometer_X,
 8001ba4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
	sprintf(log,
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
			datetime.minutes, datetime.seconds, x, y, mpu_pol.accelerometer_X,
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <logMovement+0x188>)
 8001bac:	699b      	ldr	r3, [r3, #24]
	sprintf(log,
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcd2 	bl	8000558 <__aeabi_f2d>
 8001bb4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <logMovement+0x188>)
 8001bba:	69db      	ldr	r3, [r3, #28]
	sprintf(log,
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fccb 	bl	8000558 <__aeabi_f2d>
 8001bc2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <logMovement+0x188>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
	sprintf(log,
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc4 	bl	8000558 <__aeabi_f2d>
 8001bd0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
 8001bd4:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <logMovement+0x188>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(log,
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcbd 	bl	8000558 <__aeabi_f2d>
 8001bde:	e9c7 0108 	strd	r0, r1, [r7, #32]
			mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
 8001be2:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <logMovement+0x188>)
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf(log,
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcb6 	bl	8000558 <__aeabi_f2d>
 8001bec:	e9c7 0106 	strd	r0, r1, [r7, #24]
			mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <logMovement+0x188>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf(log,
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcaf 	bl	8000558 <__aeabi_f2d>
 8001bfa:	e9c7 0104 	strd	r0, r1, [r7, #16]
			mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <logMovement+0x18c>)
 8001c00:	699b      	ldr	r3, [r3, #24]
	sprintf(log,
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
 8001c08:	e9c7 0102 	strd	r0, r1, [r7, #8]
			mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <logMovement+0x18c>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
	sprintf(log,
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fca1 	bl	8000558 <__aeabi_f2d>
 8001c16:	e9c7 0100 	strd	r0, r1, [r7]
			mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y,
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <logMovement+0x18c>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
	sprintf(log,
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc9a 	bl	8000558 <__aeabi_f2d>
 8001c24:	4682      	mov	sl, r0
 8001c26:	468b      	mov	fp, r1
			mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y,
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <logMovement+0x18c>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(log,
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc93 	bl	8000558 <__aeabi_f2d>
 8001c32:	4680      	mov	r8, r0
 8001c34:	4689      	mov	r9, r1
			mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y,
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <logMovement+0x18c>)
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf(log,
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc8c 	bl	8000558 <__aeabi_f2d>
 8001c40:	4604      	mov	r4, r0
 8001c42:	460d      	mov	r5, r1
			mpu_ind.gyroscope_Z);
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <logMovement+0x18c>)
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf(log,
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc85 	bl	8000558 <__aeabi_f2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001c56:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001c5a:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8001c5e:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8001c62:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8001c66:	ed97 7b00 	vldr	d7, [r7]
 8001c6a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001c6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c72:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001c76:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c7a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001c7e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001c82:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001c86:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001c8e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c92:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001c96:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001c9a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001c9e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001ca2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca8:	9305      	str	r3, [sp, #20]
 8001caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cac:	9304      	str	r3, [sp, #16]
 8001cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cb0:	9103      	str	r1, [sp, #12]
 8001cb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001cb4:	9102      	str	r1, [sp, #8]
 8001cb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001cb8:	9101      	str	r1, [sp, #4]
 8001cba:	9600      	str	r6, [sp, #0]
 8001cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cc0:	490f      	ldr	r1, [pc, #60]	; (8001d00 <logMovement+0x190>)
 8001cc2:	f002 fdf9 	bl	80048b8 <sprintf_>
	/* Insert the string into the queue */
	if (osMessageQueuePut(EventQueueHandle, (void*) &log, 0U, 0U) != osOK) {
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <logMovement+0x194>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f009 fe0f 	bl	800b8f4 <osMessageQueuePut>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <logMovement+0x17a>
		HAL_UART_Transmit(&huart2, (uint8_t*) "QUEUE INSERT ERROR\n",
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	2213      	movs	r2, #19
 8001ce2:	4909      	ldr	r1, [pc, #36]	; (8001d08 <logMovement+0x198>)
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <logMovement+0x19c>)
 8001ce6:	f006 fb1e 	bl	8008326 <HAL_UART_Transmit>
				sizeof(char) * strlen("QUEUE INSERT ERROR\n"), HAL_MAX_DELAY);
	}
}
 8001cea:	bf00      	nop
 8001cec:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200007a0 	.word	0x200007a0
 8001cfc:	2000076c 	.word	0x2000076c
 8001d00:	08011fac 	.word	0x08011fac
 8001d04:	200006b0 	.word	0x200006b0
 8001d08:	08012050 	.word	0x08012050
 8001d0c:	2000087c 	.word	0x2000087c

08001d10 <logGestures>:
 * 4 -> zoom out
 * 5 -> ALT+TAB
 * 6 -> ALT+TAB windows switch
 * 7 -> ALT+TAB release
 * */
void logGestures(int event) {
 8001d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d14:	b0f7      	sub	sp, #476	; 0x1dc
 8001d16:	af1e      	add	r7, sp, #120	; 0x78
 8001d18:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d20:	6018      	str	r0, [r3, #0]
	char log[LOG_STRING_LEN];
	date_time_t datetime;
	rtc_get_date_time(&datetime);
 8001d22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9e6 	bl	80010f8 <rtc_get_date_time>
	char eventString[50];

	if (event == 1) {
 8001d2c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d106      	bne.n	8001d48 <logGestures+0x38>
		sprintf(eventString, "left click");
 8001d3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d3e:	4987      	ldr	r1, [pc, #540]	; (8001f5c <logGestures+0x24c>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fdb9 	bl	80048b8 <sprintf_>
 8001d46:	e052      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 2) {
 8001d48:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d106      	bne.n	8001d64 <logGestures+0x54>
		sprintf(eventString, "double click");
 8001d56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d5a:	4981      	ldr	r1, [pc, #516]	; (8001f60 <logGestures+0x250>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 fdab 	bl	80048b8 <sprintf_>
 8001d62:	e044      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 3) {
 8001d64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d106      	bne.n	8001d80 <logGestures+0x70>
		sprintf(eventString, "zoom in");
 8001d72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d76:	497b      	ldr	r1, [pc, #492]	; (8001f64 <logGestures+0x254>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fd9d 	bl	80048b8 <sprintf_>
 8001d7e:	e036      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 4) {
 8001d80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d106      	bne.n	8001d9c <logGestures+0x8c>
		sprintf(eventString, "zoom out");
 8001d8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d92:	4975      	ldr	r1, [pc, #468]	; (8001f68 <logGestures+0x258>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fd8f 	bl	80048b8 <sprintf_>
 8001d9a:	e028      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 5) {
 8001d9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001da0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d106      	bne.n	8001db8 <logGestures+0xa8>
		sprintf(eventString, "ALT+TAB");
 8001daa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dae:	496f      	ldr	r1, [pc, #444]	; (8001f6c <logGestures+0x25c>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fd81 	bl	80048b8 <sprintf_>
 8001db6:	e01a      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 6) {
 8001db8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d106      	bne.n	8001dd4 <logGestures+0xc4>
		sprintf(eventString, "ALT+TAB Switch");
 8001dc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dca:	4969      	ldr	r1, [pc, #420]	; (8001f70 <logGestures+0x260>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fd73 	bl	80048b8 <sprintf_>
 8001dd2:	e00c      	b.n	8001dee <logGestures+0xde>
		 mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,
		 mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y, mpu_pol.gyroscope_Z,
		 mpu_ind.accelerometer_X, mpu_ind.accelerometer_Y,
		 mpu_ind.accelerometer_Z, mpu_ind.gyroscope_X,
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	} else if (event == 7) {
 8001dd4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001dd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d105      	bne.n	8001dee <logGestures+0xde>
		sprintf(eventString, "ALT+TAB Release");
 8001de2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001de6:	4963      	ldr	r1, [pc, #396]	; (8001f74 <logGestures+0x264>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fd65 	bl	80048b8 <sprintf_>
		 mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);*/
	}

	sprintf(log,
			"[%d-%d-%d - %d:%d:%d]\tEVENT: %s\t========\tAcc. Values: {T: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f || I: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f}\n",
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001dee:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
	sprintf(log,
 8001df2:	653b      	str	r3, [r7, #80]	; 0x50
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001df4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
	sprintf(log,
 8001df8:	64fb      	str	r3, [r7, #76]	; 0x4c
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
	sprintf(log,
 8001dfe:	461e      	mov	r6, r3
			datetime.date, datetime.month, datetime.year, datetime.hours,
 8001e00:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
	sprintf(log,
 8001e04:	64bb      	str	r3, [r7, #72]	; 0x48
			datetime.minutes, datetime.seconds, eventString,
 8001e06:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
	sprintf(log,
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
			datetime.minutes, datetime.seconds, eventString,
 8001e0c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
	sprintf(log,
 8001e10:	643b      	str	r3, [r7, #64]	; 0x40
			mpu_pol.accelerometer_X, mpu_pol.accelerometer_Y,
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <logGestures+0x268>)
 8001e14:	699b      	ldr	r3, [r3, #24]
	sprintf(log,
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb9e 	bl	8000558 <__aeabi_f2d>
 8001e1c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			mpu_pol.accelerometer_X, mpu_pol.accelerometer_Y,
 8001e20:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <logGestures+0x268>)
 8001e22:	69db      	ldr	r3, [r3, #28]
	sprintf(log,
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb97 	bl	8000558 <__aeabi_f2d>
 8001e2a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			mpu_pol.accelerometer_Z, mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y,
 8001e2e:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <logGestures+0x268>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
	sprintf(log,
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb90 	bl	8000558 <__aeabi_f2d>
 8001e38:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			mpu_pol.accelerometer_Z, mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y,
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <logGestures+0x268>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(log,
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb89 	bl	8000558 <__aeabi_f2d>
 8001e46:	e9c7 0108 	strd	r0, r1, [r7, #32]
			mpu_pol.accelerometer_Z, mpu_pol.gyroscope_X, mpu_pol.gyroscope_Y,
 8001e4a:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <logGestures+0x268>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf(log,
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb82 	bl	8000558 <__aeabi_f2d>
 8001e54:	e9c7 0106 	strd	r0, r1, [r7, #24]
			mpu_pol.gyroscope_Z, mpu_ind.accelerometer_X,
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <logGestures+0x268>)
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf(log,
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb7b 	bl	8000558 <__aeabi_f2d>
 8001e62:	e9c7 0104 	strd	r0, r1, [r7, #16]
			mpu_pol.gyroscope_Z, mpu_ind.accelerometer_X,
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <logGestures+0x26c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
	sprintf(log,
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb74 	bl	8000558 <__aeabi_f2d>
 8001e70:	e9c7 0102 	strd	r0, r1, [r7, #8]
			mpu_ind.accelerometer_Y, mpu_ind.accelerometer_Z,
 8001e74:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <logGestures+0x26c>)
 8001e76:	69db      	ldr	r3, [r3, #28]
	sprintf(log,
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb6d 	bl	8000558 <__aeabi_f2d>
 8001e7e:	e9c7 0100 	strd	r0, r1, [r7]
			mpu_ind.accelerometer_Y, mpu_ind.accelerometer_Z,
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <logGestures+0x26c>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
	sprintf(log,
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb66 	bl	8000558 <__aeabi_f2d>
 8001e8c:	4682      	mov	sl, r0
 8001e8e:	468b      	mov	fp, r1
			mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <logGestures+0x26c>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(log,
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb5f 	bl	8000558 <__aeabi_f2d>
 8001e9a:	4680      	mov	r8, r0
 8001e9c:	4689      	mov	r9, r1
			mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <logGestures+0x26c>)
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf(log,
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb58 	bl	8000558 <__aeabi_f2d>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	460d      	mov	r5, r1
			mpu_ind.gyroscope_X, mpu_ind.gyroscope_Y, mpu_ind.gyroscope_Z);
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <logGestures+0x26c>)
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf(log,
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb51 	bl	8000558 <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ebe:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001ec2:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8001ec6:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8001eca:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8001ece:	ed97 7b00 	vldr	d7, [r7]
 8001ed2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001ed6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001eda:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001ede:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ee2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001ee6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001eea:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001eee:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001ef6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001efa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001efe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001f02:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f06:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f16:	9103      	str	r1, [sp, #12]
 8001f18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f1a:	9102      	str	r1, [sp, #8]
 8001f1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f1e:	9101      	str	r1, [sp, #4]
 8001f20:	9600      	str	r6, [sp, #0]
 8001f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f26:	4916      	ldr	r1, [pc, #88]	; (8001f80 <logGestures+0x270>)
 8001f28:	f002 fcc6 	bl	80048b8 <sprintf_>
	/* Insert the log string into the Queue */
	if (osMessageQueuePut(EventQueueHandle, (void*) &log, 0U, 0U) != osOK) {
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <logGestures+0x274>)
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001f34:	2300      	movs	r3, #0
 8001f36:	2200      	movs	r2, #0
 8001f38:	f009 fcdc 	bl	800b8f4 <osMessageQueuePut>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <logGestures+0x240>
		HAL_UART_Transmit(&huart2, (uint8_t*) "QUEUE INSERT ERROR\n",
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	2213      	movs	r2, #19
 8001f48:	490f      	ldr	r1, [pc, #60]	; (8001f88 <logGestures+0x278>)
 8001f4a:	4810      	ldr	r0, [pc, #64]	; (8001f8c <logGestures+0x27c>)
 8001f4c:	f006 f9eb 	bl	8008326 <HAL_UART_Transmit>
				sizeof(char) * strlen("QUEUE INSERT ERROR\n"), HAL_MAX_DELAY);
	}

}
 8001f50:	bf00      	nop
 8001f52:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001f56:	46bd      	mov	sp, r7
 8001f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5c:	08012064 	.word	0x08012064
 8001f60:	08012070 	.word	0x08012070
 8001f64:	08012080 	.word	0x08012080
 8001f68:	08012088 	.word	0x08012088
 8001f6c:	08012094 	.word	0x08012094
 8001f70:	0801209c 	.word	0x0801209c
 8001f74:	080120ac 	.word	0x080120ac
 8001f78:	200007a0 	.word	0x200007a0
 8001f7c:	2000076c 	.word	0x2000076c
 8001f80:	080120bc 	.word	0x080120bc
 8001f84:	200006b0 	.word	0x200006b0
 8001f88:	08012050 	.word	0x08012050
 8001f8c:	2000087c 	.word	0x2000087c

08001f90 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of clickTimer */
  clickTimerHandle = osTimerNew(clickCallback, osTimerOnce, NULL, &clickTimer_attributes);
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <MX_FREERTOS_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4822      	ldr	r0, [pc, #136]	; (8002024 <MX_FREERTOS_Init+0x94>)
 8001f9c:	f009 fa48 	bl	800b430 <osTimerNew>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <MX_FREERTOS_Init+0x98>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* creation of timerZoom */
  timerZoomHandle = osTimerNew(zoomCallback, osTimerOnce, NULL, &timerZoom_attributes);
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <MX_FREERTOS_Init+0x9c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	4820      	ldr	r0, [pc, #128]	; (8002030 <MX_FREERTOS_Init+0xa0>)
 8001fae:	f009 fa3f 	bl	800b430 <osTimerNew>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <MX_FREERTOS_Init+0xa4>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* creation of moveTimer */
  moveTimerHandle = osTimerNew(moveTimerCallback, osTimerOnce, NULL, &moveTimer_attributes);
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_FREERTOS_Init+0xa8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	481f      	ldr	r0, [pc, #124]	; (800203c <MX_FREERTOS_Init+0xac>)
 8001fc0:	f009 fa36 	bl	800b430 <osTimerNew>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <MX_FREERTOS_Init+0xb0>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* creation of altTabTimer */
  altTabTimerHandle = osTimerNew(altTabCallback, osTimerOnce, NULL, &altTabTimer_attributes);
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <MX_FREERTOS_Init+0xb4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	481d      	ldr	r0, [pc, #116]	; (8002048 <MX_FREERTOS_Init+0xb8>)
 8001fd2:	f009 fa2d 	bl	800b430 <osTimerNew>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	; (800204c <MX_FREERTOS_Init+0xbc>)
 8001fda:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EventQueue */
  EventQueueHandle = osMessageQueueNew (16, LOG_STRING_LEN*sizeof(char), &EventQueue_attributes);
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <MX_FREERTOS_Init+0xc0>)
 8001fde:	21c8      	movs	r1, #200	; 0xc8
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f009 fc13 	bl	800b80c <osMessageQueueNew>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <MX_FREERTOS_Init+0xc4>)
 8001fea:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTask */
  readTaskHandle = osThreadNew(StartReadTask, NULL, &readTask_attributes);
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <MX_FREERTOS_Init+0xc8>)
 8001fee:	2100      	movs	r1, #0
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <MX_FREERTOS_Init+0xcc>)
 8001ff2:	f009 f95b 	bl	800b2ac <osThreadNew>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <MX_FREERTOS_Init+0xd0>)
 8001ffa:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <MX_FREERTOS_Init+0xd4>)
 8001ffe:	2100      	movs	r1, #0
 8002000:	4819      	ldr	r0, [pc, #100]	; (8002068 <MX_FREERTOS_Init+0xd8>)
 8002002:	f009 f953 	bl	800b2ac <osThreadNew>
 8002006:	4603      	mov	r3, r0
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <MX_FREERTOS_Init+0xdc>)
 800200a:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(StartSDTask, NULL, &SDTask_attributes);
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <MX_FREERTOS_Init+0xe0>)
 800200e:	2100      	movs	r1, #0
 8002010:	4818      	ldr	r0, [pc, #96]	; (8002074 <MX_FREERTOS_Init+0xe4>)
 8002012:	f009 f94b 	bl	800b2ac <osThreadNew>
 8002016:	4603      	mov	r3, r0
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <MX_FREERTOS_Init+0xe8>)
 800201a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0801237c 	.word	0x0801237c
 8002024:	0800256d 	.word	0x0800256d
 8002028:	200006b4 	.word	0x200006b4
 800202c:	0801238c 	.word	0x0801238c
 8002030:	080025e9 	.word	0x080025e9
 8002034:	200006b8 	.word	0x200006b8
 8002038:	0801239c 	.word	0x0801239c
 800203c:	08002665 	.word	0x08002665
 8002040:	200006bc 	.word	0x200006bc
 8002044:	080123ac 	.word	0x080123ac
 8002048:	08002685 	.word	0x08002685
 800204c:	200006c0 	.word	0x200006c0
 8002050:	08012364 	.word	0x08012364
 8002054:	200006b0 	.word	0x200006b0
 8002058:	080122f8 	.word	0x080122f8
 800205c:	0800207d 	.word	0x0800207d
 8002060:	200006a4 	.word	0x200006a4
 8002064:	0801231c 	.word	0x0801231c
 8002068:	080020b9 	.word	0x080020b9
 800206c:	200006a8 	.word	0x200006a8
 8002070:	08012340 	.word	0x08012340
 8002074:	080024e1 	.word	0x080024e1
 8002078:	200006ac 	.word	0x200006ac

0800207c <StartReadTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadTask */
void StartReadTask(void *argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTask */
	/* Infinite loop */
	for (;;) {
		/* Read the values from the index hand's accelerometer */
		MPU6050_ReadGyroscope(&hi2c1, &mpu_ind);
 8002084:	4909      	ldr	r1, [pc, #36]	; (80020ac <StartReadTask+0x30>)
 8002086:	480a      	ldr	r0, [pc, #40]	; (80020b0 <StartReadTask+0x34>)
 8002088:	f000 ff5f 	bl	8002f4a <MPU6050_ReadGyroscope>
		MPU6050_ReadAccelerometer(&hi2c1, &mpu_ind);
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <StartReadTask+0x30>)
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <StartReadTask+0x34>)
 8002090:	f000 fee4 	bl	8002e5c <MPU6050_ReadAccelerometer>
		/* Read the values from the thumb's accelerometer */
		MPU6050_ReadGyroscope(&hi2c1, &mpu_pol);
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <StartReadTask+0x38>)
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <StartReadTask+0x34>)
 8002098:	f000 ff57 	bl	8002f4a <MPU6050_ReadGyroscope>
		MPU6050_ReadAccelerometer(&hi2c1, &mpu_pol);
 800209c:	4905      	ldr	r1, [pc, #20]	; (80020b4 <StartReadTask+0x38>)
 800209e:	4804      	ldr	r0, [pc, #16]	; (80020b0 <StartReadTask+0x34>)
 80020a0:	f000 fedc 	bl	8002e5c <MPU6050_ReadAccelerometer>

		osDelay(25);
 80020a4:	2019      	movs	r0, #25
 80020a6:	f009 f993 	bl	800b3d0 <osDelay>
		MPU6050_ReadGyroscope(&hi2c1, &mpu_ind);
 80020aa:	e7eb      	b.n	8002084 <StartReadTask+0x8>
 80020ac:	2000076c 	.word	0x2000076c
 80020b0:	200006c4 	.word	0x200006c4
 80020b4:	200007a0 	.word	0x200007a0

080020b8 <StartCommandTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 80020b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020bc:	b09e      	sub	sp, #120	; 0x78
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	char command[100];

	/* Infinite loop */
	for (;;) {
		/* */
		if (logEvent != -1) {
 80020c2:	4b9b      	ldr	r3, [pc, #620]	; (8002330 <StartCommandTask+0x278>)
 80020c4:	f993 3000 	ldrsb.w	r3, [r3]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d008      	beq.n	80020e0 <StartCommandTask+0x28>
			logGestures(logEvent);
 80020ce:	4b98      	ldr	r3, [pc, #608]	; (8002330 <StartCommandTask+0x278>)
 80020d0:	f993 3000 	ldrsb.w	r3, [r3]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe1b 	bl	8001d10 <logGestures>
			logEvent = -1;
 80020da:	4b95      	ldr	r3, [pc, #596]	; (8002330 <StartCommandTask+0x278>)
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	701a      	strb	r2, [r3, #0]
		}
		/* */
		if (mpu_ind.gyroscope_X <= -240 && mpu_ind.accelerometer_Z < 0
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <StartCommandTask+0x27c>)
 80020e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020e6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002338 <StartCommandTask+0x280>
 80020ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	d813      	bhi.n	800211c <StartCommandTask+0x64>
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <StartCommandTask+0x27c>)
 80020f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80020fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	d50b      	bpl.n	800211c <StartCommandTask+0x64>
				&& clickFlag == 0 && ALT_TAB_flag == 0) {
 8002104:	4b8d      	ldr	r3, [pc, #564]	; (800233c <StartCommandTask+0x284>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <StartCommandTask+0x64>
 800210c:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <StartCommandTask+0x288>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <StartCommandTask+0x64>
			clickFlag = 1;
 8002114:	4b89      	ldr	r3, [pc, #548]	; (800233c <StartCommandTask+0x284>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e1c6      	b.n	80024aa <StartCommandTask+0x3f2>
	    /* */
		} else if (clickFlag == 1 && mpu_ind.gyroscope_X >= 240) {
 800211c:	4b87      	ldr	r3, [pc, #540]	; (800233c <StartCommandTask+0x284>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d123      	bne.n	800216c <StartCommandTask+0xb4>
 8002124:	4b83      	ldr	r3, [pc, #524]	; (8002334 <StartCommandTask+0x27c>)
 8002126:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800212a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002344 <StartCommandTask+0x28c>
 800212e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	db19      	blt.n	800216c <StartCommandTask+0xb4>
			numClick += 1;
 8002138:	4b83      	ldr	r3, [pc, #524]	; (8002348 <StartCommandTask+0x290>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <StartCommandTask+0x290>)
 8002142:	701a      	strb	r2, [r3, #0]
			clickFlag = 0;
 8002144:	4b7d      	ldr	r3, [pc, #500]	; (800233c <StartCommandTask+0x284>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
			moveFlag = 0;
 800214a:	4b80      	ldr	r3, [pc, #512]	; (800234c <StartCommandTask+0x294>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
			osTimerStart(moveTimerHandle, 60);
 8002150:	4b7f      	ldr	r3, [pc, #508]	; (8002350 <StartCommandTask+0x298>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	213c      	movs	r1, #60	; 0x3c
 8002156:	4618      	mov	r0, r3
 8002158:	f009 f9e6 	bl	800b528 <osTimerStart>
			osTimerStart(clickTimerHandle, 600);
 800215c:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <StartCommandTask+0x29c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002164:	4618      	mov	r0, r3
 8002166:	f009 f9df 	bl	800b528 <osTimerStart>
 800216a:	e19e      	b.n	80024aa <StartCommandTask+0x3f2>
		/* */
		} else if (mpu_pol.gyroscope_X <= -240 && mpu_pol.accelerometer_Z < 0
 800216c:	4b7a      	ldr	r3, [pc, #488]	; (8002358 <StartCommandTask+0x2a0>)
 800216e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002172:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002338 <StartCommandTask+0x280>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d817      	bhi.n	80021b0 <StartCommandTask+0xf8>
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <StartCommandTask+0x2a0>)
 8002182:	edd3 7a08 	vldr	s15, [r3, #32]
 8002186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	d50f      	bpl.n	80021b0 <StartCommandTask+0xf8>
				&& zoomFlag == 0 && ALT_TAB_flag == 0 && ALT_TAB_move == 1) {
 8002190:	4b72      	ldr	r3, [pc, #456]	; (800235c <StartCommandTask+0x2a4>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10b      	bne.n	80021b0 <StartCommandTask+0xf8>
 8002198:	4b69      	ldr	r3, [pc, #420]	; (8002340 <StartCommandTask+0x288>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <StartCommandTask+0xf8>
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <StartCommandTask+0x2a8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d103      	bne.n	80021b0 <StartCommandTask+0xf8>
			zoomFlag = 1;
 80021a8:	4b6c      	ldr	r3, [pc, #432]	; (800235c <StartCommandTask+0x2a4>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e17c      	b.n	80024aa <StartCommandTask+0x3f2>
		/* */
		} else if (zoomFlag == 1 && mpu_pol.gyroscope_X >= 240) {
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <StartCommandTask+0x2a4>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d11a      	bne.n	80021ee <StartCommandTask+0x136>
 80021b8:	4b67      	ldr	r3, [pc, #412]	; (8002358 <StartCommandTask+0x2a0>)
 80021ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021be:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002344 <StartCommandTask+0x28c>
 80021c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	db10      	blt.n	80021ee <StartCommandTask+0x136>
			numZoom += 1;
 80021cc:	4b65      	ldr	r3, [pc, #404]	; (8002364 <StartCommandTask+0x2ac>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b63      	ldr	r3, [pc, #396]	; (8002364 <StartCommandTask+0x2ac>)
 80021d6:	701a      	strb	r2, [r3, #0]
			zoomFlag = 0;
 80021d8:	4b60      	ldr	r3, [pc, #384]	; (800235c <StartCommandTask+0x2a4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
			osTimerStart(timerZoomHandle, 600);
 80021de:	4b62      	ldr	r3, [pc, #392]	; (8002368 <StartCommandTask+0x2b0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80021e6:	4618      	mov	r0, r3
 80021e8:	f009 f99e 	bl	800b528 <osTimerStart>
 80021ec:	e15d      	b.n	80024aa <StartCommandTask+0x3f2>
		/* */
		} else if (mpu_pol.gyroscope_Y >= 230 && ALT_TAB_flag == 0
 80021ee:	4b5a      	ldr	r3, [pc, #360]	; (8002358 <StartCommandTask+0x2a0>)
 80021f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80021f4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800236c <StartCommandTask+0x2b4>
 80021f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	db2f      	blt.n	8002262 <StartCommandTask+0x1aa>
 8002202:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <StartCommandTask+0x288>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12b      	bne.n	8002262 <StartCommandTask+0x1aa>
				&& zoomFlag == 0 && numZoom == 0) {
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <StartCommandTask+0x2a4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d127      	bne.n	8002262 <StartCommandTask+0x1aa>
 8002212:	4b54      	ldr	r3, [pc, #336]	; (8002364 <StartCommandTask+0x2ac>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d123      	bne.n	8002262 <StartCommandTask+0x1aa>

			sprintf(command, "xdotool keydown alt key Tab\n");
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	4954      	ldr	r1, [pc, #336]	; (8002370 <StartCommandTask+0x2b8>)
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fb49 	bl	80048b8 <sprintf_>
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
					sizeof(char) * strlen(command), HAL_MAX_DELAY);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4618      	mov	r0, r3
 800222c:	f7fd ffd8 	bl	80001e0 <strlen>
 8002230:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
 8002232:	b29a      	uxth	r2, r3
 8002234:	f107 010c 	add.w	r1, r7, #12
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	484d      	ldr	r0, [pc, #308]	; (8002374 <StartCommandTask+0x2bc>)
 800223e:	f006 f872 	bl	8008326 <HAL_UART_Transmit>
			logGestures(5);
 8002242:	2005      	movs	r0, #5
 8002244:	f7ff fd64 	bl	8001d10 <logGestures>
			ALT_TAB_flag = 1;
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <StartCommandTask+0x288>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
			ALT_TAB_move = 0;
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <StartCommandTask+0x2a8>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
			osTimerStart(altTabTimerHandle, 120);
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <StartCommandTask+0x2c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2178      	movs	r1, #120	; 0x78
 800225a:	4618      	mov	r0, r3
 800225c:	f009 f964 	bl	800b528 <osTimerStart>
 8002260:	e123      	b.n	80024aa <StartCommandTask+0x3f2>
		/* */
		} else if (mpu_ind.gyroscope_X <= -240 && ALT_TAB_flag == 1
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <StartCommandTask+0x27c>)
 8002264:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002268:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002338 <StartCommandTask+0x280>
 800226c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	d829      	bhi.n	80022ca <StartCommandTask+0x212>
 8002276:	4b32      	ldr	r3, [pc, #200]	; (8002340 <StartCommandTask+0x288>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d125      	bne.n	80022ca <StartCommandTask+0x212>
				&& ALT_TAB_move == 1) {
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <StartCommandTask+0x2a8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d121      	bne.n	80022ca <StartCommandTask+0x212>
			sprintf(command,
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	493c      	ldr	r1, [pc, #240]	; (800237c <StartCommandTask+0x2c4>)
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fb13 	bl	80048b8 <sprintf_>
					"xdotool keydown Tab && sleep 0.1 && xdotool keyup Tab\n");
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
					sizeof(char) * strlen(command), HAL_MAX_DELAY);
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffa2 	bl	80001e0 <strlen>
 800229c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f107 010c 	add.w	r1, r7, #12
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	4832      	ldr	r0, [pc, #200]	; (8002374 <StartCommandTask+0x2bc>)
 80022aa:	f006 f83c 	bl	8008326 <HAL_UART_Transmit>
			logGestures(6);
 80022ae:	2006      	movs	r0, #6
 80022b0:	f7ff fd2e 	bl	8001d10 <logGestures>
			ALT_TAB_move = 0;
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <StartCommandTask+0x2a8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			osTimerStart(altTabTimerHandle, 600);
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <StartCommandTask+0x2c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80022c2:	4618      	mov	r0, r3
 80022c4:	f009 f930 	bl	800b528 <osTimerStart>
 80022c8:	e0ef      	b.n	80024aa <StartCommandTask+0x3f2>
		}
		 /* */
		else if (ALT_TAB_flag == 1 && mpu_pol.gyroscope_Y <= -230) {
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <StartCommandTask+0x288>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d15a      	bne.n	8002388 <StartCommandTask+0x2d0>
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <StartCommandTask+0x2a0>)
 80022d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002380 <StartCommandTask+0x2c8>
 80022dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d850      	bhi.n	8002388 <StartCommandTask+0x2d0>
			sprintf(command, "xdotool keyup alt\n");
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	4926      	ldr	r1, [pc, #152]	; (8002384 <StartCommandTask+0x2cc>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fae3 	bl	80048b8 <sprintf_>
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
					sizeof(char) * strlen(command), HAL_MAX_DELAY);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd ff72 	bl	80001e0 <strlen>
 80022fc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) command,
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f107 010c 	add.w	r1, r7, #12
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	481a      	ldr	r0, [pc, #104]	; (8002374 <StartCommandTask+0x2bc>)
 800230a:	f006 f80c 	bl	8008326 <HAL_UART_Transmit>
			logGestures(7);
 800230e:	2007      	movs	r0, #7
 8002310:	f7ff fcfe 	bl	8001d10 <logGestures>
			ALT_TAB_flag = 0;
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <StartCommandTask+0x288>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
			ALT_TAB_move = 0;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <StartCommandTask+0x2a8>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
			osTimerStart(altTabTimerHandle, 600);
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <StartCommandTask+0x2c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002328:	4618      	mov	r0, r3
 800232a:	f009 f8fd 	bl	800b528 <osTimerStart>
 800232e:	e0bc      	b.n	80024aa <StartCommandTask+0x3f2>
 8002330:	20000003 	.word	0x20000003
 8002334:	2000076c 	.word	0x2000076c
 8002338:	c3700000 	.word	0xc3700000
 800233c:	200006a0 	.word	0x200006a0
 8002340:	2000069e 	.word	0x2000069e
 8002344:	43700000 	.word	0x43700000
 8002348:	2000069f 	.word	0x2000069f
 800234c:	20000002 	.word	0x20000002
 8002350:	200006bc 	.word	0x200006bc
 8002354:	200006b4 	.word	0x200006b4
 8002358:	200007a0 	.word	0x200007a0
 800235c:	200006a2 	.word	0x200006a2
 8002360:	20000001 	.word	0x20000001
 8002364:	200006a1 	.word	0x200006a1
 8002368:	200006b8 	.word	0x200006b8
 800236c:	43660000 	.word	0x43660000
 8002370:	08012144 	.word	0x08012144
 8002374:	2000087c 	.word	0x2000087c
 8002378:	200006c0 	.word	0x200006c0
 800237c:	08012164 	.word	0x08012164
 8002380:	c3660000 	.word	0xc3660000
 8002384:	0801219c 	.word	0x0801219c
		}
		 /* */
		else if (numClick == 0 && clickFlag == 0 && moveFlag == 1
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <StartCommandTask+0x3fc>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 808c 	bne.w	80024aa <StartCommandTask+0x3f2>
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <StartCommandTask+0x400>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8087 	bne.w	80024aa <StartCommandTask+0x3f2>
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <StartCommandTask+0x404>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 8082 	bne.w	80024aa <StartCommandTask+0x3f2>
				&& ALT_TAB_flag == 0 && zoomFlag == 0 && numZoom == 0
 80023a6:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <StartCommandTask+0x408>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d17d      	bne.n	80024aa <StartCommandTask+0x3f2>
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <StartCommandTask+0x40c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d179      	bne.n	80024aa <StartCommandTask+0x3f2>
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <StartCommandTask+0x410>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d175      	bne.n	80024aa <StartCommandTask+0x3f2>
				&& ALT_TAB_move == 1) {
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <StartCommandTask+0x414>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d171      	bne.n	80024aa <StartCommandTask+0x3f2>

			int m_x = (-(int) mpu_ind.accelerometer_X) * 3;
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <StartCommandTask+0x418>)
 80023c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80023cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d0:	ee17 3a90 	vmov	r3, s15
 80023d4:	461a      	mov	r2, r3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	677b      	str	r3, [r7, #116]	; 0x74
			int m_y = -((int) mpu_ind.accelerometer_Y) * 2;
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <StartCommandTask+0x418>)
 80023de:	edd3 7a07 	vldr	s15, [r3, #28]
 80023e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e6:	ee17 2a90 	vmov	r2, s15
 80023ea:	4613      	mov	r3, r2
 80023ec:	07db      	lsls	r3, r3, #31
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	673b      	str	r3, [r7, #112]	; 0x70

			if (m_x == 0 && m_y >= 10) {
 80023f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11c      	bne.n	8002434 <StartCommandTask+0x37c>
 80023fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	dd19      	ble.n	8002434 <StartCommandTask+0x37c>
				sprintf(command, "xdotool mousemove_relative -- %d %d\n", m_x,
 8002400:	f107 000c 	add.w	r0, r7, #12
 8002404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002406:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002408:	4932      	ldr	r1, [pc, #200]	; (80024d4 <StartCommandTask+0x41c>)
 800240a:	f002 fa55 	bl	80048b8 <sprintf_>
						m_y);
				HAL_UART_Transmit(&huart2, (uint8_t*) command,
						sizeof(char) * strlen(command), HAL_MAX_DELAY);
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4618      	mov	r0, r3
 8002414:	f7fd fee4 	bl	80001e0 <strlen>
 8002418:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) command,
 800241a:	b29a      	uxth	r2, r3
 800241c:	f107 010c 	add.w	r1, r7, #12
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	482c      	ldr	r0, [pc, #176]	; (80024d8 <StartCommandTask+0x420>)
 8002426:	f005 ff7e 	bl	8008326 <HAL_UART_Transmit>
				logMovement(m_x, m_y);
 800242a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800242c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800242e:	f7ff fb9f 	bl	8001b70 <logMovement>
 8002432:	e03a      	b.n	80024aa <StartCommandTask+0x3f2>
			}
			 /* */
			else if (fabs(m_x) + fabs(m_y) >= 10) {
 8002434:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002436:	f7fe f87d 	bl	8000534 <__aeabi_i2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4614      	mov	r4, r2
 8002440:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002444:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002446:	f7fe f875 	bl	8000534 <__aeabi_i2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4690      	mov	r8, r2
 8002450:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fd ff1e 	bl	800029c <__adddf3>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <StartCommandTask+0x424>)
 800246e:	f7fe fb51 	bl	8000b14 <__aeabi_dcmpge>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d018      	beq.n	80024aa <StartCommandTask+0x3f2>

				sprintf(command, "xdotool mousemove_relative -- %d %d\n", m_x,
 8002478:	f107 000c 	add.w	r0, r7, #12
 800247c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002480:	4914      	ldr	r1, [pc, #80]	; (80024d4 <StartCommandTask+0x41c>)
 8002482:	f002 fa19 	bl	80048b8 <sprintf_>
						m_y);
				HAL_UART_Transmit(&huart2, (uint8_t*) command,
						sizeof(char) * strlen(command), HAL_MAX_DELAY);
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fea8 	bl	80001e0 <strlen>
 8002490:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) command,
 8002492:	b29a      	uxth	r2, r3
 8002494:	f107 010c 	add.w	r1, r7, #12
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	480e      	ldr	r0, [pc, #56]	; (80024d8 <StartCommandTask+0x420>)
 800249e:	f005 ff42 	bl	8008326 <HAL_UART_Transmit>
				logMovement(m_x, m_y);
 80024a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80024a4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80024a6:	f7ff fb63 	bl	8001b70 <logMovement>
			}
		}

		osDelay(25);
 80024aa:	2019      	movs	r0, #25
 80024ac:	f008 ff90 	bl	800b3d0 <osDelay>
		if (logEvent != -1) {
 80024b0:	e607      	b.n	80020c2 <StartCommandTask+0xa>
 80024b2:	bf00      	nop
 80024b4:	2000069f 	.word	0x2000069f
 80024b8:	200006a0 	.word	0x200006a0
 80024bc:	20000002 	.word	0x20000002
 80024c0:	2000069e 	.word	0x2000069e
 80024c4:	200006a2 	.word	0x200006a2
 80024c8:	200006a1 	.word	0x200006a1
 80024cc:	20000001 	.word	0x20000001
 80024d0:	2000076c 	.word	0x2000076c
 80024d4:	080121b0 	.word	0x080121b0
 80024d8:	2000087c 	.word	0x2000087c
 80024dc:	40240000 	.word	0x40240000

080024e0 <StartSDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSDTask */
void StartSDTask(void *argument)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0b6      	sub	sp, #216	; 0xd8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDTask */
	/* Infinite loop */
	for (;;) {
		char buffer[LOG_STRING_LEN];

		for (int i = 0; i < 4; i++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80024ee:	e025      	b.n	800253c <StartSDTask+0x5c>
			if (osMessageQueueGet(EventQueueHandle, (void*) &buffer, NULL, 0U)
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <StartSDTask+0x78>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	f107 010c 	add.w	r1, r7, #12
 80024f8:	2300      	movs	r3, #0
 80024fa:	2200      	movs	r2, #0
 80024fc:	f009 fa5a 	bl	800b9b4 <osMessageQueueGet>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11f      	bne.n	8002546 <StartSDTask+0x66>
					== osOK) {
				/* Writing text */
				if (f_write(&fil, buffer, strlen(buffer), &bw) != FR_OK) {
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd fe68 	bl	80001e0 <strlen>
 8002510:	4602      	mov	r2, r0
 8002512:	f107 010c 	add.w	r1, r7, #12
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <StartSDTask+0x7c>)
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <StartSDTask+0x80>)
 800251a:	f008 fafa 	bl	800ab12 <f_write>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <StartSDTask+0x52>
					HAL_UART_Transmit(&huart2,
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	2216      	movs	r2, #22
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <StartSDTask+0x84>)
 800252c:	480e      	ldr	r0, [pc, #56]	; (8002568 <StartSDTask+0x88>)
 800252e:	f005 fefa 	bl	8008326 <HAL_UART_Transmit>
		for (int i = 0; i < 4; i++) {
 8002532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002536:	3301      	adds	r3, #1
 8002538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800253c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002540:	2b03      	cmp	r3, #3
 8002542:	ddd5      	ble.n	80024f0 <StartSDTask+0x10>
 8002544:	e000      	b.n	8002548 <StartSDTask+0x68>
							sizeof(char) * strlen("ERROR IN WRITING FILE\n"),
							HAL_MAX_DELAY);
				}

			} else {
				break;
 8002546:	bf00      	nop
			}
		}
		f_sync(&fil);
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <StartSDTask+0x80>)
 800254a:	f008 fc86 	bl	800ae5a <f_sync>

		osDelay(100);
 800254e:	2064      	movs	r0, #100	; 0x64
 8002550:	f008 ff3e 	bl	800b3d0 <osDelay>
	for (;;) {
 8002554:	e7c8      	b.n	80024e8 <StartSDTask+0x8>
 8002556:	bf00      	nop
 8002558:	200006b0 	.word	0x200006b0
 800255c:	20000694 	.word	0x20000694
 8002560:	20000448 	.word	0x20000448
 8002564:	080121d8 	.word	0x080121d8
 8002568:	2000087c 	.word	0x2000087c

0800256c <clickCallback>:
  /* USER CODE END StartSDTask */
}

/* clickCallback function */
void clickCallback(void *argument)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b09c      	sub	sp, #112	; 0x70
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN clickCallback */
	char value[100];
	if (numClick >= 2) {
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <clickCallback+0x68>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d906      	bls.n	800258a <clickCallback+0x1e>
		sprintf(value, "xdotool click --repeat 2 1\n");
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4915      	ldr	r1, [pc, #84]	; (80025d8 <clickCallback+0x6c>)
 8002582:	4618      	mov	r0, r3
 8002584:	f002 f998 	bl	80048b8 <sprintf_>
 8002588:	e009      	b.n	800259e <clickCallback+0x32>

	} else if (numClick == 1) {
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <clickCallback+0x68>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <clickCallback+0x32>
		sprintf(value, "xdotool click 1\n");
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	4911      	ldr	r1, [pc, #68]	; (80025dc <clickCallback+0x70>)
 8002598:	4618      	mov	r0, r3
 800259a:	f002 f98d 	bl	80048b8 <sprintf_>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) value, sizeof(char) * strlen(value),
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd fe1c 	bl	80001e0 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f107 010c 	add.w	r1, r7, #12
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <clickCallback+0x74>)
 80025b6:	f005 feb6 	bl	8008326 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	logEvent = numClick;
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <clickCallback+0x68>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <clickCallback+0x78>)
 80025c2:	701a      	strb	r2, [r3, #0]
	numClick = 0;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <clickCallback+0x68>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END clickCallback */
}
 80025ca:	bf00      	nop
 80025cc:	3770      	adds	r7, #112	; 0x70
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000069f 	.word	0x2000069f
 80025d8:	080121f0 	.word	0x080121f0
 80025dc:	0801220c 	.word	0x0801220c
 80025e0:	2000087c 	.word	0x2000087c
 80025e4:	20000003 	.word	0x20000003

080025e8 <zoomCallback>:

/* zoomCallback function */
void zoomCallback(void *argument)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b09c      	sub	sp, #112	; 0x70
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN zoomCallback */
	char value[100];

	if (numZoom >= 2) {
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <zoomCallback+0x68>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d909      	bls.n	800260c <zoomCallback+0x24>
		sprintf(value, "xdotool key Ctrl+minus\n");
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	4915      	ldr	r1, [pc, #84]	; (8002654 <zoomCallback+0x6c>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 f95a 	bl	80048b8 <sprintf_>
		logEvent = 4;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <zoomCallback+0x70>)
 8002606:	2204      	movs	r2, #4
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e00c      	b.n	8002626 <zoomCallback+0x3e>
	} else if (numZoom == 1) {
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <zoomCallback+0x68>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d108      	bne.n	8002626 <zoomCallback+0x3e>
		sprintf(value, "xdotool key Ctrl+plus\n");
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4910      	ldr	r1, [pc, #64]	; (800265c <zoomCallback+0x74>)
 800261a:	4618      	mov	r0, r3
 800261c:	f002 f94c 	bl	80048b8 <sprintf_>
		logEvent = 3;
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <zoomCallback+0x70>)
 8002622:	2203      	movs	r2, #3
 8002624:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) value, sizeof(char) * strlen(value),
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdd8 	bl	80001e0 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 010c 	add.w	r1, r7, #12
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <zoomCallback+0x78>)
 800263e:	f005 fe72 	bl	8008326 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	numZoom = 0;
 8002642:	4b03      	ldr	r3, [pc, #12]	; (8002650 <zoomCallback+0x68>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
  /* USER CODE END zoomCallback */
}
 8002648:	bf00      	nop
 800264a:	3770      	adds	r7, #112	; 0x70
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200006a1 	.word	0x200006a1
 8002654:	08012220 	.word	0x08012220
 8002658:	20000003 	.word	0x20000003
 800265c:	08012238 	.word	0x08012238
 8002660:	2000087c 	.word	0x2000087c

08002664 <moveTimerCallback>:

/* moveTimerCallback function */
void moveTimerCallback(void *argument)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveTimerCallback */
	moveFlag = 1;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <moveTimerCallback+0x1c>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
  /* USER CODE END moveTimerCallback */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000002 	.word	0x20000002

08002684 <altTabCallback>:

/* altTabCallback function */
void altTabCallback(void *argument)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN altTabCallback */
	ALT_TAB_move = 1;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <altTabCallback+0x1c>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
  /* USER CODE END altTabCallback */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000001 	.word	0x20000001

080026a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a21      	ldr	r2, [pc, #132]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <MX_GPIO_Init+0xc0>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_GPIO_Init+0xc0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	2120      	movs	r1, #32
 8002712:	4815      	ldr	r0, [pc, #84]	; (8002768 <MX_GPIO_Init+0xc4>)
 8002714:	f002 fe84 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_GPIO_Init+0xc8>)
 800271e:	f002 fe7f 	bl	8005420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002722:	2320      	movs	r3, #32
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2301      	movs	r3, #1
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	4619      	mov	r1, r3
 8002738:	480b      	ldr	r0, [pc, #44]	; (8002768 <MX_GPIO_Init+0xc4>)
 800273a:	f002 fced 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800273e:	2301      	movs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_GPIO_Init+0xc8>)
 8002756:	f002 fcdf 	bl	8005118 <HAL_GPIO_Init>

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400

08002770 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <MX_I2C1_Init+0x54>)
 8002778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_I2C1_Init+0x50>)
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_I2C1_Init+0x58>)
 800277e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_I2C1_Init+0x50>)
 800278e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_I2C1_Init+0x50>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027ae:	f002 fe51 	bl	8005454 <HAL_I2C_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027b8:	f000 f9ce 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200006c4 	.word	0x200006c4
 80027c4:	40005400 	.word	0x40005400
 80027c8:	00061a80 	.word	0x00061a80

080027cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_I2C2_Init+0x50>)
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <MX_I2C2_Init+0x54>)
 80027d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_I2C2_Init+0x50>)
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <MX_I2C2_Init+0x58>)
 80027da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_I2C2_Init+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_I2C2_Init+0x50>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_I2C2_Init+0x50>)
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MX_I2C2_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_I2C2_Init+0x50>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <MX_I2C2_Init+0x50>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_I2C2_Init+0x50>)
 8002804:	2200      	movs	r2, #0
 8002806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_I2C2_Init+0x50>)
 800280a:	f002 fe23 	bl	8005454 <HAL_I2C_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002814:	f000 f9a0 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000718 	.word	0x20000718
 8002820:	40005800 	.word	0x40005800
 8002824:	000186a0 	.word	0x000186a0

08002828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <HAL_I2C_MspInit+0x10c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12d      	bne.n	80028a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a39      	ldr	r2, [pc, #228]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_I2C_MspInit+0x110>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	2312      	movs	r3, #18
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002878:	2304      	movs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	482e      	ldr	r0, [pc, #184]	; (800293c <HAL_I2C_MspInit+0x114>)
 8002884:	f002 fc48 	bl	8005118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_I2C_MspInit+0x110>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_I2C_MspInit+0x110>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80028a4:	e041      	b.n	800292a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <HAL_I2C_MspInit+0x118>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d13c      	bne.n	800292a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_I2C_MspInit+0x110>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_I2C_MspInit+0x110>)
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	6313      	str	r3, [r2, #48]	; 0x30
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_I2C_MspInit+0x110>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d2:	2312      	movs	r3, #18
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028de:	2304      	movs	r3, #4
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	4619      	mov	r1, r3
 80028e8:	4814      	ldr	r0, [pc, #80]	; (800293c <HAL_I2C_MspInit+0x114>)
 80028ea:	f002 fc15 	bl	8005118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ee:	2308      	movs	r3, #8
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f2:	2312      	movs	r3, #18
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80028fe:	2309      	movs	r3, #9
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <HAL_I2C_MspInit+0x114>)
 800290a:	f002 fc05 	bl	8005118 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_I2C_MspInit+0x110>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	bf00      	nop
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40005400 	.word	0x40005400
 8002938:	40023800 	.word	0x40023800
 800293c:	40020400 	.word	0x40020400
 8002940:	40005800 	.word	0x40005800

08002944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0a0      	sub	sp, #128	; 0x80
 8002948:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800294a:	f002 fa9d 	bl	8004e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800294e:	f000 f891 	bl	8002a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002952:	f7ff fea7 	bl	80026a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002956:	f7ff ff0b 	bl	8002770 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800295a:	f002 f9f9 	bl	8004d50 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800295e:	f7ff ff35 	bl	80027cc <MX_I2C2_Init>
  MX_SPI3_Init();
 8002962:	f001 ffc5 	bl	80048f0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002966:	f006 f853 	bl	8008a10 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Wait for system inizialization */
	HAL_Delay(2000);
 800296a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800296e:	f002 facd 	bl	8004f0c <HAL_Delay>
	/* Mount the SD card */
	while (Mount_SD("/") != FR_OK);
 8002972:	bf00      	nop
 8002974:	4835      	ldr	r0, [pc, #212]	; (8002a4c <main+0x108>)
 8002976:	f7fe facb 	bl	8000f10 <Mount_SD>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <main+0x30>
	/* Initialize the DS3231 RTC on I2C2 */
	while (rtc_init(&hi2c2) != DS3231_OK);
 8002980:	bf00      	nop
 8002982:	4833      	ldr	r0, [pc, #204]	; (8002a50 <main+0x10c>)
 8002984:	f7fe fb9a 	bl	80010bc <rtc_init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <main+0x3e>
	/* Initialize the MPU6050 on index hand on I2C1 */
	while (MPU6050_Init(&hi2c1, &mpu_ind, MPU6050_Device_0,
 800298e:	bf00      	nop
 8002990:	2300      	movs	r3, #0
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2303      	movs	r3, #3
 8002996:	2200      	movs	r2, #0
 8002998:	492e      	ldr	r1, [pc, #184]	; (8002a54 <main+0x110>)
 800299a:	482f      	ldr	r0, [pc, #188]	; (8002a58 <main+0x114>)
 800299c:	f000 f8e1 	bl	8002b62 <MPU6050_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f4      	bne.n	8002990 <main+0x4c>
			MPU6050_Accelerometer_16G, MPU6050_Gyroscope_250s)
			!= MPU6050_Result_Ok);
	/* Initialize the MPU6050 on thumb on I2C1 */
	while (MPU6050_Init(&hi2c1, &mpu_pol, MPU6050_Device_1,
 80029a6:	bf00      	nop
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2303      	movs	r3, #3
 80029ae:	2202      	movs	r2, #2
 80029b0:	492a      	ldr	r1, [pc, #168]	; (8002a5c <main+0x118>)
 80029b2:	4829      	ldr	r0, [pc, #164]	; (8002a58 <main+0x114>)
 80029b4:	f000 f8d5 	bl	8002b62 <MPU6050_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f4      	bne.n	80029a8 <main+0x64>
			MPU6050_Accelerometer_16G, MPU6050_Gyroscope_250s)
			!= MPU6050_Result_Ok);
	/* Get the current time from RTC and create a log file named as "mm-yy.TXT" */
	date_time_t datetime;
	rtc_get_date_time(&datetime);
 80029be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fb98 	bl	80010f8 <rtc_get_date_time>
	char filename[50];
	sprintf(filename, "%d_%d_%d.TXT", datetime.date, datetime.month,datetime.year);
 80029c8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80029cc:	461a      	mov	r2, r3
 80029ce:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80029d2:	4619      	mov	r1, r3
 80029d4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80029d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	460b      	mov	r3, r1
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <main+0x11c>)
 80029e2:	f001 ff69 	bl	80048b8 <sprintf_>
	while (Create_File(filename) != FR_OK);
 80029e6:	bf00      	nop
 80029e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fab5 	bl	8000f5c <Create_File>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f7      	bne.n	80029e8 <main+0xa4>
	/* Open the file created for command log on SD card */
	while (f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 80029f8:	e012      	b.n	8002a20 <main+0xdc>
		char buf[60];
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", filename);
 80029fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029fe:	463b      	mov	r3, r7
 8002a00:	4918      	ldr	r1, [pc, #96]	; (8002a64 <main+0x120>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 ff58 	bl	80048b8 <sprintf_>
		HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(char) * strlen(buf),
 8002a08:	463b      	mov	r3, r7
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fbe8 	bl	80001e0 <strlen>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4639      	mov	r1, r7
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	4813      	ldr	r0, [pc, #76]	; (8002a68 <main+0x124>)
 8002a1c:	f005 fc83 	bl	8008326 <HAL_UART_Transmit>
	while (f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 8002a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a24:	2232      	movs	r2, #50	; 0x32
 8002a26:	4619      	mov	r1, r3
 8002a28:	4810      	ldr	r0, [pc, #64]	; (8002a6c <main+0x128>)
 8002a2a:	f007 fead 	bl	800a788 <f_open>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e2      	bne.n	80029fa <main+0xb6>
		HAL_MAX_DELAY);
	}
	/* Turn on the pin on MCU in order to nofity the correct end of the inizialization phase */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2120      	movs	r1, #32
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <main+0x12c>)
 8002a3a:	f002 fcf1 	bl	8005420 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002a3e:	f008 fbeb 	bl	800b218 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002a42:	f7ff faa5 	bl	8001f90 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002a46:	f008 fc0b 	bl	800b260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002a4a:	e7fe      	b.n	8002a4a <main+0x106>
 8002a4c:	08012250 	.word	0x08012250
 8002a50:	20000718 	.word	0x20000718
 8002a54:	2000076c 	.word	0x2000076c
 8002a58:	200006c4 	.word	0x200006c4
 8002a5c:	200007a0 	.word	0x200007a0
 8002a60:	08012254 	.word	0x08012254
 8002a64:	08012264 	.word	0x08012264
 8002a68:	2000087c 	.word	0x2000087c
 8002a6c:	20000448 	.word	0x20000448
 8002a70:	40020000 	.word	0x40020000

08002a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b094      	sub	sp, #80	; 0x50
 8002a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7a:	f107 0320 	add.w	r3, r7, #32
 8002a7e:	2230      	movs	r2, #48	; 0x30
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00c f9fb 	bl	800ee7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <SystemClock_Config+0xb8>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <SystemClock_Config+0xb8>)
 8002aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <SystemClock_Config+0xb8>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <SystemClock_Config+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <SystemClock_Config+0xbc>)
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <SystemClock_Config+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002adc:	2310      	movs	r3, #16
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae4:	f107 0320 	add.w	r3, r7, #32
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 f885 	bl	8006bf8 <HAL_RCC_OscConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002af4:	f000 f830 	bl	8002b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af8:	230f      	movs	r3, #15
 8002afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fae8 	bl	80070e8 <HAL_RCC_ClockConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b1e:	f000 f81b 	bl	8002b58 <Error_Handler>
  }
}
 8002b22:	bf00      	nop
 8002b24:	3750      	adds	r7, #80	; 0x50
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b46:	f002 f9c1 	bl	8004ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40014000 	.word	0x40014000

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b60:	e7fe      	b.n	8002b60 <Error_Handler+0x8>

08002b62 <MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

MPU6050_Result MPU6050_Init(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Device DeviceNumber, MPU6050_Accelerometer AccelerometerSensitivity, MPU6050_Gyroscope GyroscopeSensitivity)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b08a      	sub	sp, #40	; 0x28
 8002b66:	af02      	add	r7, sp, #8
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8002b78:	2375      	movs	r3, #117	; 0x75
 8002b7a:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8002b92:	7efb      	ldrb	r3, [r7, #27]
 8002b94:	b299      	uxth	r1, r3
 8002b96:	2305      	movs	r3, #5
 8002b98:	2202      	movs	r2, #2
 8002b9a:	69f8      	ldr	r0, [r7, #28]
 8002b9c:	f003 fae8 	bl	8006170 <HAL_I2C_IsDeviceReady>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MPU6050_Init+0x48>
	{
				return MPU6050_Result_Error;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e04c      	b.n	8002c44 <MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8002baa:	7efb      	ldrb	r3, [r7, #27]
 8002bac:	b299      	uxth	r1, r3
 8002bae:	f107 021a 	add.w	r2, r7, #26
 8002bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	69f8      	ldr	r0, [r7, #28]
 8002bbc:	f002 fd8e 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MPU6050_Init+0x68>
		{
			return MPU6050_Result_Error;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e03c      	b.n	8002c44 <MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8002bca:	7efb      	ldrb	r3, [r7, #27]
 8002bcc:	b299      	uxth	r1, r3
 8002bce:	f107 0219 	add.w	r2, r7, #25
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	69f8      	ldr	r0, [r7, #28]
 8002bdc:	f002 fe7c 	bl	80058d8 <HAL_I2C_Master_Receive>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <MPU6050_Init+0x8c>
		{
			return MPU6050_Result_Error;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e02c      	b.n	8002c44 <MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return MPU6050_Result_DeviceInvalid;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e02a      	b.n	8002c44 <MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8002bee:	bf00      	nop
 8002bf0:	7e7b      	ldrb	r3, [r7, #25]
 8002bf2:	2b68      	cmp	r3, #104	; 0x68
 8002bf4:	d1f9      	bne.n	8002bea <MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8002bf6:	236b      	movs	r3, #107	; 0x6b
 8002bf8:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8002bfe:	7efb      	ldrb	r3, [r7, #27]
 8002c00:	b299      	uxth	r1, r3
 8002c02:	f107 0214 	add.w	r2, r7, #20
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	69f8      	ldr	r0, [r7, #28]
 8002c10:	f002 fd64 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MPU6050_Init+0xbc>
		{
					return MPU6050_Result_Error;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e012      	b.n	8002c44 <MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 8002c1e:	2207      	movs	r2, #7
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f812 	bl	8002c4c <MPU6050_SetDataRate>

	/* Config accelerometer */
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8002c28:	79bb      	ldrb	r3, [r7, #6]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f830 	bl	8002c94 <MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8002c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f899 	bl	8002d74 <MPU6050_SetGyroscope>

	/* Return OK */
	return MPU6050_Result_Ok;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <MPU6050_SetDataRate>:

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8002c64:	2319      	movs	r3, #25
 8002c66:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002c6c:	bf00      	nop
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	b299      	uxth	r1, r3
 8002c72:	f107 0210 	add.w	r2, r7, #16
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f002 fd2c 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f1      	bne.n	8002c6e <MPU6050_SetDataRate+0x22>

	/* Return OK */
	return MPU6050_Result_Ok;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <MPU6050_SetAccelerometer>:

MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8002cac:	231c      	movs	r3, #28
 8002cae:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8002cb0:	bf00      	nop
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	b299      	uxth	r1, r3
 8002cb6:	f107 0211 	add.w	r2, r7, #17
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f002 fd0a 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f1      	bne.n	8002cb2 <MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8002cce:	bf00      	nop
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	f107 0212 	add.w	r2, r7, #18
 8002cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f002 fdf9 	bl	80058d8 <HAL_I2C_Master_Receive>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f1      	bne.n	8002cd0 <MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8002cec:	7cbb      	ldrb	r3, [r7, #18]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	f023 0318 	bic.w	r3, r3, #24
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002d04:	bf00      	nop
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	f107 0212 	add.w	r2, r7, #18
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2301      	movs	r3, #1
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f002 fce0 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f1      	bne.n	8002d06 <MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d81f      	bhi.n	8002d68 <MPU6050_SetAccelerometer+0xd4>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <MPU6050_SetAccelerometer+0x9c>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d4b 	.word	0x08002d4b
 8002d38:	08002d55 	.word	0x08002d55
 8002d3c:	08002d5f 	.word	0x08002d5f
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002d46:	609a      	str	r2, [r3, #8]
			break;
 8002d48:	e00f      	b.n	8002d6a <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002d50:	609a      	str	r2, [r3, #8]
			break;
 8002d52:	e00a      	b.n	8002d6a <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002d5a:	609a      	str	r2, [r3, #8]
			break;
 8002d5c:	e005      	b.n	8002d6a <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002d64:	609a      	str	r2, [r3, #8]
			break;
 8002d66:	e000      	b.n	8002d6a <MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8002d68:	bf00      	nop
		}

	/* Return OK */
	return MPU6050_Result_Ok;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <MPU6050_SetGyroscope>:

MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8002d8c:	231b      	movs	r3, #27
 8002d8e:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8002d90:	bf00      	nop
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	b299      	uxth	r1, r3
 8002d96:	f107 0211 	add.w	r2, r7, #17
 8002d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	6978      	ldr	r0, [r7, #20]
 8002da4:	f002 fc9a 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f1      	bne.n	8002d92 <MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8002dae:	bf00      	nop
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	b299      	uxth	r1, r3
 8002db4:	f107 0212 	add.w	r2, r7, #18
 8002db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6978      	ldr	r0, [r7, #20]
 8002dc2:	f002 fd89 	bl	80058d8 <HAL_I2C_Master_Receive>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f1      	bne.n	8002db0 <MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002dcc:	7cbb      	ldrb	r3, [r7, #18]
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	f023 0318 	bic.w	r3, r3, #24
 8002dd4:	b25a      	sxtb	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002de4:	bf00      	nop
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	b299      	uxth	r1, r3
 8002dea:	f107 0212 	add.w	r2, r7, #18
 8002dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2301      	movs	r3, #1
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f002 fc70 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f1      	bne.n	8002de6 <MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d81b      	bhi.n	8002e40 <MPU6050_SetGyroscope+0xcc>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <MPU6050_SetGyroscope+0x9c>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e29 	.word	0x08002e29
 8002e18:	08002e31 	.word	0x08002e31
 8002e1c:	08002e39 	.word	0x08002e39
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <MPU6050_SetGyroscope+0xd8>)
 8002e24:	605a      	str	r2, [r3, #4]
				break;
 8002e26:	e00c      	b.n	8002e42 <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <MPU6050_SetGyroscope+0xdc>)
 8002e2c:	605a      	str	r2, [r3, #4]
				break;
 8002e2e:	e008      	b.n	8002e42 <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <MPU6050_SetGyroscope+0xe0>)
 8002e34:	605a      	str	r2, [r3, #4]
				break;
 8002e36:	e004      	b.n	8002e42 <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <MPU6050_SetGyroscope+0xe4>)
 8002e3c:	605a      	str	r2, [r3, #4]
				break;
 8002e3e:	e000      	b.n	8002e42 <MPU6050_SetGyroscope+0xce>
			default:
				break;
 8002e40:	bf00      	nop
		}
	/* Return OK */
	return MPU6050_Result_Ok;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	3bfa232d 	.word	0x3bfa232d
 8002e50:	3c7a232d 	.word	0x3c7a232d
 8002e54:	3cf9c190 	.word	0x3cf9c190
 8002e58:	3d79c190 	.word	0x3d79c190

08002e5c <MPU6050_ReadAccelerometer>:

MPU6050_Result MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8002e66:	233b      	movs	r3, #59	; 0x3b
 8002e68:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8002e74:	bf00      	nop
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	f107 020b 	add.w	r2, r7, #11
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2301      	movs	r3, #1
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f002 fc28 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f1      	bne.n	8002e76 <MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8002e92:	bf00      	nop
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	b299      	uxth	r1, r3
 8002e98:	f107 020c 	add.w	r2, r7, #12
 8002e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	6978      	ldr	r0, [r7, #20]
 8002ea6:	f002 fd17 	bl	80058d8 <HAL_I2C_Master_Receive>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f1      	bne.n	8002e94 <MPU6050_ReadAccelerometer+0x38>

	/* Format raw data */
	DataStruct->raw_accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	7b7b      	ldrb	r3, [r7, #13]
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	819a      	strh	r2, [r3, #12]
	DataStruct->raw_accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8002ec2:	7bbb      	ldrb	r3, [r7, #14]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	81da      	strh	r2, [r3, #14]
	DataStruct->raw_accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002ed4:	7c3b      	ldrb	r3, [r7, #16]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	7c7b      	ldrb	r3, [r7, #17]
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	821a      	strh	r2, [r3, #16]
	/* Save original data */
	DataStruct->accelerometer_X = DataStruct->raw_accelerometer_X * DataStruct -> Acce_Mult;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->accelerometer_Y = DataStruct->raw_accelerometer_Y * DataStruct -> Acce_Mult;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->accelerometer_Z = DataStruct->raw_accelerometer_Z * DataStruct -> Acce_Mult;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	edc3 7a08 	vstr	s15, [r3, #32]
	/* Return OK */
	return MPU6050_Result_Ok;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <MPU6050_ReadGyroscope>:
MPU6050_Result MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b088      	sub	sp, #32
 8002f4e:	af02      	add	r7, sp, #8
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8002f54:	2343      	movs	r3, #67	; 0x43
 8002f56:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8002f62:	bf00      	nop
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	b299      	uxth	r1, r3
 8002f68:	f107 020b 	add.w	r2, r7, #11
 8002f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f002 fbb1 	bl	80056dc <HAL_I2C_Master_Transmit>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f1      	bne.n	8002f64 <MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8002f80:	bf00      	nop
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	b299      	uxth	r1, r3
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2306      	movs	r3, #6
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f002 fca0 	bl	80058d8 <HAL_I2C_Master_Receive>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f1      	bne.n	8002f82 <MPU6050_ReadGyroscope+0x38>

	/* Format raw data */
	DataStruct->raw_gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8002f9e:	7b3b      	ldrb	r3, [r7, #12]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	7b7b      	ldrb	r3, [r7, #13]
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	825a      	strh	r2, [r3, #18]
	DataStruct->raw_gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	b21a      	sxth	r2, r3
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	829a      	strh	r2, [r3, #20]
	DataStruct->raw_gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8002fc2:	7c3b      	ldrb	r3, [r7, #16]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	7c7b      	ldrb	r3, [r7, #17]
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	82da      	strh	r2, [r3, #22]
	/* Save original data */
	DataStruct->gyroscope_X = DataStruct->raw_gyroscope_X * DataStruct -> Gyro_Mult;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->gyroscope_Y = DataStruct->raw_gyroscope_Y * DataStruct -> Gyro_Mult;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	edd3 7a01 	vldr	s15, [r3, #4]
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->gyroscope_Z = DataStruct->raw_gyroscope_Z * DataStruct -> Gyro_Mult;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	edd3 7a01 	vldr	s15, [r3, #4]
 8003024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Return OK */
	return MPU6050_Result_Ok;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_out_buffer>:
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d204      	bcs.n	800305a <_out_buffer+0x22>
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_out_null>:
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <_strnlen_s>:
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e002      	b.n	8003098 <_strnlen_s+0x16>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <_strnlen_s+0x28>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	603a      	str	r2, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f3      	bne.n	8003092 <_strnlen_s+0x10>
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_is_digit>:
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b2f      	cmp	r3, #47	; 0x2f
 80030ca:	d904      	bls.n	80030d6 <_is_digit+0x1a>
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b39      	cmp	r3, #57	; 0x39
 80030d0:	d801      	bhi.n	80030d6 <_is_digit+0x1a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <_is_digit+0x1c>
 80030d6:	2300      	movs	r3, #0
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_atoi>:
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e00e      	b.n	8003116 <_atoi+0x2c>
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4618      	mov	r0, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c59      	adds	r1, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4403      	add	r3, r0
 8003112:	3b30      	subs	r3, #48	; 0x30
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ffcd 	bl	80030bc <_is_digit>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e7      	bne.n	80030f8 <_atoi+0xe>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_out_rev>:
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d125      	bne.n	800319a <_out_rev+0x68>
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d120      	bne.n	800319a <_out_rev+0x68>
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e00a      	b.n	8003174 <_out_rev+0x42>
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	1c53      	adds	r3, r2, #1
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	68fc      	ldr	r4, [r7, #12]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	2020      	movs	r0, #32
 800316c:	47a0      	blx	r4
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3301      	adds	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	429a      	cmp	r2, r3
 800317a:	d3f0      	bcc.n	800315e <_out_rev+0x2c>
 800317c:	e00d      	b.n	800319a <_out_rev+0x68>
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	3b01      	subs	r3, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	4413      	add	r3, r2
 800318a:	7818      	ldrb	r0, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	1c53      	adds	r3, r2, #1
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	68fc      	ldr	r4, [r7, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	47a0      	blx	r4
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <_out_rev+0x4c>
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00e      	beq.n	80031c8 <_out_rev+0x96>
 80031aa:	e007      	b.n	80031bc <_out_rev+0x8a>
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	1c53      	adds	r3, r2, #1
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	68fc      	ldr	r4, [r7, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	2020      	movs	r0, #32
 80031ba:	47a0      	blx	r4
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d8f1      	bhi.n	80031ac <_out_rev+0x7a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <_ntoa_format>:
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af04      	add	r7, sp, #16
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d136      	bne.n	8003258 <_ntoa_format+0x86>
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d018      	beq.n	8003222 <_ntoa_format+0x50>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <_ntoa_format+0x50>
 80031fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <_ntoa_format+0x3a>
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <_ntoa_format+0x50>
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	3b01      	subs	r3, #1
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003212:	e006      	b.n	8003222 <_ntoa_format+0x50>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	61fa      	str	r2, [r7, #28]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4413      	add	r3, r2
 800321e:	2230      	movs	r2, #48	; 0x30
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	429a      	cmp	r2, r3
 8003228:	d20a      	bcs.n	8003240 <_ntoa_format+0x6e>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b1f      	cmp	r3, #31
 800322e:	d9f1      	bls.n	8003214 <_ntoa_format+0x42>
 8003230:	e006      	b.n	8003240 <_ntoa_format+0x6e>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	61fa      	str	r2, [r7, #28]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	2230      	movs	r2, #48	; 0x30
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <_ntoa_format+0x86>
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	429a      	cmp	r2, r3
 8003250:	d202      	bcs.n	8003258 <_ntoa_format+0x86>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b1f      	cmp	r3, #31
 8003256:	d9ec      	bls.n	8003232 <_ntoa_format+0x60>
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d058      	beq.n	8003314 <_ntoa_format+0x142>
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <_ntoa_format+0xc8>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <_ntoa_format+0xc8>
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	429a      	cmp	r2, r3
 8003278:	d003      	beq.n	8003282 <_ntoa_format+0xb0>
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	429a      	cmp	r2, r3
 8003280:	d10b      	bne.n	800329a <_ntoa_format+0xc8>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b01      	subs	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <_ntoa_format+0xc8>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	2b10      	cmp	r3, #16
 8003292:	d102      	bne.n	800329a <_ntoa_format+0xc8>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3b01      	subs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2b10      	cmp	r3, #16
 800329e:	d10f      	bne.n	80032c0 <_ntoa_format+0xee>
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <_ntoa_format+0xee>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b1f      	cmp	r3, #31
 80032ae:	d807      	bhi.n	80032c0 <_ntoa_format+0xee>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	2278      	movs	r2, #120	; 0x78
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e01f      	b.n	8003300 <_ntoa_format+0x12e>
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d10f      	bne.n	80032e6 <_ntoa_format+0x114>
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <_ntoa_format+0x114>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b1f      	cmp	r3, #31
 80032d4:	d807      	bhi.n	80032e6 <_ntoa_format+0x114>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	61fa      	str	r2, [r7, #28]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	2258      	movs	r2, #88	; 0x58
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e00c      	b.n	8003300 <_ntoa_format+0x12e>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d109      	bne.n	8003300 <_ntoa_format+0x12e>
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b1f      	cmp	r3, #31
 80032f0:	d806      	bhi.n	8003300 <_ntoa_format+0x12e>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	61fa      	str	r2, [r7, #28]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	2262      	movs	r2, #98	; 0x62
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b1f      	cmp	r3, #31
 8003304:	d806      	bhi.n	8003314 <_ntoa_format+0x142>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	61fa      	str	r2, [r7, #28]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	2230      	movs	r2, #48	; 0x30
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b1f      	cmp	r3, #31
 8003318:	d824      	bhi.n	8003364 <_ntoa_format+0x192>
 800331a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <_ntoa_format+0x160>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4413      	add	r3, r2
 800332c:	222d      	movs	r2, #45	; 0x2d
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e018      	b.n	8003364 <_ntoa_format+0x192>
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <_ntoa_format+0x17a>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	61fa      	str	r2, [r7, #28]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4413      	add	r3, r2
 8003346:	222b      	movs	r2, #43	; 0x2b
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e00b      	b.n	8003364 <_ntoa_format+0x192>
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <_ntoa_format+0x192>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	61fa      	str	r2, [r7, #28]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4413      	add	r3, r2
 8003360:	2220      	movs	r2, #32
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	9303      	str	r3, [sp, #12]
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff fed9 	bl	8003132 <_out_rev>
 8003380:	4603      	mov	r3, r0
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ntoa_long>:
 800338a:	b580      	push	{r7, lr}
 800338c:	b096      	sub	sp, #88	; 0x58
 800338e:	af08      	add	r7, sp, #32
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <_ntoa_long+0x20>
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	f023 0310 	bic.w	r3, r3, #16
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
 80033aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <_ntoa_long+0x30>
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d032      	beq.n	8003420 <_ntoa_long+0x96>
 80033ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033be:	fbb3 f2f2 	udiv	r2, r3, r2
 80033c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033c4:	fb01 f202 	mul.w	r2, r1, r2
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80033ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033d2:	2b09      	cmp	r3, #9
 80033d4:	d804      	bhi.n	80033e0 <_ntoa_long+0x56>
 80033d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033da:	3330      	adds	r3, #48	; 0x30
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	e00d      	b.n	80033fc <_ntoa_long+0x72>
 80033e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <_ntoa_long+0x64>
 80033ea:	2241      	movs	r2, #65	; 0x41
 80033ec:	e000      	b.n	80033f0 <_ntoa_long+0x66>
 80033ee:	2261      	movs	r2, #97	; 0x61
 80033f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033f4:	4413      	add	r3, r2
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3b0a      	subs	r3, #10
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	6379      	str	r1, [r7, #52]	; 0x34
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	443b      	add	r3, r7
 8003406:	f803 2c28 	strb.w	r2, [r3, #-40]
 800340a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	643b      	str	r3, [r7, #64]	; 0x40
 8003414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <_ntoa_long+0x96>
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	2b1f      	cmp	r3, #31
 800341e:	d9cc      	bls.n	80033ba <_ntoa_long+0x30>
 8003420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003422:	9306      	str	r3, [sp, #24]
 8003424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342e:	9303      	str	r3, [sp, #12]
 8003430:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003434:	9302      	str	r3, [sp, #8]
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff fec3 	bl	80031d2 <_ntoa_format>
 800344c:	4603      	mov	r3, r0
 800344e:	4618      	mov	r0, r3
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_ntoa_long_long>:
 8003456:	b580      	push	{r7, lr}
 8003458:	b096      	sub	sp, #88	; 0x58
 800345a:	af08      	add	r7, sp, #32
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
 8003468:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800346c:	4313      	orrs	r3, r2
 800346e:	d103      	bne.n	8003478 <_ntoa_long_long+0x22>
 8003470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003472:	f023 0310 	bic.w	r3, r3, #16
 8003476:	663b      	str	r3, [r7, #96]	; 0x60
 8003478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <_ntoa_long_long+0x34>
 8003482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003486:	4313      	orrs	r3, r2
 8003488:	d037      	beq.n	80034fa <_ntoa_long_long+0xa4>
 800348a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800348e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003492:	f7fd fbb1 	bl	8000bf8 <__aeabi_uldivmod>
 8003496:	4613      	mov	r3, r2
 8003498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800349c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d804      	bhi.n	80034ae <_ntoa_long_long+0x58>
 80034a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a8:	3330      	adds	r3, #48	; 0x30
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	e00d      	b.n	80034ca <_ntoa_long_long+0x74>
 80034ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <_ntoa_long_long+0x66>
 80034b8:	2241      	movs	r2, #65	; 0x41
 80034ba:	e000      	b.n	80034be <_ntoa_long_long+0x68>
 80034bc:	2261      	movs	r2, #97	; 0x61
 80034be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034c2:	4413      	add	r3, r2
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3b0a      	subs	r3, #10
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	1c59      	adds	r1, r3, #1
 80034ce:	6379      	str	r1, [r7, #52]	; 0x34
 80034d0:	3338      	adds	r3, #56	; 0x38
 80034d2:	443b      	add	r3, r7
 80034d4:	f803 2c28 	strb.w	r2, [r3, #-40]
 80034d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80034ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d002      	beq.n	80034fa <_ntoa_long_long+0xa4>
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	2b1f      	cmp	r3, #31
 80034f8:	d9c7      	bls.n	800348a <_ntoa_long_long+0x34>
 80034fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034fe:	9206      	str	r2, [sp, #24]
 8003500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003502:	9205      	str	r2, [sp, #20]
 8003504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003506:	9204      	str	r2, [sp, #16]
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fe56 	bl	80031d2 <_ntoa_format>
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	3738      	adds	r7, #56	; 0x38
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_ftoa>:
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b09d      	sub	sp, #116	; 0x74
 8003534:	af04      	add	r7, sp, #16
 8003536:	6178      	str	r0, [r7, #20]
 8003538:	6139      	str	r1, [r7, #16]
 800353a:	60fa      	str	r2, [r7, #12]
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	ed87 0b00 	vstr	d0, [r7]
 8003542:	2300      	movs	r3, #0
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003556:	e9d7 0100 	ldrd	r0, r1, [r7]
 800355a:	f7fd fabd 	bl	8000ad8 <__aeabi_dcmpeq>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10f      	bne.n	8003584 <_ftoa+0x54>
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	2303      	movs	r3, #3
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	4ba7      	ldr	r3, [pc, #668]	; (8003810 <_ftoa+0x2e0>)
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6939      	ldr	r1, [r7, #16]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff fdd9 	bl	8003132 <_out_rev>
 8003580:	4603      	mov	r3, r0
 8003582:	e222      	b.n	80039ca <_ftoa+0x49a>
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800358c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003590:	f7fd faac 	bl	8000aec <__aeabi_dcmplt>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00f      	beq.n	80035ba <_ftoa+0x8a>
 800359a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359c:	9303      	str	r3, [sp, #12]
 800359e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	2304      	movs	r3, #4
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	4b9b      	ldr	r3, [pc, #620]	; (8003814 <_ftoa+0x2e4>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	6939      	ldr	r1, [r7, #16]
 80035b0:	6978      	ldr	r0, [r7, #20]
 80035b2:	f7ff fdbe 	bl	8003132 <_out_rev>
 80035b6:	4603      	mov	r3, r0
 80035b8:	e207      	b.n	80039ca <_ftoa+0x49a>
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295
 80035be:	4b96      	ldr	r3, [pc, #600]	; (8003818 <_ftoa+0x2e8>)
 80035c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035c4:	f7fd fab0 	bl	8000b28 <__aeabi_dcmpgt>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01d      	beq.n	800360a <_ftoa+0xda>
 80035ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <_ftoa+0xac>
 80035d8:	4b90      	ldr	r3, [pc, #576]	; (800381c <_ftoa+0x2ec>)
 80035da:	e000      	b.n	80035de <_ftoa+0xae>
 80035dc:	4b90      	ldr	r3, [pc, #576]	; (8003820 <_ftoa+0x2f0>)
 80035de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035e0:	f002 0204 	and.w	r2, r2, #4
 80035e4:	2a00      	cmp	r2, #0
 80035e6:	d001      	beq.n	80035ec <_ftoa+0xbc>
 80035e8:	2204      	movs	r2, #4
 80035ea:	e000      	b.n	80035ee <_ftoa+0xbe>
 80035ec:	2203      	movs	r2, #3
 80035ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80035f4:	9102      	str	r1, [sp, #8]
 80035f6:	9201      	str	r2, [sp, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	6939      	ldr	r1, [r7, #16]
 8003600:	6978      	ldr	r0, [r7, #20]
 8003602:	f7ff fd96 	bl	8003132 <_out_rev>
 8003606:	4603      	mov	r3, r0
 8003608:	e1df      	b.n	80039ca <_ftoa+0x49a>
 800360a:	a37d      	add	r3, pc, #500	; (adr r3, 8003800 <_ftoa+0x2d0>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003614:	f7fd fa88 	bl	8000b28 <__aeabi_dcmpgt>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <_ftoa+0x102>
 800361e:	a37a      	add	r3, pc, #488	; (adr r3, 8003808 <_ftoa+0x2d8>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003628:	f7fd fa60 	bl	8000aec <__aeabi_dcmplt>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <_ftoa+0x122>
 8003632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	ed97 0b00 	vldr	d0, [r7]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6939      	ldr	r1, [r7, #16]
 8003648:	6978      	ldr	r0, [r7, #20]
 800364a:	f000 f9c9 	bl	80039e0 <_etoa>
 800364e:	4603      	mov	r3, r0
 8003650:	e1bb      	b.n	80039ca <_ftoa+0x49a>
 8003652:	2300      	movs	r3, #0
 8003654:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003664:	f7fd fa42 	bl	8000aec <__aeabi_dcmplt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00e      	beq.n	800368c <_ftoa+0x15c>
 800366e:	2301      	movs	r3, #1
 8003670:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	f7fc fe0a 	bl	8000298 <__aeabi_dsub>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	e9c7 2300 	strd	r2, r3, [r7]
 800368c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10d      	bne.n	80036b2 <_ftoa+0x182>
 8003696:	2306      	movs	r3, #6
 8003698:	673b      	str	r3, [r7, #112]	; 0x70
 800369a:	e00a      	b.n	80036b2 <_ftoa+0x182>
 800369c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036a2:	3360      	adds	r3, #96	; 0x60
 80036a4:	443b      	add	r3, r7
 80036a6:	2230      	movs	r2, #48	; 0x30
 80036a8:	f803 2c48 	strb.w	r2, [r3, #-72]
 80036ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ae:	3b01      	subs	r3, #1
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	2b1f      	cmp	r3, #31
 80036b6:	d802      	bhi.n	80036be <_ftoa+0x18e>
 80036b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ba:	2b09      	cmp	r3, #9
 80036bc:	d8ee      	bhi.n	800369c <_ftoa+0x16c>
 80036be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036c2:	f7fd fa51 	bl	8000b68 <__aeabi_d2iz>
 80036c6:	4603      	mov	r3, r0
 80036c8:	657b      	str	r3, [r7, #84]	; 0x54
 80036ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80036cc:	f7fc ff32 	bl	8000534 <__aeabi_i2d>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036d8:	f7fc fdde 	bl	8000298 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4a4f      	ldr	r2, [pc, #316]	; (8003824 <_ftoa+0x2f4>)
 80036e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc ff8a 	bl	8000608 <__aeabi_dmul>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80036fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003700:	f7fd fa5a 	bl	8000bb8 <__aeabi_d2uiz>
 8003704:	4603      	mov	r3, r0
 8003706:	653b      	str	r3, [r7, #80]	; 0x50
 8003708:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800370a:	f7fc ff03 	bl	8000514 <__aeabi_ui2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003716:	f7fc fdbf 	bl	8000298 <__aeabi_dsub>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	4b40      	ldr	r3, [pc, #256]	; (8003828 <_ftoa+0x2f8>)
 8003728:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800372c:	f7fd f9fc 	bl	8000b28 <__aeabi_dcmpgt>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <_ftoa+0x234>
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	3301      	adds	r3, #1
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
 800373c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800373e:	f7fc fee9 	bl	8000514 <__aeabi_ui2d>
 8003742:	4a38      	ldr	r2, [pc, #224]	; (8003824 <_ftoa+0x2f4>)
 8003744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fd f9e1 	bl	8000b14 <__aeabi_dcmpge>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <_ftoa+0x25e>
 8003758:	2300      	movs	r3, #0
 800375a:	653b      	str	r3, [r7, #80]	; 0x50
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	3301      	adds	r3, #1
 8003760:	657b      	str	r3, [r7, #84]	; 0x54
 8003762:	e014      	b.n	800378e <_ftoa+0x25e>
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <_ftoa+0x2f8>)
 800376a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800376e:	f7fd f9bd 	bl	8000aec <__aeabi_dcmplt>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <_ftoa+0x25e>
 8003778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <_ftoa+0x258>
 800377e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <_ftoa+0x25e>
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	3301      	adds	r3, #1
 800378c:	653b      	str	r3, [r7, #80]	; 0x50
 800378e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003790:	2b00      	cmp	r3, #0
 8003792:	d14b      	bne.n	800382c <_ftoa+0x2fc>
 8003794:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003796:	f7fc fecd 	bl	8000534 <__aeabi_i2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037a2:	f7fc fd79 	bl	8000298 <__aeabi_dsub>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80037ae:	2301      	movs	r3, #1
 80037b0:	461c      	mov	r4, r3
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <_ftoa+0x2f8>)
 80037b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037bc:	f7fd f996 	bl	8000aec <__aeabi_dcmplt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <_ftoa+0x29a>
 80037c6:	2300      	movs	r3, #0
 80037c8:	461c      	mov	r4, r3
 80037ca:	b2e3      	uxtb	r3, r4
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <_ftoa+0x2ba>
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <_ftoa+0x2f8>)
 80037dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037e0:	f7fd f9a2 	bl	8000b28 <__aeabi_dcmpgt>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d064      	beq.n	80038b4 <_ftoa+0x384>
 80037ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8081 	beq.w	80038f8 <_ftoa+0x3c8>
 80037f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f8:	3301      	adds	r3, #1
 80037fa:	657b      	str	r3, [r7, #84]	; 0x54
 80037fc:	e07c      	b.n	80038f8 <_ftoa+0x3c8>
 80037fe:	bf00      	nop
 8003800:	00000000 	.word	0x00000000
 8003804:	41cdcd65 	.word	0x41cdcd65
 8003808:	00000000 	.word	0x00000000
 800380c:	c1cdcd65 	.word	0xc1cdcd65
 8003810:	08012284 	.word	0x08012284
 8003814:	08012288 	.word	0x08012288
 8003818:	7fefffff 	.word	0x7fefffff
 800381c:	08012290 	.word	0x08012290
 8003820:	08012298 	.word	0x08012298
 8003824:	080123c0 	.word	0x080123c0
 8003828:	3fe00000 	.word	0x3fe00000
 800382c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	e01f      	b.n	8003872 <_ftoa+0x342>
 8003832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003834:	3b01      	subs	r3, #1
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800383a:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <_ftoa+0x4a4>)
 800383c:	fba3 2301 	umull	r2, r3, r3, r1
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	1aca      	subs	r2, r1, r3
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003850:	1c59      	adds	r1, r3, #1
 8003852:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003854:	3230      	adds	r2, #48	; 0x30
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	3360      	adds	r3, #96	; 0x60
 800385a:	443b      	add	r3, r7
 800385c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <_ftoa+0x4a4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	653b      	str	r3, [r7, #80]	; 0x50
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <_ftoa+0x34a>
 8003872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003874:	2b1f      	cmp	r3, #31
 8003876:	d9dc      	bls.n	8003832 <_ftoa+0x302>
 8003878:	e009      	b.n	800388e <_ftoa+0x35e>
 800387a:	bf00      	nop
 800387c:	e007      	b.n	800388e <_ftoa+0x35e>
 800387e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	443b      	add	r3, r7
 8003888:	2230      	movs	r2, #48	; 0x30
 800388a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800388e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003890:	2b1f      	cmp	r3, #31
 8003892:	d804      	bhi.n	800389e <_ftoa+0x36e>
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	1e5a      	subs	r2, r3, #1
 8003898:	64fa      	str	r2, [r7, #76]	; 0x4c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ef      	bne.n	800387e <_ftoa+0x34e>
 800389e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a0:	2b1f      	cmp	r3, #31
 80038a2:	d829      	bhi.n	80038f8 <_ftoa+0x3c8>
 80038a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038aa:	3360      	adds	r3, #96	; 0x60
 80038ac:	443b      	add	r3, r7
 80038ae:	222e      	movs	r2, #46	; 0x2e
 80038b0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80038b4:	e020      	b.n	80038f8 <_ftoa+0x3c8>
 80038b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038b8:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <_ftoa+0x4a8>)
 80038ba:	fb83 1302 	smull	r1, r3, r3, r2
 80038be:	1099      	asrs	r1, r3, #2
 80038c0:	17d3      	asrs	r3, r2, #31
 80038c2:	1ac9      	subs	r1, r1, r3
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	1ad1      	subs	r1, r2, r3
 80038ce:	b2ca      	uxtb	r2, r1
 80038d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80038d6:	3230      	adds	r2, #48	; 0x30
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	3360      	adds	r3, #96	; 0x60
 80038dc:	443b      	add	r3, r7
 80038de:	f803 2c48 	strb.w	r2, [r3, #-72]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <_ftoa+0x4a8>)
 80038e6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ea:	1092      	asrs	r2, r2, #2
 80038ec:	17db      	asrs	r3, r3, #31
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	657b      	str	r3, [r7, #84]	; 0x54
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <_ftoa+0x3d0>
 80038f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fa:	2b1f      	cmp	r3, #31
 80038fc:	d9db      	bls.n	80038b6 <_ftoa+0x386>
 80038fe:	e000      	b.n	8003902 <_ftoa+0x3d2>
 8003900:	bf00      	nop
 8003902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d123      	bne.n	8003954 <_ftoa+0x424>
 800390c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01e      	beq.n	8003954 <_ftoa+0x424>
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	2b00      	cmp	r3, #0
 800391a:	d014      	beq.n	8003946 <_ftoa+0x416>
 800391c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <_ftoa+0x3fe>
 8003924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <_ftoa+0x416>
 800392e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003930:	3b01      	subs	r3, #1
 8003932:	677b      	str	r3, [r7, #116]	; 0x74
 8003934:	e007      	b.n	8003946 <_ftoa+0x416>
 8003936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800393c:	3360      	adds	r3, #96	; 0x60
 800393e:	443b      	add	r3, r7
 8003940:	2230      	movs	r2, #48	; 0x30
 8003942:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394a:	429a      	cmp	r2, r3
 800394c:	d202      	bcs.n	8003954 <_ftoa+0x424>
 800394e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003950:	2b1f      	cmp	r3, #31
 8003952:	d9f0      	bls.n	8003936 <_ftoa+0x406>
 8003954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003956:	2b1f      	cmp	r3, #31
 8003958:	d827      	bhi.n	80039aa <_ftoa+0x47a>
 800395a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <_ftoa+0x444>
 8003962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003968:	3360      	adds	r3, #96	; 0x60
 800396a:	443b      	add	r3, r7
 800396c:	222d      	movs	r2, #45	; 0x2d
 800396e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003972:	e01a      	b.n	80039aa <_ftoa+0x47a>
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <_ftoa+0x460>
 800397e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003984:	3360      	adds	r3, #96	; 0x60
 8003986:	443b      	add	r3, r7
 8003988:	222b      	movs	r2, #43	; 0x2b
 800398a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800398e:	e00c      	b.n	80039aa <_ftoa+0x47a>
 8003990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <_ftoa+0x47a>
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039a0:	3360      	adds	r3, #96	; 0x60
 80039a2:	443b      	add	r3, r7
 80039a4:	2220      	movs	r2, #32
 80039a6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80039aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	f107 0318 	add.w	r3, r7, #24
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7ff fbb5 	bl	8003132 <_out_rev>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4618      	mov	r0, r3
 80039cc:	3764      	adds	r7, #100	; 0x64
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	cccccccd 	.word	0xcccccccd
 80039d8:	66666667 	.word	0x66666667
 80039dc:	00000000 	.word	0x00000000

080039e0 <_etoa>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	b09f      	sub	sp, #124	; 0x7c
 80039e6:	af06      	add	r7, sp, #24
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24
 80039ea:	6239      	str	r1, [r7, #32]
 80039ec:	61fa      	str	r2, [r7, #28]
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80039f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039fc:	f7fd f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <_etoa+0x50>
 8003a06:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0a:	4bc1      	ldr	r3, [pc, #772]	; (8003d10 <_etoa+0x330>)
 8003a0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a10:	f7fd f88a 	bl	8000b28 <__aeabi_dcmpgt>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <_etoa+0x50>
 8003a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a26:	f7fd f861 	bl	8000aec <__aeabi_dcmplt>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <_etoa+0x76>
 8003a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	ed97 0b04 	vldr	d0, [r7, #16]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	6a39      	ldr	r1, [r7, #32]
 8003a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a4e:	f7ff fd6f 	bl	8003530 <_ftoa>
 8003a52:	4603      	mov	r3, r0
 8003a54:	e23f      	b.n	8003ed6 <_etoa+0x4f6>
 8003a56:	2301      	movs	r3, #1
 8003a58:	461e      	mov	r6, r3
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a66:	f7fd f841 	bl	8000aec <__aeabi_dcmplt>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <_etoa+0x94>
 8003a70:	2300      	movs	r3, #0
 8003a72:	461e      	mov	r6, r3
 8003a74:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
 8003a78:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <_etoa+0xb4>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	ed97 7b00 	vldr	d7, [r7]
 8003a90:	ed87 7b04 	vstr	d7, [r7, #16]
 8003a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_etoa+0xc6>
 8003aa0:	2306      	movs	r3, #6
 8003aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003aaa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003aae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	0d0a      	lsrs	r2, r1, #20
 8003abc:	2300      	movs	r3, #0
 8003abe:	4613      	mov	r3, r2
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ace:	4690      	mov	r8, r2
 8003ad0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003ad4:	4644      	mov	r4, r8
 8003ad6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003ada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003ade:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8003ae2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ae4:	f7fc fd26 	bl	8000534 <__aeabi_i2d>
 8003ae8:	a37d      	add	r3, pc, #500	; (adr r3, 8003ce0 <_etoa+0x300>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd8b 	bl	8000608 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	a37b      	add	r3, pc, #492	; (adr r3, 8003ce8 <_etoa+0x308>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc fbcc 	bl	800029c <__adddf3>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4614      	mov	r4, r2
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	4b7f      	ldr	r3, [pc, #508]	; (8003d14 <_etoa+0x334>)
 8003b16:	f7fc fbbf 	bl	8000298 <__aeabi_dsub>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	a373      	add	r3, pc, #460	; (adr r3, 8003cf0 <_etoa+0x310>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fd6e 	bl	8000608 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4620      	mov	r0, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7fc fbb2 	bl	800029c <__adddf3>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fd f812 	bl	8000b68 <__aeabi_d2iz>
 8003b44:	4603      	mov	r3, r0
 8003b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003b4a:	f7fc fcf3 	bl	8000534 <__aeabi_i2d>
 8003b4e:	a36a      	add	r3, pc, #424	; (adr r3, 8003cf8 <_etoa+0x318>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fd58 	bl	8000608 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <_etoa+0x338>)
 8003b66:	f7fc fb99 	bl	800029c <__adddf3>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7fc fff9 	bl	8000b68 <__aeabi_d2iz>
 8003b76:	4603      	mov	r3, r0
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003b7c:	f7fc fcda 	bl	8000534 <__aeabi_i2d>
 8003b80:	a35f      	add	r3, pc, #380	; (adr r3, 8003d00 <_etoa+0x320>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fd3f 	bl	8000608 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4614      	mov	r4, r2
 8003b90:	461d      	mov	r5, r3
 8003b92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b94:	f7fc fcce 	bl	8000534 <__aeabi_i2d>
 8003b98:	a35b      	add	r3, pc, #364	; (adr r3, 8003d08 <_etoa+0x328>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f7fc fd33 	bl	8000608 <__aeabi_dmul>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	4629      	mov	r1, r5
 8003baa:	f7fc fb75 	bl	8000298 <__aeabi_dsub>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003bb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003bbe:	f7fc fd23 	bl	8000608 <__aeabi_dmul>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003bd0:	17da      	asrs	r2, r3, #31
 8003bd2:	469a      	mov	sl, r3
 8003bd4:	4693      	mov	fp, r2
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003be2:	2200      	movs	r2, #0
 8003be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003be8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003bec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	f7fc fb52 	bl	800029c <__adddf3>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4690      	mov	r8, r2
 8003bfe:	4699      	mov	r9, r3
 8003c00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c0c:	f7fc fb44 	bl	8000298 <__aeabi_dsub>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4692      	mov	sl, r2
 8003c16:	469b      	mov	fp, r3
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <_etoa+0x33c>)
 8003c1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c22:	f7fc fe1b 	bl	800085c <__aeabi_ddiv>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <_etoa+0x340>)
 8003c34:	f7fc fb32 	bl	800029c <__adddf3>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c40:	f7fc fe0c 	bl	800085c <__aeabi_ddiv>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <_etoa+0x344>)
 8003c52:	f7fc fb23 	bl	800029c <__adddf3>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c5e:	f7fc fdfd 	bl	800085c <__aeabi_ddiv>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4650      	mov	r0, sl
 8003c68:	4659      	mov	r1, fp
 8003c6a:	f7fc fb17 	bl	800029c <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4640      	mov	r0, r8
 8003c74:	4649      	mov	r1, r9
 8003c76:	f7fc fdf1 	bl	800085c <__aeabi_ddiv>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <_etoa+0x348>)
 8003c88:	f7fc fb08 	bl	800029c <__adddf3>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc fcb8 	bl	8000608 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ca8:	f7fc ff20 	bl	8000aec <__aeabi_dcmplt>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <_etoa+0x2ee>
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <_etoa+0x340>)
 8003cc2:	f7fc fdcb 	bl	800085c <__aeabi_ddiv>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd0:	2b63      	cmp	r3, #99	; 0x63
 8003cd2:	dc2b      	bgt.n	8003d2c <_etoa+0x34c>
 8003cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003cda:	db27      	blt.n	8003d2c <_etoa+0x34c>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	e026      	b.n	8003d2e <_etoa+0x34e>
 8003ce0:	509f79fb 	.word	0x509f79fb
 8003ce4:	3fd34413 	.word	0x3fd34413
 8003ce8:	8b60c8b3 	.word	0x8b60c8b3
 8003cec:	3fc68a28 	.word	0x3fc68a28
 8003cf0:	636f4361 	.word	0x636f4361
 8003cf4:	3fd287a7 	.word	0x3fd287a7
 8003cf8:	0979a371 	.word	0x0979a371
 8003cfc:	400a934f 	.word	0x400a934f
 8003d00:	bbb55516 	.word	0xbbb55516
 8003d04:	40026bb1 	.word	0x40026bb1
 8003d08:	fefa39ef 	.word	0xfefa39ef
 8003d0c:	3fe62e42 	.word	0x3fe62e42
 8003d10:	7fefffff 	.word	0x7fefffff
 8003d14:	3ff80000 	.word	0x3ff80000
 8003d18:	3fe00000 	.word	0x3fe00000
 8003d1c:	402c0000 	.word	0x402c0000
 8003d20:	40240000 	.word	0x40240000
 8003d24:	40180000 	.word	0x40180000
 8003d28:	3ff00000 	.word	0x3ff00000
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03d      	beq.n	8003db8 <_etoa+0x3d8>
 8003d3c:	a368      	add	r3, pc, #416	; (adr r3, 8003ee0 <_etoa+0x500>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d46:	f7fc fee5 	bl	8000b14 <__aeabi_dcmpge>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d024      	beq.n	8003d9a <_etoa+0x3ba>
 8003d50:	a365      	add	r3, pc, #404	; (adr r3, 8003ee8 <_etoa+0x508>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5a:	f7fc fec7 	bl	8000aec <__aeabi_dcmplt>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01a      	beq.n	8003d9a <_etoa+0x3ba>
 8003d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	da07      	bge.n	8003d7e <_etoa+0x39e>
 8003d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d7c:	e002      	b.n	8003d84 <_etoa+0x3a4>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d90:	2300      	movs	r3, #0
 8003d92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d94:	2300      	movs	r3, #0
 8003d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d98:	e00e      	b.n	8003db8 <_etoa+0x3d8>
 8003d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <_etoa+0x3d8>
 8003da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <_etoa+0x3d8>
 8003dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d904      	bls.n	8003dd2 <_etoa+0x3f2>
 8003dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd0:	e001      	b.n	8003dd6 <_etoa+0x3f6>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <_etoa+0x40c>
 8003de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <_etoa+0x40c>
 8003de8:	2300      	movs	r3, #0
 8003dea:	657b      	str	r3, [r7, #84]	; 0x54
 8003dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <_etoa+0x426>
 8003df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003df6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dfa:	f7fc fd2f 	bl	800085c <__aeabi_ddiv>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <_etoa+0x440>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e003      	b.n	8003e28 <_etoa+0x448>
 8003e20:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e24:	ed87 7b02 	vstr	d7, [r7, #8]
 8003e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e48:	f7ff fb72 	bl	8003530 <_ftoa>
 8003e4c:	61f8      	str	r0, [r7, #28]
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03f      	beq.n	8003ed4 <_etoa+0x4f4>
 8003e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <_etoa+0x484>
 8003e60:	2045      	movs	r0, #69	; 0x45
 8003e62:	e000      	b.n	8003e66 <_etoa+0x486>
 8003e64:	2065      	movs	r0, #101	; 0x65
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	1c53      	adds	r3, r2, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6a39      	ldr	r1, [r7, #32]
 8003e72:	47a0      	blx	r4
 8003e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfb8      	it	lt
 8003e7a:	425b      	neglt	r3, r3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e80:	0fdb      	lsrs	r3, r3, #31
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e86:	3a01      	subs	r2, #1
 8003e88:	2105      	movs	r1, #5
 8003e8a:	9105      	str	r1, [sp, #20]
 8003e8c:	9204      	str	r2, [sp, #16]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	9203      	str	r2, [sp, #12]
 8003e92:	220a      	movs	r2, #10
 8003e94:	9202      	str	r2, [sp, #8]
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	9000      	str	r0, [sp, #0]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	6a39      	ldr	r1, [r7, #32]
 8003ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea2:	f7ff fa72 	bl	800338a <_ntoa_long>
 8003ea6:	61f8      	str	r0, [r7, #28]
 8003ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00f      	beq.n	8003ed4 <_etoa+0x4f4>
 8003eb4:	e007      	b.n	8003ec6 <_etoa+0x4e6>
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	1c53      	adds	r3, r2, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6a39      	ldr	r1, [r7, #32]
 8003ec2:	2020      	movs	r0, #32
 8003ec4:	47a0      	blx	r4
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d8f0      	bhi.n	8003eb6 <_etoa+0x4d6>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3764      	adds	r7, #100	; 0x64
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee0:	eb1c432d 	.word	0xeb1c432d
 8003ee4:	3f1a36e2 	.word	0x3f1a36e2
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	412e8480 	.word	0x412e8480

08003ef0 <_vsnprintf>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b0a3      	sub	sp, #140	; 0x8c
 8003ef6:	af0a      	add	r7, sp, #40	; 0x28
 8003ef8:	6178      	str	r0, [r7, #20]
 8003efa:	6139      	str	r1, [r7, #16]
 8003efc:	60fa      	str	r2, [r7, #12]
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	2300      	movs	r3, #0
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 84be 	bne.w	8004888 <_vsnprintf+0x998>
 8003f0c:	4ba3      	ldr	r3, [pc, #652]	; (800419c <_vsnprintf+0x2ac>)
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f000 bcba 	b.w	8004888 <_vsnprintf+0x998>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b25      	cmp	r3, #37	; 0x25
 8003f1a:	d00d      	beq.n	8003f38 <_vsnprintf+0x48>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	7818      	ldrb	r0, [r3, #0]
 8003f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f22:	1c53      	adds	r3, r2, #1
 8003f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f26:	697c      	ldr	r4, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	47a0      	blx	r4
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	f000 bca8 	b.w	8004888 <_vsnprintf+0x998>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	3b20      	subs	r3, #32
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d857      	bhi.n	8003ffc <_vsnprintf+0x10c>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <_vsnprintf+0x64>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003fd5 	.word	0x08003fd5
 8003f58:	08003ffd 	.word	0x08003ffd
 8003f5c:	08003ffd 	.word	0x08003ffd
 8003f60:	08003fe9 	.word	0x08003fe9
 8003f64:	08003ffd 	.word	0x08003ffd
 8003f68:	08003ffd 	.word	0x08003ffd
 8003f6c:	08003ffd 	.word	0x08003ffd
 8003f70:	08003ffd 	.word	0x08003ffd
 8003f74:	08003ffd 	.word	0x08003ffd
 8003f78:	08003ffd 	.word	0x08003ffd
 8003f7c:	08003ffd 	.word	0x08003ffd
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08003ffd 	.word	0x08003ffd
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003ffd 	.word	0x08003ffd
 8003f90:	08003ffd 	.word	0x08003ffd
 8003f94:	08003f99 	.word	0x08003f99
 8003f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8003faa:	e02a      	b.n	8004002 <_vsnprintf+0x112>
 8003fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8003fbe:	e020      	b.n	8004002 <_vsnprintf+0x112>
 8003fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	2301      	movs	r3, #1
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd2:	e016      	b.n	8004002 <_vsnprintf+0x112>
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe6:	e00c      	b.n	8004002 <_vsnprintf+0x112>
 8003fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffa:	e002      	b.n	8004002 <_vsnprintf+0x112>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8004000:	bf00      	nop
 8004002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004004:	2b00      	cmp	r3, #0
 8004006:	d19c      	bne.n	8003f42 <_vsnprintf+0x52>
 8004008:	2300      	movs	r3, #0
 800400a:	65bb      	str	r3, [r7, #88]	; 0x58
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f853 	bl	80030bc <_is_digit>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <_vsnprintf+0x13a>
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f862 	bl	80030ea <_atoi>
 8004026:	65b8      	str	r0, [r7, #88]	; 0x58
 8004028:	e01a      	b.n	8004060 <_vsnprintf+0x170>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d116      	bne.n	8004060 <_vsnprintf+0x170>
 8004032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	da07      	bge.n	8004056 <_vsnprintf+0x166>
 8004046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	425b      	negs	r3, r3
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58
 8004054:	e001      	b.n	800405a <_vsnprintf+0x16a>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	65bb      	str	r3, [r7, #88]	; 0x58
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3301      	adds	r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	2300      	movs	r3, #0
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b2e      	cmp	r3, #46	; 0x2e
 800406a:	d127      	bne.n	80040bc <_vsnprintf+0x1cc>
 800406c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	3301      	adds	r3, #1
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f81c 	bl	80030bc <_is_digit>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <_vsnprintf+0x1a8>
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff f82b 	bl	80030ea <_atoi>
 8004094:	6578      	str	r0, [r7, #84]	; 0x54
 8004096:	e011      	b.n	80040bc <_vsnprintf+0x1cc>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b2a      	cmp	r3, #42	; 0x2a
 800409e:	d10d      	bne.n	80040bc <_vsnprintf+0x1cc>
 80040a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040a4:	1d1a      	adds	r2, r3, #4
 80040a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040b4:	657b      	str	r3, [r7, #84]	; 0x54
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	3b68      	subs	r3, #104	; 0x68
 80040c2:	2b12      	cmp	r3, #18
 80040c4:	d866      	bhi.n	8004194 <_vsnprintf+0x2a4>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <_vsnprintf+0x1dc>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	0800413f 	.word	0x0800413f
 80040d0:	08004195 	.word	0x08004195
 80040d4:	08004175 	.word	0x08004175
 80040d8:	08004195 	.word	0x08004195
 80040dc:	08004119 	.word	0x08004119
 80040e0:	08004195 	.word	0x08004195
 80040e4:	08004195 	.word	0x08004195
 80040e8:	08004195 	.word	0x08004195
 80040ec:	08004195 	.word	0x08004195
 80040f0:	08004195 	.word	0x08004195
 80040f4:	08004195 	.word	0x08004195
 80040f8:	08004195 	.word	0x08004195
 80040fc:	08004165 	.word	0x08004165
 8004100:	08004195 	.word	0x08004195
 8004104:	08004195 	.word	0x08004195
 8004108:	08004195 	.word	0x08004195
 800410c:	08004195 	.word	0x08004195
 8004110:	08004195 	.word	0x08004195
 8004114:	08004185 	.word	0x08004185
 8004118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3301      	adds	r3, #1
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b6c      	cmp	r3, #108	; 0x6c
 800412c:	d134      	bne.n	8004198 <_vsnprintf+0x2a8>
 800412e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e02c      	b.n	8004198 <_vsnprintf+0x2a8>
 800413e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3301      	adds	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b68      	cmp	r3, #104	; 0x68
 8004152:	d125      	bne.n	80041a0 <_vsnprintf+0x2b0>
 8004154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3301      	adds	r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	e01d      	b.n	80041a0 <_vsnprintf+0x2b0>
 8004164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	3301      	adds	r3, #1
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	e016      	b.n	80041a2 <_vsnprintf+0x2b2>
 8004174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800417a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3301      	adds	r3, #1
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	e00e      	b.n	80041a2 <_vsnprintf+0x2b2>
 8004184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3301      	adds	r3, #1
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	e006      	b.n	80041a2 <_vsnprintf+0x2b2>
 8004194:	bf00      	nop
 8004196:	e004      	b.n	80041a2 <_vsnprintf+0x2b2>
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <_vsnprintf+0x2b2>
 800419c:	08003067 	.word	0x08003067
 80041a0:	bf00      	nop
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3b25      	subs	r3, #37	; 0x25
 80041a8:	2b53      	cmp	r3, #83	; 0x53
 80041aa:	f200 8360 	bhi.w	800486e <_vsnprintf+0x97e>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <_vsnprintf+0x2c4>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	08004857 	.word	0x08004857
 80041b8:	0800486f 	.word	0x0800486f
 80041bc:	0800486f 	.word	0x0800486f
 80041c0:	0800486f 	.word	0x0800486f
 80041c4:	0800486f 	.word	0x0800486f
 80041c8:	0800486f 	.word	0x0800486f
 80041cc:	0800486f 	.word	0x0800486f
 80041d0:	0800486f 	.word	0x0800486f
 80041d4:	0800486f 	.word	0x0800486f
 80041d8:	0800486f 	.word	0x0800486f
 80041dc:	0800486f 	.word	0x0800486f
 80041e0:	0800486f 	.word	0x0800486f
 80041e4:	0800486f 	.word	0x0800486f
 80041e8:	0800486f 	.word	0x0800486f
 80041ec:	0800486f 	.word	0x0800486f
 80041f0:	0800486f 	.word	0x0800486f
 80041f4:	0800486f 	.word	0x0800486f
 80041f8:	0800486f 	.word	0x0800486f
 80041fc:	0800486f 	.word	0x0800486f
 8004200:	0800486f 	.word	0x0800486f
 8004204:	0800486f 	.word	0x0800486f
 8004208:	0800486f 	.word	0x0800486f
 800420c:	0800486f 	.word	0x0800486f
 8004210:	0800486f 	.word	0x0800486f
 8004214:	0800486f 	.word	0x0800486f
 8004218:	0800486f 	.word	0x0800486f
 800421c:	0800486f 	.word	0x0800486f
 8004220:	0800486f 	.word	0x0800486f
 8004224:	0800486f 	.word	0x0800486f
 8004228:	0800486f 	.word	0x0800486f
 800422c:	0800486f 	.word	0x0800486f
 8004230:	0800486f 	.word	0x0800486f
 8004234:	0800460b 	.word	0x0800460b
 8004238:	080045bb 	.word	0x080045bb
 800423c:	0800460b 	.word	0x0800460b
 8004240:	0800486f 	.word	0x0800486f
 8004244:	0800486f 	.word	0x0800486f
 8004248:	0800486f 	.word	0x0800486f
 800424c:	0800486f 	.word	0x0800486f
 8004250:	0800486f 	.word	0x0800486f
 8004254:	0800486f 	.word	0x0800486f
 8004258:	0800486f 	.word	0x0800486f
 800425c:	0800486f 	.word	0x0800486f
 8004260:	0800486f 	.word	0x0800486f
 8004264:	0800486f 	.word	0x0800486f
 8004268:	0800486f 	.word	0x0800486f
 800426c:	0800486f 	.word	0x0800486f
 8004270:	0800486f 	.word	0x0800486f
 8004274:	0800486f 	.word	0x0800486f
 8004278:	0800486f 	.word	0x0800486f
 800427c:	0800486f 	.word	0x0800486f
 8004280:	08004305 	.word	0x08004305
 8004284:	0800486f 	.word	0x0800486f
 8004288:	0800486f 	.word	0x0800486f
 800428c:	0800486f 	.word	0x0800486f
 8004290:	0800486f 	.word	0x0800486f
 8004294:	0800486f 	.word	0x0800486f
 8004298:	0800486f 	.word	0x0800486f
 800429c:	0800486f 	.word	0x0800486f
 80042a0:	0800486f 	.word	0x0800486f
 80042a4:	0800486f 	.word	0x0800486f
 80042a8:	08004305 	.word	0x08004305
 80042ac:	0800467b 	.word	0x0800467b
 80042b0:	08004305 	.word	0x08004305
 80042b4:	0800460b 	.word	0x0800460b
 80042b8:	080045bb 	.word	0x080045bb
 80042bc:	0800460b 	.word	0x0800460b
 80042c0:	0800486f 	.word	0x0800486f
 80042c4:	08004305 	.word	0x08004305
 80042c8:	0800486f 	.word	0x0800486f
 80042cc:	0800486f 	.word	0x0800486f
 80042d0:	0800486f 	.word	0x0800486f
 80042d4:	0800486f 	.word	0x0800486f
 80042d8:	0800486f 	.word	0x0800486f
 80042dc:	08004305 	.word	0x08004305
 80042e0:	080047bb 	.word	0x080047bb
 80042e4:	0800486f 	.word	0x0800486f
 80042e8:	0800486f 	.word	0x0800486f
 80042ec:	080046f3 	.word	0x080046f3
 80042f0:	0800486f 	.word	0x0800486f
 80042f4:	08004305 	.word	0x08004305
 80042f8:	0800486f 	.word	0x0800486f
 80042fc:	0800486f 	.word	0x0800486f
 8004300:	08004305 	.word	0x08004305
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b78      	cmp	r3, #120	; 0x78
 800430a:	d003      	beq.n	8004314 <_vsnprintf+0x424>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b58      	cmp	r3, #88	; 0x58
 8004312:	d102      	bne.n	800431a <_vsnprintf+0x42a>
 8004314:	2310      	movs	r3, #16
 8004316:	64bb      	str	r3, [r7, #72]	; 0x48
 8004318:	e013      	b.n	8004342 <_vsnprintf+0x452>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b6f      	cmp	r3, #111	; 0x6f
 8004320:	d102      	bne.n	8004328 <_vsnprintf+0x438>
 8004322:	2308      	movs	r3, #8
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
 8004326:	e00c      	b.n	8004342 <_vsnprintf+0x452>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b62      	cmp	r3, #98	; 0x62
 800432e:	d102      	bne.n	8004336 <_vsnprintf+0x446>
 8004330:	2302      	movs	r3, #2
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
 8004334:	e005      	b.n	8004342 <_vsnprintf+0x452>
 8004336:	230a      	movs	r3, #10
 8004338:	64bb      	str	r3, [r7, #72]	; 0x48
 800433a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b58      	cmp	r3, #88	; 0x58
 8004348:	d103      	bne.n	8004352 <_vsnprintf+0x462>
 800434a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434c:	f043 0320 	orr.w	r3, r3, #32
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b69      	cmp	r3, #105	; 0x69
 8004358:	d007      	beq.n	800436a <_vsnprintf+0x47a>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d003      	beq.n	800436a <_vsnprintf+0x47a>
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	f023 030c 	bic.w	r3, r3, #12
 8004368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <_vsnprintf+0x48c>
 8004374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b69      	cmp	r3, #105	; 0x69
 8004382:	d004      	beq.n	800438e <_vsnprintf+0x49e>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b64      	cmp	r3, #100	; 0x64
 800438a:	f040 8098 	bne.w	80044be <_vsnprintf+0x5ce>
 800438e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004394:	2b00      	cmp	r3, #0
 8004396:	d031      	beq.n	80043fc <_vsnprintf+0x50c>
 8004398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800439c:	3307      	adds	r3, #7
 800439e:	f023 0307 	bic.w	r3, r3, #7
 80043a2:	f103 0208 	add.w	r2, r3, #8
 80043a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80043b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	da06      	bge.n	80043c8 <_vsnprintf+0x4d8>
 80043ba:	2100      	movs	r1, #0
 80043bc:	f1d2 0800 	rsbs	r8, r2, #0
 80043c0:	eb61 0903 	sbc.w	r9, r1, r3
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	69f9      	ldr	r1, [r7, #28]
 80043ca:	0fc9      	lsrs	r1, r1, #31
 80043cc:	b2c9      	uxtb	r1, r1
 80043ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043d0:	2400      	movs	r4, #0
 80043d2:	4682      	mov	sl, r0
 80043d4:	46a3      	mov	fp, r4
 80043d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80043d8:	9008      	str	r0, [sp, #32]
 80043da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043dc:	9007      	str	r0, [sp, #28]
 80043de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80043e0:	9006      	str	r0, [sp, #24]
 80043e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80043e6:	9102      	str	r1, [sp, #8]
 80043e8:	e9cd 2300 	strd	r2, r3, [sp]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff f82f 	bl	8003456 <_ntoa_long_long>
 80043f8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80043fa:	e0da      	b.n	80045b2 <_vsnprintf+0x6c2>
 80043fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d020      	beq.n	8004448 <_vsnprintf+0x558>
 8004406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfb8      	it	lt
 800441a:	425b      	neglt	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	0fdb      	lsrs	r3, r3, #31
 8004422:	b2db      	uxtb	r3, r3
 8004424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004426:	9205      	str	r2, [sp, #20]
 8004428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442a:	9204      	str	r2, [sp, #16]
 800442c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800442e:	9203      	str	r2, [sp, #12]
 8004430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004432:	9202      	str	r2, [sp, #8]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	9100      	str	r1, [sp, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800443c:	6939      	ldr	r1, [r7, #16]
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7fe ffa3 	bl	800338a <_ntoa_long>
 8004444:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004446:	e0b4      	b.n	80045b2 <_vsnprintf+0x6c2>
 8004448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <_vsnprintf+0x572>
 8004452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e012      	b.n	8004488 <_vsnprintf+0x598>
 8004462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <_vsnprintf+0x58c>
 800446c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b21b      	sxth	r3, r3
 800447a:	e005      	b.n	8004488 <_vsnprintf+0x598>
 800447c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004480:	1d1a      	adds	r2, r3, #4
 8004482:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfb8      	it	lt
 8004490:	425b      	neglt	r3, r3
 8004492:	4619      	mov	r1, r3
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	0fdb      	lsrs	r3, r3, #31
 8004498:	b2db      	uxtb	r3, r3
 800449a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449c:	9205      	str	r2, [sp, #20]
 800449e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044a0:	9204      	str	r2, [sp, #16]
 80044a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044a4:	9203      	str	r2, [sp, #12]
 80044a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a8:	9202      	str	r2, [sp, #8]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	9100      	str	r1, [sp, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b2:	6939      	ldr	r1, [r7, #16]
 80044b4:	6978      	ldr	r0, [r7, #20]
 80044b6:	f7fe ff68 	bl	800338a <_ntoa_long>
 80044ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80044bc:	e079      	b.n	80045b2 <_vsnprintf+0x6c2>
 80044be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d022      	beq.n	800450e <_vsnprintf+0x61e>
 80044c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044cc:	3307      	adds	r3, #7
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	f103 0208 	add.w	r2, r3, #8
 80044d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044e0:	2000      	movs	r0, #0
 80044e2:	460d      	mov	r5, r1
 80044e4:	4606      	mov	r6, r0
 80044e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80044e8:	9108      	str	r1, [sp, #32]
 80044ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044ec:	9107      	str	r1, [sp, #28]
 80044ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044f0:	9106      	str	r1, [sp, #24]
 80044f2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80044f6:	2100      	movs	r1, #0
 80044f8:	9102      	str	r1, [sp, #8]
 80044fa:	e9cd 2300 	strd	r2, r3, [sp]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	f7fe ffa6 	bl	8003456 <_ntoa_long_long>
 800450a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800450c:	e051      	b.n	80045b2 <_vsnprintf+0x6c2>
 800450e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d018      	beq.n	800454a <_vsnprintf+0x65a>
 8004518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004526:	9205      	str	r2, [sp, #20]
 8004528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800452a:	9204      	str	r2, [sp, #16]
 800452c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800452e:	9203      	str	r2, [sp, #12]
 8004530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004532:	9202      	str	r2, [sp, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	9201      	str	r2, [sp, #4]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800453e:	6939      	ldr	r1, [r7, #16]
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7fe ff22 	bl	800338a <_ntoa_long>
 8004546:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004548:	e033      	b.n	80045b2 <_vsnprintf+0x6c2>
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <_vsnprintf+0x674>
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e012      	b.n	800458a <_vsnprintf+0x69a>
 8004564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <_vsnprintf+0x68e>
 800456e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	e005      	b.n	800458a <_vsnprintf+0x69a>
 800457e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004596:	9303      	str	r3, [sp, #12]
 8004598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	2300      	movs	r3, #0
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a8:	6939      	ldr	r1, [r7, #16]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7fe feed 	bl	800338a <_ntoa_long>
 80045b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	e166      	b.n	8004888 <_vsnprintf+0x998>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b46      	cmp	r3, #70	; 0x46
 80045c0:	d103      	bne.n	80045ca <_vsnprintf+0x6da>
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	f043 0320 	orr.w	r3, r3, #32
 80045c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ce:	3307      	adds	r3, #7
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045dc:	ed93 7b00 	vldr	d7, [r3]
 80045e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	eeb0 0a47 	vmov.f32	s0, s14
 80045f0:	eef0 0a67 	vmov.f32	s1, s15
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f8:	6939      	ldr	r1, [r7, #16]
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f7fe ff98 	bl	8003530 <_ftoa>
 8004600:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	e13e      	b.n	8004888 <_vsnprintf+0x998>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b67      	cmp	r3, #103	; 0x67
 8004610:	d003      	beq.n	800461a <_vsnprintf+0x72a>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b47      	cmp	r3, #71	; 0x47
 8004618:	d103      	bne.n	8004622 <_vsnprintf+0x732>
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b45      	cmp	r3, #69	; 0x45
 8004628:	d003      	beq.n	8004632 <_vsnprintf+0x742>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b47      	cmp	r3, #71	; 0x47
 8004630:	d103      	bne.n	800463a <_vsnprintf+0x74a>
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	f043 0320 	orr.w	r3, r3, #32
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800463e:	3307      	adds	r3, #7
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	f103 0208 	add.w	r2, r3, #8
 8004648:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800464c:	ed93 7b00 	vldr	d7, [r3]
 8004650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	eeb0 0a47 	vmov.f32	s0, s14
 8004660:	eef0 0a67 	vmov.f32	s1, s15
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f7ff f9b8 	bl	80039e0 <_etoa>
 8004670:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3301      	adds	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	e106      	b.n	8004888 <_vsnprintf+0x998>
 800467a:	2301      	movs	r3, #1
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
 800467e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <_vsnprintf+0x7b6>
 8004688:	e007      	b.n	800469a <_vsnprintf+0x7aa>
 800468a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800468c:	1c53      	adds	r3, r2, #1
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004690:	697c      	ldr	r4, [r7, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6939      	ldr	r1, [r7, #16]
 8004696:	2020      	movs	r0, #32
 8004698:	47a0      	blx	r4
 800469a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	647a      	str	r2, [r7, #68]	; 0x44
 80046a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d8f1      	bhi.n	800468a <_vsnprintf+0x79a>
 80046a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b2d8      	uxtb	r0, r3
 80046b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b6:	1c53      	adds	r3, r2, #1
 80046b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ba:	697c      	ldr	r4, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	47a0      	blx	r4
 80046c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00e      	beq.n	80046ea <_vsnprintf+0x7fa>
 80046cc:	e007      	b.n	80046de <_vsnprintf+0x7ee>
 80046ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d0:	1c53      	adds	r3, r2, #1
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	697c      	ldr	r4, [r7, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	2020      	movs	r0, #32
 80046dc:	47a0      	blx	r4
 80046de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	647a      	str	r2, [r7, #68]	; 0x44
 80046e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d8f1      	bhi.n	80046ce <_vsnprintf+0x7de>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	e0ca      	b.n	8004888 <_vsnprintf+0x998>
 80046f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <_vsnprintf+0x81a>
 8004706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004708:	e001      	b.n	800470e <_vsnprintf+0x81e>
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	4619      	mov	r1, r3
 8004710:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004712:	f7fe fcb6 	bl	8003082 <_strnlen_s>
 8004716:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <_vsnprintf+0x83e>
 8004722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004726:	4293      	cmp	r3, r2
 8004728:	bf28      	it	cs
 800472a:	4613      	movcs	r3, r2
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11a      	bne.n	800476e <_vsnprintf+0x87e>
 8004738:	e007      	b.n	800474a <_vsnprintf+0x85a>
 800473a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473c:	1c53      	adds	r3, r2, #1
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	697c      	ldr	r4, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6939      	ldr	r1, [r7, #16]
 8004746:	2020      	movs	r0, #32
 8004748:	47a0      	blx	r4
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004752:	429a      	cmp	r2, r3
 8004754:	d8f1      	bhi.n	800473a <_vsnprintf+0x84a>
 8004756:	e00a      	b.n	800476e <_vsnprintf+0x87e>
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	643a      	str	r2, [r7, #64]	; 0x40
 800475e:	7818      	ldrb	r0, [r3, #0]
 8004760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004762:	1c53      	adds	r3, r2, #1
 8004764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004766:	697c      	ldr	r4, [r7, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	47a0      	blx	r4
 800476e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <_vsnprintf+0x89a>
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0eb      	beq.n	8004758 <_vsnprintf+0x868>
 8004780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004782:	1e5a      	subs	r2, r3, #1
 8004784:	657a      	str	r2, [r7, #84]	; 0x54
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e6      	bne.n	8004758 <_vsnprintf+0x868>
 800478a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <_vsnprintf+0x8c2>
 8004794:	e007      	b.n	80047a6 <_vsnprintf+0x8b6>
 8004796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004798:	1c53      	adds	r3, r2, #1
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	697c      	ldr	r4, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6939      	ldr	r1, [r7, #16]
 80047a2:	2020      	movs	r0, #32
 80047a4:	47a0      	blx	r4
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d8f1      	bhi.n	8004796 <_vsnprintf+0x8a6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3301      	adds	r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	e066      	b.n	8004888 <_vsnprintf+0x998>
 80047ba:	2308      	movs	r3, #8
 80047bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80047be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80047c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d023      	beq.n	800481c <_vsnprintf+0x92c>
 80047d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	603a      	str	r2, [r7, #0]
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ea:	9308      	str	r3, [sp, #32]
 80047ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ee:	9307      	str	r3, [sp, #28]
 80047f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f2:	9306      	str	r3, [sp, #24]
 80047f4:	f04f 0210 	mov.w	r2, #16
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004800:	2300      	movs	r3, #0
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004808:	e9cd 3400 	strd	r3, r4, [sp]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004810:	6939      	ldr	r1, [r7, #16]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7fe fe1f 	bl	8003456 <_ntoa_long_long>
 8004818:	64f8      	str	r0, [r7, #76]	; 0x4c
 800481a:	e018      	b.n	800484e <_vsnprintf+0x95e>
 800481c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004820:	1d1a      	adds	r2, r3, #4
 8004822:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482c:	9305      	str	r3, [sp, #20]
 800482e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	2310      	movs	r3, #16
 8004838:	9302      	str	r3, [sp, #8]
 800483a:	2300      	movs	r3, #0
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	9200      	str	r2, [sp, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004844:	6939      	ldr	r1, [r7, #16]
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7fe fd9f 	bl	800338a <_ntoa_long>
 800484c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3301      	adds	r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	e018      	b.n	8004888 <_vsnprintf+0x998>
 8004856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004858:	1c53      	adds	r3, r2, #1
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	697c      	ldr	r4, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	2025      	movs	r0, #37	; 0x25
 8004864:	47a0      	blx	r4
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	e00c      	b.n	8004888 <_vsnprintf+0x998>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	7818      	ldrb	r0, [r3, #0]
 8004872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004874:	1c53      	adds	r3, r2, #1
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004878:	697c      	ldr	r4, [r7, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6939      	ldr	r1, [r7, #16]
 800487e:	47a0      	blx	r4
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3301      	adds	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	bf00      	nop
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f ab41 	bne.w	8003f14 <_vsnprintf+0x24>
 8004892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <_vsnprintf+0x9b0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	e000      	b.n	80048a2 <_vsnprintf+0x9b2>
 80048a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a2:	697c      	ldr	r4, [r7, #20]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6939      	ldr	r1, [r7, #16]
 80048a8:	2000      	movs	r0, #0
 80048aa:	47a0      	blx	r4
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	4618      	mov	r0, r3
 80048b0:	3764      	adds	r7, #100	; 0x64
 80048b2:	46bd      	mov	sp, r7
 80048b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048b8 <sprintf_>:
 80048b8:	b40e      	push	{r1, r2, r3}
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b087      	sub	sp, #28
 80048be:	af02      	add	r7, sp, #8
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	f107 0320 	add.w	r3, r7, #32
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4805      	ldr	r0, [pc, #20]	; (80048ec <sprintf_+0x34>)
 80048d6:	f7ff fb0b 	bl	8003ef0 <_vsnprintf>
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e8:	b003      	add	sp, #12
 80048ea:	4770      	bx	lr
 80048ec:	08003039 	.word	0x08003039

080048f0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <MX_SPI3_Init+0x64>)
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <MX_SPI3_Init+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80048fa:	4b16      	ldr	r3, [pc, #88]	; (8004954 <MX_SPI3_Init+0x64>)
 80048fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004900:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <MX_SPI3_Init+0x64>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <MX_SPI3_Init+0x64>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800490e:	4b11      	ldr	r3, [pc, #68]	; (8004954 <MX_SPI3_Init+0x64>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <MX_SPI3_Init+0x64>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_SPI3_Init+0x64>)
 800491c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004920:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <MX_SPI3_Init+0x64>)
 8004924:	2200      	movs	r2, #0
 8004926:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <MX_SPI3_Init+0x64>)
 800492a:	2200      	movs	r2, #0
 800492c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <MX_SPI3_Init+0x64>)
 8004930:	2200      	movs	r2, #0
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <MX_SPI3_Init+0x64>)
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_SPI3_Init+0x64>)
 800493c:	220a      	movs	r2, #10
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004940:	4804      	ldr	r0, [pc, #16]	; (8004954 <MX_SPI3_Init+0x64>)
 8004942:	f002 fde3 	bl	800750c <HAL_SPI_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800494c:	f7fe f904 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200007d4 	.word	0x200007d4
 8004958:	40003c00 	.word	0x40003c00

0800495c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <HAL_SPI_MspInit+0x84>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d12c      	bne.n	80049d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 8004988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498c:	6413      	str	r3, [r2, #64]	; 0x40
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	6313      	str	r3, [r2, #48]	; 0x30
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_SPI_MspInit+0x88>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	2302      	movs	r3, #2
 80049be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c4:	2303      	movs	r3, #3
 80049c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049c8:	2306      	movs	r3, #6
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	4619      	mov	r1, r3
 80049d2:	4805      	ldr	r0, [pc, #20]	; (80049e8 <HAL_SPI_MspInit+0x8c>)
 80049d4:	f000 fba0 	bl	8005118 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80049d8:	bf00      	nop
 80049da:	3728      	adds	r7, #40	; 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40003c00 	.word	0x40003c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40020800 	.word	0x40020800

080049ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_MspInit+0x54>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <HAL_MspInit+0x54>)
 80049fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a00:	6453      	str	r3, [r2, #68]	; 0x44
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <HAL_MspInit+0x54>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_MspInit+0x54>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <HAL_MspInit+0x54>)
 8004a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_MspInit+0x54>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	210f      	movs	r1, #15
 8004a2e:	f06f 0001 	mvn.w	r0, #1
 8004a32:	f000 fb47 	bl	80050c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800

08004a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08c      	sub	sp, #48	; 0x30
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8004a54:	2200      	movs	r2, #0
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	2018      	movs	r0, #24
 8004a5a:	f000 fb33 	bl	80050c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a5e:	2018      	movs	r0, #24
 8004a60:	f000 fb4c 	bl	80050fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_InitTick+0xa0>)
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_InitTick+0xa0>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a72:	6453      	str	r3, [r2, #68]	; 0x44
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_InitTick+0xa0>)
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a80:	f107 0210 	add.w	r2, r7, #16
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 fd0c 	bl	80074a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004a90:	f002 fcf6 	bl	8007480 <HAL_RCC_GetPCLK2Freq>
 8004a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_InitTick+0xa4>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0c9b      	lsrs	r3, r3, #18
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <HAL_InitTick+0xa8>)
 8004aa6:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <HAL_InitTick+0xac>)
 8004aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_InitTick+0xa8>)
 8004aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ab0:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <HAL_InitTick+0xa8>)
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_InitTick+0xa8>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_InitTick+0xa8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8004ac4:	4809      	ldr	r0, [pc, #36]	; (8004aec <HAL_InitTick+0xa8>)
 8004ac6:	f003 f961 	bl	8007d8c <HAL_TIM_Base_Init>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8004ad0:	4806      	ldr	r0, [pc, #24]	; (8004aec <HAL_InitTick+0xa8>)
 8004ad2:	f003 f9b5 	bl	8007e40 <HAL_TIM_Base_Start_IT>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	e000      	b.n	8004adc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3730      	adds	r7, #48	; 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	431bde83 	.word	0x431bde83
 8004aec:	2000082c 	.word	0x2000082c
 8004af0:	40014000 	.word	0x40014000

08004af4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <SDTimer_Handler+0x40>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <SDTimer_Handler+0x1c>
    Timer1--;
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <SDTimer_Handler+0x40>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <SDTimer_Handler+0x40>)
 8004b0e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <SDTimer_Handler+0x44>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <SDTimer_Handler+0x34>
    Timer2--;
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <SDTimer_Handler+0x44>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SDTimer_Handler+0x44>)
 8004b26:	701a      	strb	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000875 	.word	0x20000875
 8004b38:	20000876 	.word	0x20000876

08004b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <NMI_Handler+0x4>

08004b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b46:	e7fe      	b.n	8004b46 <HardFault_Handler+0x4>

08004b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <MemManage_Handler+0x4>

08004b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <BusFault_Handler+0x4>

08004b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <UsageFault_Handler+0x4>

08004b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
FatFsCnt++;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8004b78:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt >= 10)
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d904      	bls.n	8004b8e <TIM1_BRK_TIM9_IRQHandler+0x26>
		{
		  FatFsCnt = 0;
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
		  SDTimer_Handler();
 8004b8a:	f7ff ffb3 	bl	8004af4 <SDTimer_Handler>
		}
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004b8e:	4803      	ldr	r0, [pc, #12]	; (8004b9c <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8004b90:	f003 f9b8 	bl	8007f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000874 	.word	0x20000874
 8004b9c:	2000082c 	.word	0x2000082c

08004ba0 <_getpid>:
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_kill>:
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	f00a f82f 	bl	800ec1c <__errno>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2216      	movs	r2, #22
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_exit>:
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ffe7 	bl	8004bb0 <_kill>
 8004be2:	e7fe      	b.n	8004be2 <_exit+0x12>

08004be4 <_read>:
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e00a      	b.n	8004c0c <_read+0x28>
 8004bf6:	f3af 8000 	nop.w
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	60ba      	str	r2, [r7, #8]
 8004c02:	b2ca      	uxtb	r2, r1
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dbf0      	blt.n	8004bf6 <_read+0x12>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_write>:
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e009      	b.n	8004c44 <_write+0x26>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	60ba      	str	r2, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f3af 8000 	nop.w
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3301      	adds	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	dbf1      	blt.n	8004c30 <_write+0x12>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <_close>:
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_fstat>:
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	2300      	movs	r3, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <_isatty>:
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	2301      	movs	r3, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_lseek>:
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <_sbrk>:
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <_sbrk+0x5c>)
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <_sbrk+0x60>)
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <_sbrk+0x64>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <_sbrk+0x22>
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <_sbrk+0x64>)
 8004cde:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <_sbrk+0x68>)
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <_sbrk+0x64>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d207      	bcs.n	8004d00 <_sbrk+0x40>
 8004cf0:	f009 ff94 	bl	800ec1c <__errno>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	220c      	movs	r2, #12
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfe:	e009      	b.n	8004d14 <_sbrk+0x54>
 8004d00:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <_sbrk+0x64>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <_sbrk+0x64>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <_sbrk+0x64>)
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20018000 	.word	0x20018000
 8004d20:	00000400 	.word	0x00000400
 8004d24:	20000878 	.word	0x20000878
 8004d28:	20006540 	.word	0x20006540

08004d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <SystemInit+0x20>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <SystemInit+0x20>)
 8004d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <MX_USART2_UART_Init+0x50>)
 8004d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d76:	220c      	movs	r2, #12
 8004d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d86:	4805      	ldr	r0, [pc, #20]	; (8004d9c <MX_USART2_UART_Init+0x4c>)
 8004d88:	f003 fa80 	bl	800828c <HAL_UART_Init>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d92:	f7fd fee1 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000087c 	.word	0x2000087c
 8004da0:	40004400 	.word	0x40004400

08004da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_UART_MspInit+0x84>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12b      	bne.n	8004e1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004dfe:	230c      	movs	r3, #12
 8004e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e02:	2302      	movs	r3, #2
 8004e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e0e:	2307      	movs	r3, #7
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e12:	f107 0314 	add.w	r3, r7, #20
 8004e16:	4619      	mov	r1, r3
 8004e18:	4805      	ldr	r0, [pc, #20]	; (8004e30 <HAL_UART_MspInit+0x8c>)
 8004e1a:	f000 f97d 	bl	8005118 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40020000 	.word	0x40020000

08004e34 <Reset_Handler>:
 8004e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e6c <LoopFillZerobss+0x12>
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <LoopFillZerobss+0x16>)
 8004e3a:	490e      	ldr	r1, [pc, #56]	; (8004e74 <LoopFillZerobss+0x1a>)
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <LoopFillZerobss+0x1e>)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e002      	b.n	8004e48 <LoopCopyDataInit>

08004e42 <CopyDataInit>:
 8004e42:	58d4      	ldr	r4, [r2, r3]
 8004e44:	50c4      	str	r4, [r0, r3]
 8004e46:	3304      	adds	r3, #4

08004e48 <LoopCopyDataInit>:
 8004e48:	18c4      	adds	r4, r0, r3
 8004e4a:	428c      	cmp	r4, r1
 8004e4c:	d3f9      	bcc.n	8004e42 <CopyDataInit>
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <LoopFillZerobss+0x22>)
 8004e50:	4c0b      	ldr	r4, [pc, #44]	; (8004e80 <LoopFillZerobss+0x26>)
 8004e52:	2300      	movs	r3, #0
 8004e54:	e001      	b.n	8004e5a <LoopFillZerobss>

08004e56 <FillZerobss>:
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	3204      	adds	r2, #4

08004e5a <LoopFillZerobss>:
 8004e5a:	42a2      	cmp	r2, r4
 8004e5c:	d3fb      	bcc.n	8004e56 <FillZerobss>
 8004e5e:	f7ff ff65 	bl	8004d2c <SystemInit>
 8004e62:	f009 ffd7 	bl	800ee14 <__libc_init_array>
 8004e66:	f7fd fd6d 	bl	8002944 <main>
 8004e6a:	4770      	bx	lr
 8004e6c:	20018000 	.word	0x20018000
 8004e70:	20000000 	.word	0x20000000
 8004e74:	200001f8 	.word	0x200001f8
 8004e78:	08012894 	.word	0x08012894
 8004e7c:	200001f8 	.word	0x200001f8
 8004e80:	20006540 	.word	0x20006540

08004e84 <ADC_IRQHandler>:
 8004e84:	e7fe      	b.n	8004e84 <ADC_IRQHandler>
	...

08004e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <HAL_Init+0x40>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <HAL_Init+0x40>)
 8004e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_Init+0x40>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <HAL_Init+0x40>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <HAL_Init+0x40>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_Init+0x40>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	f000 f8fc 	bl	80050ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eb6:	200f      	movs	r0, #15
 8004eb8:	f7ff fdc4 	bl	8004a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ebc:	f7ff fd96 	bl	80049ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_IncTick+0x20>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_IncTick+0x24>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <HAL_IncTick+0x24>)
 8004ede:	6013      	str	r3, [r2, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	200008c0 	.word	0x200008c0

08004ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_GetTick+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	200008c0 	.word	0x200008c0

08004f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7ff ffee 	bl	8004ef4 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d005      	beq.n	8004f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_Delay+0x44>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f32:	bf00      	nop
 8004f34:	f7ff ffde 	bl	8004ef4 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d8f7      	bhi.n	8004f34 <HAL_Delay+0x28>
  {
  }
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <__NVIC_SetPriorityGrouping+0x44>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f70:	4013      	ands	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f86:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <__NVIC_SetPriorityGrouping+0x44>)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	60d3      	str	r3, [r2, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	f003 0307 	and.w	r3, r3, #7
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	db0b      	blt.n	8004fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	4907      	ldr	r1, [pc, #28]	; (8004ff0 <__NVIC_EnableIRQ+0x38>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2001      	movs	r0, #1
 8004fda:	fa00 f202 	lsl.w	r2, r0, r2
 8004fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e000e100 	.word	0xe000e100

08004ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db0a      	blt.n	800501e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	490c      	ldr	r1, [pc, #48]	; (8005040 <__NVIC_SetPriority+0x4c>)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	0112      	lsls	r2, r2, #4
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	440b      	add	r3, r1
 8005018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800501c:	e00a      	b.n	8005034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	4908      	ldr	r1, [pc, #32]	; (8005044 <__NVIC_SetPriority+0x50>)
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	3b04      	subs	r3, #4
 800502c:	0112      	lsls	r2, r2, #4
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	440b      	add	r3, r1
 8005032:	761a      	strb	r2, [r3, #24]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000e100 	.word	0xe000e100
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	; 0x24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f1c3 0307 	rsb	r3, r3, #7
 8005062:	2b04      	cmp	r3, #4
 8005064:	bf28      	it	cs
 8005066:	2304      	movcs	r3, #4
 8005068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	3304      	adds	r3, #4
 800506e:	2b06      	cmp	r3, #6
 8005070:	d902      	bls.n	8005078 <NVIC_EncodePriority+0x30>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3b03      	subs	r3, #3
 8005076:	e000      	b.n	800507a <NVIC_EncodePriority+0x32>
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	401a      	ands	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005090:	f04f 31ff 	mov.w	r1, #4294967295
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	43d9      	mvns	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a0:	4313      	orrs	r3, r2
         );
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3724      	adds	r7, #36	; 0x24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff ff4c 	bl	8004f54 <__NVIC_SetPriorityGrouping>
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050d6:	f7ff ff61 	bl	8004f9c <__NVIC_GetPriorityGrouping>
 80050da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	6978      	ldr	r0, [r7, #20]
 80050e2:	f7ff ffb1 	bl	8005048 <NVIC_EncodePriority>
 80050e6:	4602      	mov	r2, r0
 80050e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff80 	bl	8004ff4 <__NVIC_SetPriority>
}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff54 	bl	8004fb8 <__NVIC_EnableIRQ>
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	e159      	b.n	80053e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005134:	2201      	movs	r2, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	f040 8148 	bne.w	80053e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d005      	beq.n	800516a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005166:	2b02      	cmp	r3, #2
 8005168:	d130      	bne.n	80051cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	2203      	movs	r2, #3
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a0:	2201      	movs	r2, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 0201 	and.w	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d017      	beq.n	8005208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d123      	bne.n	800525c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	08da      	lsrs	r2, r3, #3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3208      	adds	r2, #8
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	220f      	movs	r2, #15
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	08da      	lsrs	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3208      	adds	r2, #8
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	2203      	movs	r2, #3
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0203 	and.w	r2, r3, #3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80a2 	beq.w	80053e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_GPIO_Init+0x2e8>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	4a56      	ldr	r2, [pc, #344]	; (8005400 <HAL_GPIO_Init+0x2e8>)
 80052a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ac:	6453      	str	r3, [r2, #68]	; 0x44
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <HAL_GPIO_Init+0x2e8>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ba:	4a52      	ldr	r2, [pc, #328]	; (8005404 <HAL_GPIO_Init+0x2ec>)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	3302      	adds	r3, #2
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a49      	ldr	r2, [pc, #292]	; (8005408 <HAL_GPIO_Init+0x2f0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d019      	beq.n	800531a <HAL_GPIO_Init+0x202>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a48      	ldr	r2, [pc, #288]	; (800540c <HAL_GPIO_Init+0x2f4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_GPIO_Init+0x1fe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a47      	ldr	r2, [pc, #284]	; (8005410 <HAL_GPIO_Init+0x2f8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00d      	beq.n	8005312 <HAL_GPIO_Init+0x1fa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a46      	ldr	r2, [pc, #280]	; (8005414 <HAL_GPIO_Init+0x2fc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_GPIO_Init+0x1f6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a45      	ldr	r2, [pc, #276]	; (8005418 <HAL_GPIO_Init+0x300>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_GPIO_Init+0x1f2>
 8005306:	2304      	movs	r3, #4
 8005308:	e008      	b.n	800531c <HAL_GPIO_Init+0x204>
 800530a:	2307      	movs	r3, #7
 800530c:	e006      	b.n	800531c <HAL_GPIO_Init+0x204>
 800530e:	2303      	movs	r3, #3
 8005310:	e004      	b.n	800531c <HAL_GPIO_Init+0x204>
 8005312:	2302      	movs	r3, #2
 8005314:	e002      	b.n	800531c <HAL_GPIO_Init+0x204>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_GPIO_Init+0x204>
 800531a:	2300      	movs	r3, #0
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	f002 0203 	and.w	r2, r2, #3
 8005322:	0092      	lsls	r2, r2, #2
 8005324:	4093      	lsls	r3, r2
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800532c:	4935      	ldr	r1, [pc, #212]	; (8005404 <HAL_GPIO_Init+0x2ec>)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	3302      	adds	r3, #2
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800533a:	4b38      	ldr	r3, [pc, #224]	; (800541c <HAL_GPIO_Init+0x304>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800535e:	4a2f      	ldr	r2, [pc, #188]	; (800541c <HAL_GPIO_Init+0x304>)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005364:	4b2d      	ldr	r3, [pc, #180]	; (800541c <HAL_GPIO_Init+0x304>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005388:	4a24      	ldr	r2, [pc, #144]	; (800541c <HAL_GPIO_Init+0x304>)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800538e:	4b23      	ldr	r3, [pc, #140]	; (800541c <HAL_GPIO_Init+0x304>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <HAL_GPIO_Init+0x304>)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053b8:	4b18      	ldr	r3, [pc, #96]	; (800541c <HAL_GPIO_Init+0x304>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053dc:	4a0f      	ldr	r2, [pc, #60]	; (800541c <HAL_GPIO_Init+0x304>)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	f67f aea2 	bls.w	8005134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
 8005404:	40013800 	.word	0x40013800
 8005408:	40020000 	.word	0x40020000
 800540c:	40020400 	.word	0x40020400
 8005410:	40020800 	.word	0x40020800
 8005414:	40020c00 	.word	0x40020c00
 8005418:	40021000 	.word	0x40021000
 800541c:	40013c00 	.word	0x40013c00

08005420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
 800542c:	4613      	mov	r3, r2
 800542e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005430:	787b      	ldrb	r3, [r7, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800543c:	e003      	b.n	8005446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	041a      	lsls	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	619a      	str	r2, [r3, #24]
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e12b      	b.n	80056be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd f9d4 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054b8:	f001 ffce 	bl	8007458 <HAL_RCC_GetPCLK1Freq>
 80054bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4a81      	ldr	r2, [pc, #516]	; (80056c8 <HAL_I2C_Init+0x274>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d807      	bhi.n	80054d8 <HAL_I2C_Init+0x84>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a80      	ldr	r2, [pc, #512]	; (80056cc <HAL_I2C_Init+0x278>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bf94      	ite	ls
 80054d0:	2301      	movls	r3, #1
 80054d2:	2300      	movhi	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	e006      	b.n	80054e6 <HAL_I2C_Init+0x92>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a7d      	ldr	r2, [pc, #500]	; (80056d0 <HAL_I2C_Init+0x27c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	bf94      	ite	ls
 80054e0:	2301      	movls	r3, #1
 80054e2:	2300      	movhi	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0e7      	b.n	80056be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a78      	ldr	r2, [pc, #480]	; (80056d4 <HAL_I2C_Init+0x280>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0c9b      	lsrs	r3, r3, #18
 80054f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4a6a      	ldr	r2, [pc, #424]	; (80056c8 <HAL_I2C_Init+0x274>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d802      	bhi.n	8005528 <HAL_I2C_Init+0xd4>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3301      	adds	r3, #1
 8005526:	e009      	b.n	800553c <HAL_I2C_Init+0xe8>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	4a69      	ldr	r2, [pc, #420]	; (80056d8 <HAL_I2C_Init+0x284>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	099b      	lsrs	r3, r3, #6
 800553a:	3301      	adds	r3, #1
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	430b      	orrs	r3, r1
 8005542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800554e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	495c      	ldr	r1, [pc, #368]	; (80056c8 <HAL_I2C_Init+0x274>)
 8005558:	428b      	cmp	r3, r1
 800555a:	d819      	bhi.n	8005590 <HAL_I2C_Init+0x13c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1e59      	subs	r1, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	fbb1 f3f3 	udiv	r3, r1, r3
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005570:	400b      	ands	r3, r1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_I2C_Init+0x138>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1e59      	subs	r1, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fbb1 f3f3 	udiv	r3, r1, r3
 8005584:	3301      	adds	r3, #1
 8005586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558a:	e051      	b.n	8005630 <HAL_I2C_Init+0x1dc>
 800558c:	2304      	movs	r3, #4
 800558e:	e04f      	b.n	8005630 <HAL_I2C_Init+0x1dc>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d111      	bne.n	80055bc <HAL_I2C_Init+0x168>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1e58      	subs	r0, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	440b      	add	r3, r1
 80055a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055aa:	3301      	adds	r3, #1
 80055ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e012      	b.n	80055e2 <HAL_I2C_Init+0x18e>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	0099      	lsls	r1, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_I2C_Init+0x196>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e022      	b.n	8005630 <HAL_I2C_Init+0x1dc>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10e      	bne.n	8005610 <HAL_I2C_Init+0x1bc>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1e58      	subs	r0, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6859      	ldr	r1, [r3, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	440b      	add	r3, r1
 8005600:	fbb0 f3f3 	udiv	r3, r0, r3
 8005604:	3301      	adds	r3, #1
 8005606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560e:	e00f      	b.n	8005630 <HAL_I2C_Init+0x1dc>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1e58      	subs	r0, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	0099      	lsls	r1, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	fbb0 f3f3 	udiv	r3, r0, r3
 8005626:	3301      	adds	r3, #1
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	6809      	ldr	r1, [r1, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800565e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6911      	ldr	r1, [r2, #16]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	4311      	orrs	r1, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	430b      	orrs	r3, r1
 8005672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	000186a0 	.word	0x000186a0
 80056cc:	001e847f 	.word	0x001e847f
 80056d0:	003d08ff 	.word	0x003d08ff
 80056d4:	431bde83 	.word	0x431bde83
 80056d8:	10624dd3 	.word	0x10624dd3

080056dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	461a      	mov	r2, r3
 80056e8:	460b      	mov	r3, r1
 80056ea:	817b      	strh	r3, [r7, #10]
 80056ec:	4613      	mov	r3, r2
 80056ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056f0:	f7ff fc00 	bl	8004ef4 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	f040 80e0 	bne.w	80058c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2319      	movs	r3, #25
 800570a:	2201      	movs	r2, #1
 800570c:	4970      	ldr	r1, [pc, #448]	; (80058d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f001 f894 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
 800571c:	e0d3      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_I2C_Master_Transmit+0x50>
 8005728:	2302      	movs	r3, #2
 800572a:	e0cc      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d007      	beq.n	8005752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2221      	movs	r2, #33	; 0x21
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2210      	movs	r2, #16
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	893a      	ldrh	r2, [r7, #8]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a50      	ldr	r2, [pc, #320]	; (80058d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005794:	8979      	ldrh	r1, [r7, #10]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fe16 	bl	80063cc <I2C_MasterRequestWrite>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e08d      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057c0:	e066      	b.n	8005890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f001 f90e 	bl	80069e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d107      	bne.n	80057ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e06b      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d11b      	bne.n	8005864 <HAL_I2C_Master_Transmit+0x188>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	6a39      	ldr	r1, [r7, #32]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 f8fe 	bl	8006a6a <I2C_WaitOnBTFFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2b04      	cmp	r3, #4
 800587a:	d107      	bne.n	800588c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01a      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d194      	bne.n	80057c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	00100002 	.word	0x00100002
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	461a      	mov	r2, r3
 80058e4:	460b      	mov	r3, r1
 80058e6:	817b      	strh	r3, [r7, #10]
 80058e8:	4613      	mov	r3, r2
 80058ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ec:	f7ff fb02 	bl	8004ef4 <HAL_GetTick>
 80058f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	f040 820b 	bne.w	8005d16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	2319      	movs	r3, #25
 8005906:	2201      	movs	r2, #1
 8005908:	497c      	ldr	r1, [pc, #496]	; (8005afc <HAL_I2C_Master_Receive+0x224>)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 ff96 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e1fe      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_I2C_Master_Receive+0x50>
 8005924:	2302      	movs	r3, #2
 8005926:	e1f7      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b01      	cmp	r3, #1
 800593c:	d007      	beq.n	800594e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2222      	movs	r2, #34	; 0x22
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2210      	movs	r2, #16
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	893a      	ldrh	r2, [r7, #8]
 800597e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_I2C_Master_Receive+0x228>)
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fd9a 	bl	80064d0 <I2C_MasterRequestRead>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e1b8      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d113      	bne.n	80059d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ae:	2300      	movs	r3, #0
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e18c      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d11b      	bne.n	8005a16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e16c      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d11b      	bne.n	8005a56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	e14c      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a7c:	e138      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	f200 80f1 	bhi.w	8005c6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d123      	bne.n	8005ad8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f001 f829 	bl	8006aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e139      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ad6:	e10b      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d14e      	bne.n	8005b7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4906      	ldr	r1, [pc, #24]	; (8005b04 <HAL_I2C_Master_Receive+0x22c>)
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fea6 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e10e      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
 8005afa:	bf00      	nop
 8005afc:	00100002 	.word	0x00100002
 8005b00:	ffff0000 	.word	0xffff0000
 8005b04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b7c:	e0b8      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	2200      	movs	r2, #0
 8005b86:	4966      	ldr	r1, [pc, #408]	; (8005d20 <HAL_I2C_Master_Receive+0x448>)
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fe57 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0bf      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	494f      	ldr	r1, [pc, #316]	; (8005d20 <HAL_I2C_Master_Receive+0x448>)
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fe29 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e091      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c68:	e042      	b.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 ff3c 	bl	8006aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e04c      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d118      	bne.n	8005cf0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f aec2 	bne.w	8005a7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	00010004 	.word	0x00010004

08005d24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	817b      	strh	r3, [r7, #10]
 8005d36:	460b      	mov	r3, r1
 8005d38:	813b      	strh	r3, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d3e:	f7ff f8d9 	bl	8004ef4 <HAL_GetTick>
 8005d42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	f040 8208 	bne.w	8006162 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	2319      	movs	r3, #25
 8005d58:	2201      	movs	r2, #1
 8005d5a:	497b      	ldr	r1, [pc, #492]	; (8005f48 <HAL_I2C_Mem_Read+0x224>)
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fd6d 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e1fb      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_I2C_Mem_Read+0x56>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e1f4      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d007      	beq.n	8005da0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2222      	movs	r2, #34	; 0x22
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a5b      	ldr	r2, [pc, #364]	; (8005f4c <HAL_I2C_Mem_Read+0x228>)
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005de2:	88f8      	ldrh	r0, [r7, #6]
 8005de4:	893a      	ldrh	r2, [r7, #8]
 8005de6:	8979      	ldrh	r1, [r7, #10]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fc3a 	bl	800666c <I2C_RequestMemoryRead>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e1b0      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d113      	bne.n	8005e32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e184      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d11b      	bne.n	8005e72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e164      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d11b      	bne.n	8005eb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	e144      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec8:	e138      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	f200 80f1 	bhi.w	80060b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d123      	bne.n	8005f24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fe03 	bl	8006aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e139      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f22:	e10b      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d14e      	bne.n	8005fca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	2200      	movs	r2, #0
 8005f34:	4906      	ldr	r1, [pc, #24]	; (8005f50 <HAL_I2C_Mem_Read+0x22c>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fc80 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e10e      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
 8005f46:	bf00      	nop
 8005f48:	00100002 	.word	0x00100002
 8005f4c:	ffff0000 	.word	0xffff0000
 8005f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc8:	e0b8      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4966      	ldr	r1, [pc, #408]	; (800616c <HAL_I2C_Mem_Read+0x448>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fc31 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0bf      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2200      	movs	r2, #0
 800602e:	494f      	ldr	r1, [pc, #316]	; (800616c <HAL_I2C_Mem_Read+0x448>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fc03 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e091      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060b4:	e042      	b.n	800613c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fd16 	bl	8006aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e04c      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d118      	bne.n	800613c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f aec2 	bne.w	8005eca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3728      	adds	r7, #40	; 0x28
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00010004 	.word	0x00010004

08006170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	460b      	mov	r3, r1
 800617e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006180:	f7fe feb8 	bl	8004ef4 <HAL_GetTick>
 8006184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b20      	cmp	r3, #32
 8006194:	f040 8111 	bne.w	80063ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2319      	movs	r3, #25
 800619e:	2201      	movs	r2, #1
 80061a0:	4988      	ldr	r1, [pc, #544]	; (80063c4 <HAL_I2C_IsDeviceReady+0x254>)
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fb4a 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80061ae:	2302      	movs	r3, #2
 80061b0:	e104      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_I2C_IsDeviceReady+0x50>
 80061bc:	2302      	movs	r3, #2
 80061be:	e0fd      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d007      	beq.n	80061e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2224      	movs	r2, #36	; 0x24
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a70      	ldr	r2, [pc, #448]	; (80063c8 <HAL_I2C_IsDeviceReady+0x258>)
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fb08 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d103      	bne.n	800624a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0b6      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800625c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800625e:	f7fe fe49 	bl	8004ef4 <HAL_GetTick>
 8006262:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006292:	e025      	b.n	80062e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fe fe2e 	bl	8004ef4 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <HAL_I2C_IsDeviceReady+0x13a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	22a0      	movs	r2, #160	; 0xa0
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b02      	cmp	r3, #2
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2ba0      	cmp	r3, #160	; 0xa0
 80062ea:	d005      	beq.n	80062f8 <HAL_I2C_IsDeviceReady+0x188>
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_I2C_IsDeviceReady+0x188>
 80062f2:	7dbb      	ldrb	r3, [r7, #22]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0cd      	beq.n	8006294 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d129      	bne.n	8006362 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	2319      	movs	r3, #25
 800633a:	2201      	movs	r2, #1
 800633c:	4921      	ldr	r1, [pc, #132]	; (80063c4 <HAL_I2C_IsDeviceReady+0x254>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fa7c 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e036      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e02c      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800637a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2319      	movs	r3, #25
 8006382:	2201      	movs	r2, #1
 8006384:	490f      	ldr	r1, [pc, #60]	; (80063c4 <HAL_I2C_IsDeviceReady+0x254>)
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 fa58 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e012      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3301      	adds	r3, #1
 800639a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	f4ff af32 	bcc.w	800620a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	00100002 	.word	0x00100002
 80063c8:	ffff0000 	.word	0xffff0000

080063cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	460b      	mov	r3, r1
 80063da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d006      	beq.n	80063f6 <I2C_MasterRequestWrite+0x2a>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d003      	beq.n	80063f6 <I2C_MasterRequestWrite+0x2a>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063f4:	d108      	bne.n	8006408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e00b      	b.n	8006420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	2b12      	cmp	r3, #18
 800640e:	d107      	bne.n	8006420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800641e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fa05 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00d      	beq.n	8006454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006446:	d103      	bne.n	8006450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e035      	b.n	80064c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645c:	d108      	bne.n	8006470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800646c:	611a      	str	r2, [r3, #16]
 800646e:	e01b      	b.n	80064a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006470:	897b      	ldrh	r3, [r7, #10]
 8006472:	11db      	asrs	r3, r3, #7
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 0306 	and.w	r3, r3, #6
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f063 030f 	orn	r3, r3, #15
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	490e      	ldr	r1, [pc, #56]	; (80064c8 <I2C_MasterRequestWrite+0xfc>)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fa2b 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e010      	b.n	80064c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800649e:	897b      	ldrh	r3, [r7, #10]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4907      	ldr	r1, [pc, #28]	; (80064cc <I2C_MasterRequestWrite+0x100>)
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fa1b 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	00010008 	.word	0x00010008
 80064cc:	00010002 	.word	0x00010002

080064d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	460b      	mov	r3, r1
 80064de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d006      	beq.n	800650a <I2C_MasterRequestRead+0x3a>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d003      	beq.n	800650a <I2C_MasterRequestRead+0x3a>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006508:	d108      	bne.n	800651c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e00b      	b.n	8006534 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	2b11      	cmp	r3, #17
 8006522:	d107      	bne.n	8006534 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f97b 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	d103      	bne.n	8006564 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e079      	b.n	800665c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006570:	d108      	bne.n	8006584 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006572:	897b      	ldrh	r3, [r7, #10]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	611a      	str	r2, [r3, #16]
 8006582:	e05f      	b.n	8006644 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006584:	897b      	ldrh	r3, [r7, #10]
 8006586:	11db      	asrs	r3, r3, #7
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0306 	and.w	r3, r3, #6
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f063 030f 	orn	r3, r3, #15
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4930      	ldr	r1, [pc, #192]	; (8006664 <I2C_MasterRequestRead+0x194>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f9a1 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e054      	b.n	800665c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065b2:	897b      	ldrh	r3, [r7, #10]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4929      	ldr	r1, [pc, #164]	; (8006668 <I2C_MasterRequestRead+0x198>)
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f991 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e044      	b.n	800665c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f919 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	d103      	bne.n	8006628 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e017      	b.n	800665c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800662c:	897b      	ldrh	r3, [r7, #10]
 800662e:	11db      	asrs	r3, r3, #7
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0306 	and.w	r3, r3, #6
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f063 030e 	orn	r3, r3, #14
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <I2C_MasterRequestRead+0x198>)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f94d 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	00010008 	.word	0x00010008
 8006668:	00010002 	.word	0x00010002

0800666c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	4608      	mov	r0, r1
 8006676:	4611      	mov	r1, r2
 8006678:	461a      	mov	r2, r3
 800667a:	4603      	mov	r3, r0
 800667c:	817b      	strh	r3, [r7, #10]
 800667e:	460b      	mov	r3, r1
 8006680:	813b      	strh	r3, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006694:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f8c2 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066cc:	d103      	bne.n	80066d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e0aa      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	4952      	ldr	r1, [pc, #328]	; (8006838 <I2C_RequestMemoryRead+0x1cc>)
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f8fa 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e097      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f964 	bl	80069e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b04      	cmp	r3, #4
 800672c:	d107      	bne.n	800673e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e076      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d105      	bne.n	8006754 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006748:	893b      	ldrh	r3, [r7, #8]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	611a      	str	r2, [r3, #16]
 8006752:	e021      	b.n	8006798 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006754:	893b      	ldrh	r3, [r7, #8]
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	b29b      	uxth	r3, r3
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006764:	6a39      	ldr	r1, [r7, #32]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f93e 	bl	80069e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	2b04      	cmp	r3, #4
 8006778:	d107      	bne.n	800678a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e050      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	6a39      	ldr	r1, [r7, #32]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f923 	bl	80069e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d107      	bne.n	80067c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e035      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	2200      	movs	r2, #0
 80067dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f82b 	bl	800683c <I2C_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00d      	beq.n	8006808 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fa:	d103      	bne.n	8006804 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e013      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006808:	897b      	ldrh	r3, [r7, #10]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	4906      	ldr	r1, [pc, #24]	; (8006838 <I2C_RequestMemoryRead+0x1cc>)
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f863 	bl	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	00010002 	.word	0x00010002

0800683c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800684c:	e025      	b.n	800689a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d021      	beq.n	800689a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006856:	f7fe fb4d 	bl	8004ef4 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d116      	bne.n	800689a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f043 0220 	orr.w	r2, r3, #32
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e023      	b.n	80068e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10d      	bne.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	43da      	mvns	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4013      	ands	r3, r2
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	e00c      	b.n	80068da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	43da      	mvns	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d0b6      	beq.n	800684e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f8:	e051      	b.n	800699e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006908:	d123      	bne.n	8006952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006918:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006922:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f043 0204 	orr.w	r2, r3, #4
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e046      	b.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d021      	beq.n	800699e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fe facb 	bl	8004ef4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d116      	bne.n	800699e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e020      	b.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10c      	bne.n	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	43da      	mvns	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bf14      	ite	ne
 80069ba:	2301      	movne	r3, #1
 80069bc:	2300      	moveq	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	e00b      	b.n	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	43da      	mvns	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d18d      	bne.n	80068fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069f4:	e02d      	b.n	8006a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f8ce 	bl	8006b98 <I2C_IsAcknowledgeFailed>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e02d      	b.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d021      	beq.n	8006a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fe fa71 	bl	8004ef4 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d116      	bne.n	8006a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e007      	b.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d1ca      	bne.n	80069f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a76:	e02d      	b.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f88d 	bl	8006b98 <I2C_IsAcknowledgeFailed>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e02d      	b.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d021      	beq.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a90:	f7fe fa30 	bl	8004ef4 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e007      	b.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d1ca      	bne.n	8006a78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006af8:	e042      	b.n	8006b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d119      	bne.n	8006b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0210 	mvn.w	r2, #16
 8006b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e029      	b.n	8006b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3c:	f7fe f9da 	bl	8004ef4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d116      	bne.n	8006b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e007      	b.n	8006b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d1b5      	bne.n	8006afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bae:	d11b      	bne.n	8006be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	f043 0204 	orr.w	r2, r3, #4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
	...

08006bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e267      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d075      	beq.n	8006d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c16:	4b88      	ldr	r3, [pc, #544]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d00c      	beq.n	8006c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c22:	4b85      	ldr	r3, [pc, #532]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d112      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c2e:	4b82      	ldr	r3, [pc, #520]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c3a:	d10b      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c3c:	4b7e      	ldr	r3, [pc, #504]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d05b      	beq.n	8006d00 <HAL_RCC_OscConfig+0x108>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d157      	bne.n	8006d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e242      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d106      	bne.n	8006c6c <HAL_RCC_OscConfig+0x74>
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a75      	ldr	r2, [pc, #468]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e01d      	b.n	8006ca8 <HAL_RCC_OscConfig+0xb0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x98>
 8006c76:	4b70      	ldr	r3, [pc, #448]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a6f      	ldr	r2, [pc, #444]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4b6d      	ldr	r3, [pc, #436]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6c      	ldr	r2, [pc, #432]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0xb0>
 8006c90:	4b69      	ldr	r3, [pc, #420]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a68      	ldr	r2, [pc, #416]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4b66      	ldr	r3, [pc, #408]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a65      	ldr	r2, [pc, #404]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fe f920 	bl	8004ef4 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb8:	f7fe f91c 	bl	8004ef4 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e207      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cca:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0xc0>
 8006cd6:	e014      	b.n	8006d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd8:	f7fe f90c 	bl	8004ef4 <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce0:	f7fe f908 	bl	8004ef4 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	; 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e1f3      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf2:	4b51      	ldr	r3, [pc, #324]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <HAL_RCC_OscConfig+0xe8>
 8006cfe:	e000      	b.n	8006d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d063      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d1a:	4b47      	ldr	r3, [pc, #284]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d11c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d116      	bne.n	8006d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_RCC_OscConfig+0x152>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e1c7      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4a:	4b3b      	ldr	r3, [pc, #236]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4937      	ldr	r1, [pc, #220]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5e:	e03a      	b.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d68:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <HAL_RCC_OscConfig+0x244>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6e:	f7fe f8c1 	bl	8004ef4 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d76:	f7fe f8bd 	bl	8004ef4 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e1a8      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d88:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d94:	4b28      	ldr	r3, [pc, #160]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4925      	ldr	r1, [pc, #148]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	e015      	b.n	8006dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <HAL_RCC_OscConfig+0x244>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fe f8a0 	bl	8004ef4 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db8:	f7fe f89c 	bl	8004ef4 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e187      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dca:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d036      	beq.n	8006e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_RCC_OscConfig+0x248>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fe f880 	bl	8004ef4 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006df8:	f7fe f87c 	bl	8004ef4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e167      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0x200>
 8006e16:	e01b      	b.n	8006e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <HAL_RCC_OscConfig+0x248>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1e:	f7fe f869 	bl	8004ef4 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e24:	e00e      	b.n	8006e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e26:	f7fe f865 	bl	8004ef4 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d907      	bls.n	8006e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e150      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	42470000 	.word	0x42470000
 8006e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e44:	4b88      	ldr	r3, [pc, #544]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1ea      	bne.n	8006e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8097 	beq.w	8006f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e62:	4b81      	ldr	r3, [pc, #516]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	4b7d      	ldr	r3, [pc, #500]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	4a7c      	ldr	r2, [pc, #496]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e7e:	4b7a      	ldr	r3, [pc, #488]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8e:	4b77      	ldr	r3, [pc, #476]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d118      	bne.n	8006ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9a:	4b74      	ldr	r3, [pc, #464]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a73      	ldr	r2, [pc, #460]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea6:	f7fe f825 	bl	8004ef4 <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eae:	f7fe f821 	bl	8004ef4 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e10c      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec0:	4b6a      	ldr	r3, [pc, #424]	; (800706c <HAL_RCC_OscConfig+0x474>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x2ea>
 8006ed4:	4b64      	ldr	r3, [pc, #400]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a63      	ldr	r2, [pc, #396]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	e01c      	b.n	8006f1c <HAL_RCC_OscConfig+0x324>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCC_OscConfig+0x30c>
 8006eea:	4b5f      	ldr	r3, [pc, #380]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a5e      	ldr	r2, [pc, #376]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	4a5b      	ldr	r2, [pc, #364]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6713      	str	r3, [r2, #112]	; 0x70
 8006f02:	e00b      	b.n	8006f1c <HAL_RCC_OscConfig+0x324>
 8006f04:	4b58      	ldr	r3, [pc, #352]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a57      	ldr	r2, [pc, #348]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f10:	4b55      	ldr	r3, [pc, #340]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a54      	ldr	r2, [pc, #336]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f16:	f023 0304 	bic.w	r3, r3, #4
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d015      	beq.n	8006f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fd ffe6 	bl	8004ef4 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fd ffe2 	bl	8004ef4 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0cb      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f42:	4b49      	ldr	r3, [pc, #292]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RCC_OscConfig+0x334>
 8006f4e:	e014      	b.n	8006f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f50:	f7fd ffd0 	bl	8004ef4 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f58:	f7fd ffcc 	bl	8004ef4 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e0b5      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f6e:	4b3e      	ldr	r3, [pc, #248]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1ee      	bne.n	8006f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d105      	bne.n	8006f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f80:	4b39      	ldr	r3, [pc, #228]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	4a38      	ldr	r2, [pc, #224]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80a1 	beq.w	80070d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f96:	4b34      	ldr	r3, [pc, #208]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d05c      	beq.n	800705c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d141      	bne.n	800702e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fd ffa0 	bl	8004ef4 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fd ff9c 	bl	8004ef4 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e087      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fca:	4b27      	ldr	r3, [pc, #156]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	041b      	lsls	r3, r3, #16
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	491b      	ldr	r1, [pc, #108]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007000:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007006:	f7fd ff75 	bl	8004ef4 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800700e:	f7fd ff71 	bl	8004ef4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e05c      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x416>
 800702c:	e054      	b.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <HAL_RCC_OscConfig+0x478>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7fd ff5e 	bl	8004ef4 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800703c:	f7fd ff5a 	bl	8004ef4 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e045      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <HAL_RCC_OscConfig+0x470>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x444>
 800705a:	e03d      	b.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e038      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
 8007068:	40023800 	.word	0x40023800
 800706c:	40007000 	.word	0x40007000
 8007070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <HAL_RCC_OscConfig+0x4ec>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d028      	beq.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800708c:	429a      	cmp	r2, r3
 800708e:	d121      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d11a      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d111      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	3b01      	subs	r3, #1
 80070be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d107      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d001      	beq.n	80070d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800

080070e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0cc      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070fc:	4b68      	ldr	r3, [pc, #416]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d90c      	bls.n	8007124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b63      	ldr	r3, [pc, #396]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0b8      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800713c:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4a58      	ldr	r2, [pc, #352]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007154:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4a52      	ldr	r2, [pc, #328]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800715e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007160:	4b50      	ldr	r3, [pc, #320]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	494d      	ldr	r1, [pc, #308]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d044      	beq.n	8007208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d107      	bne.n	8007196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007186:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d119      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e07f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d003      	beq.n	80071a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d107      	bne.n	80071b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	4b3f      	ldr	r3, [pc, #252]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e06f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b6:	4b3b      	ldr	r3, [pc, #236]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e067      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071c6:	4b37      	ldr	r3, [pc, #220]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f023 0203 	bic.w	r2, r3, #3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4934      	ldr	r1, [pc, #208]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071d8:	f7fd fe8c 	bl	8004ef4 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071de:	e00a      	b.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e0:	f7fd fe88 	bl	8004ef4 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e04f      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 020c 	and.w	r2, r3, #12
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	429a      	cmp	r2, r3
 8007206:	d1eb      	bne.n	80071e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007208:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d20c      	bcs.n	8007230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e032      	b.n	8007296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800723c:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	4916      	ldr	r1, [pc, #88]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	4313      	orrs	r3, r2
 800724c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	490e      	ldr	r1, [pc, #56]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800726e:	f000 f821 	bl	80072b4 <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	490a      	ldr	r1, [pc, #40]	; (80072a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	5ccb      	ldrb	r3, [r1, r3]
 8007282:	fa22 f303 	lsr.w	r3, r2, r3
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_ClockConfig+0x1c8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd fbd8 	bl	8004a44 <HAL_InitTick>

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40023c00 	.word	0x40023c00
 80072a4:	40023800 	.word	0x40023800
 80072a8:	08012410 	.word	0x08012410
 80072ac:	20000004 	.word	0x20000004
 80072b0:	20000008 	.word	0x20000008

080072b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b8:	b090      	sub	sp, #64	; 0x40
 80072ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
 80072c0:	2300      	movs	r3, #0
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c4:	2300      	movs	r3, #0
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072cc:	4b59      	ldr	r3, [pc, #356]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 030c 	and.w	r3, r3, #12
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d00d      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0x40>
 80072d8:	2b08      	cmp	r3, #8
 80072da:	f200 80a1 	bhi.w	8007420 <HAL_RCC_GetSysClockFreq+0x16c>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x34>
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d003      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0x3a>
 80072e6:	e09b      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072e8:	4b53      	ldr	r3, [pc, #332]	; (8007438 <HAL_RCC_GetSysClockFreq+0x184>)
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072ec:	e09b      	b.n	8007426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072ee:	4b53      	ldr	r3, [pc, #332]	; (800743c <HAL_RCC_GetSysClockFreq+0x188>)
 80072f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f2:	e098      	b.n	8007426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072f4:	4b4f      	ldr	r3, [pc, #316]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072fe:	4b4d      	ldr	r3, [pc, #308]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d028      	beq.n	800735c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800730a:	4b4a      	ldr	r3, [pc, #296]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	099b      	lsrs	r3, r3, #6
 8007310:	2200      	movs	r2, #0
 8007312:	623b      	str	r3, [r7, #32]
 8007314:	627a      	str	r2, [r7, #36]	; 0x24
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800731c:	2100      	movs	r1, #0
 800731e:	4b47      	ldr	r3, [pc, #284]	; (800743c <HAL_RCC_GetSysClockFreq+0x188>)
 8007320:	fb03 f201 	mul.w	r2, r3, r1
 8007324:	2300      	movs	r3, #0
 8007326:	fb00 f303 	mul.w	r3, r0, r3
 800732a:	4413      	add	r3, r2
 800732c:	4a43      	ldr	r2, [pc, #268]	; (800743c <HAL_RCC_GetSysClockFreq+0x188>)
 800732e:	fba0 1202 	umull	r1, r2, r0, r2
 8007332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007334:	460a      	mov	r2, r1
 8007336:	62ba      	str	r2, [r7, #40]	; 0x28
 8007338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800733a:	4413      	add	r3, r2
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	2200      	movs	r2, #0
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800734a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800734e:	f7f9 fc53 	bl	8000bf8 <__aeabi_uldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4613      	mov	r3, r2
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735a:	e053      	b.n	8007404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735c:	4b35      	ldr	r3, [pc, #212]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	099b      	lsrs	r3, r3, #6
 8007362:	2200      	movs	r2, #0
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	617a      	str	r2, [r7, #20]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800736e:	f04f 0b00 	mov.w	fp, #0
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	f04f 0000 	mov.w	r0, #0
 800737a:	f04f 0100 	mov.w	r1, #0
 800737e:	0159      	lsls	r1, r3, #5
 8007380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007384:	0150      	lsls	r0, r2, #5
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	ebb2 080a 	subs.w	r8, r2, sl
 800738e:	eb63 090b 	sbc.w	r9, r3, fp
 8007392:	f04f 0200 	mov.w	r2, #0
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800739e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073a6:	ebb2 0408 	subs.w	r4, r2, r8
 80073aa:	eb63 0509 	sbc.w	r5, r3, r9
 80073ae:	f04f 0200 	mov.w	r2, #0
 80073b2:	f04f 0300 	mov.w	r3, #0
 80073b6:	00eb      	lsls	r3, r5, #3
 80073b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073bc:	00e2      	lsls	r2, r4, #3
 80073be:	4614      	mov	r4, r2
 80073c0:	461d      	mov	r5, r3
 80073c2:	eb14 030a 	adds.w	r3, r4, sl
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	eb45 030b 	adc.w	r3, r5, fp
 80073cc:	607b      	str	r3, [r7, #4]
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073da:	4629      	mov	r1, r5
 80073dc:	028b      	lsls	r3, r1, #10
 80073de:	4621      	mov	r1, r4
 80073e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073e4:	4621      	mov	r1, r4
 80073e6:	028a      	lsls	r2, r1, #10
 80073e8:	4610      	mov	r0, r2
 80073ea:	4619      	mov	r1, r3
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	2200      	movs	r2, #0
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	60fa      	str	r2, [r7, #12]
 80073f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073f8:	f7f9 fbfe 	bl	8000bf8 <__aeabi_uldivmod>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4613      	mov	r3, r2
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_RCC_GetSysClockFreq+0x180>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	3301      	adds	r3, #1
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800741e:	e002      	b.n	8007426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetSysClockFreq+0x184>)
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007428:	4618      	mov	r0, r3
 800742a:	3740      	adds	r7, #64	; 0x40
 800742c:	46bd      	mov	sp, r7
 800742e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007432:	bf00      	nop
 8007434:	40023800 	.word	0x40023800
 8007438:	00f42400 	.word	0x00f42400
 800743c:	017d7840 	.word	0x017d7840

08007440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007444:	4b03      	ldr	r3, [pc, #12]	; (8007454 <HAL_RCC_GetHCLKFreq+0x14>)
 8007446:	681b      	ldr	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000004 	.word	0x20000004

08007458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800745c:	f7ff fff0 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	0a9b      	lsrs	r3, r3, #10
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	4903      	ldr	r1, [pc, #12]	; (800747c <HAL_RCC_GetPCLK1Freq+0x24>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40023800 	.word	0x40023800
 800747c:	08012420 	.word	0x08012420

08007480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007484:	f7ff ffdc 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 8007488:	4602      	mov	r2, r0
 800748a:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	0b5b      	lsrs	r3, r3, #13
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	4903      	ldr	r1, [pc, #12]	; (80074a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007496:	5ccb      	ldrb	r3, [r1, r3]
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800749c:	4618      	mov	r0, r3
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	08012420 	.word	0x08012420

080074a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	220f      	movs	r2, #15
 80074b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_RCC_GetClockConfig+0x5c>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0203 	and.w	r2, r3, #3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <HAL_RCC_GetClockConfig+0x5c>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074d0:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <HAL_RCC_GetClockConfig+0x5c>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <HAL_RCC_GetClockConfig+0x5c>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_RCC_GetClockConfig+0x60>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0207 	and.w	r2, r3, #7
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40023800 	.word	0x40023800
 8007508:	40023c00 	.word	0x40023c00

0800750c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e07b      	b.n	8007616 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d108      	bne.n	8007538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d009      	beq.n	8007544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	61da      	str	r2, [r3, #28]
 8007536:	e005      	b.n	8007544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fd f9fc 	bl	800495c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	ea42 0103 	orr.w	r1, r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	0c1b      	lsrs	r3, r3, #16
 80075e2:	f003 0104 	and.w	r1, r3, #4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f003 0210 	and.w	r2, r3, #16
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007604:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b088      	sub	sp, #32
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	4613      	mov	r3, r2
 800762c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_SPI_Transmit+0x22>
 800763c:	2302      	movs	r3, #2
 800763e:	e126      	b.n	800788e <HAL_SPI_Transmit+0x270>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007648:	f7fd fc54 	bl	8004ef4 <HAL_GetTick>
 800764c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800765e:	2302      	movs	r3, #2
 8007660:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007662:	e10b      	b.n	800787c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0x52>
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007674:	e102      	b.n	800787c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2203      	movs	r2, #3
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076bc:	d10f      	bne.n	80076de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d007      	beq.n	80076fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007704:	d14b      	bne.n	800779e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <HAL_SPI_Transmit+0xf6>
 800770e:	8afb      	ldrh	r3, [r7, #22]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d13e      	bne.n	8007792 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	881a      	ldrh	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	1c9a      	adds	r2, r3, #2
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007738:	e02b      	b.n	8007792 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b02      	cmp	r3, #2
 8007746:	d112      	bne.n	800776e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	86da      	strh	r2, [r3, #54]	; 0x36
 800776c:	e011      	b.n	8007792 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776e:	f7fd fbc1 	bl	8004ef4 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d803      	bhi.n	8007786 <HAL_SPI_Transmit+0x168>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <HAL_SPI_Transmit+0x16e>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007790:	e074      	b.n	800787c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ce      	bne.n	800773a <HAL_SPI_Transmit+0x11c>
 800779c:	e04c      	b.n	8007838 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_SPI_Transmit+0x18e>
 80077a6:	8afb      	ldrh	r3, [r7, #22]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d140      	bne.n	800782e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077d2:	e02c      	b.n	800782e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d113      	bne.n	800780a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	86da      	strh	r2, [r3, #54]	; 0x36
 8007808:	e011      	b.n	800782e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800780a:	f7fd fb73 	bl	8004ef4 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d803      	bhi.n	8007822 <HAL_SPI_Transmit+0x204>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d102      	bne.n	8007828 <HAL_SPI_Transmit+0x20a>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800782c:	e026      	b.n	800787c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1cd      	bne.n	80077d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa63 	bl	8007d08 <SPI_EndRxTxTransaction>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e000      	b.n	800787c <HAL_SPI_Transmit+0x25e>
  }

error:
 800787a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800788c:	7ffb      	ldrb	r3, [r7, #31]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b08c      	sub	sp, #48	; 0x30
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078a4:	2301      	movs	r3, #1
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x26>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e18a      	b.n	8007bd2 <HAL_SPI_TransmitReceive+0x33c>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c4:	f7fd fb16 	bl	8004ef4 <HAL_GetTick>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078da:	887b      	ldrh	r3, [r7, #2]
 80078dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d00f      	beq.n	8007906 <HAL_SPI_TransmitReceive+0x70>
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ec:	d107      	bne.n	80078fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <HAL_SPI_TransmitReceive+0x68>
 80078f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d003      	beq.n	8007906 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
 8007900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007904:	e15b      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x82>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x82>
 8007912:	887b      	ldrh	r3, [r7, #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800791e:	e14e      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b04      	cmp	r3, #4
 800792a:	d003      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2205      	movs	r2, #5
 8007930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	887a      	ldrh	r2, [r7, #2]
 8007944:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	887a      	ldrh	r2, [r7, #2]
 800794a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	887a      	ldrh	r2, [r7, #2]
 8007956:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	887a      	ldrh	r2, [r7, #2]
 800795c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d007      	beq.n	8007988 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007990:	d178      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x10a>
 800799a:	8b7b      	ldrh	r3, [r7, #26]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d166      	bne.n	8007a6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	881a      	ldrh	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	1c9a      	adds	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c4:	e053      	b.n	8007a6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d11b      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x176>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <HAL_SPI_TransmitReceive+0x176>
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d113      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	881a      	ldrh	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d119      	bne.n	8007a4e <HAL_SPI_TransmitReceive+0x1b8>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d014      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	1c9a      	adds	r2, r3, #2
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a4e:	f7fd fa51 	bl	8004ef4 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d807      	bhi.n	8007a6e <HAL_SPI_TransmitReceive+0x1d8>
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d003      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a6c:	e0a7      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1a6      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x130>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1a1      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x130>
 8007a82:	e07c      	b.n	8007b7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x1fc>
 8007a8c:	8b7b      	ldrh	r3, [r7, #26]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d16b      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab8:	e057      	b.n	8007b6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d11c      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x26c>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <HAL_SPI_TransmitReceive+0x26c>
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d114      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d119      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x2ae>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d014      	beq.n	8007b44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b40:	2301      	movs	r3, #1
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b44:	f7fd f9d6 	bl	8004ef4 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d803      	bhi.n	8007b5c <HAL_SPI_TransmitReceive+0x2c6>
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d102      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x2cc>
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b68:	e029      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1a2      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x224>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d19d      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f8c0 	bl	8007d08 <SPI_EndRxTxTransaction>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b9a:	e010      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	e000      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3730      	adds	r7, #48	; 0x30
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be8:	b2db      	uxtb	r3, r3
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c08:	f7fd f974 	bl	8004ef4 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c18:	f7fd f96c 	bl	8004ef4 <HAL_GetTick>
 8007c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c1e:	4b39      	ldr	r3, [pc, #228]	; (8007d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	015b      	lsls	r3, r3, #5
 8007c24:	0d1b      	lsrs	r3, r3, #20
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	fb02 f303 	mul.w	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2e:	e054      	b.n	8007cda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d050      	beq.n	8007cda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c38:	f7fd f95c 	bl	8004ef4 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d902      	bls.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d13d      	bne.n	8007cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c66:	d111      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c70:	d004      	beq.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7a:	d107      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c94:	d10f      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e017      	b.n	8007cfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bf0c      	ite	eq
 8007cea:	2301      	moveq	r3, #1
 8007cec:	2300      	movne	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d19b      	bne.n	8007c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000004 	.word	0x20000004

08007d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <SPI_EndRxTxTransaction+0x7c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <SPI_EndRxTxTransaction+0x80>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	0d5b      	lsrs	r3, r3, #21
 8007d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d32:	d112      	bne.n	8007d5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff ff5a 	bl	8007bf8 <SPI_WaitFlagStateUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e00f      	b.n	8007d7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d70:	2b80      	cmp	r3, #128	; 0x80
 8007d72:	d0f2      	beq.n	8007d5a <SPI_EndRxTxTransaction+0x52>
 8007d74:	e000      	b.n	8007d78 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d76:	bf00      	nop
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000004 	.word	0x20000004
 8007d88:	165e9f81 	.word	0x165e9f81

08007d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e041      	b.n	8007e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f839 	bl	8007e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f000 f9ca 	bl	8008164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d001      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e044      	b.n	8007ee2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d018      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x6c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e82:	d013      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x6c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1a      	ldr	r2, [pc, #104]	; (8007ef4 <HAL_TIM_Base_Start_IT+0xb4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00e      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x6c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d009      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x6c>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a17      	ldr	r2, [pc, #92]	; (8007efc <HAL_TIM_Base_Start_IT+0xbc>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x6c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d111      	bne.n	8007ed0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b06      	cmp	r3, #6
 8007ebc:	d010      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ece:	e007      	b.n	8007ee0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40014000 	.word	0x40014000

08007f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d122      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d11b      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0202 	mvn.w	r2, #2
 8007f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f8ee 	bl	8008128 <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8e0 	bl	8008114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f8f1 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d122      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d11b      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0204 	mvn.w	r2, #4
 8007f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8c4 	bl	8008128 <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8b6 	bl	8008114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f8c7 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f89a 	bl	8008128 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f88c 	bl	8008114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f89d 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b10      	cmp	r3, #16
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b10      	cmp	r3, #16
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0210 	mvn.w	r2, #16
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2208      	movs	r2, #8
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f870 	bl	8008128 <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f862 	bl	8008114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f873 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d10e      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	d107      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0201 	mvn.w	r2, #1
 8008080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fa fd56 	bl	8002b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d10e      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d107      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f8e2 	bl	8008278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d10e      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d107      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f838 	bl	8008150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d10e      	bne.n	800810c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d107      	bne.n	800810c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0220 	mvn.w	r2, #32
 8008104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8ac 	bl	8008264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a34      	ldr	r2, [pc, #208]	; (8008248 <TIM_Base_SetConfig+0xe4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00f      	beq.n	800819c <TIM_Base_SetConfig+0x38>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d00b      	beq.n	800819c <TIM_Base_SetConfig+0x38>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a31      	ldr	r2, [pc, #196]	; (800824c <TIM_Base_SetConfig+0xe8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_Base_SetConfig+0x38>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a30      	ldr	r2, [pc, #192]	; (8008250 <TIM_Base_SetConfig+0xec>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_Base_SetConfig+0x38>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a2f      	ldr	r2, [pc, #188]	; (8008254 <TIM_Base_SetConfig+0xf0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a25      	ldr	r2, [pc, #148]	; (8008248 <TIM_Base_SetConfig+0xe4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01b      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d017      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a22      	ldr	r2, [pc, #136]	; (800824c <TIM_Base_SetConfig+0xe8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d013      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a21      	ldr	r2, [pc, #132]	; (8008250 <TIM_Base_SetConfig+0xec>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00f      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a20      	ldr	r2, [pc, #128]	; (8008254 <TIM_Base_SetConfig+0xf0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00b      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <TIM_Base_SetConfig+0xf4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d007      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a1e      	ldr	r2, [pc, #120]	; (800825c <TIM_Base_SetConfig+0xf8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d003      	beq.n	80081ee <TIM_Base_SetConfig+0x8a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1d      	ldr	r2, [pc, #116]	; (8008260 <TIM_Base_SetConfig+0xfc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d108      	bne.n	8008200 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a08      	ldr	r2, [pc, #32]	; (8008248 <TIM_Base_SetConfig+0xe4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d103      	bne.n	8008234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	615a      	str	r2, [r3, #20]
}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40010000 	.word	0x40010000
 800824c:	40000400 	.word	0x40000400
 8008250:	40000800 	.word	0x40000800
 8008254:	40000c00 	.word	0x40000c00
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800

08008264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e03f      	b.n	800831e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fc fd76 	bl	8004da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2224      	movs	r2, #36	; 0x24
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f929 	bl	8008528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695a      	ldr	r2, [r3, #20]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b08a      	sub	sp, #40	; 0x28
 800832a:	af02      	add	r7, sp, #8
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b20      	cmp	r3, #32
 8008344:	d17c      	bne.n	8008440 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <HAL_UART_Transmit+0x2c>
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e075      	b.n	8008442 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_UART_Transmit+0x3e>
 8008360:	2302      	movs	r3, #2
 8008362:	e06e      	b.n	8008442 <HAL_UART_Transmit+0x11c>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2221      	movs	r2, #33	; 0x21
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800837a:	f7fc fdbb 	bl	8004ef4 <HAL_GetTick>
 800837e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	d108      	bne.n	80083a8 <HAL_UART_Transmit+0x82>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e003      	b.n	80083b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083b8:	e02a      	b.n	8008410 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2180      	movs	r1, #128	; 0x80
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f840 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e036      	b.n	8008442 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e007      	b.n	8008402 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1cf      	bne.n	80083ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2200      	movs	r2, #0
 8008422:	2140      	movs	r1, #64	; 0x40
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f810 	bl	800844a <UART_WaitOnFlagUntilTimeout>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e006      	b.n	8008442 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b090      	sub	sp, #64	; 0x40
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845a:	e050      	b.n	80084fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d04c      	beq.n	80084fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0x30>
 800846a:	f7fc fd43 	bl	8004ef4 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008476:	429a      	cmp	r2, r3
 8008478:	d241      	bcs.n	80084fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	330c      	adds	r3, #12
 8008498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800849a:	637a      	str	r2, [r7, #52]	; 0x34
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	613b      	str	r3, [r7, #16]
   return(result);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3314      	adds	r3, #20
 80084cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ce:	623a      	str	r2, [r7, #32]
 80084d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	69f9      	ldr	r1, [r7, #28]
 80084d4:	6a3a      	ldr	r2, [r7, #32]
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	61bb      	str	r3, [r7, #24]
   return(result);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e5      	bne.n	80084ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e00f      	b.n	800851e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4013      	ands	r3, r2
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	429a      	cmp	r2, r3
 800850c:	bf0c      	ite	eq
 800850e:	2301      	moveq	r3, #1
 8008510:	2300      	movne	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	429a      	cmp	r2, r3
 800851a:	d09f      	beq.n	800845c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3740      	adds	r7, #64	; 0x40
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800852c:	b0c0      	sub	sp, #256	; 0x100
 800852e:	af00      	add	r7, sp, #0
 8008530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008544:	68d9      	ldr	r1, [r3, #12]
 8008546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	ea40 0301 	orr.w	r3, r0, r1
 8008550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	431a      	orrs	r2, r3
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	431a      	orrs	r2, r3
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008580:	f021 010c 	bic.w	r1, r1, #12
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800858e:	430b      	orrs	r3, r1
 8008590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	6999      	ldr	r1, [r3, #24]
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	ea40 0301 	orr.w	r3, r0, r1
 80085ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b8f      	ldr	r3, [pc, #572]	; (80087f4 <UART_SetConfig+0x2cc>)
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d005      	beq.n	80085c8 <UART_SetConfig+0xa0>
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b8d      	ldr	r3, [pc, #564]	; (80087f8 <UART_SetConfig+0x2d0>)
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d104      	bne.n	80085d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fe ff5a 	bl	8007480 <HAL_RCC_GetPCLK2Freq>
 80085cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085d0:	e003      	b.n	80085da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085d2:	f7fe ff41 	bl	8007458 <HAL_RCC_GetPCLK1Freq>
 80085d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e4:	f040 810c 	bne.w	8008800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085fa:	4622      	mov	r2, r4
 80085fc:	462b      	mov	r3, r5
 80085fe:	1891      	adds	r1, r2, r2
 8008600:	65b9      	str	r1, [r7, #88]	; 0x58
 8008602:	415b      	adcs	r3, r3
 8008604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800860a:	4621      	mov	r1, r4
 800860c:	eb12 0801 	adds.w	r8, r2, r1
 8008610:	4629      	mov	r1, r5
 8008612:	eb43 0901 	adc.w	r9, r3, r1
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800862a:	4690      	mov	r8, r2
 800862c:	4699      	mov	r9, r3
 800862e:	4623      	mov	r3, r4
 8008630:	eb18 0303 	adds.w	r3, r8, r3
 8008634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008638:	462b      	mov	r3, r5
 800863a:	eb49 0303 	adc.w	r3, r9, r3
 800863e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800864e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008656:	460b      	mov	r3, r1
 8008658:	18db      	adds	r3, r3, r3
 800865a:	653b      	str	r3, [r7, #80]	; 0x50
 800865c:	4613      	mov	r3, r2
 800865e:	eb42 0303 	adc.w	r3, r2, r3
 8008662:	657b      	str	r3, [r7, #84]	; 0x54
 8008664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800866c:	f7f8 fac4 	bl	8000bf8 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4b61      	ldr	r3, [pc, #388]	; (80087fc <UART_SetConfig+0x2d4>)
 8008676:	fba3 2302 	umull	r2, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	011c      	lsls	r4, r3, #4
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800868c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	1891      	adds	r1, r2, r2
 8008696:	64b9      	str	r1, [r7, #72]	; 0x48
 8008698:	415b      	adcs	r3, r3
 800869a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800869c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086a0:	4641      	mov	r1, r8
 80086a2:	eb12 0a01 	adds.w	sl, r2, r1
 80086a6:	4649      	mov	r1, r9
 80086a8:	eb43 0b01 	adc.w	fp, r3, r1
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c0:	4692      	mov	sl, r2
 80086c2:	469b      	mov	fp, r3
 80086c4:	4643      	mov	r3, r8
 80086c6:	eb1a 0303 	adds.w	r3, sl, r3
 80086ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ce:	464b      	mov	r3, r9
 80086d0:	eb4b 0303 	adc.w	r3, fp, r3
 80086d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086ec:	460b      	mov	r3, r1
 80086ee:	18db      	adds	r3, r3, r3
 80086f0:	643b      	str	r3, [r7, #64]	; 0x40
 80086f2:	4613      	mov	r3, r2
 80086f4:	eb42 0303 	adc.w	r3, r2, r3
 80086f8:	647b      	str	r3, [r7, #68]	; 0x44
 80086fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008702:	f7f8 fa79 	bl	8000bf8 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4611      	mov	r1, r2
 800870c:	4b3b      	ldr	r3, [pc, #236]	; (80087fc <UART_SetConfig+0x2d4>)
 800870e:	fba3 2301 	umull	r2, r3, r3, r1
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	2264      	movs	r2, #100	; 0x64
 8008716:	fb02 f303 	mul.w	r3, r2, r3
 800871a:	1acb      	subs	r3, r1, r3
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008722:	4b36      	ldr	r3, [pc, #216]	; (80087fc <UART_SetConfig+0x2d4>)
 8008724:	fba3 2302 	umull	r2, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008730:	441c      	add	r4, r3
 8008732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008736:	2200      	movs	r2, #0
 8008738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800873c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	63b9      	str	r1, [r7, #56]	; 0x38
 800874c:	415b      	adcs	r3, r3
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008754:	4641      	mov	r1, r8
 8008756:	1851      	adds	r1, r2, r1
 8008758:	6339      	str	r1, [r7, #48]	; 0x30
 800875a:	4649      	mov	r1, r9
 800875c:	414b      	adcs	r3, r1
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800876c:	4659      	mov	r1, fp
 800876e:	00cb      	lsls	r3, r1, #3
 8008770:	4651      	mov	r1, sl
 8008772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008776:	4651      	mov	r1, sl
 8008778:	00ca      	lsls	r2, r1, #3
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	4603      	mov	r3, r0
 8008780:	4642      	mov	r2, r8
 8008782:	189b      	adds	r3, r3, r2
 8008784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008788:	464b      	mov	r3, r9
 800878a:	460a      	mov	r2, r1
 800878c:	eb42 0303 	adc.w	r3, r2, r3
 8008790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087a8:	460b      	mov	r3, r1
 80087aa:	18db      	adds	r3, r3, r3
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ae:	4613      	mov	r3, r2
 80087b0:	eb42 0303 	adc.w	r3, r2, r3
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087be:	f7f8 fa1b 	bl	8000bf8 <__aeabi_uldivmod>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <UART_SetConfig+0x2d4>)
 80087c8:	fba3 1302 	umull	r1, r3, r3, r2
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	2164      	movs	r1, #100	; 0x64
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	3332      	adds	r3, #50	; 0x32
 80087da:	4a08      	ldr	r2, [pc, #32]	; (80087fc <UART_SetConfig+0x2d4>)
 80087dc:	fba2 2303 	umull	r2, r3, r2, r3
 80087e0:	095b      	lsrs	r3, r3, #5
 80087e2:	f003 0207 	and.w	r2, r3, #7
 80087e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4422      	add	r2, r4
 80087ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087f0:	e105      	b.n	80089fe <UART_SetConfig+0x4d6>
 80087f2:	bf00      	nop
 80087f4:	40011000 	.word	0x40011000
 80087f8:	40011400 	.word	0x40011400
 80087fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008804:	2200      	movs	r2, #0
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800880a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800880e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008812:	4642      	mov	r2, r8
 8008814:	464b      	mov	r3, r9
 8008816:	1891      	adds	r1, r2, r2
 8008818:	6239      	str	r1, [r7, #32]
 800881a:	415b      	adcs	r3, r3
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008822:	4641      	mov	r1, r8
 8008824:	1854      	adds	r4, r2, r1
 8008826:	4649      	mov	r1, r9
 8008828:	eb43 0501 	adc.w	r5, r3, r1
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	00eb      	lsls	r3, r5, #3
 8008836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800883a:	00e2      	lsls	r2, r4, #3
 800883c:	4614      	mov	r4, r2
 800883e:	461d      	mov	r5, r3
 8008840:	4643      	mov	r3, r8
 8008842:	18e3      	adds	r3, r4, r3
 8008844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008848:	464b      	mov	r3, r9
 800884a:	eb45 0303 	adc.w	r3, r5, r3
 800884e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800885e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800886e:	4629      	mov	r1, r5
 8008870:	008b      	lsls	r3, r1, #2
 8008872:	4621      	mov	r1, r4
 8008874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008878:	4621      	mov	r1, r4
 800887a:	008a      	lsls	r2, r1, #2
 800887c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008880:	f7f8 f9ba 	bl	8000bf8 <__aeabi_uldivmod>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4b60      	ldr	r3, [pc, #384]	; (8008a0c <UART_SetConfig+0x4e4>)
 800888a:	fba3 2302 	umull	r2, r3, r3, r2
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	011c      	lsls	r4, r3, #4
 8008892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008896:	2200      	movs	r2, #0
 8008898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800889c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	1891      	adds	r1, r2, r2
 80088aa:	61b9      	str	r1, [r7, #24]
 80088ac:	415b      	adcs	r3, r3
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b4:	4641      	mov	r1, r8
 80088b6:	1851      	adds	r1, r2, r1
 80088b8:	6139      	str	r1, [r7, #16]
 80088ba:	4649      	mov	r1, r9
 80088bc:	414b      	adcs	r3, r1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088cc:	4659      	mov	r1, fp
 80088ce:	00cb      	lsls	r3, r1, #3
 80088d0:	4651      	mov	r1, sl
 80088d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d6:	4651      	mov	r1, sl
 80088d8:	00ca      	lsls	r2, r1, #3
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	4603      	mov	r3, r0
 80088e0:	4642      	mov	r2, r8
 80088e2:	189b      	adds	r3, r3, r2
 80088e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088e8:	464b      	mov	r3, r9
 80088ea:	460a      	mov	r2, r1
 80088ec:	eb42 0303 	adc.w	r3, r2, r3
 80088f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80088fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800890c:	4649      	mov	r1, r9
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4641      	mov	r1, r8
 8008912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008916:	4641      	mov	r1, r8
 8008918:	008a      	lsls	r2, r1, #2
 800891a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800891e:	f7f8 f96b 	bl	8000bf8 <__aeabi_uldivmod>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <UART_SetConfig+0x4e4>)
 8008928:	fba3 1302 	umull	r1, r3, r3, r2
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	2164      	movs	r1, #100	; 0x64
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	3332      	adds	r3, #50	; 0x32
 800893a:	4a34      	ldr	r2, [pc, #208]	; (8008a0c <UART_SetConfig+0x4e4>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008946:	441c      	add	r4, r3
 8008948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800894c:	2200      	movs	r2, #0
 800894e:	673b      	str	r3, [r7, #112]	; 0x70
 8008950:	677a      	str	r2, [r7, #116]	; 0x74
 8008952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	1891      	adds	r1, r2, r2
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	415b      	adcs	r3, r3
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008966:	4641      	mov	r1, r8
 8008968:	1851      	adds	r1, r2, r1
 800896a:	6039      	str	r1, [r7, #0]
 800896c:	4649      	mov	r1, r9
 800896e:	414b      	adcs	r3, r1
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800897e:	4659      	mov	r1, fp
 8008980:	00cb      	lsls	r3, r1, #3
 8008982:	4651      	mov	r1, sl
 8008984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008988:	4651      	mov	r1, sl
 800898a:	00ca      	lsls	r2, r1, #3
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	4603      	mov	r3, r0
 8008992:	4642      	mov	r2, r8
 8008994:	189b      	adds	r3, r3, r2
 8008996:	66bb      	str	r3, [r7, #104]	; 0x68
 8008998:	464b      	mov	r3, r9
 800899a:	460a      	mov	r2, r1
 800899c:	eb42 0303 	adc.w	r3, r2, r3
 80089a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	663b      	str	r3, [r7, #96]	; 0x60
 80089ac:	667a      	str	r2, [r7, #100]	; 0x64
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089ba:	4649      	mov	r1, r9
 80089bc:	008b      	lsls	r3, r1, #2
 80089be:	4641      	mov	r1, r8
 80089c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c4:	4641      	mov	r1, r8
 80089c6:	008a      	lsls	r2, r1, #2
 80089c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089cc:	f7f8 f914 	bl	8000bf8 <__aeabi_uldivmod>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <UART_SetConfig+0x4e4>)
 80089d6:	fba3 1302 	umull	r1, r3, r3, r2
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	2164      	movs	r1, #100	; 0x64
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	3332      	adds	r3, #50	; 0x32
 80089e8:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <UART_SetConfig+0x4e4>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4422      	add	r2, r4
 80089fc:	609a      	str	r2, [r3, #8]
}
 80089fe:	bf00      	nop
 8008a00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a04:	46bd      	mov	sp, r7
 8008a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a0a:	bf00      	nop
 8008a0c:	51eb851f 	.word	0x51eb851f

08008a10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008a14:	4904      	ldr	r1, [pc, #16]	; (8008a28 <MX_FATFS_Init+0x18>)
 8008a16:	4805      	ldr	r0, [pc, #20]	; (8008a2c <MX_FATFS_Init+0x1c>)
 8008a18:	f002 fb64 	bl	800b0e4 <FATFS_LinkDriver>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <MX_FATFS_Init+0x20>)
 8008a22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008a24:	bf00      	nop
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	200008c8 	.word	0x200008c8
 8008a2c:	20000010 	.word	0x20000010
 8008a30:	200008c4 	.word	0x200008c4

08008a34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f8 fd6d 	bl	8001530 <SD_disk_initialize>
 8008a56:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f8 fe49 	bl	8001704 <SD_disk_status>
 8008a72:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8008a8c:	7bf8      	ldrb	r0, [r7, #15]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	f7f8 fe4c 	bl	8001730 <SD_disk_read>
 8008a98:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8008ab2:	7bf8      	ldrb	r0, [r7, #15]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	f7f8 fea3 	bl	8001804 <SD_disk_write>
 8008abe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	603a      	str	r2, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8008ad8:	79b9      	ldrb	r1, [r7, #6]
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f8 ff14 	bl	800190c <SD_disk_ioctl>
 8008ae4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008afa:	79fb      	ldrb	r3, [r7, #7]
 8008afc:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <disk_status+0x30>)
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	79fa      	ldrb	r2, [r7, #7]
 8008b08:	4905      	ldr	r1, [pc, #20]	; (8008b20 <disk_status+0x30>)
 8008b0a:	440a      	add	r2, r1
 8008b0c:	7a12      	ldrb	r2, [r2, #8]
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	200008f4 	.word	0x200008f4

08008b24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <disk_initialize+0x48>)
 8008b36:	5cd3      	ldrb	r3, [r2, r3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d111      	bne.n	8008b60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <disk_initialize+0x48>)
 8008b40:	2101      	movs	r1, #1
 8008b42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <disk_initialize+0x48>)
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	4906      	ldr	r1, [pc, #24]	; (8008b6c <disk_initialize+0x48>)
 8008b54:	440a      	add	r2, r1
 8008b56:	7a12      	ldrb	r2, [r2, #8]
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	200008f4 	.word	0x200008f4

08008b70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <disk_read+0x3c>)
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	689c      	ldr	r4, [r3, #8]
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4a07      	ldr	r2, [pc, #28]	; (8008bac <disk_read+0x3c>)
 8008b90:	4413      	add	r3, r2
 8008b92:	7a18      	ldrb	r0, [r3, #8]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	47a0      	blx	r4
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd90      	pop	{r4, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	200008f4 	.word	0x200008f4

08008bb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008bb0:	b590      	push	{r4, r7, lr}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <disk_write+0x3c>)
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	68dc      	ldr	r4, [r3, #12]
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4a07      	ldr	r2, [pc, #28]	; (8008bec <disk_write+0x3c>)
 8008bd0:	4413      	add	r3, r2
 8008bd2:	7a18      	ldrb	r0, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	47a0      	blx	r4
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]
  return res;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	200008f4 	.word	0x200008f4

08008bf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	603a      	str	r2, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <disk_ioctl+0x38>)
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	79fa      	ldrb	r2, [r7, #7]
 8008c0e:	4906      	ldr	r1, [pc, #24]	; (8008c28 <disk_ioctl+0x38>)
 8008c10:	440a      	add	r2, r1
 8008c12:	7a10      	ldrb	r0, [r2, #8]
 8008c14:	79b9      	ldrb	r1, [r7, #6]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	200008f4 	.word	0x200008f4

08008c2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3301      	adds	r3, #1
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	b21a      	sxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3303      	adds	r3, #3
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	3202      	adds	r2, #2
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	3201      	adds	r2, #1
 8008c82:	7812      	ldrb	r2, [r2, #0]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c94:	68fb      	ldr	r3, [r7, #12]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	887a      	ldrh	r2, [r7, #2]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	887b      	ldrh	r3, [r7, #2]
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	607a      	str	r2, [r7, #4]
 8008cc6:	887a      	ldrh	r2, [r7, #2]
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00d      	beq.n	8008d66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	1c53      	adds	r3, r2, #1
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	1c59      	adds	r1, r3, #1
 8008d54:	6179      	str	r1, [r7, #20]
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	607b      	str	r3, [r7, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f1      	bne.n	8008d4a <mem_cpy+0x1a>
	}
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d72:	b480      	push	{r7}
 8008d74:	b087      	sub	sp, #28
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	617a      	str	r2, [r7, #20]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f3      	bne.n	8008d82 <mem_set+0x10>
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008da8:	b480      	push	{r7}
 8008daa:	b089      	sub	sp, #36	; 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	61fa      	str	r2, [r7, #28]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	61ba      	str	r2, [r7, #24]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	1acb      	subs	r3, r1, r3
 8008dd4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <mem_cmp+0x40>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0eb      	beq.n	8008dc0 <mem_cmp+0x18>

	return r;
 8008de8:	697b      	ldr	r3, [r7, #20]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3724      	adds	r7, #36	; 0x24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e00:	e002      	b.n	8008e08 <chk_chr+0x12>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3301      	adds	r3, #1
 8008e06:	607b      	str	r3, [r7, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d005      	beq.n	8008e1c <chk_chr+0x26>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d1f2      	bne.n	8008e02 <chk_chr+0xc>
	return *str;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <lock_fs+0x22>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f002 f986 	bl	800b150 <ff_req_grant>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <lock_fs+0x22>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <lock_fs+0x24>
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00d      	beq.n	8008e86 <unlock_fs+0x2e>
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	2b0c      	cmp	r3, #12
 8008e6e:	d00a      	beq.n	8008e86 <unlock_fs+0x2e>
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	2b0b      	cmp	r3, #11
 8008e74:	d007      	beq.n	8008e86 <unlock_fs+0x2e>
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	2b0f      	cmp	r3, #15
 8008e7a:	d004      	beq.n	8008e86 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 f97a 	bl	800b17a <ff_rel_grant>
	}
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60bb      	str	r3, [r7, #8]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e029      	b.n	8008ef8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008ea4:	4a27      	ldr	r2, [pc, #156]	; (8008f44 <chk_lock+0xb4>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	4413      	add	r3, r2
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01d      	beq.n	8008eee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008eb2:	4a24      	ldr	r2, [pc, #144]	; (8008f44 <chk_lock+0xb4>)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	4413      	add	r3, r2
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d116      	bne.n	8008ef2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ec4:	4a1f      	ldr	r2, [pc, #124]	; (8008f44 <chk_lock+0xb4>)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	4413      	add	r3, r2
 8008ecc:	3304      	adds	r3, #4
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d10c      	bne.n	8008ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ed8:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <chk_lock+0xb4>)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d102      	bne.n	8008ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eec:	e007      	b.n	8008efe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d9d2      	bls.n	8008ea4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d109      	bne.n	8008f18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <chk_lock+0x80>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d101      	bne.n	8008f14 <chk_lock+0x84>
 8008f10:	2300      	movs	r3, #0
 8008f12:	e010      	b.n	8008f36 <chk_lock+0xa6>
 8008f14:	2312      	movs	r3, #18
 8008f16:	e00e      	b.n	8008f36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d108      	bne.n	8008f30 <chk_lock+0xa0>
 8008f1e:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <chk_lock+0xb4>)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	4413      	add	r3, r2
 8008f26:	330c      	adds	r3, #12
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2e:	d101      	bne.n	8008f34 <chk_lock+0xa4>
 8008f30:	2310      	movs	r3, #16
 8008f32:	e000      	b.n	8008f36 <chk_lock+0xa6>
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	200008d4 	.word	0x200008d4

08008f48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	607b      	str	r3, [r7, #4]
 8008f52:	e002      	b.n	8008f5a <enq_lock+0x12>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3301      	adds	r3, #1
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d806      	bhi.n	8008f6e <enq_lock+0x26>
 8008f60:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <enq_lock+0x40>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	4413      	add	r3, r2
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f2      	bne.n	8008f54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	bf14      	ite	ne
 8008f74:	2301      	movne	r3, #1
 8008f76:	2300      	moveq	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	200008d4 	.word	0x200008d4

08008f8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	e01f      	b.n	8008fdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f9c:	4a41      	ldr	r2, [pc, #260]	; (80090a4 <inc_lock+0x118>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	4413      	add	r3, r2
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d113      	bne.n	8008fd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008fae:	4a3d      	ldr	r2, [pc, #244]	; (80090a4 <inc_lock+0x118>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d109      	bne.n	8008fd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008fc2:	4a38      	ldr	r2, [pc, #224]	; (80090a4 <inc_lock+0x118>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	4413      	add	r3, r2
 8008fca:	3308      	adds	r3, #8
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d006      	beq.n	8008fe4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d9dc      	bls.n	8008f9c <inc_lock+0x10>
 8008fe2:	e000      	b.n	8008fe6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fe4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d132      	bne.n	8009052 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e002      	b.n	8008ff8 <inc_lock+0x6c>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d806      	bhi.n	800900c <inc_lock+0x80>
 8008ffe:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <inc_lock+0x118>)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	4413      	add	r3, r2
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1f2      	bne.n	8008ff2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d101      	bne.n	8009016 <inc_lock+0x8a>
 8009012:	2300      	movs	r3, #0
 8009014:	e040      	b.n	8009098 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4922      	ldr	r1, [pc, #136]	; (80090a4 <inc_lock+0x118>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	440b      	add	r3, r1
 8009022:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	491e      	ldr	r1, [pc, #120]	; (80090a4 <inc_lock+0x118>)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	440b      	add	r3, r1
 8009030:	3304      	adds	r3, #4
 8009032:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	491a      	ldr	r1, [pc, #104]	; (80090a4 <inc_lock+0x118>)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	440b      	add	r3, r1
 8009040:	3308      	adds	r3, #8
 8009042:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009044:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <inc_lock+0x118>)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	4413      	add	r3, r2
 800904c:	330c      	adds	r3, #12
 800904e:	2200      	movs	r2, #0
 8009050:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <inc_lock+0xe0>
 8009058:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <inc_lock+0x118>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	4413      	add	r3, r2
 8009060:	330c      	adds	r3, #12
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <inc_lock+0xe0>
 8009068:	2300      	movs	r3, #0
 800906a:	e015      	b.n	8009098 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d108      	bne.n	8009084 <inc_lock+0xf8>
 8009072:	4a0c      	ldr	r2, [pc, #48]	; (80090a4 <inc_lock+0x118>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	4413      	add	r3, r2
 800907a:	330c      	adds	r3, #12
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	3301      	adds	r3, #1
 8009080:	b29a      	uxth	r2, r3
 8009082:	e001      	b.n	8009088 <inc_lock+0xfc>
 8009084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009088:	4906      	ldr	r1, [pc, #24]	; (80090a4 <inc_lock+0x118>)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	440b      	add	r3, r1
 8009090:	330c      	adds	r3, #12
 8009092:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3301      	adds	r3, #1
}
 8009098:	4618      	mov	r0, r3
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	200008d4 	.word	0x200008d4

080090a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d825      	bhi.n	8009108 <dec_lock+0x60>
		n = Files[i].ctr;
 80090bc:	4a17      	ldr	r2, [pc, #92]	; (800911c <dec_lock+0x74>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	4413      	add	r3, r2
 80090c4:	330c      	adds	r3, #12
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80090ca:	89fb      	ldrh	r3, [r7, #14]
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d101      	bne.n	80090d6 <dec_lock+0x2e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <dec_lock+0x3a>
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	3b01      	subs	r3, #1
 80090e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090e2:	4a0e      	ldr	r2, [pc, #56]	; (800911c <dec_lock+0x74>)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	4413      	add	r3, r2
 80090ea:	330c      	adds	r3, #12
 80090ec:	89fa      	ldrh	r2, [r7, #14]
 80090ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090f0:	89fb      	ldrh	r3, [r7, #14]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d105      	bne.n	8009102 <dec_lock+0x5a>
 80090f6:	4a09      	ldr	r2, [pc, #36]	; (800911c <dec_lock+0x74>)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	4413      	add	r3, r2
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	737b      	strb	r3, [r7, #13]
 8009106:	e001      	b.n	800910c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009108:	2302      	movs	r3, #2
 800910a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800910c:	7b7b      	ldrb	r3, [r7, #13]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	200008d4 	.word	0x200008d4

08009120 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e010      	b.n	8009150 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800912e:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <clear_lock+0x44>)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	4413      	add	r3, r2
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d105      	bne.n	800914a <clear_lock+0x2a>
 800913e:	4a09      	ldr	r2, [pc, #36]	; (8009164 <clear_lock+0x44>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d9eb      	bls.n	800912e <clear_lock+0xe>
	}
}
 8009156:	bf00      	nop
 8009158:	bf00      	nop
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	200008d4 	.word	0x200008d4

08009168 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	78db      	ldrb	r3, [r3, #3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d034      	beq.n	80091e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7858      	ldrb	r0, [r3, #1]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800918c:	2301      	movs	r3, #1
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	f7ff fd0e 	bl	8008bb0 <disk_write>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e022      	b.n	80091e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	1ad2      	subs	r2, r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d217      	bcs.n	80091e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	e010      	b.n	80091e0 <sync_window+0x78>
					wsect += fs->fsize;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	4413      	add	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7858      	ldrb	r0, [r3, #1]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091d2:	2301      	movs	r3, #1
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	f7ff fceb 	bl	8008bb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3b01      	subs	r3, #1
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d8eb      	bhi.n	80091be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	d01b      	beq.n	8009240 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ffad 	bl	8009168 <sync_window>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d113      	bne.n	8009240 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7858      	ldrb	r0, [r3, #1]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009222:	2301      	movs	r3, #1
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	f7ff fca3 	bl	8008b70 <disk_read>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009236:	2301      	movs	r3, #1
 8009238:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff ff87 	bl	8009168 <sync_window>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d158      	bne.n	8009316 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d148      	bne.n	80092fe <sync_fs+0xb2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d144      	bne.n	80092fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3334      	adds	r3, #52	; 0x34
 8009278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800927c:	2100      	movs	r1, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fd77 	bl	8008d72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3334      	adds	r3, #52	; 0x34
 8009288:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800928c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fd06 	bl	8008ca2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3334      	adds	r3, #52	; 0x34
 800929a:	4921      	ldr	r1, [pc, #132]	; (8009320 <sync_fs+0xd4>)
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fd1b 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3334      	adds	r3, #52	; 0x34
 80092a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092aa:	491e      	ldr	r1, [pc, #120]	; (8009324 <sync_fs+0xd8>)
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff fd13 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3334      	adds	r3, #52	; 0x34
 80092b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f7ff fd09 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3334      	adds	r3, #52	; 0x34
 80092ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7ff fcff 	bl	8008cd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7858      	ldrb	r0, [r3, #1]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f2:	2301      	movs	r3, #1
 80092f4:	f7ff fc5c 	bl	8008bb0 <disk_write>
			fs->fsi_flag = 0;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	785b      	ldrb	r3, [r3, #1]
 8009302:	2200      	movs	r2, #0
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fc72 	bl	8008bf0 <disk_ioctl>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <sync_fs+0xca>
 8009312:	2301      	movs	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	41615252 	.word	0x41615252
 8009324:	61417272 	.word	0x61417272

08009328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	3b02      	subs	r3, #2
 8009336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	3b02      	subs	r3, #2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d301      	bcc.n	8009348 <clust2sect+0x20>
 8009344:	2300      	movs	r3, #0
 8009346:	e008      	b.n	800935a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	895b      	ldrh	r3, [r3, #10]
 800934c:	461a      	mov	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	fb03 f202 	mul.w	r2, r3, r2
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	4413      	add	r3, r2
}
 800935a:	4618      	mov	r0, r3
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d904      	bls.n	8009386 <get_fat+0x20>
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d302      	bcc.n	800938c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	e08f      	b.n	80094ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b03      	cmp	r3, #3
 8009398:	d062      	beq.n	8009460 <get_fat+0xfa>
 800939a:	2b03      	cmp	r3, #3
 800939c:	dc7c      	bgt.n	8009498 <get_fat+0x132>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d002      	beq.n	80093a8 <get_fat+0x42>
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d042      	beq.n	800942c <get_fat+0xc6>
 80093a6:	e077      	b.n	8009498 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	085b      	lsrs	r3, r3, #1
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	0a5b      	lsrs	r3, r3, #9
 80093be:	4413      	add	r3, r2
 80093c0:	4619      	mov	r1, r3
 80093c2:	6938      	ldr	r0, [r7, #16]
 80093c4:	f7ff ff14 	bl	80091f0 <move_window>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d167      	bne.n	800949e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	60fa      	str	r2, [r7, #12]
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	0a5b      	lsrs	r3, r3, #9
 80093ea:	4413      	add	r3, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	6938      	ldr	r0, [r7, #16]
 80093f0:	f7ff fefe 	bl	80091f0 <move_window>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d153      	bne.n	80094a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	461a      	mov	r2, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4313      	orrs	r3, r2
 8009410:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <get_fat+0xbc>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	091b      	lsrs	r3, r3, #4
 8009420:	e002      	b.n	8009428 <get_fat+0xc2>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009428:	617b      	str	r3, [r7, #20]
			break;
 800942a:	e03f      	b.n	80094ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	4413      	add	r3, r2
 8009436:	4619      	mov	r1, r3
 8009438:	6938      	ldr	r0, [r7, #16]
 800943a:	f7ff fed9 	bl	80091f0 <move_window>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d130      	bne.n	80094a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009452:	4413      	add	r3, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff fbe9 	bl	8008c2c <ld_word>
 800945a:	4603      	mov	r3, r0
 800945c:	617b      	str	r3, [r7, #20]
			break;
 800945e:	e025      	b.n	80094ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	09db      	lsrs	r3, r3, #7
 8009468:	4413      	add	r3, r2
 800946a:	4619      	mov	r1, r3
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f7ff febf 	bl	80091f0 <move_window>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d118      	bne.n	80094aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009486:	4413      	add	r3, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fbe7 	bl	8008c5c <ld_dword>
 800948e:	4603      	mov	r3, r0
 8009490:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009494:	617b      	str	r3, [r7, #20]
			break;
 8009496:	e009      	b.n	80094ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009498:	2301      	movs	r3, #1
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	e006      	b.n	80094ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800949e:	bf00      	nop
 80094a0:	e004      	b.n	80094ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094aa:	bf00      	nop
		}
	}

	return val;
 80094ac:	697b      	ldr	r3, [r7, #20]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80094b6:	b590      	push	{r4, r7, lr}
 80094b8:	b089      	sub	sp, #36	; 0x24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80094c2:	2302      	movs	r3, #2
 80094c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	f240 80d2 	bls.w	8009672 <put_fat+0x1bc>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	f080 80cc 	bcs.w	8009672 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	f000 8096 	beq.w	8009610 <put_fat+0x15a>
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	f300 80cd 	bgt.w	8009684 <put_fat+0x1ce>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d002      	beq.n	80094f4 <put_fat+0x3e>
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d06e      	beq.n	80095d0 <put_fat+0x11a>
 80094f2:	e0c7      	b.n	8009684 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	085b      	lsrs	r3, r3, #1
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	4413      	add	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	0a5b      	lsrs	r3, r3, #9
 800950a:	4413      	add	r3, r2
 800950c:	4619      	mov	r1, r3
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fe6e 	bl	80091f0 <move_window>
 8009514:	4603      	mov	r3, r0
 8009516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009518:	7ffb      	ldrb	r3, [r7, #31]
 800951a:	2b00      	cmp	r3, #0
 800951c:	f040 80ab 	bne.w	8009676 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	1c59      	adds	r1, r3, #1
 800952a:	61b9      	str	r1, [r7, #24]
 800952c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009530:	4413      	add	r3, r2
 8009532:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <put_fat+0xa4>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	b25b      	sxtb	r3, r3
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	b25a      	sxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	b25b      	sxtb	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b25b      	sxtb	r3, r3
 8009556:	b2db      	uxtb	r3, r3
 8009558:	e001      	b.n	800955e <put_fat+0xa8>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2201      	movs	r2, #1
 8009566:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	0a5b      	lsrs	r3, r3, #9
 8009570:	4413      	add	r3, r2
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fe3b 	bl	80091f0 <move_window>
 800957a:	4603      	mov	r3, r0
 800957c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800957e:	7ffb      	ldrb	r3, [r7, #31]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d17a      	bne.n	800967a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009590:	4413      	add	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <put_fat+0xf0>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	091b      	lsrs	r3, r3, #4
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	e00e      	b.n	80095c4 <put_fat+0x10e>
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	f023 030f 	bic.w	r3, r3, #15
 80095b0:	b25a      	sxtb	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	b25b      	sxtb	r3, r3
 80095be:	4313      	orrs	r3, r2
 80095c0:	b25b      	sxtb	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2201      	movs	r2, #1
 80095cc:	70da      	strb	r2, [r3, #3]
			break;
 80095ce:	e059      	b.n	8009684 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	4413      	add	r3, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7ff fe07 	bl	80091f0 <move_window>
 80095e2:	4603      	mov	r3, r0
 80095e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095e6:	7ffb      	ldrb	r3, [r7, #31]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d148      	bne.n	800967e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095fa:	4413      	add	r3, r2
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	b292      	uxth	r2, r2
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fb4d 	bl	8008ca2 <st_word>
			fs->wflag = 1;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	70da      	strb	r2, [r3, #3]
			break;
 800960e:	e039      	b.n	8009684 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	09db      	lsrs	r3, r3, #7
 8009618:	4413      	add	r3, r2
 800961a:	4619      	mov	r1, r3
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fde7 	bl	80091f0 <move_window>
 8009622:	4603      	mov	r3, r0
 8009624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009626:	7ffb      	ldrb	r3, [r7, #31]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d12a      	bne.n	8009682 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009640:	4413      	add	r3, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fb0a 	bl	8008c5c <ld_dword>
 8009648:	4603      	mov	r3, r0
 800964a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800964e:	4323      	orrs	r3, r4
 8009650:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009660:	4413      	add	r3, r2
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fb37 	bl	8008cd8 <st_dword>
			fs->wflag = 1;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	70da      	strb	r2, [r3, #3]
			break;
 8009670:	e008      	b.n	8009684 <put_fat+0x1ce>
		}
	}
 8009672:	bf00      	nop
 8009674:	e006      	b.n	8009684 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009676:	bf00      	nop
 8009678:	e004      	b.n	8009684 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800967a:	bf00      	nop
 800967c:	e002      	b.n	8009684 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800967e:	bf00      	nop
 8009680:	e000      	b.n	8009684 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009682:	bf00      	nop
	return res;
 8009684:	7ffb      	ldrb	r3, [r7, #31]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3724      	adds	r7, #36	; 0x24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd90      	pop	{r4, r7, pc}

0800968e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b088      	sub	sp, #32
 8009692:	af00      	add	r7, sp, #0
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d904      	bls.n	80096b4 <remove_chain+0x26>
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d301      	bcc.n	80096b8 <remove_chain+0x2a>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e04b      	b.n	8009750 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00c      	beq.n	80096d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	69b8      	ldr	r0, [r7, #24]
 80096c6:	f7ff fef6 	bl	80094b6 <put_fat>
 80096ca:	4603      	mov	r3, r0
 80096cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80096ce:	7ffb      	ldrb	r3, [r7, #31]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <remove_chain+0x4a>
 80096d4:	7ffb      	ldrb	r3, [r7, #31]
 80096d6:	e03b      	b.n	8009750 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff fe43 	bl	8009366 <get_fat>
 80096e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d031      	beq.n	800974c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <remove_chain+0x64>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e02e      	b.n	8009750 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d101      	bne.n	80096fe <remove_chain+0x70>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e028      	b.n	8009750 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80096fe:	2200      	movs	r2, #0
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	69b8      	ldr	r0, [r7, #24]
 8009704:	f7ff fed7 	bl	80094b6 <put_fat>
 8009708:	4603      	mov	r3, r0
 800970a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800970c:	7ffb      	ldrb	r3, [r7, #31]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <remove_chain+0x88>
 8009712:	7ffb      	ldrb	r3, [r7, #31]
 8009714:	e01c      	b.n	8009750 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	695a      	ldr	r2, [r3, #20]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	3b02      	subs	r3, #2
 8009720:	429a      	cmp	r2, r3
 8009722:	d20b      	bcs.n	800973c <remove_chain+0xae>
			fs->free_clst++;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	791b      	ldrb	r3, [r3, #4]
 8009732:	f043 0301 	orr.w	r3, r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	429a      	cmp	r2, r3
 8009748:	d3c6      	bcc.n	80096d8 <remove_chain+0x4a>
 800974a:	e000      	b.n	800974e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800974c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10d      	bne.n	800978a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <create_chain+0x2c>
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	429a      	cmp	r2, r3
 8009782:	d31b      	bcc.n	80097bc <create_chain+0x64>
 8009784:	2301      	movs	r3, #1
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	e018      	b.n	80097bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff fdea 	bl	8009366 <get_fat>
 8009792:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d801      	bhi.n	800979e <create_chain+0x46>
 800979a:	2301      	movs	r3, #1
 800979c:	e070      	b.n	8009880 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d101      	bne.n	80097aa <create_chain+0x52>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	e06a      	b.n	8009880 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d201      	bcs.n	80097b8 <create_chain+0x60>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	e063      	b.n	8009880 <create_chain+0x128>
		scl = clst;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	3301      	adds	r3, #1
 80097c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d307      	bcc.n	80097e0 <create_chain+0x88>
				ncl = 2;
 80097d0:	2302      	movs	r3, #2
 80097d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d901      	bls.n	80097e0 <create_chain+0x88>
 80097dc:	2300      	movs	r3, #0
 80097de:	e04f      	b.n	8009880 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80097e0:	69f9      	ldr	r1, [r7, #28]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fdbf 	bl	8009366 <get_fat>
 80097e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d003      	beq.n	80097fe <create_chain+0xa6>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d101      	bne.n	8009802 <create_chain+0xaa>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	e03e      	b.n	8009880 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	429a      	cmp	r2, r3
 8009808:	d1da      	bne.n	80097c0 <create_chain+0x68>
 800980a:	2300      	movs	r3, #0
 800980c:	e038      	b.n	8009880 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800980e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	69f9      	ldr	r1, [r7, #28]
 8009816:	6938      	ldr	r0, [r7, #16]
 8009818:	f7ff fe4d 	bl	80094b6 <put_fat>
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <create_chain+0xe2>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d006      	beq.n	800983a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6938      	ldr	r0, [r7, #16]
 8009832:	f7ff fe40 	bl	80094b6 <put_fat>
 8009836:	4603      	mov	r3, r0
 8009838:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d116      	bne.n	800986e <create_chain+0x116>
		fs->last_clst = ncl;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	695a      	ldr	r2, [r3, #20]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	3b02      	subs	r3, #2
 8009850:	429a      	cmp	r2, r3
 8009852:	d804      	bhi.n	800985e <create_chain+0x106>
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	1e5a      	subs	r2, r3, #1
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	b2da      	uxtb	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	711a      	strb	r2, [r3, #4]
 800986c:	e007      	b.n	800987e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d102      	bne.n	800987a <create_chain+0x122>
 8009874:	f04f 33ff 	mov.w	r3, #4294967295
 8009878:	e000      	b.n	800987c <create_chain+0x124>
 800987a:	2301      	movs	r3, #1
 800987c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800987e:	69fb      	ldr	r3, [r7, #28]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3720      	adds	r7, #32
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	3304      	adds	r3, #4
 800989e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	0a5b      	lsrs	r3, r3, #9
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	8952      	ldrh	r2, [r2, #10]
 80098a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	613a      	str	r2, [r7, #16]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <clmt_clust+0x3a>
 80098be:	2300      	movs	r3, #0
 80098c0:	e010      	b.n	80098e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d307      	bcc.n	80098da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3304      	adds	r3, #4
 80098d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80098d8:	e7e9      	b.n	80098ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80098da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009906:	d204      	bcs.n	8009912 <dir_sdi+0x22>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f003 031f 	and.w	r3, r3, #31
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009912:	2302      	movs	r3, #2
 8009914:	e063      	b.n	80099de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <dir_sdi+0x46>
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d902      	bls.n	8009936 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10c      	bne.n	8009956 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	8912      	ldrh	r2, [r2, #8]
 8009944:	4293      	cmp	r3, r2
 8009946:	d301      	bcc.n	800994c <dir_sdi+0x5c>
 8009948:	2302      	movs	r3, #2
 800994a:	e048      	b.n	80099de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	61da      	str	r2, [r3, #28]
 8009954:	e029      	b.n	80099aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	895b      	ldrh	r3, [r3, #10]
 800995a:	025b      	lsls	r3, r3, #9
 800995c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800995e:	e019      	b.n	8009994 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff fcfe 	bl	8009366 <get_fat>
 800996a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d101      	bne.n	8009978 <dir_sdi+0x88>
 8009974:	2301      	movs	r3, #1
 8009976:	e032      	b.n	80099de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d904      	bls.n	8009988 <dir_sdi+0x98>
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	429a      	cmp	r2, r3
 8009986:	d301      	bcc.n	800998c <dir_sdi+0x9c>
 8009988:	2302      	movs	r3, #2
 800998a:	e028      	b.n	80099de <dir_sdi+0xee>
			ofs -= csz;
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d2e1      	bcs.n	8009960 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800999c:	6979      	ldr	r1, [r7, #20]
 800999e:	6938      	ldr	r0, [r7, #16]
 80099a0:	f7ff fcc2 	bl	8009328 <clust2sect>
 80099a4:	4602      	mov	r2, r0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <dir_sdi+0xcc>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e010      	b.n	80099de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	0a5b      	lsrs	r3, r3, #9
 80099c4:	441a      	add	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	441a      	add	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	3320      	adds	r3, #32
 80099fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <dir_next+0x28>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a0c:	d301      	bcc.n	8009a12 <dir_next+0x2c>
 8009a0e:	2304      	movs	r3, #4
 8009a10:	e0aa      	b.n	8009b68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8098 	bne.w	8009b4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10b      	bne.n	8009a48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	8912      	ldrh	r2, [r2, #8]
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f0c0 8088 	bcc.w	8009b4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	61da      	str	r2, [r3, #28]
 8009a44:	2304      	movs	r3, #4
 8009a46:	e08f      	b.n	8009b68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	0a5b      	lsrs	r3, r3, #9
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	8952      	ldrh	r2, [r2, #10]
 8009a50:	3a01      	subs	r2, #1
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d17a      	bne.n	8009b4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7ff fc80 	bl	8009366 <get_fat>
 8009a66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d801      	bhi.n	8009a72 <dir_next+0x8c>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e07a      	b.n	8009b68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d101      	bne.n	8009a7e <dir_next+0x98>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e074      	b.n	8009b68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d358      	bcc.n	8009b3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	61da      	str	r2, [r3, #28]
 8009a94:	2304      	movs	r3, #4
 8009a96:	e067      	b.n	8009b68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f7ff fe59 	bl	8009758 <create_chain>
 8009aa6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <dir_next+0xcc>
 8009aae:	2307      	movs	r3, #7
 8009ab0:	e05a      	b.n	8009b68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d101      	bne.n	8009abc <dir_next+0xd6>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e055      	b.n	8009b68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d101      	bne.n	8009ac8 <dir_next+0xe2>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e04f      	b.n	8009b68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff fb4d 	bl	8009168 <sync_window>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <dir_next+0xf2>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e047      	b.n	8009b68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3334      	adds	r3, #52	; 0x34
 8009adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff f945 	bl	8008d72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	6979      	ldr	r1, [r7, #20]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff fc1a 	bl	8009328 <clust2sect>
 8009af4:	4602      	mov	r2, r0
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	631a      	str	r2, [r3, #48]	; 0x30
 8009afa:	e012      	b.n	8009b22 <dir_next+0x13c>
						fs->wflag = 1;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff fb30 	bl	8009168 <sync_window>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <dir_next+0x12c>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e02a      	b.n	8009b68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	3301      	adds	r3, #1
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	631a      	str	r2, [r3, #48]	; 0x30
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	895b      	ldrh	r3, [r3, #10]
 8009b26:	461a      	mov	r2, r3
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d3e6      	bcc.n	8009afc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	1ad2      	subs	r2, r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fbf0 	bl	8009328 <clust2sect>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b60:	441a      	add	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b80:	2100      	movs	r1, #0
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff feb4 	bl	80098f0 <dir_sdi>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d12b      	bne.n	8009bea <dir_alloc+0x7a>
		n = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fb27 	bl	80091f0 <move_window>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d11d      	bne.n	8009be8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2be5      	cmp	r3, #229	; 0xe5
 8009bb4:	d004      	beq.n	8009bc0 <dir_alloc+0x50>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d107      	bne.n	8009bd0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d102      	bne.n	8009bd4 <dir_alloc+0x64>
 8009bce:	e00c      	b.n	8009bea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ff05 	bl	80099e6 <dir_next>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0d7      	beq.n	8009b96 <dir_alloc+0x26>
 8009be6:	e000      	b.n	8009bea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009be8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d101      	bne.n	8009bf4 <dir_alloc+0x84>
 8009bf0:	2307      	movs	r3, #7
 8009bf2:	75fb      	strb	r3, [r7, #23]
	return res;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	331a      	adds	r3, #26
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff f80d 	bl	8008c2c <ld_word>
 8009c12:	4603      	mov	r3, r0
 8009c14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d109      	bne.n	8009c32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	3314      	adds	r3, #20
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff f802 	bl	8008c2c <ld_word>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009c32:	68fb      	ldr	r3, [r7, #12]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	331a      	adds	r3, #26
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	b292      	uxth	r2, r2
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff f825 	bl	8008ca2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d109      	bne.n	8009c74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f103 0214 	add.w	r2, r3, #20
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7ff f817 	bl	8008ca2 <st_word>
	}
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fe2f 	bl	80098f0 <dir_sdi>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <dir_find+0x24>
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	e03e      	b.n	8009d1e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f7ff faa2 	bl	80091f0 <move_window>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d12f      	bne.n	8009d16 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <dir_find+0x4e>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	e028      	b.n	8009d1c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	330b      	adds	r3, #11
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	330b      	adds	r3, #11
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <dir_find+0x86>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a18      	ldr	r0, [r3, #32]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3324      	adds	r3, #36	; 0x24
 8009cf4:	220b      	movs	r2, #11
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f7ff f856 	bl	8008da8 <mem_cmp>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d02:	2100      	movs	r1, #0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fe6e 	bl	80099e6 <dir_next>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0c5      	beq.n	8009ca0 <dir_find+0x24>
 8009d14:	e002      	b.n	8009d1c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d1a:	bf00      	nop

	return res;
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009d34:	2101      	movs	r1, #1
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ff1a 	bl	8009b70 <dir_alloc>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d11c      	bne.n	8009d80 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	f7ff fa4f 	bl	80091f0 <move_window>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d111      	bne.n	8009d80 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	2220      	movs	r2, #32
 8009d62:	2100      	movs	r1, #0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff f804 	bl	8008d72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a18      	ldr	r0, [r3, #32]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3324      	adds	r3, #36	; 0x24
 8009d72:	220b      	movs	r2, #11
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7fe ffdb 	bl	8008d30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b086      	sub	sp, #24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d04e      	beq.n	8009e40 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009daa:	e021      	b.n	8009df0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1a      	ldr	r2, [r3, #32]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	1c59      	adds	r1, r3, #1
 8009db4:	6179      	str	r1, [r7, #20]
 8009db6:	4413      	add	r3, r2
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d100      	bne.n	8009dc4 <get_fileinfo+0x3a>
 8009dc2:	e015      	b.n	8009df0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d101      	bne.n	8009dce <get_fileinfo+0x44>
 8009dca:	23e5      	movs	r3, #229	; 0xe5
 8009dcc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b09      	cmp	r3, #9
 8009dd2:	d106      	bne.n	8009de2 <get_fileinfo+0x58>
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	613a      	str	r2, [r7, #16]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	222e      	movs	r2, #46	; 0x2e
 8009de0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	613a      	str	r2, [r7, #16]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	4413      	add	r3, r2
 8009dec:	7bfa      	ldrb	r2, [r7, #15]
 8009dee:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	d9da      	bls.n	8009dac <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	3309      	adds	r3, #9
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	7ada      	ldrb	r2, [r3, #11]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	331c      	adds	r3, #28
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe ff22 	bl	8008c5c <ld_dword>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	3316      	adds	r3, #22
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe ff19 	bl	8008c5c <ld_dword>
 8009e2a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	80da      	strh	r2, [r3, #6]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	0c1b      	lsrs	r3, r3, #16
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	809a      	strh	r2, [r3, #4]
 8009e3e:	e000      	b.n	8009e42 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009e40:	bf00      	nop
}
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3324      	adds	r3, #36	; 0x24
 8009e5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009e5e:	220b      	movs	r2, #11
 8009e60:	2120      	movs	r1, #32
 8009e62:	68b8      	ldr	r0, [r7, #8]
 8009e64:	f7fe ff85 	bl	8008d72 <mem_set>
	si = i = 0; ni = 8;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	613b      	str	r3, [r7, #16]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	2308      	movs	r3, #8
 8009e72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	61fa      	str	r2, [r7, #28]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e82:	7efb      	ldrb	r3, [r7, #27]
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d94e      	bls.n	8009f26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e88:	7efb      	ldrb	r3, [r7, #27]
 8009e8a:	2b2f      	cmp	r3, #47	; 0x2f
 8009e8c:	d006      	beq.n	8009e9c <create_name+0x54>
 8009e8e:	7efb      	ldrb	r3, [r7, #27]
 8009e90:	2b5c      	cmp	r3, #92	; 0x5c
 8009e92:	d110      	bne.n	8009eb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e94:	e002      	b.n	8009e9c <create_name+0x54>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ea6:	d0f6      	beq.n	8009e96 <create_name+0x4e>
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b5c      	cmp	r3, #92	; 0x5c
 8009eb2:	d0f0      	beq.n	8009e96 <create_name+0x4e>
			break;
 8009eb4:	e038      	b.n	8009f28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009eb6:	7efb      	ldrb	r3, [r7, #27]
 8009eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8009eba:	d003      	beq.n	8009ec4 <create_name+0x7c>
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d30c      	bcc.n	8009ede <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b0b      	cmp	r3, #11
 8009ec8:	d002      	beq.n	8009ed0 <create_name+0x88>
 8009eca:	7efb      	ldrb	r3, [r7, #27]
 8009ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ece:	d001      	beq.n	8009ed4 <create_name+0x8c>
 8009ed0:	2306      	movs	r3, #6
 8009ed2:	e044      	b.n	8009f5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	613b      	str	r3, [r7, #16]
 8009ed8:	230b      	movs	r3, #11
 8009eda:	617b      	str	r3, [r7, #20]
			continue;
 8009edc:	e022      	b.n	8009f24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009ede:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	da04      	bge.n	8009ef0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009ee6:	7efb      	ldrb	r3, [r7, #27]
 8009ee8:	3b80      	subs	r3, #128	; 0x80
 8009eea:	4a1f      	ldr	r2, [pc, #124]	; (8009f68 <create_name+0x120>)
 8009eec:	5cd3      	ldrb	r3, [r2, r3]
 8009eee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009ef0:	7efb      	ldrb	r3, [r7, #27]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	481d      	ldr	r0, [pc, #116]	; (8009f6c <create_name+0x124>)
 8009ef6:	f7fe ff7e 	bl	8008df6 <chk_chr>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <create_name+0xbc>
 8009f00:	2306      	movs	r3, #6
 8009f02:	e02c      	b.n	8009f5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009f04:	7efb      	ldrb	r3, [r7, #27]
 8009f06:	2b60      	cmp	r3, #96	; 0x60
 8009f08:	d905      	bls.n	8009f16 <create_name+0xce>
 8009f0a:	7efb      	ldrb	r3, [r7, #27]
 8009f0c:	2b7a      	cmp	r3, #122	; 0x7a
 8009f0e:	d802      	bhi.n	8009f16 <create_name+0xce>
 8009f10:	7efb      	ldrb	r3, [r7, #27]
 8009f12:	3b20      	subs	r3, #32
 8009f14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	613a      	str	r2, [r7, #16]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	4413      	add	r3, r2
 8009f20:	7efa      	ldrb	r2, [r7, #27]
 8009f22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009f24:	e7a6      	b.n	8009e74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	441a      	add	r2, r3
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <create_name+0xf4>
 8009f38:	2306      	movs	r3, #6
 8009f3a:	e010      	b.n	8009f5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2be5      	cmp	r3, #229	; 0xe5
 8009f42:	d102      	bne.n	8009f4a <create_name+0x102>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2205      	movs	r2, #5
 8009f48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009f4a:	7efb      	ldrb	r3, [r7, #27]
 8009f4c:	2b20      	cmp	r3, #32
 8009f4e:	d801      	bhi.n	8009f54 <create_name+0x10c>
 8009f50:	2204      	movs	r2, #4
 8009f52:	e000      	b.n	8009f56 <create_name+0x10e>
 8009f54:	2200      	movs	r2, #0
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	330b      	adds	r3, #11
 8009f5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009f5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	08012428 	.word	0x08012428
 8009f6c:	0801229c 	.word	0x0801229c

08009f70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f84:	e002      	b.n	8009f8c <follow_path+0x1c>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b2f      	cmp	r3, #47	; 0x2f
 8009f92:	d0f8      	beq.n	8009f86 <follow_path+0x16>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b5c      	cmp	r3, #92	; 0x5c
 8009f9a:	d0f4      	beq.n	8009f86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b1f      	cmp	r3, #31
 8009fa8:	d80a      	bhi.n	8009fc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2280      	movs	r2, #128	; 0x80
 8009fae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fc9b 	bl	80098f0 <dir_sdi>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]
 8009fbe:	e043      	b.n	800a048 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fc0:	463b      	mov	r3, r7
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff ff3f 	bl	8009e48 <create_name>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d134      	bne.n	800a03e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fe51 	bl	8009c7c <dir_find>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fe4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d127      	bne.n	800a042 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d122      	bne.n	800a042 <follow_path+0xd2>
 8009ffc:	2305      	movs	r3, #5
 8009ffe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a000:	e01f      	b.n	800a042 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d11c      	bne.n	800a046 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	799b      	ldrb	r3, [r3, #6]
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a018:	2305      	movs	r3, #5
 800a01a:	75fb      	strb	r3, [r7, #23]
 800a01c:	e014      	b.n	800a048 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02c:	4413      	add	r3, r2
 800a02e:	4619      	mov	r1, r3
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff fde4 	bl	8009bfe <ld_clust>
 800a036:	4602      	mov	r2, r0
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a03c:	e7c0      	b.n	8009fc0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a03e:	bf00      	nop
 800a040:	e002      	b.n	800a048 <follow_path+0xd8>
				break;
 800a042:	bf00      	nop
 800a044:	e000      	b.n	800a048 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a046:	bf00      	nop
			}
		}
	}

	return res;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a052:	b480      	push	{r7}
 800a054:	b087      	sub	sp, #28
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d031      	beq.n	800a0cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	e002      	b.n	800a076 <get_ldnumber+0x24>
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3301      	adds	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	d903      	bls.n	800a086 <get_ldnumber+0x34>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b3a      	cmp	r3, #58	; 0x3a
 800a084:	d1f4      	bne.n	800a070 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b3a      	cmp	r3, #58	; 0x3a
 800a08c:	d11c      	bne.n	800a0c8 <get_ldnumber+0x76>
			tp = *path;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	60fa      	str	r2, [r7, #12]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	3b30      	subs	r3, #48	; 0x30
 800a09e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b09      	cmp	r3, #9
 800a0a4:	d80e      	bhi.n	800a0c4 <get_ldnumber+0x72>
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d10a      	bne.n	800a0c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <get_ldnumber+0x72>
					vol = (int)i;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	e002      	b.n	800a0ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a0cc:	693b      	ldr	r3, [r7, #16]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	70da      	strb	r2, [r3, #3]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff f87a 	bl	80091f0 <move_window>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <check_fs+0x2a>
 800a102:	2304      	movs	r3, #4
 800a104:	e038      	b.n	800a178 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3334      	adds	r3, #52	; 0x34
 800a10a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe fd8c 	bl	8008c2c <ld_word>
 800a114:	4603      	mov	r3, r0
 800a116:	461a      	mov	r2, r3
 800a118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d001      	beq.n	800a124 <check_fs+0x48>
 800a120:	2303      	movs	r3, #3
 800a122:	e029      	b.n	800a178 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a12a:	2be9      	cmp	r3, #233	; 0xe9
 800a12c:	d009      	beq.n	800a142 <check_fs+0x66>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a134:	2beb      	cmp	r3, #235	; 0xeb
 800a136:	d11e      	bne.n	800a176 <check_fs+0x9a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a13e:	2b90      	cmp	r3, #144	; 0x90
 800a140:	d119      	bne.n	800a176 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3334      	adds	r3, #52	; 0x34
 800a146:	3336      	adds	r3, #54	; 0x36
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fd87 	bl	8008c5c <ld_dword>
 800a14e:	4603      	mov	r3, r0
 800a150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a154:	4a0a      	ldr	r2, [pc, #40]	; (800a180 <check_fs+0xa4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d101      	bne.n	800a15e <check_fs+0x82>
 800a15a:	2300      	movs	r3, #0
 800a15c:	e00c      	b.n	800a178 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3334      	adds	r3, #52	; 0x34
 800a162:	3352      	adds	r3, #82	; 0x52
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fd79 	bl	8008c5c <ld_dword>
 800a16a:	4603      	mov	r3, r0
 800a16c:	4a05      	ldr	r2, [pc, #20]	; (800a184 <check_fs+0xa8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d101      	bne.n	800a176 <check_fs+0x9a>
 800a172:	2300      	movs	r3, #0
 800a174:	e000      	b.n	800a178 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a176:	2302      	movs	r3, #2
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	00544146 	.word	0x00544146
 800a184:	33544146 	.word	0x33544146

0800a188 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b096      	sub	sp, #88	; 0x58
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff ff58 	bl	800a052 <get_ldnumber>
 800a1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	da01      	bge.n	800a1ae <find_volume+0x26>
 800a1aa:	230b      	movs	r3, #11
 800a1ac:	e235      	b.n	800a61a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1ae:	4aa5      	ldr	r2, [pc, #660]	; (800a444 <find_volume+0x2bc>)
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <find_volume+0x3a>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	e22b      	b.n	800a61a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a1c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1c4:	f7fe fe32 	bl	8008e2c <lock_fs>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <find_volume+0x4a>
 800a1ce:	230f      	movs	r3, #15
 800a1d0:	e223      	b.n	800a61a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01a      	beq.n	800a21e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fe fc7f 	bl	8008af0 <disk_status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a1f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10c      	bne.n	800a21e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d007      	beq.n	800a21a <find_volume+0x92>
 800a20a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a216:	230a      	movs	r3, #10
 800a218:	e1ff      	b.n	800a61a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a21a:	2300      	movs	r3, #0
 800a21c:	e1fd      	b.n	800a61a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a226:	b2da      	uxtb	r2, r3
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	785b      	ldrb	r3, [r3, #1]
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fc77 	bl	8008b24 <disk_initialize>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a23c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a248:	2303      	movs	r3, #3
 800a24a:	e1e6      	b.n	800a61a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <find_volume+0xda>
 800a252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a25e:	230a      	movs	r3, #10
 800a260:	e1db      	b.n	800a61a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a26a:	f7ff ff37 	bl	800a0dc <check_fs>
 800a26e:	4603      	mov	r3, r0
 800a270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d149      	bne.n	800a310 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a27c:	2300      	movs	r3, #0
 800a27e:	643b      	str	r3, [r7, #64]	; 0x40
 800a280:	e01e      	b.n	800a2c0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a290:	4413      	add	r3, r2
 800a292:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	3304      	adds	r3, #4
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <find_volume+0x124>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fcda 	bl	8008c5c <ld_dword>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	e000      	b.n	800a2ae <find_volume+0x126>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	3358      	adds	r3, #88	; 0x58
 800a2b4:	443b      	add	r3, r7
 800a2b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2bc:	3301      	adds	r3, #1
 800a2be:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d9dd      	bls.n	800a282 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <find_volume+0x14e>
 800a2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	3358      	adds	r3, #88	; 0x58
 800a2dc:	443b      	add	r3, r7
 800a2de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a2e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d005      	beq.n	800a2f6 <find_volume+0x16e>
 800a2ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2ee:	f7ff fef5 	bl	800a0dc <check_fs>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	e000      	b.n	800a2f8 <find_volume+0x170>
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a300:	2b01      	cmp	r3, #1
 800a302:	d905      	bls.n	800a310 <find_volume+0x188>
 800a304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a306:	3301      	adds	r3, #1
 800a308:	643b      	str	r3, [r7, #64]	; 0x40
 800a30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d9e2      	bls.n	800a2d6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a314:	2b04      	cmp	r3, #4
 800a316:	d101      	bne.n	800a31c <find_volume+0x194>
 800a318:	2301      	movs	r3, #1
 800a31a:	e17e      	b.n	800a61a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a31c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a320:	2b01      	cmp	r3, #1
 800a322:	d901      	bls.n	800a328 <find_volume+0x1a0>
 800a324:	230d      	movs	r3, #13
 800a326:	e178      	b.n	800a61a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	3334      	adds	r3, #52	; 0x34
 800a32c:	330b      	adds	r3, #11
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fc7c 	bl	8008c2c <ld_word>
 800a334:	4603      	mov	r3, r0
 800a336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33a:	d001      	beq.n	800a340 <find_volume+0x1b8>
 800a33c:	230d      	movs	r3, #13
 800a33e:	e16c      	b.n	800a61a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	3334      	adds	r3, #52	; 0x34
 800a344:	3316      	adds	r3, #22
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fc70 	bl	8008c2c <ld_word>
 800a34c:	4603      	mov	r3, r0
 800a34e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <find_volume+0x1dc>
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	3334      	adds	r3, #52	; 0x34
 800a35a:	3324      	adds	r3, #36	; 0x24
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fc7d 	bl	8008c5c <ld_dword>
 800a362:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a368:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	789b      	ldrb	r3, [r3, #2]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d005      	beq.n	800a388 <find_volume+0x200>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d001      	beq.n	800a388 <find_volume+0x200>
 800a384:	230d      	movs	r3, #13
 800a386:	e148      	b.n	800a61a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	461a      	mov	r2, r3
 800a38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a390:	fb02 f303 	mul.w	r3, r2, r3
 800a394:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	895b      	ldrh	r3, [r3, #10]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d008      	beq.n	800a3bc <find_volume+0x234>
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	895b      	ldrh	r3, [r3, #10]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	895b      	ldrh	r3, [r3, #10]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <find_volume+0x238>
 800a3bc:	230d      	movs	r3, #13
 800a3be:	e12c      	b.n	800a61a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	3334      	adds	r3, #52	; 0x34
 800a3c4:	3311      	adds	r3, #17
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fc30 	bl	8008c2c <ld_word>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	891b      	ldrh	r3, [r3, #8]
 800a3d8:	f003 030f 	and.w	r3, r3, #15
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <find_volume+0x25e>
 800a3e2:	230d      	movs	r3, #13
 800a3e4:	e119      	b.n	800a61a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	3334      	adds	r3, #52	; 0x34
 800a3ea:	3313      	adds	r3, #19
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe fc1d 	bl	8008c2c <ld_word>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <find_volume+0x282>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	3334      	adds	r3, #52	; 0x34
 800a400:	3320      	adds	r3, #32
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fc2a 	bl	8008c5c <ld_dword>
 800a408:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	3334      	adds	r3, #52	; 0x34
 800a40e:	330e      	adds	r3, #14
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fc0b 	bl	8008c2c <ld_word>
 800a416:	4603      	mov	r3, r0
 800a418:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a41a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <find_volume+0x29c>
 800a420:	230d      	movs	r3, #13
 800a422:	e0fa      	b.n	800a61a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a424:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a428:	4413      	add	r3, r2
 800a42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42c:	8912      	ldrh	r2, [r2, #8]
 800a42e:	0912      	lsrs	r2, r2, #4
 800a430:	b292      	uxth	r2, r2
 800a432:	4413      	add	r3, r2
 800a434:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d204      	bcs.n	800a448 <find_volume+0x2c0>
 800a43e:	230d      	movs	r3, #13
 800a440:	e0eb      	b.n	800a61a <find_volume+0x492>
 800a442:	bf00      	nop
 800a444:	200008cc 	.word	0x200008cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a450:	8952      	ldrh	r2, [r2, #10]
 800a452:	fbb3 f3f2 	udiv	r3, r3, r2
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <find_volume+0x2da>
 800a45e:	230d      	movs	r3, #13
 800a460:	e0db      	b.n	800a61a <find_volume+0x492>
		fmt = FS_FAT32;
 800a462:	2303      	movs	r3, #3
 800a464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a46e:	4293      	cmp	r3, r2
 800a470:	d802      	bhi.n	800a478 <find_volume+0x2f0>
 800a472:	2302      	movs	r3, #2
 800a474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a47e:	4293      	cmp	r3, r2
 800a480:	d802      	bhi.n	800a488 <find_volume+0x300>
 800a482:	2301      	movs	r3, #1
 800a484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	1c9a      	adds	r2, r3, #2
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a494:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a496:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a49a:	441a      	add	r2, r3
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a4a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	441a      	add	r2, r3
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a4aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d11e      	bne.n	800a4f0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	3334      	adds	r3, #52	; 0x34
 800a4b6:	332a      	adds	r3, #42	; 0x2a
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fbb7 	bl	8008c2c <ld_word>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <find_volume+0x340>
 800a4c4:	230d      	movs	r3, #13
 800a4c6:	e0a8      	b.n	800a61a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	891b      	ldrh	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <find_volume+0x34c>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e0a2      	b.n	800a61a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3334      	adds	r3, #52	; 0x34
 800a4d8:	332c      	adds	r3, #44	; 0x2c
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fbbe 	bl	8008c5c <ld_dword>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ee:	e01f      	b.n	800a530 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	891b      	ldrh	r3, [r3, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <find_volume+0x374>
 800a4f8:	230d      	movs	r3, #13
 800a4fa:	e08e      	b.n	800a61a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a502:	441a      	add	r2, r3
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d103      	bne.n	800a518 <find_volume+0x390>
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	e00a      	b.n	800a52e <find_volume+0x3a6>
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	699a      	ldr	r2, [r3, #24]
 800a51c:	4613      	mov	r3, r2
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	4413      	add	r3, r2
 800a522:	085a      	lsrs	r2, r3, #1
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a52e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	69da      	ldr	r2, [r3, #28]
 800a534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a536:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a53a:	0a5b      	lsrs	r3, r3, #9
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d201      	bcs.n	800a544 <find_volume+0x3bc>
 800a540:	230d      	movs	r3, #13
 800a542:	e06a      	b.n	800a61a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	f04f 32ff 	mov.w	r2, #4294967295
 800a54a:	615a      	str	r2, [r3, #20]
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	695a      	ldr	r2, [r3, #20]
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	2280      	movs	r2, #128	; 0x80
 800a558:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a55a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d149      	bne.n	800a5f6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	3334      	adds	r3, #52	; 0x34
 800a566:	3330      	adds	r3, #48	; 0x30
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fb5f 	bl	8008c2c <ld_word>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d140      	bne.n	800a5f6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a576:	3301      	adds	r3, #1
 800a578:	4619      	mov	r1, r3
 800a57a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a57c:	f7fe fe38 	bl	80091f0 <move_window>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d137      	bne.n	800a5f6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	2200      	movs	r2, #0
 800a58a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	3334      	adds	r3, #52	; 0x34
 800a590:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fb49 	bl	8008c2c <ld_word>
 800a59a:	4603      	mov	r3, r0
 800a59c:	461a      	mov	r2, r3
 800a59e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d127      	bne.n	800a5f6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	3334      	adds	r3, #52	; 0x34
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fb56 	bl	8008c5c <ld_dword>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4a1c      	ldr	r2, [pc, #112]	; (800a624 <find_volume+0x49c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d11e      	bne.n	800a5f6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	3334      	adds	r3, #52	; 0x34
 800a5bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe fb4b 	bl	8008c5c <ld_dword>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4a17      	ldr	r2, [pc, #92]	; (800a628 <find_volume+0x4a0>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d113      	bne.n	800a5f6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	3334      	adds	r3, #52	; 0x34
 800a5d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fb40 	bl	8008c5c <ld_dword>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	3334      	adds	r3, #52	; 0x34
 800a5e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fb36 	bl	8008c5c <ld_dword>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a5fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <find_volume+0x4a4>)
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	3301      	adds	r3, #1
 800a604:	b29a      	uxth	r2, r3
 800a606:	4b09      	ldr	r3, [pc, #36]	; (800a62c <find_volume+0x4a4>)
 800a608:	801a      	strh	r2, [r3, #0]
 800a60a:	4b08      	ldr	r3, [pc, #32]	; (800a62c <find_volume+0x4a4>)
 800a60c:	881a      	ldrh	r2, [r3, #0]
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a614:	f7fe fd84 	bl	8009120 <clear_lock>
#endif
	return FR_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3758      	adds	r7, #88	; 0x58
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	41615252 	.word	0x41615252
 800a628:	61417272 	.word	0x61417272
 800a62c:	200008d0 	.word	0x200008d0

0800a630 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a63a:	2309      	movs	r3, #9
 800a63c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d02e      	beq.n	800a6a2 <validate+0x72>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d02a      	beq.n	800a6a2 <validate+0x72>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d025      	beq.n	800a6a2 <validate+0x72>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	889a      	ldrh	r2, [r3, #4]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	88db      	ldrh	r3, [r3, #6]
 800a660:	429a      	cmp	r2, r3
 800a662:	d11e      	bne.n	800a6a2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fbdf 	bl	8008e2c <lock_fs>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d014      	beq.n	800a69e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fa38 	bl	8008af0 <disk_status>
 800a680:	4603      	mov	r3, r0
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <validate+0x60>
				res = FR_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
 800a68e:	e008      	b.n	800a6a2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fbde 	bl	8008e58 <unlock_fs>
 800a69c:	e001      	b.n	800a6a2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a69e:	230f      	movs	r3, #15
 800a6a0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <validate+0x7e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	e000      	b.n	800a6b0 <validate+0x80>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	6013      	str	r3, [r2, #0]
	return res;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a6d2:	f107 0310 	add.w	r3, r7, #16
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff fcbb 	bl	800a052 <get_ldnumber>
 800a6dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	da01      	bge.n	800a6e8 <f_mount+0x28>
 800a6e4:	230b      	movs	r3, #11
 800a6e6:	e048      	b.n	800a77a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a6e8:	4a26      	ldr	r2, [pc, #152]	; (800a784 <f_mount+0xc4>)
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00f      	beq.n	800a718 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a6f8:	69b8      	ldr	r0, [r7, #24]
 800a6fa:	f7fe fd11 	bl	8009120 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fd18 	bl	800b138 <ff_del_syncobj>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <f_mount+0x52>
 800a70e:	2302      	movs	r3, #2
 800a710:	e033      	b.n	800a77a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00f      	beq.n	800a73e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	b2da      	uxtb	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	330c      	adds	r3, #12
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f000 fce7 	bl	800b102 <ff_cre_syncobj>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <f_mount+0x7e>
 800a73a:	2302      	movs	r3, #2
 800a73c:	e01d      	b.n	800a77a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4910      	ldr	r1, [pc, #64]	; (800a784 <f_mount+0xc4>)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <f_mount+0x94>
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d001      	beq.n	800a758 <f_mount+0x98>
 800a754:	2300      	movs	r3, #0
 800a756:	e010      	b.n	800a77a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a758:	f107 010c 	add.w	r1, r7, #12
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	2200      	movs	r2, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fd10 	bl	800a188 <find_volume>
 800a768:	4603      	mov	r3, r0
 800a76a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	7dfa      	ldrb	r2, [r7, #23]
 800a770:	4611      	mov	r1, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fb70 	bl	8008e58 <unlock_fs>
 800a778:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200008cc 	.word	0x200008cc

0800a788 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b098      	sub	sp, #96	; 0x60
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <f_open+0x18>
 800a79c:	2309      	movs	r3, #9
 800a79e:	e1b4      	b.n	800ab0a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7a8:	79fa      	ldrb	r2, [r7, #7]
 800a7aa:	f107 0110 	add.w	r1, r7, #16
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fce8 	bl	800a188 <find_volume>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a7be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 8191 	bne.w	800aaea <f_open+0x362>
		dj.obj.fs = fs;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	f107 0314 	add.w	r3, r7, #20
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fbcb 	bl	8009f70 <follow_path>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11a      	bne.n	800a81e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da03      	bge.n	800a7fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800a7f2:	2306      	movs	r3, #6
 800a7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7f8:	e011      	b.n	800a81e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	f023 0301 	bic.w	r3, r3, #1
 800a800:	2b00      	cmp	r3, #0
 800a802:	bf14      	ite	ne
 800a804:	2301      	movne	r3, #1
 800a806:	2300      	moveq	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fb3c 	bl	8008e90 <chk_lock>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	f003 031c 	and.w	r3, r3, #28
 800a824:	2b00      	cmp	r3, #0
 800a826:	d07f      	beq.n	800a928 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d017      	beq.n	800a860 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a834:	2b04      	cmp	r3, #4
 800a836:	d10e      	bne.n	800a856 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a838:	f7fe fb86 	bl	8008f48 <enq_lock>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <f_open+0xc8>
 800a842:	f107 0314 	add.w	r3, r7, #20
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fa6d 	bl	8009d26 <dir_register>
 800a84c:	4603      	mov	r3, r0
 800a84e:	e000      	b.n	800a852 <f_open+0xca>
 800a850:	2312      	movs	r3, #18
 800a852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	f043 0308 	orr.w	r3, r3, #8
 800a85c:	71fb      	strb	r3, [r7, #7]
 800a85e:	e010      	b.n	800a882 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a860:	7ebb      	ldrb	r3, [r7, #26]
 800a862:	f003 0311 	and.w	r3, r3, #17
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <f_open+0xea>
					res = FR_DENIED;
 800a86a:	2307      	movs	r3, #7
 800a86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a870:	e007      	b.n	800a882 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <f_open+0xfa>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a886:	2b00      	cmp	r3, #0
 800a888:	d168      	bne.n	800a95c <f_open+0x1d4>
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	f003 0308 	and.w	r3, r3, #8
 800a890:	2b00      	cmp	r3, #0
 800a892:	d063      	beq.n	800a95c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a894:	f7fe f8ce 	bl	8008a34 <get_fattime>
 800a898:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	330e      	adds	r3, #14
 800a89e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe fa19 	bl	8008cd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	3316      	adds	r3, #22
 800a8aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe fa13 	bl	8008cd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b4:	330b      	adds	r3, #11
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff f99c 	bl	8009bfe <ld_clust>
 800a8c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff f9b4 	bl	8009c3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	331c      	adds	r3, #28
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe f9fc 	bl	8008cd8 <st_dword>
					fs->wflag = 1;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d037      	beq.n	800a95c <f_open+0x1d4>
						dw = fs->winsect;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fec7 	bl	800968e <remove_chain>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d126      	bne.n	800a95c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe fc6c 	bl	80091f0 <move_window>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a922:	3a01      	subs	r2, #1
 800a924:	611a      	str	r2, [r3, #16]
 800a926:	e019      	b.n	800a95c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d115      	bne.n	800a95c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a930:	7ebb      	ldrb	r3, [r7, #26]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a93a:	2304      	movs	r3, #4
 800a93c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a940:	e00c      	b.n	800a95c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <f_open+0x1d4>
 800a94c:	7ebb      	ldrb	r3, [r7, #26]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <f_open+0x1d4>
						res = FR_DENIED;
 800a956:	2307      	movs	r3, #7
 800a958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a960:	2b00      	cmp	r3, #0
 800a962:	d128      	bne.n	800a9b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a974:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a97e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	f023 0301 	bic.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf14      	ite	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	2300      	moveq	r3, #0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	461a      	mov	r2, r3
 800a996:	f107 0314 	add.w	r3, r7, #20
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe faf5 	bl	8008f8c <inc_lock>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <f_open+0x22e>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 8095 	bne.w	800aaea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff f919 	bl	8009bfe <ld_clust>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	331c      	adds	r3, #28
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe f940 	bl	8008c5c <ld_dword>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	88da      	ldrh	r2, [r3, #6]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	79fa      	ldrb	r2, [r7, #7]
 800a9fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3330      	adds	r3, #48	; 0x30
 800aa12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe f9aa 	bl	8008d72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0320 	and.w	r3, r3, #32
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d060      	beq.n	800aaea <f_open+0x362>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d05c      	beq.n	800aaea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	895b      	ldrh	r3, [r3, #10]
 800aa3c:	025b      	lsls	r3, r3, #9
 800aa3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa4c:	e016      	b.n	800aa7c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fc87 	bl	8009366 <get_fat>
 800aa58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aa5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d802      	bhi.n	800aa66 <f_open+0x2de>
 800aa60:	2302      	movs	r3, #2
 800aa62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6c:	d102      	bne.n	800aa74 <f_open+0x2ec>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <f_open+0x304>
 800aa84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d8e0      	bhi.n	800aa4e <f_open+0x2c6>
				}
				fp->clust = clst;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aa92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d127      	bne.n	800aaea <f_open+0x362>
 800aa9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d022      	beq.n	800aaea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fc3d 	bl	8009328 <clust2sect>
 800aaae:	6478      	str	r0, [r7, #68]	; 0x44
 800aab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d103      	bne.n	800aabe <f_open+0x336>
						res = FR_INT_ERR;
 800aab6:	2302      	movs	r3, #2
 800aab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aabc:	e015      	b.n	800aaea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac0:	0a5a      	lsrs	r2, r3, #9
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac4:	441a      	add	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	7858      	ldrb	r0, [r3, #1]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6a1a      	ldr	r2, [r3, #32]
 800aad8:	2301      	movs	r3, #1
 800aada:	f7fe f849 	bl	8008b70 <disk_read>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <f_open+0x362>
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aaea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <f_open+0x370>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe f9a9 	bl	8008e58 <unlock_fs>
 800ab06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3760      	adds	r7, #96	; 0x60
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b08c      	sub	sp, #48	; 0x30
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f107 0210 	add.w	r2, r7, #16
 800ab30:	4611      	mov	r1, r2
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff fd7c 	bl	800a630 <validate>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d107      	bne.n	800ab56 <f_write+0x44>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	7d5b      	ldrb	r3, [r3, #21]
 800ab4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <f_write+0x58>
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe f97a 	bl	8008e58 <unlock_fs>
 800ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab68:	e173      	b.n	800ae52 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	7d1b      	ldrb	r3, [r3, #20]
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <f_write+0x72>
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2107      	movs	r1, #7
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe f96c 	bl	8008e58 <unlock_fs>
 800ab80:	2307      	movs	r3, #7
 800ab82:	e166      	b.n	800ae52 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	441a      	add	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	f080 814b 	bcs.w	800ae2c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	43db      	mvns	r3, r3
 800ab9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab9e:	e145      	b.n	800ae2c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f040 8101 	bne.w	800adb0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	0a5b      	lsrs	r3, r3, #9
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	8952      	ldrh	r2, [r2, #10]
 800abb8:	3a01      	subs	r2, #1
 800abba:	4013      	ands	r3, r2
 800abbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d14d      	bne.n	800ac60 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10c      	bne.n	800abe6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11a      	bne.n	800ac0e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fdbb 	bl	8009758 <create_chain>
 800abe2:	62b8      	str	r0, [r7, #40]	; 0x28
 800abe4:	e013      	b.n	800ac0e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7fe fe47 	bl	8009888 <clmt_clust>
 800abfa:	62b8      	str	r0, [r7, #40]	; 0x28
 800abfc:	e007      	b.n	800ac0e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	4619      	mov	r1, r3
 800ac06:	4610      	mov	r0, r2
 800ac08:	f7fe fda6 	bl	8009758 <create_chain>
 800ac0c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 8110 	beq.w	800ae36 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d109      	bne.n	800ac30 <f_write+0x11e>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	755a      	strb	r2, [r3, #21]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2102      	movs	r1, #2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f916 	bl	8008e58 <unlock_fs>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e110      	b.n	800ae52 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac36:	d109      	bne.n	800ac4c <f_write+0x13a>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	755a      	strb	r2, [r3, #21]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2101      	movs	r1, #1
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe f908 	bl	8008e58 <unlock_fs>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e102      	b.n	800ae52 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac50:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <f_write+0x14e>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac5e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	b25b      	sxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	da1d      	bge.n	800aca6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	7858      	ldrb	r0, [r3, #1]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6a1a      	ldr	r2, [r3, #32]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f7fd ff99 	bl	8008bb0 <disk_write>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d009      	beq.n	800ac98 <f_write+0x186>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2201      	movs	r2, #1
 800ac88:	755a      	strb	r2, [r3, #21]
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe f8e2 	bl	8008e58 <unlock_fs>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e0dc      	b.n	800ae52 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7d1b      	ldrb	r3, [r3, #20]
 800ac9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f7fe fb3a 	bl	8009328 <clust2sect>
 800acb4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <f_write+0x1be>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2202      	movs	r2, #2
 800acc0:	755a      	strb	r2, [r3, #21]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2102      	movs	r1, #2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe f8c6 	bl	8008e58 <unlock_fs>
 800accc:	2302      	movs	r3, #2
 800acce:	e0c0      	b.n	800ae52 <f_write+0x340>
			sect += csect;
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	4413      	add	r3, r2
 800acd6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	0a5b      	lsrs	r3, r3, #9
 800acdc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d041      	beq.n	800ad68 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	4413      	add	r3, r2
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	8952      	ldrh	r2, [r2, #10]
 800acee:	4293      	cmp	r3, r2
 800acf0:	d905      	bls.n	800acfe <f_write+0x1ec>
					cc = fs->csize - csect;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	895b      	ldrh	r3, [r3, #10]
 800acf6:	461a      	mov	r2, r3
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	7858      	ldrb	r0, [r3, #1]
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	69f9      	ldr	r1, [r7, #28]
 800ad08:	f7fd ff52 	bl	8008bb0 <disk_write>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <f_write+0x214>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	755a      	strb	r2, [r3, #21]
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe f89b 	bl	8008e58 <unlock_fs>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e095      	b.n	800ae52 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1a      	ldr	r2, [r3, #32]
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	6a3a      	ldr	r2, [r7, #32]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d915      	bls.n	800ad60 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6a1a      	ldr	r2, [r3, #32]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	025b      	lsls	r3, r3, #9
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	4413      	add	r3, r2
 800ad48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f7fd ffef 	bl	8008d30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	7d1b      	ldrb	r3, [r3, #20]
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	025b      	lsls	r3, r3, #9
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad66:	e044      	b.n	800adf2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d01b      	beq.n	800adaa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	699a      	ldr	r2, [r3, #24]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d215      	bcs.n	800adaa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	7858      	ldrb	r0, [r3, #1]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad88:	2301      	movs	r3, #1
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	f7fd fef0 	bl	8008b70 <disk_read>
 800ad90:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	755a      	strb	r2, [r3, #21]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2101      	movs	r1, #1
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe f859 	bl	8008e58 <unlock_fs>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e053      	b.n	800ae52 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800adbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d901      	bls.n	800adca <f_write+0x2b8>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add8:	4413      	add	r3, r2
 800adda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800addc:	69f9      	ldr	r1, [r7, #28]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fd ffa6 	bl	8008d30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	7d1b      	ldrb	r3, [r3, #20]
 800ade8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adec:	b2da      	uxtb	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	4413      	add	r3, r2
 800adf8:	61fb      	str	r3, [r7, #28]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	441a      	add	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	619a      	str	r2, [r3, #24]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	bf38      	it	cc
 800ae12:	461a      	movcc	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	441a      	add	r2, r3
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f47f aeb6 	bne.w	800aba0 <f_write+0x8e>
 800ae34:	e000      	b.n	800ae38 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae36:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2100      	movs	r1, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe f804 	bl	8008e58 <unlock_fs>
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3730      	adds	r7, #48	; 0x30
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f107 0208 	add.w	r2, r7, #8
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fbe0 	bl	800a630 <validate>
 800ae70:	4603      	mov	r3, r0
 800ae72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d16d      	bne.n	800af56 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	7d1b      	ldrb	r3, [r3, #20]
 800ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d067      	beq.n	800af56 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7d1b      	ldrb	r3, [r3, #20]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	da1a      	bge.n	800aec6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	7858      	ldrb	r0, [r3, #1]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1a      	ldr	r2, [r3, #32]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	f7fd fe86 	bl	8008bb0 <disk_write>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d006      	beq.n	800aeb8 <f_sync+0x5e>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2101      	movs	r1, #1
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd ffd2 	bl	8008e58 <unlock_fs>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e055      	b.n	800af64 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	7d1b      	ldrb	r3, [r3, #20]
 800aebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aec6:	f7fd fdb5 	bl	8008a34 <get_fattime>
 800aeca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f7fe f98b 	bl	80091f0 <move_window>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d138      	bne.n	800af56 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	330b      	adds	r3, #11
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	330b      	adds	r3, #11
 800aef4:	f042 0220 	orr.w	r2, r2, #32
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	461a      	mov	r2, r3
 800af06:	68f9      	ldr	r1, [r7, #12]
 800af08:	f7fe fe98 	bl	8009c3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f103 021c 	add.w	r2, r3, #28
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	4619      	mov	r1, r3
 800af18:	4610      	mov	r0, r2
 800af1a:	f7fd fedd 	bl	8008cd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3316      	adds	r3, #22
 800af22:	6939      	ldr	r1, [r7, #16]
 800af24:	4618      	mov	r0, r3
 800af26:	f7fd fed7 	bl	8008cd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3312      	adds	r3, #18
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f7fd feb6 	bl	8008ca2 <st_word>
					fs->wflag = 1;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2201      	movs	r2, #1
 800af3a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe f984 	bl	800924c <sync_fs>
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7d1b      	ldrb	r3, [r3, #20]
 800af4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af50:	b2da      	uxtb	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	7dfa      	ldrb	r2, [r7, #23]
 800af5a:	4611      	mov	r1, r2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd ff7b 	bl	8008e58 <unlock_fs>
 800af62:	7dfb      	ldrb	r3, [r7, #23]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff ff70 	bl	800ae5a <f_sync>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d11d      	bne.n	800afc0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f107 0208 	add.w	r2, r7, #8
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff fb4f 	bl	800a630 <validate>
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d111      	bne.n	800afc0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe f881 	bl	80090a8 <dec_lock>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd ff4c 	bl	8008e58 <unlock_fs>
#endif
		}
	}
	return res;
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b090      	sub	sp, #64	; 0x40
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800afd4:	f107 010c 	add.w	r1, r7, #12
 800afd8:	1d3b      	adds	r3, r7, #4
 800afda:	2200      	movs	r2, #0
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff f8d3 	bl	800a188 <find_volume>
 800afe2:	4603      	mov	r3, r0
 800afe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800afe8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800afec:	2b00      	cmp	r3, #0
 800afee:	d11f      	bne.n	800b030 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe ffb9 	bl	8009f70 <follow_path>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b004:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d111      	bne.n	800b030 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b00c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b010:	b25b      	sxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	da03      	bge.n	800b01e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b016:	2306      	movs	r3, #6
 800b018:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b01c:	e008      	b.n	800b030 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d005      	beq.n	800b030 <f_stat+0x66>
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fead 	bl	8009d8a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fd ff0d 	bl	8008e58 <unlock_fs>
 800b03e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b042:	4618      	mov	r0, r3
 800b044:	3740      	adds	r7, #64	; 0x40
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b05a:	2301      	movs	r3, #1
 800b05c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b062:	4b1f      	ldr	r3, [pc, #124]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b064:	7a5b      	ldrb	r3, [r3, #9]
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d131      	bne.n	800b0d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b06c:	4b1c      	ldr	r3, [pc, #112]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b06e:	7a5b      	ldrb	r3, [r3, #9]
 800b070:	b2db      	uxtb	r3, r3
 800b072:	461a      	mov	r2, r3
 800b074:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b076:	2100      	movs	r1, #0
 800b078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b07a:	4b19      	ldr	r3, [pc, #100]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b07c:	7a5b      	ldrb	r3, [r3, #9]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	4a17      	ldr	r2, [pc, #92]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b08a:	4b15      	ldr	r3, [pc, #84]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b08c:	7a5b      	ldrb	r3, [r3, #9]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	461a      	mov	r2, r3
 800b092:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b094:	4413      	add	r3, r2
 800b096:	79fa      	ldrb	r2, [r7, #7]
 800b098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b09a:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b09c:	7a5b      	ldrb	r3, [r3, #9]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	b2d1      	uxtb	r1, r2
 800b0a4:	4a0e      	ldr	r2, [pc, #56]	; (800b0e0 <FATFS_LinkDriverEx+0x94>)
 800b0a6:	7251      	strb	r1, [r2, #9]
 800b0a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0aa:	7dbb      	ldrb	r3, [r7, #22]
 800b0ac:	3330      	adds	r3, #48	; 0x30
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	223a      	movs	r2, #58	; 0x3a
 800b0ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3302      	adds	r3, #2
 800b0c0:	222f      	movs	r2, #47	; 0x2f
 800b0c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	200008f4 	.word	0x200008f4

0800b0e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff ffaa 	bl	800b04c <FATFS_LinkDriverEx>
 800b0f8:	4603      	mov	r3, r0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	4603      	mov	r3, r0
 800b10a:	6039      	str	r1, [r7, #0]
 800b10c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b10e:	2200      	movs	r2, #0
 800b110:	2101      	movs	r1, #1
 800b112:	2001      	movs	r0, #1
 800b114:	f000 fa36 	bl	800b584 <osSemaphoreNew>
 800b118:	4602      	mov	r2, r0
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	bf14      	ite	ne
 800b126:	2301      	movne	r3, #1
 800b128:	2300      	moveq	r3, #0
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	60fb      	str	r3, [r7, #12]

    return ret;
 800b12e:	68fb      	ldr	r3, [r7, #12]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fb3f 	bl	800b7c4 <osSemaphoreDelete>
#endif
    return 1;
 800b146:	2301      	movs	r3, #1
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b15c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa99 	bl	800b698 <osSemaphoreAcquire>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b16c:	2301      	movs	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b170:	68fb      	ldr	r3, [r7, #12]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fada 	bl	800b73c <osSemaphoreRelease>
#endif
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <__NVIC_SetPriority>:
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	6039      	str	r1, [r7, #0]
 800b19a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b19c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	db0a      	blt.n	800b1ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	490c      	ldr	r1, [pc, #48]	; (800b1dc <__NVIC_SetPriority+0x4c>)
 800b1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1ae:	0112      	lsls	r2, r2, #4
 800b1b0:	b2d2      	uxtb	r2, r2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b1b8:	e00a      	b.n	800b1d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	4908      	ldr	r1, [pc, #32]	; (800b1e0 <__NVIC_SetPriority+0x50>)
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	f003 030f 	and.w	r3, r3, #15
 800b1c6:	3b04      	subs	r3, #4
 800b1c8:	0112      	lsls	r2, r2, #4
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	761a      	strb	r2, [r3, #24]
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	e000e100 	.word	0xe000e100
 800b1e0:	e000ed00 	.word	0xe000ed00

0800b1e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <SysTick_Handler+0x1c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1ec:	f002 faf8 	bl	800d7e0 <xTaskGetSchedulerState>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d001      	beq.n	800b1fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1f6:	f003 fa97 	bl	800e728 <xPortSysTickHandler>
  }
}
 800b1fa:	bf00      	nop
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	e000e010 	.word	0xe000e010

0800b204 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b208:	2100      	movs	r1, #0
 800b20a:	f06f 0004 	mvn.w	r0, #4
 800b20e:	f7ff ffbf 	bl	800b190 <__NVIC_SetPriority>
#endif
}
 800b212:	bf00      	nop
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b21e:	f3ef 8305 	mrs	r3, IPSR
 800b222:	603b      	str	r3, [r7, #0]
  return(result);
 800b224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b22a:	f06f 0305 	mvn.w	r3, #5
 800b22e:	607b      	str	r3, [r7, #4]
 800b230:	e00c      	b.n	800b24c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b232:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <osKernelInitialize+0x44>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d105      	bne.n	800b246 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b23a:	4b08      	ldr	r3, [pc, #32]	; (800b25c <osKernelInitialize+0x44>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b240:	2300      	movs	r3, #0
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	e002      	b.n	800b24c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b246:	f04f 33ff 	mov.w	r3, #4294967295
 800b24a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b24c:	687b      	ldr	r3, [r7, #4]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	20000900 	.word	0x20000900

0800b260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b266:	f3ef 8305 	mrs	r3, IPSR
 800b26a:	603b      	str	r3, [r7, #0]
  return(result);
 800b26c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b272:	f06f 0305 	mvn.w	r3, #5
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	e010      	b.n	800b29c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b27a:	4b0b      	ldr	r3, [pc, #44]	; (800b2a8 <osKernelStart+0x48>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d109      	bne.n	800b296 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b282:	f7ff ffbf 	bl	800b204 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b286:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <osKernelStart+0x48>)
 800b288:	2202      	movs	r2, #2
 800b28a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b28c:	f001 fe84 	bl	800cf98 <vTaskStartScheduler>
      stat = osOK;
 800b290:	2300      	movs	r3, #0
 800b292:	607b      	str	r3, [r7, #4]
 800b294:	e002      	b.n	800b29c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295
 800b29a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b29c:	687b      	ldr	r3, [r7, #4]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000900 	.word	0x20000900

0800b2ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08e      	sub	sp, #56	; 0x38
 800b2b0:	af04      	add	r7, sp, #16
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2bc:	f3ef 8305 	mrs	r3, IPSR
 800b2c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b2c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d17e      	bne.n	800b3c6 <osThreadNew+0x11a>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d07b      	beq.n	800b3c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b2ce:	2380      	movs	r3, #128	; 0x80
 800b2d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2d2:	2318      	movs	r3, #24
 800b2d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295
 800b2de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d045      	beq.n	800b372 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <osThreadNew+0x48>
        name = attr->name;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d008      	beq.n	800b31a <osThreadNew+0x6e>
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2b38      	cmp	r3, #56	; 0x38
 800b30c:	d805      	bhi.n	800b31a <osThreadNew+0x6e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <osThreadNew+0x72>
        return (NULL);
 800b31a:	2300      	movs	r3, #0
 800b31c:	e054      	b.n	800b3c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	089b      	lsrs	r3, r3, #2
 800b32c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00e      	beq.n	800b354 <osThreadNew+0xa8>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	2bbb      	cmp	r3, #187	; 0xbb
 800b33c:	d90a      	bls.n	800b354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	d006      	beq.n	800b354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <osThreadNew+0xa8>
        mem = 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	61bb      	str	r3, [r7, #24]
 800b352:	e010      	b.n	800b376 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10c      	bne.n	800b376 <osThreadNew+0xca>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <osThreadNew+0xca>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <osThreadNew+0xca>
          mem = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61bb      	str	r3, [r7, #24]
 800b370:	e001      	b.n	800b376 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d110      	bne.n	800b39e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b384:	9202      	str	r2, [sp, #8]
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6a3a      	ldr	r2, [r7, #32]
 800b390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f001 fc24 	bl	800cbe0 <xTaskCreateStatic>
 800b398:	4603      	mov	r3, r0
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	e013      	b.n	800b3c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d110      	bne.n	800b3c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	f107 0310 	add.w	r3, r7, #16
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f001 fc6f 	bl	800cc9a <xTaskCreate>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d001      	beq.n	800b3c6 <osThreadNew+0x11a>
            hTask = NULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b3c6:	693b      	ldr	r3, [r7, #16]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3728      	adds	r7, #40	; 0x28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3d8:	f3ef 8305 	mrs	r3, IPSR
 800b3dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <osDelay+0x1c>
    stat = osErrorISR;
 800b3e4:	f06f 0305 	mvn.w	r3, #5
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	e007      	b.n	800b3fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f001 fd9a 	bl	800cf30 <vTaskDelay>
    }
  }

  return (stat);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f002 ffac 	bl	800e36c <pvTimerGetTimerID>
 800b414:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	6852      	ldr	r2, [r2, #4]
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
  }
}
 800b428:	bf00      	nop
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b430:	b580      	push	{r7, lr}
 800b432:	b08c      	sub	sp, #48	; 0x30
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	607a      	str	r2, [r7, #4]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	460b      	mov	r3, r1
 800b43e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b440:	2300      	movs	r3, #0
 800b442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b444:	f3ef 8305 	mrs	r3, IPSR
 800b448:	613b      	str	r3, [r7, #16]
  return(result);
 800b44a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d163      	bne.n	800b518 <osTimerNew+0xe8>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d060      	beq.n	800b518 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b456:	2008      	movs	r0, #8
 800b458:	f003 f9f6 	bl	800e848 <pvPortMalloc>
 800b45c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d059      	beq.n	800b518 <osTimerNew+0xe8>
      callb->func = func;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <osTimerNew+0x4c>
        reload = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	61fb      	str	r3, [r7, #28]
 800b47a:	e001      	b.n	800b480 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b480:	f04f 33ff 	mov.w	r3, #4294967295
 800b484:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b486:	2300      	movs	r3, #0
 800b488:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01c      	beq.n	800b4ca <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <osTimerNew+0x6e>
          name = attr->name;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d006      	beq.n	800b4b4 <osTimerNew+0x84>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	2b2b      	cmp	r3, #43	; 0x2b
 800b4ac:	d902      	bls.n	800b4b4 <osTimerNew+0x84>
          mem = 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61bb      	str	r3, [r7, #24]
 800b4b2:	e00c      	b.n	800b4ce <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d108      	bne.n	800b4ce <osTimerNew+0x9e>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d104      	bne.n	800b4ce <osTimerNew+0x9e>
            mem = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61bb      	str	r3, [r7, #24]
 800b4c8:	e001      	b.n	800b4ce <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d10c      	bne.n	800b4ee <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	4b12      	ldr	r3, [pc, #72]	; (800b524 <osTimerNew+0xf4>)
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	69fa      	ldr	r2, [r7, #28]
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4e6:	f002 fbc2 	bl	800dc6e <xTimerCreateStatic>
 800b4ea:	6238      	str	r0, [r7, #32]
 800b4ec:	e00b      	b.n	800b506 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d108      	bne.n	800b506 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b4f4:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <osTimerNew+0xf4>)
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	69fa      	ldr	r2, [r7, #28]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b500:	f002 fb94 	bl	800dc2c <xTimerCreate>
 800b504:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d105      	bne.n	800b518 <osTimerNew+0xe8>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <osTimerNew+0xe8>
        vPortFree (callb);
 800b512:	6978      	ldr	r0, [r7, #20]
 800b514:	f003 fa64 	bl	800e9e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b518:	6a3b      	ldr	r3, [r7, #32]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3728      	adds	r7, #40	; 0x28
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	0800b407 	.word	0x0800b407

0800b528 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b536:	f3ef 8305 	mrs	r3, IPSR
 800b53a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b53c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <osTimerStart+0x22>
    stat = osErrorISR;
 800b542:	f06f 0305 	mvn.w	r3, #5
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	e017      	b.n	800b57a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b550:	f06f 0303 	mvn.w	r3, #3
 800b554:	617b      	str	r3, [r7, #20]
 800b556:	e010      	b.n	800b57a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b558:	2300      	movs	r3, #0
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2300      	movs	r3, #0
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	2104      	movs	r1, #4
 800b562:	6938      	ldr	r0, [r7, #16]
 800b564:	f002 fbfc 	bl	800dd60 <xTimerGenericCommand>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d102      	bne.n	800b574 <osTimerStart+0x4c>
      stat = osOK;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]
 800b572:	e002      	b.n	800b57a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b574:	f06f 0302 	mvn.w	r3, #2
 800b578:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b57a:	697b      	ldr	r3, [r7, #20]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b584:	b580      	push	{r7, lr}
 800b586:	b08a      	sub	sp, #40	; 0x28
 800b588:	af02      	add	r7, sp, #8
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b594:	f3ef 8305 	mrs	r3, IPSR
 800b598:	613b      	str	r3, [r7, #16]
  return(result);
 800b59a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d175      	bne.n	800b68c <osSemaphoreNew+0x108>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d072      	beq.n	800b68c <osSemaphoreNew+0x108>
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d86e      	bhi.n	800b68c <osSemaphoreNew+0x108>
    mem = -1;
 800b5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d015      	beq.n	800b5e6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d006      	beq.n	800b5d0 <osSemaphoreNew+0x4c>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	2b4f      	cmp	r3, #79	; 0x4f
 800b5c8:	d902      	bls.n	800b5d0 <osSemaphoreNew+0x4c>
        mem = 1;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	61bb      	str	r3, [r7, #24]
 800b5ce:	e00c      	b.n	800b5ea <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d108      	bne.n	800b5ea <osSemaphoreNew+0x66>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <osSemaphoreNew+0x66>
          mem = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61bb      	str	r3, [r7, #24]
 800b5e4:	e001      	b.n	800b5ea <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d04c      	beq.n	800b68c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d128      	bne.n	800b64a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d10a      	bne.n	800b614 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2203      	movs	r2, #3
 800b604:	9200      	str	r2, [sp, #0]
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	2001      	movs	r0, #1
 800b60c:	f000 fb73 	bl	800bcf6 <xQueueGenericCreateStatic>
 800b610:	61f8      	str	r0, [r7, #28]
 800b612:	e005      	b.n	800b620 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b614:	2203      	movs	r2, #3
 800b616:	2100      	movs	r1, #0
 800b618:	2001      	movs	r0, #1
 800b61a:	f000 fbe4 	bl	800bde6 <xQueueGenericCreate>
 800b61e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d022      	beq.n	800b66c <osSemaphoreNew+0xe8>
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d01f      	beq.n	800b66c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b62c:	2300      	movs	r3, #0
 800b62e:	2200      	movs	r2, #0
 800b630:	2100      	movs	r1, #0
 800b632:	69f8      	ldr	r0, [r7, #28]
 800b634:	f000 fc9e 	bl	800bf74 <xQueueGenericSend>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d016      	beq.n	800b66c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b63e:	69f8      	ldr	r0, [r7, #28]
 800b640:	f001 f8fa 	bl	800c838 <vQueueDelete>
            hSemaphore = NULL;
 800b644:	2300      	movs	r3, #0
 800b646:	61fb      	str	r3, [r7, #28]
 800b648:	e010      	b.n	800b66c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d108      	bne.n	800b662 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	461a      	mov	r2, r3
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 fc21 	bl	800bea0 <xQueueCreateCountingSemaphoreStatic>
 800b65e:	61f8      	str	r0, [r7, #28]
 800b660:	e004      	b.n	800b66c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 fc52 	bl	800bf0e <xQueueCreateCountingSemaphore>
 800b66a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00c      	beq.n	800b68c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d003      	beq.n	800b680 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	e001      	b.n	800b684 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b684:	6979      	ldr	r1, [r7, #20]
 800b686:	69f8      	ldr	r0, [r7, #28]
 800b688:	f001 fa22 	bl	800cad0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b68c:	69fb      	ldr	r3, [r7, #28]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b6b0:	f06f 0303 	mvn.w	r3, #3
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e039      	b.n	800b72c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6b8:	f3ef 8305 	mrs	r3, IPSR
 800b6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d022      	beq.n	800b70a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b6ca:	f06f 0303 	mvn.w	r3, #3
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	e02c      	b.n	800b72c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b6d6:	f107 0308 	add.w	r3, r7, #8
 800b6da:	461a      	mov	r2, r3
 800b6dc:	2100      	movs	r1, #0
 800b6de:	6938      	ldr	r0, [r7, #16]
 800b6e0:	f001 f82a 	bl	800c738 <xQueueReceiveFromISR>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d003      	beq.n	800b6f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b6ea:	f06f 0302 	mvn.w	r3, #2
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e01c      	b.n	800b72c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d019      	beq.n	800b72c <osSemaphoreAcquire+0x94>
 800b6f8:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <osSemaphoreAcquire+0xa0>)
 800b6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	e010      	b.n	800b72c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6938      	ldr	r0, [r7, #16]
 800b70e:	f000 ff13 	bl	800c538 <xQueueSemaphoreTake>
 800b712:	4603      	mov	r3, r0
 800b714:	2b01      	cmp	r3, #1
 800b716:	d009      	beq.n	800b72c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b71e:	f06f 0301 	mvn.w	r3, #1
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e002      	b.n	800b72c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b726:	f06f 0302 	mvn.w	r3, #2
 800b72a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b72c:	697b      	ldr	r3, [r7, #20]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b748:	2300      	movs	r3, #0
 800b74a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d103      	bne.n	800b75a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b752:	f06f 0303 	mvn.w	r3, #3
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	e02c      	b.n	800b7b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b75a:	f3ef 8305 	mrs	r3, IPSR
 800b75e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b760:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b762:	2b00      	cmp	r3, #0
 800b764:	d01a      	beq.n	800b79c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b766:	2300      	movs	r3, #0
 800b768:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b76a:	f107 0308 	add.w	r3, r7, #8
 800b76e:	4619      	mov	r1, r3
 800b770:	6938      	ldr	r0, [r7, #16]
 800b772:	f000 fd80 	bl	800c276 <xQueueGiveFromISR>
 800b776:	4603      	mov	r3, r0
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d003      	beq.n	800b784 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b77c:	f06f 0302 	mvn.w	r3, #2
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	e017      	b.n	800b7b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d014      	beq.n	800b7b4 <osSemaphoreRelease+0x78>
 800b78a:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <osSemaphoreRelease+0x84>)
 800b78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	e00b      	b.n	800b7b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b79c:	2300      	movs	r3, #0
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6938      	ldr	r0, [r7, #16]
 800b7a4:	f000 fbe6 	bl	800bf74 <xQueueGenericSend>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d002      	beq.n	800b7b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b7ae:	f06f 0302 	mvn.w	r3, #2
 800b7b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b7b4:	697b      	ldr	r3, [r7, #20]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d0:	f3ef 8305 	mrs	r3, IPSR
 800b7d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b7dc:	f06f 0305 	mvn.w	r3, #5
 800b7e0:	617b      	str	r3, [r7, #20]
 800b7e2:	e00e      	b.n	800b802 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b7ea:	f06f 0303 	mvn.w	r3, #3
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e007      	b.n	800b802 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b7f2:	6938      	ldr	r0, [r7, #16]
 800b7f4:	f001 f996 	bl	800cb24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b7fc:	6938      	ldr	r0, [r7, #16]
 800b7fe:	f001 f81b 	bl	800c838 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b802:	697b      	ldr	r3, [r7, #20]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af02      	add	r7, sp, #8
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b81c:	f3ef 8305 	mrs	r3, IPSR
 800b820:	613b      	str	r3, [r7, #16]
  return(result);
 800b822:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b824:	2b00      	cmp	r3, #0
 800b826:	d15f      	bne.n	800b8e8 <osMessageQueueNew+0xdc>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d05c      	beq.n	800b8e8 <osMessageQueueNew+0xdc>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d059      	beq.n	800b8e8 <osMessageQueueNew+0xdc>
    mem = -1;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d029      	beq.n	800b894 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d012      	beq.n	800b86e <osMessageQueueNew+0x62>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	2b4f      	cmp	r3, #79	; 0x4f
 800b84e:	d90e      	bls.n	800b86e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00a      	beq.n	800b86e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	695a      	ldr	r2, [r3, #20]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	429a      	cmp	r2, r3
 800b866:	d302      	bcc.n	800b86e <osMessageQueueNew+0x62>
        mem = 1;
 800b868:	2301      	movs	r3, #1
 800b86a:	61bb      	str	r3, [r7, #24]
 800b86c:	e014      	b.n	800b898 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d110      	bne.n	800b898 <osMessageQueueNew+0x8c>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10c      	bne.n	800b898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b882:	2b00      	cmp	r3, #0
 800b884:	d108      	bne.n	800b898 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d104      	bne.n	800b898 <osMessageQueueNew+0x8c>
          mem = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	61bb      	str	r3, [r7, #24]
 800b892:	e001      	b.n	800b898 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d10b      	bne.n	800b8b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	9100      	str	r1, [sp, #0]
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 fa22 	bl	800bcf6 <xQueueGenericCreateStatic>
 800b8b2:	61f8      	str	r0, [r7, #28]
 800b8b4:	e008      	b.n	800b8c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d105      	bne.n	800b8c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b8bc:	2200      	movs	r2, #0
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 fa90 	bl	800bde6 <xQueueGenericCreate>
 800b8c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00c      	beq.n	800b8e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <osMessageQueueNew+0xd0>
        name = attr->name;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e001      	b.n	800b8e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b8e0:	6979      	ldr	r1, [r7, #20]
 800b8e2:	69f8      	ldr	r0, [r7, #28]
 800b8e4:	f001 f8f4 	bl	800cad0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b8e8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3720      	adds	r7, #32
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b088      	sub	sp, #32
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	4613      	mov	r3, r2
 800b902:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90c:	f3ef 8305 	mrs	r3, IPSR
 800b910:	617b      	str	r3, [r7, #20]
  return(result);
 800b912:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b914:	2b00      	cmp	r3, #0
 800b916:	d028      	beq.n	800b96a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <osMessageQueuePut+0x36>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <osMessageQueuePut+0x36>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b92a:	f06f 0303 	mvn.w	r3, #3
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e038      	b.n	800b9a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b932:	2300      	movs	r3, #0
 800b934:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b936:	f107 0210 	add.w	r2, r7, #16
 800b93a:	2300      	movs	r3, #0
 800b93c:	68b9      	ldr	r1, [r7, #8]
 800b93e:	69b8      	ldr	r0, [r7, #24]
 800b940:	f000 fbfe 	bl	800c140 <xQueueGenericSendFromISR>
 800b944:	4603      	mov	r3, r0
 800b946:	2b01      	cmp	r3, #1
 800b948:	d003      	beq.n	800b952 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b94a:	f06f 0302 	mvn.w	r3, #2
 800b94e:	61fb      	str	r3, [r7, #28]
 800b950:	e028      	b.n	800b9a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d025      	beq.n	800b9a4 <osMessageQueuePut+0xb0>
 800b958:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <osMessageQueuePut+0xbc>)
 800b95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	e01c      	b.n	800b9a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <osMessageQueuePut+0x82>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b976:	f06f 0303 	mvn.w	r3, #3
 800b97a:	61fb      	str	r3, [r7, #28]
 800b97c:	e012      	b.n	800b9a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b97e:	2300      	movs	r3, #0
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	69b8      	ldr	r0, [r7, #24]
 800b986:	f000 faf5 	bl	800bf74 <xQueueGenericSend>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d009      	beq.n	800b9a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b996:	f06f 0301 	mvn.w	r3, #1
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e002      	b.n	800b9a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b99e:	f06f 0302 	mvn.w	r3, #2
 800b9a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b9a4:	69fb      	ldr	r3, [r7, #28]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3720      	adds	r7, #32
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	e000ed04 	.word	0xe000ed04

0800b9b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ca:	f3ef 8305 	mrs	r3, IPSR
 800b9ce:	617b      	str	r3, [r7, #20]
  return(result);
 800b9d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d028      	beq.n	800ba28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <osMessageQueueGet+0x34>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <osMessageQueueGet+0x34>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b9e8:	f06f 0303 	mvn.w	r3, #3
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	e037      	b.n	800ba60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b9f4:	f107 0310 	add.w	r3, r7, #16
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	69b8      	ldr	r0, [r7, #24]
 800b9fe:	f000 fe9b 	bl	800c738 <xQueueReceiveFromISR>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d003      	beq.n	800ba10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ba08:	f06f 0302 	mvn.w	r3, #2
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	e027      	b.n	800ba60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d024      	beq.n	800ba60 <osMessageQueueGet+0xac>
 800ba16:	4b15      	ldr	r3, [pc, #84]	; (800ba6c <osMessageQueueGet+0xb8>)
 800ba18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	e01b      	b.n	800ba60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <osMessageQueueGet+0x80>
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d103      	bne.n	800ba3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ba34:	f06f 0303 	mvn.w	r3, #3
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	e011      	b.n	800ba60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	68b9      	ldr	r1, [r7, #8]
 800ba40:	69b8      	ldr	r0, [r7, #24]
 800ba42:	f000 fca5 	bl	800c390 <xQueueReceive>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d009      	beq.n	800ba60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ba52:	f06f 0301 	mvn.w	r3, #1
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	e002      	b.n	800ba60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ba5a:	f06f 0302 	mvn.w	r3, #2
 800ba5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ba60:	69fb      	ldr	r3, [r7, #28]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	e000ed04 	.word	0xe000ed04

0800ba70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4a07      	ldr	r2, [pc, #28]	; (800ba9c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4a06      	ldr	r2, [pc, #24]	; (800baa0 <vApplicationGetIdleTaskMemory+0x30>)
 800ba86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2280      	movs	r2, #128	; 0x80
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20000904 	.word	0x20000904
 800baa0:	200009c0 	.word	0x200009c0

0800baa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4a07      	ldr	r2, [pc, #28]	; (800bad0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <vApplicationGetTimerTaskMemory+0x30>)
 800baba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bac2:	601a      	str	r2, [r3, #0]
}
 800bac4:	bf00      	nop
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	20000bc0 	.word	0x20000bc0
 800bad4:	20000c7c 	.word	0x20000c7c

0800bad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f103 0208 	add.w	r2, r3, #8
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f04f 32ff 	mov.w	r2, #4294967295
 800baf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f103 0208 	add.w	r2, r3, #8
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f103 0208 	add.w	r2, r3, #8
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb26:	bf00      	nop
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b085      	sub	sp, #20
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb90:	d103      	bne.n	800bb9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e00c      	b.n	800bbb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	e002      	b.n	800bba8 <vListInsert+0x2e>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d2f6      	bcs.n	800bba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	1c5a      	adds	r2, r3, #1
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6892      	ldr	r2, [r2, #8]
 800bc02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6852      	ldr	r2, [r2, #4]
 800bc0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d103      	bne.n	800bc20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	1e5a      	subs	r2, r3, #1
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc6a:	f002 fccb 	bl	800e604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	441a      	add	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	68f9      	ldr	r1, [r7, #12]
 800bc9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bca0:	fb01 f303 	mul.w	r3, r1, r3
 800bca4:	441a      	add	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	22ff      	movs	r2, #255	; 0xff
 800bcae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d109      	bne.n	800bcd4 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00f      	beq.n	800bce8 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3310      	adds	r3, #16
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fbcb 	bl	800d468 <xTaskRemoveFromEventList>
 800bcd2:	e009      	b.n	800bce8 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3310      	adds	r3, #16
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff fefd 	bl	800bad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3324      	adds	r3, #36	; 0x24
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7ff fef8 	bl	800bad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bce8:	f002 fcbc 	bl	800e664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcec:	2301      	movs	r3, #1
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b08e      	sub	sp, #56	; 0x38
 800bcfa:	af02      	add	r7, sp, #8
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd38:	bf00      	nop
 800bd3a:	e7fe      	b.n	800bd3a <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <xQueueGenericCreateStatic+0x52>
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <xQueueGenericCreateStatic+0x56>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e000      	b.n	800bd4e <xQueueGenericCreateStatic+0x58>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10a      	bne.n	800bd68 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	623b      	str	r3, [r7, #32]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <xQueueGenericCreateStatic+0x7e>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <xQueueGenericCreateStatic+0x82>
 800bd74:	2301      	movs	r3, #1
 800bd76:	e000      	b.n	800bd7a <xQueueGenericCreateStatic+0x84>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	61fb      	str	r3, [r7, #28]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd94:	2350      	movs	r3, #80	; 0x50
 800bd96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b50      	cmp	r3, #80	; 0x50
 800bd9c:	d00a      	beq.n	800bdb4 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	61bb      	str	r3, [r7, #24]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00d      	beq.n	800bddc <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdc8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	68b9      	ldr	r1, [r7, #8]
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 f83f 	bl	800be5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3730      	adds	r7, #48	; 0x30
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b08a      	sub	sp, #40	; 0x28
 800bdea:	af02      	add	r7, sp, #8
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	613b      	str	r3, [r7, #16]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	fb02 f303 	mul.w	r3, r2, r3
 800be18:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	3350      	adds	r3, #80	; 0x50
 800be1e:	4618      	mov	r0, r3
 800be20:	f002 fd12 	bl	800e848 <pvPortMalloc>
 800be24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d011      	beq.n	800be50 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	3350      	adds	r3, #80	; 0x50
 800be34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be3e:	79fa      	ldrb	r2, [r7, #7]
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	4613      	mov	r3, r2
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f805 	bl	800be5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be50:	69bb      	ldr	r3, [r7, #24]
	}
 800be52:	4618      	mov	r0, r3
 800be54:	3720      	adds	r7, #32
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	60f8      	str	r0, [r7, #12]
 800be62:	60b9      	str	r1, [r7, #8]
 800be64:	607a      	str	r2, [r7, #4]
 800be66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d103      	bne.n	800be76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	e002      	b.n	800be7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be88:	2101      	movs	r1, #1
 800be8a:	69b8      	ldr	r0, [r7, #24]
 800be8c:	f7ff fed8 	bl	800bc40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be98:	bf00      	nop
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b08a      	sub	sp, #40	; 0x28
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	61bb      	str	r3, [r7, #24]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	429a      	cmp	r2, r3
 800bece:	d90a      	bls.n	800bee6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	617b      	str	r3, [r7, #20]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bee6:	2302      	movs	r3, #2
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	2100      	movs	r1, #0
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f7ff ff00 	bl	800bcf6 <xQueueGenericCreateStatic>
 800bef6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf04:	69fb      	ldr	r3, [r7, #28]
	}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3720      	adds	r7, #32
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b086      	sub	sp, #24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	613b      	str	r3, [r7, #16]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d90a      	bls.n	800bf52 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60fb      	str	r3, [r7, #12]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf52:	2202      	movs	r2, #2
 800bf54:	2100      	movs	r1, #0
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ff45 	bl	800bde6 <xQueueGenericCreate>
 800bf5c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf6a:	697b      	ldr	r3, [r7, #20]
	}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08e      	sub	sp, #56	; 0x38
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf82:	2300      	movs	r3, #0
 800bf84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericSend+0x32>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <xQueueGenericSend+0x40>
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <xQueueGenericSend+0x44>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e000      	b.n	800bfba <xQueueGenericSend+0x46>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <xQueueGenericSend+0x60>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d103      	bne.n	800bfe2 <xQueueGenericSend+0x6e>
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d101      	bne.n	800bfe6 <xQueueGenericSend+0x72>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <xQueueGenericSend+0x74>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <xQueueGenericSend+0x8e>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	623b      	str	r3, [r7, #32]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c002:	f001 fbed 	bl	800d7e0 <xTaskGetSchedulerState>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <xQueueGenericSend+0x9e>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <xQueueGenericSend+0xa2>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <xQueueGenericSend+0xa4>
 800c016:	2300      	movs	r3, #0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <xQueueGenericSend+0xbe>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	61fb      	str	r3, [r7, #28]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c032:	f002 fae7 	bl	800e604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	429a      	cmp	r2, r3
 800c040:	d302      	bcc.n	800c048 <xQueueGenericSend+0xd4>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d112      	bne.n	800c06e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c04e:	f000 fc2e 	bl	800c8ae <prvCopyDataToQueue>
 800c052:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	3324      	adds	r3, #36	; 0x24
 800c060:	4618      	mov	r0, r3
 800c062:	f001 fa01 	bl	800d468 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c066:	f002 fafd 	bl	800e664 <vPortExitCritical>
				return pdPASS;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e062      	b.n	800c134 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d103      	bne.n	800c07c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c074:	f002 faf6 	bl	800e664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	e05b      	b.n	800c134 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c082:	f107 0314 	add.w	r3, r7, #20
 800c086:	4618      	mov	r0, r3
 800c088:	f001 fa52 	bl	800d530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c08c:	2301      	movs	r3, #1
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c090:	f002 fae8 	bl	800e664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c094:	f000 fff0 	bl	800d078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c098:	f002 fab4 	bl	800e604 <vPortEnterCritical>
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a2:	b25b      	sxtb	r3, r3
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d103      	bne.n	800c0b2 <xQueueGenericSend+0x13e>
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0b8:	b25b      	sxtb	r3, r3
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0be:	d103      	bne.n	800c0c8 <xQueueGenericSend+0x154>
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c8:	f002 facc 	bl	800e664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0cc:	1d3a      	adds	r2, r7, #4
 800c0ce:	f107 0314 	add.w	r3, r7, #20
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f001 fa41 	bl	800d55c <xTaskCheckForTimeOut>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d123      	bne.n	800c128 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0e2:	f000 fcdc 	bl	800ca9e <prvIsQueueFull>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d017      	beq.n	800c11c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	3310      	adds	r3, #16
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 f967 	bl	800d3c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0fc:	f000 fc67 	bl	800c9ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c100:	f000 ffc8 	bl	800d094 <xTaskResumeAll>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d193      	bne.n	800c032 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c10a:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <xQueueGenericSend+0x1c8>)
 800c10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	e78a      	b.n	800c032 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c11e:	f000 fc56 	bl	800c9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c122:	f000 ffb7 	bl	800d094 <xTaskResumeAll>
 800c126:	e784      	b.n	800c032 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c12a:	f000 fc50 	bl	800c9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c12e:	f000 ffb1 	bl	800d094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c134:	4618      	mov	r0, r3
 800c136:	3738      	adds	r7, #56	; 0x38
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000ed04 	.word	0xe000ed04

0800c140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b090      	sub	sp, #64	; 0x40
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10a      	bne.n	800c16e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <xQueueGenericSendFromISR+0x3c>
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <xQueueGenericSendFromISR+0x40>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e000      	b.n	800c182 <xQueueGenericSendFromISR+0x42>
 800c180:	2300      	movs	r3, #0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d103      	bne.n	800c1aa <xQueueGenericSendFromISR+0x6a>
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d101      	bne.n	800c1ae <xQueueGenericSendFromISR+0x6e>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <xQueueGenericSendFromISR+0x70>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	623b      	str	r3, [r7, #32]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1ca:	f002 fafd 	bl	800e7c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	61fa      	str	r2, [r7, #28]
 800c1e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d302      	bcc.n	800c1fc <xQueueGenericSendFromISR+0xbc>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d12f      	bne.n	800c25c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c212:	f000 fb4c 	bl	800c8ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c216:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d112      	bne.n	800c246 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	2b00      	cmp	r3, #0
 800c226:	d016      	beq.n	800c256 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	3324      	adds	r3, #36	; 0x24
 800c22c:	4618      	mov	r0, r3
 800c22e:	f001 f91b 	bl	800d468 <xTaskRemoveFromEventList>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00e      	beq.n	800c256 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00b      	beq.n	800c256 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	e007      	b.n	800c256 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c246:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c24a:	3301      	adds	r3, #1
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	b25a      	sxtb	r2, r3
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c256:	2301      	movs	r3, #1
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c25a:	e001      	b.n	800c260 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c262:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c26a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3740      	adds	r7, #64	; 0x40
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b08e      	sub	sp, #56	; 0x38
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10a      	bne.n	800c2a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	623b      	str	r3, [r7, #32]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <xQueueGiveFromISR+0x48>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	61fb      	str	r3, [r7, #28]
}
 800c2ba:	bf00      	nop
 800c2bc:	e7fe      	b.n	800c2bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d103      	bne.n	800c2ce <xQueueGiveFromISR+0x58>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <xQueueGiveFromISR+0x5c>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <xQueueGiveFromISR+0x5e>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <xQueueGiveFromISR+0x78>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	61bb      	str	r3, [r7, #24]
}
 800c2ea:	bf00      	nop
 800c2ec:	e7fe      	b.n	800c2ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2ee:	f002 fa6b 	bl	800e7c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c2f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	617a      	str	r2, [r7, #20]
 800c308:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c30a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c30c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c312:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d22b      	bcs.n	800c376 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d112      	bne.n	800c360 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d016      	beq.n	800c370 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	3324      	adds	r3, #36	; 0x24
 800c346:	4618      	mov	r0, r3
 800c348:	f001 f88e 	bl	800d468 <xTaskRemoveFromEventList>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00e      	beq.n	800c370 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2201      	movs	r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e007      	b.n	800c370 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c364:	3301      	adds	r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	b25a      	sxtb	r2, r3
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c370:	2301      	movs	r3, #1
 800c372:	637b      	str	r3, [r7, #52]	; 0x34
 800c374:	e001      	b.n	800c37a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c376:	2300      	movs	r3, #0
 800c378:	637b      	str	r3, [r7, #52]	; 0x34
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f383 8811 	msr	BASEPRI, r3
}
 800c384:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3738      	adds	r7, #56	; 0x38
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08c      	sub	sp, #48	; 0x30
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c39c:	2300      	movs	r3, #0
 800c39e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10a      	bne.n	800c3c0 <xQueueReceive+0x30>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	623b      	str	r3, [r7, #32]
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <xQueueReceive+0x3e>
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <xQueueReceive+0x42>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <xQueueReceive+0x44>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <xQueueReceive+0x5e>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	61fb      	str	r3, [r7, #28]
}
 800c3ea:	bf00      	nop
 800c3ec:	e7fe      	b.n	800c3ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3ee:	f001 f9f7 	bl	800d7e0 <xTaskGetSchedulerState>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <xQueueReceive+0x6e>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <xQueueReceive+0x72>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <xQueueReceive+0x74>
 800c402:	2300      	movs	r3, #0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <xQueueReceive+0x8e>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	61bb      	str	r3, [r7, #24]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c41e:	f002 f8f1 	bl	800e604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d014      	beq.n	800c458 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c432:	f000 faa6 	bl	800c982 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	1e5a      	subs	r2, r3, #1
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	3310      	adds	r3, #16
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 f80c 	bl	800d468 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c450:	f002 f908 	bl	800e664 <vPortExitCritical>
				return pdPASS;
 800c454:	2301      	movs	r3, #1
 800c456:	e069      	b.n	800c52c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c45e:	f002 f901 	bl	800e664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c462:	2300      	movs	r3, #0
 800c464:	e062      	b.n	800c52c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c46c:	f107 0310 	add.w	r3, r7, #16
 800c470:	4618      	mov	r0, r3
 800c472:	f001 f85d 	bl	800d530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c476:	2301      	movs	r3, #1
 800c478:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c47a:	f002 f8f3 	bl	800e664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c47e:	f000 fdfb 	bl	800d078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c482:	f002 f8bf 	bl	800e604 <vPortEnterCritical>
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c48c:	b25b      	sxtb	r3, r3
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d103      	bne.n	800c49c <xQueueReceive+0x10c>
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4a2:	b25b      	sxtb	r3, r3
 800c4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a8:	d103      	bne.n	800c4b2 <xQueueReceive+0x122>
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4b2:	f002 f8d7 	bl	800e664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4b6:	1d3a      	adds	r2, r7, #4
 800c4b8:	f107 0310 	add.w	r3, r7, #16
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f001 f84c 	bl	800d55c <xTaskCheckForTimeOut>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d123      	bne.n	800c512 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4cc:	f000 fad1 	bl	800ca72 <prvIsQueueEmpty>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d017      	beq.n	800c506 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	3324      	adds	r3, #36	; 0x24
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 ff72 	bl	800d3c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e6:	f000 fa72 	bl	800c9ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4ea:	f000 fdd3 	bl	800d094 <xTaskResumeAll>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d194      	bne.n	800c41e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4f4:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <xQueueReceive+0x1a4>)
 800c4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	e78b      	b.n	800c41e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c508:	f000 fa61 	bl	800c9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c50c:	f000 fdc2 	bl	800d094 <xTaskResumeAll>
 800c510:	e785      	b.n	800c41e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c514:	f000 fa5b 	bl	800c9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c518:	f000 fdbc 	bl	800d094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51e:	f000 faa8 	bl	800ca72 <prvIsQueueEmpty>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	f43f af7a 	beq.w	800c41e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c52a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3730      	adds	r7, #48	; 0x30
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	e000ed04 	.word	0xe000ed04

0800c538 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08e      	sub	sp, #56	; 0x38
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c542:	2300      	movs	r3, #0
 800c544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	623b      	str	r3, [r7, #32]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	61fb      	str	r3, [r7, #28]
}
 800c584:	bf00      	nop
 800c586:	e7fe      	b.n	800c586 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c588:	f001 f92a 	bl	800d7e0 <xTaskGetSchedulerState>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <xQueueSemaphoreTake+0x60>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <xQueueSemaphoreTake+0x64>
 800c598:	2301      	movs	r3, #1
 800c59a:	e000      	b.n	800c59e <xQueueSemaphoreTake+0x66>
 800c59c:	2300      	movs	r3, #0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10a      	bne.n	800c5b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	61bb      	str	r3, [r7, #24]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5b8:	f002 f824 	bl	800e604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d019      	beq.n	800c5fc <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	1e5a      	subs	r2, r3, #1
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5d8:	f001 fa78 	bl	800dacc <pvTaskIncrementMutexHeldCount>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	3310      	adds	r3, #16
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 ff3a 	bl	800d468 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5f4:	f002 f836 	bl	800e664 <vPortExitCritical>
				return pdPASS;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e097      	b.n	800c72c <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d111      	bne.n	800c626 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00a      	beq.n	800c61e <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	617b      	str	r3, [r7, #20]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c61e:	f002 f821 	bl	800e664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c622:	2300      	movs	r3, #0
 800c624:	e082      	b.n	800c72c <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c62c:	f107 030c 	add.w	r3, r7, #12
 800c630:	4618      	mov	r0, r3
 800c632:	f000 ff7d 	bl	800d530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c636:	2301      	movs	r3, #1
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c63a:	f002 f813 	bl	800e664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c63e:	f000 fd1b 	bl	800d078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c642:	f001 ffdf 	bl	800e604 <vPortEnterCritical>
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c64c:	b25b      	sxtb	r3, r3
 800c64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c652:	d103      	bne.n	800c65c <xQueueSemaphoreTake+0x124>
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c662:	b25b      	sxtb	r3, r3
 800c664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c668:	d103      	bne.n	800c672 <xQueueSemaphoreTake+0x13a>
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c672:	f001 fff7 	bl	800e664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c676:	463a      	mov	r2, r7
 800c678:	f107 030c 	add.w	r3, r7, #12
 800c67c:	4611      	mov	r1, r2
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 ff6c 	bl	800d55c <xTaskCheckForTimeOut>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d132      	bne.n	800c6f0 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c68a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c68c:	f000 f9f1 	bl	800ca72 <prvIsQueueEmpty>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d026      	beq.n	800c6e4 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800c69e:	f001 ffb1 	bl	800e604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 f8b8 	bl	800d81c <xTaskPriorityInherit>
 800c6ac:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c6ae:	f001 ffd9 	bl	800e664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	3324      	adds	r3, #36	; 0x24
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fe84 	bl	800d3c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6c2:	f000 f984 	bl	800c9ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6c6:	f000 fce5 	bl	800d094 <xTaskResumeAll>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f47f af73 	bne.w	800c5b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c6d2:	4b18      	ldr	r3, [pc, #96]	; (800c734 <xQueueSemaphoreTake+0x1fc>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	e769      	b.n	800c5b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e6:	f000 f972 	bl	800c9ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ea:	f000 fcd3 	bl	800d094 <xTaskResumeAll>
 800c6ee:	e763      	b.n	800c5b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6f2:	f000 f96c 	bl	800c9ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6f6:	f000 fccd 	bl	800d094 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6fc:	f000 f9b9 	bl	800ca72 <prvIsQueueEmpty>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	f43f af58 	beq.w	800c5b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00d      	beq.n	800c72a <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800c70e:	f001 ff79 	bl	800e604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c714:	f000 f8b3 	bl	800c87e <prvGetDisinheritPriorityAfterTimeout>
 800c718:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f951 	bl	800d9c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c726:	f001 ff9d 	bl	800e664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c72a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3738      	adds	r7, #56	; 0x38
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	e000ed04 	.word	0xe000ed04

0800c738 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08e      	sub	sp, #56	; 0x38
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	623b      	str	r3, [r7, #32]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d103      	bne.n	800c772 <xQueueReceiveFromISR+0x3a>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <xQueueReceiveFromISR+0x3e>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <xQueueReceiveFromISR+0x40>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61fb      	str	r3, [r7, #28]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c792:	f002 f819 	bl	800e7c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c796:	f3ef 8211 	mrs	r2, BASEPRI
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	61ba      	str	r2, [r7, #24]
 800c7ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d02f      	beq.n	800c81e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7c8:	68b9      	ldr	r1, [r7, #8]
 800c7ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7cc:	f000 f8d9 	bl	800c982 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	1e5a      	subs	r2, r3, #1
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e0:	d112      	bne.n	800c808 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d016      	beq.n	800c818 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	3310      	adds	r3, #16
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 fe3a 	bl	800d468 <xTaskRemoveFromEventList>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00e      	beq.n	800c818 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	e007      	b.n	800c818 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c80c:	3301      	adds	r3, #1
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	b25a      	sxtb	r2, r3
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c818:	2301      	movs	r3, #1
 800c81a:	637b      	str	r3, [r7, #52]	; 0x34
 800c81c:	e001      	b.n	800c822 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c81e:	2300      	movs	r3, #0
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	f383 8811 	msr	BASEPRI, r3
}
 800c82c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c830:	4618      	mov	r0, r3
 800c832:	3738      	adds	r7, #56	; 0x38
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10a      	bne.n	800c860 <vQueueDelete+0x28>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	60bb      	str	r3, [r7, #8]
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 f95f 	bl	800cb24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d102      	bne.n	800c876 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f002 f8b5 	bl	800e9e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c876:	bf00      	nop
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c87e:	b480      	push	{r7}
 800c880:	b085      	sub	sp, #20
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d006      	beq.n	800c89c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	e001      	b.n	800c8a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
	}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b086      	sub	sp, #24
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10d      	bne.n	800c8e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d14d      	bne.n	800c970 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f001 f807 	bl	800d8ec <xTaskPriorityDisinherit>
 800c8de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	609a      	str	r2, [r3, #8]
 800c8e6:	e043      	b.n	800c970 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d119      	bne.n	800c922 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6858      	ldr	r0, [r3, #4]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	f002 fab2 	bl	800ee62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	441a      	add	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	429a      	cmp	r2, r3
 800c916:	d32b      	bcc.n	800c970 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	605a      	str	r2, [r3, #4]
 800c920:	e026      	b.n	800c970 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68d8      	ldr	r0, [r3, #12]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	461a      	mov	r2, r3
 800c92c:	68b9      	ldr	r1, [r7, #8]
 800c92e:	f002 fa98 	bl	800ee62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93a:	425b      	negs	r3, r3
 800c93c:	441a      	add	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68da      	ldr	r2, [r3, #12]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d207      	bcs.n	800c95e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	425b      	negs	r3, r3
 800c958:	441a      	add	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d105      	bne.n	800c970 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	3b01      	subs	r3, #1
 800c96e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c978:	697b      	ldr	r3, [r7, #20]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c990:	2b00      	cmp	r3, #0
 800c992:	d018      	beq.n	800c9c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99c:	441a      	add	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68da      	ldr	r2, [r3, #12]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d303      	bcc.n	800c9b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68d9      	ldr	r1, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6838      	ldr	r0, [r7, #0]
 800c9c2:	f002 fa4e 	bl	800ee62 <memcpy>
	}
}
 800c9c6:	bf00      	nop
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9d6:	f001 fe15 	bl	800e604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e2:	e011      	b.n	800ca08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d012      	beq.n	800ca12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3324      	adds	r3, #36	; 0x24
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fd39 	bl	800d468 <xTaskRemoveFromEventList>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9fc:	f000 fe10 	bl	800d620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dce9      	bgt.n	800c9e4 <prvUnlockQueue+0x16>
 800ca10:	e000      	b.n	800ca14 <prvUnlockQueue+0x46>
					break;
 800ca12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	22ff      	movs	r2, #255	; 0xff
 800ca18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca1c:	f001 fe22 	bl	800e664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca20:	f001 fdf0 	bl	800e604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca2c:	e011      	b.n	800ca52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d012      	beq.n	800ca5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	3310      	adds	r3, #16
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fd14 	bl	800d468 <xTaskRemoveFromEventList>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca46:	f000 fdeb 	bl	800d620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dce9      	bgt.n	800ca2e <prvUnlockQueue+0x60>
 800ca5a:	e000      	b.n	800ca5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	22ff      	movs	r2, #255	; 0xff
 800ca62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca66:	f001 fdfd 	bl	800e664 <vPortExitCritical>
}
 800ca6a:	bf00      	nop
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca7a:	f001 fdc3 	bl	800e604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca86:	2301      	movs	r3, #1
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	e001      	b.n	800ca90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca90:	f001 fde8 	bl	800e664 <vPortExitCritical>

	return xReturn;
 800ca94:	68fb      	ldr	r3, [r7, #12]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caa6:	f001 fdad 	bl	800e604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d102      	bne.n	800cabc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cab6:	2301      	movs	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e001      	b.n	800cac0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cabc:	2300      	movs	r3, #0
 800cabe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cac0:	f001 fdd0 	bl	800e664 <vPortExitCritical>

	return xReturn;
 800cac4:	68fb      	ldr	r3, [r7, #12]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	e014      	b.n	800cb0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cae0:	4a0f      	ldr	r2, [pc, #60]	; (800cb20 <vQueueAddToRegistry+0x50>)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800caec:	490c      	ldr	r1, [pc, #48]	; (800cb20 <vQueueAddToRegistry+0x50>)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800caf6:	4a0a      	ldr	r2, [pc, #40]	; (800cb20 <vQueueAddToRegistry+0x50>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4413      	add	r3, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb02:	e006      	b.n	800cb12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3301      	adds	r3, #1
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	d9e7      	bls.n	800cae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	2000107c 	.word	0x2000107c

0800cb24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e016      	b.n	800cb60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb32:	4a10      	ldr	r2, [pc, #64]	; (800cb74 <vQueueUnregisterQueue+0x50>)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	4413      	add	r3, r2
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d10b      	bne.n	800cb5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb42:	4a0c      	ldr	r2, [pc, #48]	; (800cb74 <vQueueUnregisterQueue+0x50>)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2100      	movs	r1, #0
 800cb48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb4c:	4a09      	ldr	r2, [pc, #36]	; (800cb74 <vQueueUnregisterQueue+0x50>)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	4413      	add	r3, r2
 800cb54:	2200      	movs	r2, #0
 800cb56:	605a      	str	r2, [r3, #4]
				break;
 800cb58:	e006      	b.n	800cb68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b07      	cmp	r3, #7
 800cb64:	d9e5      	bls.n	800cb32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb66:	bf00      	nop
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	2000107c 	.word	0x2000107c

0800cb78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb88:	f001 fd3c 	bl	800e604 <vPortEnterCritical>
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb92:	b25b      	sxtb	r3, r3
 800cb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb98:	d103      	bne.n	800cba2 <vQueueWaitForMessageRestricted+0x2a>
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbae:	d103      	bne.n	800cbb8 <vQueueWaitForMessageRestricted+0x40>
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbb8:	f001 fd54 	bl	800e664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d106      	bne.n	800cbd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	3324      	adds	r3, #36	; 0x24
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68b9      	ldr	r1, [r7, #8]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fc1f 	bl	800d410 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbd2:	6978      	ldr	r0, [r7, #20]
 800cbd4:	f7ff fefb 	bl	800c9ce <prvUnlockQueue>
	}
 800cbd8:	bf00      	nop
 800cbda:	3718      	adds	r7, #24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08e      	sub	sp, #56	; 0x38
 800cbe4:	af04      	add	r7, sp, #16
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	623b      	str	r3, [r7, #32]
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10a      	bne.n	800cc26 <xTaskCreateStatic+0x46>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	61fb      	str	r3, [r7, #28]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc26:	23bc      	movs	r3, #188	; 0xbc
 800cc28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2bbc      	cmp	r3, #188	; 0xbc
 800cc2e:	d00a      	beq.n	800cc46 <xTaskCreateStatic+0x66>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	61bb      	str	r3, [r7, #24]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01e      	beq.n	800cc8c <xTaskCreateStatic+0xac>
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01b      	beq.n	800cc8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	2202      	movs	r2, #2
 800cc62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc66:	2300      	movs	r3, #0
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	f107 0314 	add.w	r3, r7, #20
 800cc72:	9301      	str	r3, [sp, #4]
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f850 	bl	800cd24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc86:	f000 f8f3 	bl	800ce70 <prvAddNewTaskToReadyList>
 800cc8a:	e001      	b.n	800cc90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc90:	697b      	ldr	r3, [r7, #20]
	}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3728      	adds	r7, #40	; 0x28
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b08c      	sub	sp, #48	; 0x30
 800cc9e:	af04      	add	r7, sp, #16
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	603b      	str	r3, [r7, #0]
 800cca6:	4613      	mov	r3, r2
 800cca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccaa:	88fb      	ldrh	r3, [r7, #6]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 fdca 	bl	800e848 <pvPortMalloc>
 800ccb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00e      	beq.n	800ccda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccbc:	20bc      	movs	r0, #188	; 0xbc
 800ccbe:	f001 fdc3 	bl	800e848 <pvPortMalloc>
 800ccc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	631a      	str	r2, [r3, #48]	; 0x30
 800ccd0:	e005      	b.n	800ccde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccd2:	6978      	ldr	r0, [r7, #20]
 800ccd4:	f001 fe84 	bl	800e9e0 <vPortFree>
 800ccd8:	e001      	b.n	800ccde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d017      	beq.n	800cd14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccec:	88fa      	ldrh	r2, [r7, #6]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9303      	str	r3, [sp, #12]
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	9302      	str	r3, [sp, #8]
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	9301      	str	r3, [sp, #4]
 800ccfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	68b9      	ldr	r1, [r7, #8]
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f000 f80e 	bl	800cd24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd08:	69f8      	ldr	r0, [r7, #28]
 800cd0a:	f000 f8b1 	bl	800ce70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	61bb      	str	r3, [r7, #24]
 800cd12:	e002      	b.n	800cd1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd14:	f04f 33ff 	mov.w	r3, #4294967295
 800cd18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd1a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	21a5      	movs	r1, #165	; 0xa5
 800cd3e:	f002 f89e 	bl	800ee7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	f023 0307 	bic.w	r3, r3, #7
 800cd5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	617b      	str	r3, [r7, #20]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01f      	beq.n	800cdc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd82:	2300      	movs	r3, #0
 800cd84:	61fb      	str	r3, [r7, #28]
 800cd86:	e012      	b.n	800cdae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	7819      	ldrb	r1, [r3, #0]
 800cd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	3334      	adds	r3, #52	; 0x34
 800cd98:	460a      	mov	r2, r1
 800cd9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	4413      	add	r3, r2
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d006      	beq.n	800cdb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	61fb      	str	r3, [r7, #28]
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	2b0f      	cmp	r3, #15
 800cdb2:	d9e9      	bls.n	800cd88 <prvInitialiseNewTask+0x64>
 800cdb4:	e000      	b.n	800cdb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800cdb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdc0:	e003      	b.n	800cdca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	2b37      	cmp	r3, #55	; 0x37
 800cdce:	d901      	bls.n	800cdd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdd0:	2337      	movs	r3, #55	; 0x37
 800cdd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	2200      	movs	r2, #0
 800cde4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	3304      	adds	r3, #4
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fe94 	bl	800bb18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	3318      	adds	r3, #24
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fe8f 	bl	800bb18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	3354      	adds	r3, #84	; 0x54
 800ce24:	2260      	movs	r2, #96	; 0x60
 800ce26:	2100      	movs	r1, #0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f002 f828 	bl	800ee7e <memset>
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	4a0c      	ldr	r2, [pc, #48]	; (800ce64 <prvInitialiseNewTask+0x140>)
 800ce32:	659a      	str	r2, [r3, #88]	; 0x58
 800ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce36:	4a0c      	ldr	r2, [pc, #48]	; (800ce68 <prvInitialiseNewTask+0x144>)
 800ce38:	65da      	str	r2, [r3, #92]	; 0x5c
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	4a0b      	ldr	r2, [pc, #44]	; (800ce6c <prvInitialiseNewTask+0x148>)
 800ce3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	68f9      	ldr	r1, [r7, #12]
 800ce44:	69b8      	ldr	r0, [r7, #24]
 800ce46:	f001 fab1 	bl	800e3ac <pxPortInitialiseStack>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce5c:	bf00      	nop
 800ce5e:	3720      	adds	r7, #32
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	080124c8 	.word	0x080124c8
 800ce68:	080124e8 	.word	0x080124e8
 800ce6c:	080124a8 	.word	0x080124a8

0800ce70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce78:	f001 fbc4 	bl	800e604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce7c:	4b26      	ldr	r3, [pc, #152]	; (800cf18 <prvAddNewTaskToReadyList+0xa8>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3301      	adds	r3, #1
 800ce82:	4a25      	ldr	r2, [pc, #148]	; (800cf18 <prvAddNewTaskToReadyList+0xa8>)
 800ce84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce86:	4b25      	ldr	r3, [pc, #148]	; (800cf1c <prvAddNewTaskToReadyList+0xac>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d109      	bne.n	800cea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce8e:	4a23      	ldr	r2, [pc, #140]	; (800cf1c <prvAddNewTaskToReadyList+0xac>)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce94:	4b20      	ldr	r3, [pc, #128]	; (800cf18 <prvAddNewTaskToReadyList+0xa8>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d110      	bne.n	800cebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce9c:	f000 fbde 	bl	800d65c <prvInitialiseTaskLists>
 800cea0:	e00d      	b.n	800cebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cea2:	4b1f      	ldr	r3, [pc, #124]	; (800cf20 <prvAddNewTaskToReadyList+0xb0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d109      	bne.n	800cebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceaa:	4b1c      	ldr	r3, [pc, #112]	; (800cf1c <prvAddNewTaskToReadyList+0xac>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d802      	bhi.n	800cebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ceb8:	4a18      	ldr	r2, [pc, #96]	; (800cf1c <prvAddNewTaskToReadyList+0xac>)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cebe:	4b19      	ldr	r3, [pc, #100]	; (800cf24 <prvAddNewTaskToReadyList+0xb4>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3301      	adds	r3, #1
 800cec4:	4a17      	ldr	r2, [pc, #92]	; (800cf24 <prvAddNewTaskToReadyList+0xb4>)
 800cec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cec8:	4b16      	ldr	r3, [pc, #88]	; (800cf24 <prvAddNewTaskToReadyList+0xb4>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced4:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <prvAddNewTaskToReadyList+0xb8>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d903      	bls.n	800cee4 <prvAddNewTaskToReadyList+0x74>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	4a11      	ldr	r2, [pc, #68]	; (800cf28 <prvAddNewTaskToReadyList+0xb8>)
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee8:	4613      	mov	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4a0e      	ldr	r2, [pc, #56]	; (800cf2c <prvAddNewTaskToReadyList+0xbc>)
 800cef2:	441a      	add	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3304      	adds	r3, #4
 800cef8:	4619      	mov	r1, r3
 800cefa:	4610      	mov	r0, r2
 800cefc:	f7fe fe19 	bl	800bb32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf00:	f001 fbb0 	bl	800e664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf04:	4b06      	ldr	r3, [pc, #24]	; (800cf20 <prvAddNewTaskToReadyList+0xb0>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf0c:	4b03      	ldr	r3, [pc, #12]	; (800cf1c <prvAddNewTaskToReadyList+0xac>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	20001590 	.word	0x20001590
 800cf1c:	200010bc 	.word	0x200010bc
 800cf20:	2000159c 	.word	0x2000159c
 800cf24:	200015ac 	.word	0x200015ac
 800cf28:	20001598 	.word	0x20001598
 800cf2c:	200010c0 	.word	0x200010c0

0800cf30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d017      	beq.n	800cf72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf42:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <vTaskDelay+0x60>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00a      	beq.n	800cf60 <vTaskDelay+0x30>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60bb      	str	r3, [r7, #8]
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf60:	f000 f88a 	bl	800d078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf64:	2100      	movs	r1, #0
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fdc4 	bl	800daf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf6c:	f000 f892 	bl	800d094 <xTaskResumeAll>
 800cf70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d107      	bne.n	800cf88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf78:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <vTaskDelay+0x64>)
 800cf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf88:	bf00      	nop
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	200015b8 	.word	0x200015b8
 800cf94:	e000ed04 	.word	0xe000ed04

0800cf98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	1d39      	adds	r1, r7, #4
 800cfaa:	f107 0308 	add.w	r3, r7, #8
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fd5e 	bl	800ba70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	9202      	str	r2, [sp, #8]
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	460a      	mov	r2, r1
 800cfc6:	4924      	ldr	r1, [pc, #144]	; (800d058 <vTaskStartScheduler+0xc0>)
 800cfc8:	4824      	ldr	r0, [pc, #144]	; (800d05c <vTaskStartScheduler+0xc4>)
 800cfca:	f7ff fe09 	bl	800cbe0 <xTaskCreateStatic>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4a23      	ldr	r2, [pc, #140]	; (800d060 <vTaskStartScheduler+0xc8>)
 800cfd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfd4:	4b22      	ldr	r3, [pc, #136]	; (800d060 <vTaskStartScheduler+0xc8>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e001      	b.n	800cfe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d102      	bne.n	800cff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfec:	f000 fdd6 	bl	800db9c <xTimerCreateTimerTask>
 800cff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d11b      	bne.n	800d030 <vTaskStartScheduler+0x98>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	613b      	str	r3, [r7, #16]
}
 800d00a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d00c:	4b15      	ldr	r3, [pc, #84]	; (800d064 <vTaskStartScheduler+0xcc>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3354      	adds	r3, #84	; 0x54
 800d012:	4a15      	ldr	r2, [pc, #84]	; (800d068 <vTaskStartScheduler+0xd0>)
 800d014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d016:	4b15      	ldr	r3, [pc, #84]	; (800d06c <vTaskStartScheduler+0xd4>)
 800d018:	f04f 32ff 	mov.w	r2, #4294967295
 800d01c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d01e:	4b14      	ldr	r3, [pc, #80]	; (800d070 <vTaskStartScheduler+0xd8>)
 800d020:	2201      	movs	r2, #1
 800d022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d024:	4b13      	ldr	r3, [pc, #76]	; (800d074 <vTaskStartScheduler+0xdc>)
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d02a:	f001 fa49 	bl	800e4c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d02e:	e00e      	b.n	800d04e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d036:	d10a      	bne.n	800d04e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	60fb      	str	r3, [r7, #12]
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <vTaskStartScheduler+0xb4>
}
 800d04e:	bf00      	nop
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	080122e0 	.word	0x080122e0
 800d05c:	0800d639 	.word	0x0800d639
 800d060:	200015b4 	.word	0x200015b4
 800d064:	200010bc 	.word	0x200010bc
 800d068:	20000028 	.word	0x20000028
 800d06c:	200015b0 	.word	0x200015b0
 800d070:	2000159c 	.word	0x2000159c
 800d074:	20001594 	.word	0x20001594

0800d078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d07c:	4b04      	ldr	r3, [pc, #16]	; (800d090 <vTaskSuspendAll+0x18>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	4a03      	ldr	r2, [pc, #12]	; (800d090 <vTaskSuspendAll+0x18>)
 800d084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d086:	bf00      	nop
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	200015b8 	.word	0x200015b8

0800d094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0a2:	4b3c      	ldr	r3, [pc, #240]	; (800d194 <xTaskResumeAll+0x100>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10a      	bne.n	800d0c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	603b      	str	r3, [r7, #0]
}
 800d0bc:	bf00      	nop
 800d0be:	e7fe      	b.n	800d0be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0c0:	f001 faa0 	bl	800e604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0c4:	4b33      	ldr	r3, [pc, #204]	; (800d194 <xTaskResumeAll+0x100>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	4a32      	ldr	r2, [pc, #200]	; (800d194 <xTaskResumeAll+0x100>)
 800d0cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ce:	4b31      	ldr	r3, [pc, #196]	; (800d194 <xTaskResumeAll+0x100>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d156      	bne.n	800d184 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0d6:	4b30      	ldr	r3, [pc, #192]	; (800d198 <xTaskResumeAll+0x104>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d052      	beq.n	800d184 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0de:	e02f      	b.n	800d140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e0:	4b2e      	ldr	r3, [pc, #184]	; (800d19c <xTaskResumeAll+0x108>)
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3318      	adds	r3, #24
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fe fd7d 	bl	800bbec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fd78 	bl	800bbec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d100:	4b27      	ldr	r3, [pc, #156]	; (800d1a0 <xTaskResumeAll+0x10c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d903      	bls.n	800d110 <xTaskResumeAll+0x7c>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	4a24      	ldr	r2, [pc, #144]	; (800d1a0 <xTaskResumeAll+0x10c>)
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d114:	4613      	mov	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4a21      	ldr	r2, [pc, #132]	; (800d1a4 <xTaskResumeAll+0x110>)
 800d11e:	441a      	add	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3304      	adds	r3, #4
 800d124:	4619      	mov	r1, r3
 800d126:	4610      	mov	r0, r2
 800d128:	f7fe fd03 	bl	800bb32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d130:	4b1d      	ldr	r3, [pc, #116]	; (800d1a8 <xTaskResumeAll+0x114>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d136:	429a      	cmp	r2, r3
 800d138:	d302      	bcc.n	800d140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d13a:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <xTaskResumeAll+0x118>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d140:	4b16      	ldr	r3, [pc, #88]	; (800d19c <xTaskResumeAll+0x108>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1cb      	bne.n	800d0e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d14e:	f000 fb27 	bl	800d7a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d152:	4b17      	ldr	r3, [pc, #92]	; (800d1b0 <xTaskResumeAll+0x11c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d010      	beq.n	800d180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d15e:	f000 f839 	bl	800d1d4 <xTaskIncrementTick>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d168:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <xTaskResumeAll+0x118>)
 800d16a:	2201      	movs	r2, #1
 800d16c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3b01      	subs	r3, #1
 800d172:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1f1      	bne.n	800d15e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d17a:	4b0d      	ldr	r3, [pc, #52]	; (800d1b0 <xTaskResumeAll+0x11c>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <xTaskResumeAll+0x118>)
 800d182:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d184:	f001 fa6e 	bl	800e664 <vPortExitCritical>

	return xAlreadyYielded;
 800d188:	687b      	ldr	r3, [r7, #4]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	200015b8 	.word	0x200015b8
 800d198:	20001590 	.word	0x20001590
 800d19c:	20001550 	.word	0x20001550
 800d1a0:	20001598 	.word	0x20001598
 800d1a4:	200010c0 	.word	0x200010c0
 800d1a8:	200010bc 	.word	0x200010bc
 800d1ac:	200015a4 	.word	0x200015a4
 800d1b0:	200015a0 	.word	0x200015a0

0800d1b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1ba:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <xTaskGetTickCount+0x1c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1c0:	687b      	ldr	r3, [r7, #4]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20001594 	.word	0x20001594

0800d1d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1de:	4b3f      	ldr	r3, [pc, #252]	; (800d2dc <xTaskIncrementTick+0x108>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d170      	bne.n	800d2c8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1e6:	4b3e      	ldr	r3, [pc, #248]	; (800d2e0 <xTaskIncrementTick+0x10c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1ee:	4a3c      	ldr	r2, [pc, #240]	; (800d2e0 <xTaskIncrementTick+0x10c>)
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d120      	bne.n	800d23c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1fa:	4b3a      	ldr	r3, [pc, #232]	; (800d2e4 <xTaskIncrementTick+0x110>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00a      	beq.n	800d21a <xTaskIncrementTick+0x46>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	603b      	str	r3, [r7, #0]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <xTaskIncrementTick+0x44>
 800d21a:	4b32      	ldr	r3, [pc, #200]	; (800d2e4 <xTaskIncrementTick+0x110>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	4b31      	ldr	r3, [pc, #196]	; (800d2e8 <xTaskIncrementTick+0x114>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a2f      	ldr	r2, [pc, #188]	; (800d2e4 <xTaskIncrementTick+0x110>)
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	4a2f      	ldr	r2, [pc, #188]	; (800d2e8 <xTaskIncrementTick+0x114>)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	4b2f      	ldr	r3, [pc, #188]	; (800d2ec <xTaskIncrementTick+0x118>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	4a2d      	ldr	r2, [pc, #180]	; (800d2ec <xTaskIncrementTick+0x118>)
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	f000 fab2 	bl	800d7a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d23c:	4b2c      	ldr	r3, [pc, #176]	; (800d2f0 <xTaskIncrementTick+0x11c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	429a      	cmp	r2, r3
 800d244:	d345      	bcc.n	800d2d2 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d246:	4b27      	ldr	r3, [pc, #156]	; (800d2e4 <xTaskIncrementTick+0x110>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d104      	bne.n	800d25a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d250:	4b27      	ldr	r3, [pc, #156]	; (800d2f0 <xTaskIncrementTick+0x11c>)
 800d252:	f04f 32ff 	mov.w	r2, #4294967295
 800d256:	601a      	str	r2, [r3, #0]
					break;
 800d258:	e03b      	b.n	800d2d2 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25a:	4b22      	ldr	r3, [pc, #136]	; (800d2e4 <xTaskIncrementTick+0x110>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d203      	bcs.n	800d27a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d272:	4a1f      	ldr	r2, [pc, #124]	; (800d2f0 <xTaskIncrementTick+0x11c>)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d278:	e02b      	b.n	800d2d2 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fcb4 	bl	800bbec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d004      	beq.n	800d296 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	3318      	adds	r3, #24
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fcab 	bl	800bbec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29a:	4b16      	ldr	r3, [pc, #88]	; (800d2f4 <xTaskIncrementTick+0x120>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d903      	bls.n	800d2aa <xTaskIncrementTick+0xd6>
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	4a13      	ldr	r2, [pc, #76]	; (800d2f4 <xTaskIncrementTick+0x120>)
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4a10      	ldr	r2, [pc, #64]	; (800d2f8 <xTaskIncrementTick+0x124>)
 800d2b8:	441a      	add	r2, r3
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fe fc36 	bl	800bb32 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2c6:	e7be      	b.n	800d246 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <xTaskIncrementTick+0x128>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a0b      	ldr	r2, [pc, #44]	; (800d2fc <xTaskIncrementTick+0x128>)
 800d2d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2d2:	697b      	ldr	r3, [r7, #20]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	200015b8 	.word	0x200015b8
 800d2e0:	20001594 	.word	0x20001594
 800d2e4:	20001548 	.word	0x20001548
 800d2e8:	2000154c 	.word	0x2000154c
 800d2ec:	200015a8 	.word	0x200015a8
 800d2f0:	200015b0 	.word	0x200015b0
 800d2f4:	20001598 	.word	0x20001598
 800d2f8:	200010c0 	.word	0x200010c0
 800d2fc:	200015a0 	.word	0x200015a0

0800d300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d306:	4b2a      	ldr	r3, [pc, #168]	; (800d3b0 <vTaskSwitchContext+0xb0>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d003      	beq.n	800d316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d30e:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <vTaskSwitchContext+0xb4>)
 800d310:	2201      	movs	r2, #1
 800d312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d314:	e046      	b.n	800d3a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d316:	4b27      	ldr	r3, [pc, #156]	; (800d3b4 <vTaskSwitchContext+0xb4>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d31c:	4b26      	ldr	r3, [pc, #152]	; (800d3b8 <vTaskSwitchContext+0xb8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	60fb      	str	r3, [r7, #12]
 800d322:	e010      	b.n	800d346 <vTaskSwitchContext+0x46>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <vTaskSwitchContext+0x40>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	607b      	str	r3, [r7, #4]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskSwitchContext+0x3e>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3b01      	subs	r3, #1
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	491d      	ldr	r1, [pc, #116]	; (800d3bc <vTaskSwitchContext+0xbc>)
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	4613      	mov	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	440b      	add	r3, r1
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0e4      	beq.n	800d324 <vTaskSwitchContext+0x24>
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4a15      	ldr	r2, [pc, #84]	; (800d3bc <vTaskSwitchContext+0xbc>)
 800d366:	4413      	add	r3, r2
 800d368:	60bb      	str	r3, [r7, #8]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	685a      	ldr	r2, [r3, #4]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	605a      	str	r2, [r3, #4]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	685a      	ldr	r2, [r3, #4]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	3308      	adds	r3, #8
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d104      	bne.n	800d38a <vTaskSwitchContext+0x8a>
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	605a      	str	r2, [r3, #4]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	4a0b      	ldr	r2, [pc, #44]	; (800d3c0 <vTaskSwitchContext+0xc0>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	4a08      	ldr	r2, [pc, #32]	; (800d3b8 <vTaskSwitchContext+0xb8>)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d39a:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <vTaskSwitchContext+0xc0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3354      	adds	r3, #84	; 0x54
 800d3a0:	4a08      	ldr	r2, [pc, #32]	; (800d3c4 <vTaskSwitchContext+0xc4>)
 800d3a2:	6013      	str	r3, [r2, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	200015b8 	.word	0x200015b8
 800d3b4:	200015a4 	.word	0x200015a4
 800d3b8:	20001598 	.word	0x20001598
 800d3bc:	200010c0 	.word	0x200010c0
 800d3c0:	200010bc 	.word	0x200010bc
 800d3c4:	20000028 	.word	0x20000028

0800d3c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10a      	bne.n	800d3ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	60fb      	str	r3, [r7, #12]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3ee:	4b07      	ldr	r3, [pc, #28]	; (800d40c <vTaskPlaceOnEventList+0x44>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3318      	adds	r3, #24
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7fe fbbf 	bl	800bb7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	6838      	ldr	r0, [r7, #0]
 800d400:	f000 fb78 	bl	800daf4 <prvAddCurrentTaskToDelayedList>
}
 800d404:	bf00      	nop
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	200010bc 	.word	0x200010bc

0800d410 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10a      	bne.n	800d438 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	617b      	str	r3, [r7, #20]
}
 800d434:	bf00      	nop
 800d436:	e7fe      	b.n	800d436 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d438:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <vTaskPlaceOnEventListRestricted+0x54>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3318      	adds	r3, #24
 800d43e:	4619      	mov	r1, r3
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7fe fb76 	bl	800bb32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d44c:	f04f 33ff 	mov.w	r3, #4294967295
 800d450:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	68b8      	ldr	r0, [r7, #8]
 800d456:	f000 fb4d 	bl	800daf4 <prvAddCurrentTaskToDelayedList>
	}
 800d45a:	bf00      	nop
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	200010bc 	.word	0x200010bc

0800d468 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10a      	bne.n	800d494 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60fb      	str	r3, [r7, #12]
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	3318      	adds	r3, #24
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe fba7 	bl	800bbec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d49e:	4b1e      	ldr	r3, [pc, #120]	; (800d518 <xTaskRemoveFromEventList+0xb0>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d11d      	bne.n	800d4e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	3304      	adds	r3, #4
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe fb9e 	bl	800bbec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b4:	4b19      	ldr	r3, [pc, #100]	; (800d51c <xTaskRemoveFromEventList+0xb4>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d903      	bls.n	800d4c4 <xTaskRemoveFromEventList+0x5c>
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	4a16      	ldr	r2, [pc, #88]	; (800d51c <xTaskRemoveFromEventList+0xb4>)
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4413      	add	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4a13      	ldr	r2, [pc, #76]	; (800d520 <xTaskRemoveFromEventList+0xb8>)
 800d4d2:	441a      	add	r2, r3
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	4619      	mov	r1, r3
 800d4da:	4610      	mov	r0, r2
 800d4dc:	f7fe fb29 	bl	800bb32 <vListInsertEnd>
 800d4e0:	e005      	b.n	800d4ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	3318      	adds	r3, #24
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	480e      	ldr	r0, [pc, #56]	; (800d524 <xTaskRemoveFromEventList+0xbc>)
 800d4ea:	f7fe fb22 	bl	800bb32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <xTaskRemoveFromEventList+0xc0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d905      	bls.n	800d508 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <xTaskRemoveFromEventList+0xc4>)
 800d502:	2201      	movs	r2, #1
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	e001      	b.n	800d50c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d508:	2300      	movs	r3, #0
 800d50a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d50c:	697b      	ldr	r3, [r7, #20]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	200015b8 	.word	0x200015b8
 800d51c:	20001598 	.word	0x20001598
 800d520:	200010c0 	.word	0x200010c0
 800d524:	20001550 	.word	0x20001550
 800d528:	200010bc 	.word	0x200010bc
 800d52c:	200015a4 	.word	0x200015a4

0800d530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d538:	4b06      	ldr	r3, [pc, #24]	; (800d554 <vTaskInternalSetTimeOutState+0x24>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d540:	4b05      	ldr	r3, [pc, #20]	; (800d558 <vTaskInternalSetTimeOutState+0x28>)
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	605a      	str	r2, [r3, #4]
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	200015a8 	.word	0x200015a8
 800d558:	20001594 	.word	0x20001594

0800d55c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	613b      	str	r3, [r7, #16]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	60fb      	str	r3, [r7, #12]
}
 800d59a:	bf00      	nop
 800d59c:	e7fe      	b.n	800d59c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d59e:	f001 f831 	bl	800e604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5a2:	4b1d      	ldr	r3, [pc, #116]	; (800d618 <xTaskCheckForTimeOut+0xbc>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ba:	d102      	bne.n	800d5c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	61fb      	str	r3, [r7, #28]
 800d5c0:	e023      	b.n	800d60a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	4b15      	ldr	r3, [pc, #84]	; (800d61c <xTaskCheckForTimeOut+0xc0>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d007      	beq.n	800d5de <xTaskCheckForTimeOut+0x82>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	69ba      	ldr	r2, [r7, #24]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	61fb      	str	r3, [r7, #28]
 800d5dc:	e015      	b.n	800d60a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d20b      	bcs.n	800d600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	1ad2      	subs	r2, r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ff9b 	bl	800d530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	e004      	b.n	800d60a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d606:	2301      	movs	r3, #1
 800d608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d60a:	f001 f82b 	bl	800e664 <vPortExitCritical>

	return xReturn;
 800d60e:	69fb      	ldr	r3, [r7, #28]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3720      	adds	r7, #32
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20001594 	.word	0x20001594
 800d61c:	200015a8 	.word	0x200015a8

0800d620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d620:	b480      	push	{r7}
 800d622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d624:	4b03      	ldr	r3, [pc, #12]	; (800d634 <vTaskMissedYield+0x14>)
 800d626:	2201      	movs	r2, #1
 800d628:	601a      	str	r2, [r3, #0]
}
 800d62a:	bf00      	nop
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	200015a4 	.word	0x200015a4

0800d638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d640:	f000 f84c 	bl	800d6dc <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800d644:	4b04      	ldr	r3, [pc, #16]	; (800d658 <prvIdleTask+0x20>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d654:	e7f4      	b.n	800d640 <prvIdleTask+0x8>
 800d656:	bf00      	nop
 800d658:	e000ed04 	.word	0xe000ed04

0800d65c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d662:	2300      	movs	r3, #0
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	e00c      	b.n	800d682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4613      	mov	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4a12      	ldr	r2, [pc, #72]	; (800d6bc <prvInitialiseTaskLists+0x60>)
 800d674:	4413      	add	r3, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fa2e 	bl	800bad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3301      	adds	r3, #1
 800d680:	607b      	str	r3, [r7, #4]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b37      	cmp	r3, #55	; 0x37
 800d686:	d9ef      	bls.n	800d668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d688:	480d      	ldr	r0, [pc, #52]	; (800d6c0 <prvInitialiseTaskLists+0x64>)
 800d68a:	f7fe fa25 	bl	800bad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d68e:	480d      	ldr	r0, [pc, #52]	; (800d6c4 <prvInitialiseTaskLists+0x68>)
 800d690:	f7fe fa22 	bl	800bad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d694:	480c      	ldr	r0, [pc, #48]	; (800d6c8 <prvInitialiseTaskLists+0x6c>)
 800d696:	f7fe fa1f 	bl	800bad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d69a:	480c      	ldr	r0, [pc, #48]	; (800d6cc <prvInitialiseTaskLists+0x70>)
 800d69c:	f7fe fa1c 	bl	800bad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6a0:	480b      	ldr	r0, [pc, #44]	; (800d6d0 <prvInitialiseTaskLists+0x74>)
 800d6a2:	f7fe fa19 	bl	800bad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	; (800d6d4 <prvInitialiseTaskLists+0x78>)
 800d6a8:	4a05      	ldr	r2, [pc, #20]	; (800d6c0 <prvInitialiseTaskLists+0x64>)
 800d6aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <prvInitialiseTaskLists+0x7c>)
 800d6ae:	4a05      	ldr	r2, [pc, #20]	; (800d6c4 <prvInitialiseTaskLists+0x68>)
 800d6b0:	601a      	str	r2, [r3, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200010c0 	.word	0x200010c0
 800d6c0:	20001520 	.word	0x20001520
 800d6c4:	20001534 	.word	0x20001534
 800d6c8:	20001550 	.word	0x20001550
 800d6cc:	20001564 	.word	0x20001564
 800d6d0:	2000157c 	.word	0x2000157c
 800d6d4:	20001548 	.word	0x20001548
 800d6d8:	2000154c 	.word	0x2000154c

0800d6dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6e2:	e019      	b.n	800d718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6e4:	f000 ff8e 	bl	800e604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e8:	4b10      	ldr	r3, [pc, #64]	; (800d72c <prvCheckTasksWaitingTermination+0x50>)
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fa79 	bl	800bbec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6fa:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <prvCheckTasksWaitingTermination+0x54>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	4a0b      	ldr	r2, [pc, #44]	; (800d730 <prvCheckTasksWaitingTermination+0x54>)
 800d702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d704:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3b01      	subs	r3, #1
 800d70a:	4a0a      	ldr	r2, [pc, #40]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d70c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d70e:	f000 ffa9 	bl	800e664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f810 	bl	800d738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d718:	4b06      	ldr	r3, [pc, #24]	; (800d734 <prvCheckTasksWaitingTermination+0x58>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1e1      	bne.n	800d6e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d720:	bf00      	nop
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20001564 	.word	0x20001564
 800d730:	20001590 	.word	0x20001590
 800d734:	20001578 	.word	0x20001578

0800d738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	3354      	adds	r3, #84	; 0x54
 800d744:	4618      	mov	r0, r3
 800d746:	f002 f8af 	bl	800f8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d750:	2b00      	cmp	r3, #0
 800d752:	d108      	bne.n	800d766 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d758:	4618      	mov	r0, r3
 800d75a:	f001 f941 	bl	800e9e0 <vPortFree>
				vPortFree( pxTCB );
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f001 f93e 	bl	800e9e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d764:	e018      	b.n	800d798 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d103      	bne.n	800d778 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 f935 	bl	800e9e0 <vPortFree>
	}
 800d776:	e00f      	b.n	800d798 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d00a      	beq.n	800d798 <prvDeleteTCB+0x60>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	60fb      	str	r3, [r7, #12]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <prvDeleteTCB+0x5e>
	}
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <prvResetNextTaskUnblockTime+0x38>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d104      	bne.n	800d7ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <prvResetNextTaskUnblockTime+0x3c>)
 800d7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7b8:	e008      	b.n	800d7cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <prvResetNextTaskUnblockTime+0x38>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	4a04      	ldr	r2, [pc, #16]	; (800d7dc <prvResetNextTaskUnblockTime+0x3c>)
 800d7ca:	6013      	str	r3, [r2, #0]
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	20001548 	.word	0x20001548
 800d7dc:	200015b0 	.word	0x200015b0

0800d7e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7e6:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <xTaskGetSchedulerState+0x34>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	607b      	str	r3, [r7, #4]
 800d7f2:	e008      	b.n	800d806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7f4:	4b08      	ldr	r3, [pc, #32]	; (800d818 <xTaskGetSchedulerState+0x38>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	607b      	str	r3, [r7, #4]
 800d800:	e001      	b.n	800d806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d802:	2300      	movs	r3, #0
 800d804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d806:	687b      	ldr	r3, [r7, #4]
	}
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	2000159c 	.word	0x2000159c
 800d818:	200015b8 	.word	0x200015b8

0800d81c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d051      	beq.n	800d8d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d836:	4b2a      	ldr	r3, [pc, #168]	; (800d8e0 <xTaskPriorityInherit+0xc4>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d241      	bcs.n	800d8c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	db06      	blt.n	800d856 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d848:	4b25      	ldr	r3, [pc, #148]	; (800d8e0 <xTaskPriorityInherit+0xc4>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	6959      	ldr	r1, [r3, #20]
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85e:	4613      	mov	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4413      	add	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4a1f      	ldr	r2, [pc, #124]	; (800d8e4 <xTaskPriorityInherit+0xc8>)
 800d868:	4413      	add	r3, r2
 800d86a:	4299      	cmp	r1, r3
 800d86c:	d122      	bne.n	800d8b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	3304      	adds	r3, #4
 800d872:	4618      	mov	r0, r3
 800d874:	f7fe f9ba 	bl	800bbec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d878:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <xTaskPriorityInherit+0xc4>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d886:	4b18      	ldr	r3, [pc, #96]	; (800d8e8 <xTaskPriorityInherit+0xcc>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d903      	bls.n	800d896 <xTaskPriorityInherit+0x7a>
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	4a15      	ldr	r2, [pc, #84]	; (800d8e8 <xTaskPriorityInherit+0xcc>)
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4a10      	ldr	r2, [pc, #64]	; (800d8e4 <xTaskPriorityInherit+0xc8>)
 800d8a4:	441a      	add	r2, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f7fe f940 	bl	800bb32 <vListInsertEnd>
 800d8b2:	e004      	b.n	800d8be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	; (800d8e0 <xTaskPriorityInherit+0xc4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	e008      	b.n	800d8d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8c8:	4b05      	ldr	r3, [pc, #20]	; (800d8e0 <xTaskPriorityInherit+0xc4>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d201      	bcs.n	800d8d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
	}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	200010bc 	.word	0x200010bc
 800d8e4:	200010c0 	.word	0x200010c0
 800d8e8:	20001598 	.word	0x20001598

0800d8ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d056      	beq.n	800d9b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d902:	4b2e      	ldr	r3, [pc, #184]	; (800d9bc <xTaskPriorityDisinherit+0xd0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d00a      	beq.n	800d922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	60fb      	str	r3, [r7, #12]
}
 800d91e:	bf00      	nop
 800d920:	e7fe      	b.n	800d920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	60bb      	str	r3, [r7, #8]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d944:	1e5a      	subs	r2, r3, #1
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d952:	429a      	cmp	r2, r3
 800d954:	d02c      	beq.n	800d9b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d128      	bne.n	800d9b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	3304      	adds	r3, #4
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe f942 	bl	800bbec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d980:	4b0f      	ldr	r3, [pc, #60]	; (800d9c0 <xTaskPriorityDisinherit+0xd4>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d903      	bls.n	800d990 <xTaskPriorityDisinherit+0xa4>
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98c:	4a0c      	ldr	r2, [pc, #48]	; (800d9c0 <xTaskPriorityDisinherit+0xd4>)
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d994:	4613      	mov	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <xTaskPriorityDisinherit+0xd8>)
 800d99e:	441a      	add	r2, r3
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	f7fe f8c3 	bl	800bb32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9b0:	697b      	ldr	r3, [r7, #20]
	}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3718      	adds	r7, #24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	200010bc 	.word	0x200010bc
 800d9c0:	20001598 	.word	0x20001598
 800d9c4:	200010c0 	.word	0x200010c0

0800d9c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d06a      	beq.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10a      	bne.n	800d9fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	60fb      	str	r3, [r7, #12]
}
 800d9fa:	bf00      	nop
 800d9fc:	e7fe      	b.n	800d9fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	429a      	cmp	r2, r3
 800da06:	d902      	bls.n	800da0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	61fb      	str	r3, [r7, #28]
 800da0c:	e002      	b.n	800da14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	69fa      	ldr	r2, [r7, #28]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d04b      	beq.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	429a      	cmp	r2, r3
 800da26:	d146      	bne.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da28:	4b25      	ldr	r3, [pc, #148]	; (800dac0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d10a      	bne.n	800da48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	60bb      	str	r3, [r7, #8]
}
 800da44:	bf00      	nop
 800da46:	e7fe      	b.n	800da46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	69fa      	ldr	r2, [r7, #28]
 800da52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	db04      	blt.n	800da66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	6959      	ldr	r1, [r3, #20]
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4a13      	ldr	r2, [pc, #76]	; (800dac4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da76:	4413      	add	r3, r2
 800da78:	4299      	cmp	r1, r3
 800da7a:	d11c      	bne.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	3304      	adds	r3, #4
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe f8b3 	bl	800bbec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8a:	4b0f      	ldr	r3, [pc, #60]	; (800dac8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d903      	bls.n	800da9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da96:	4a0c      	ldr	r2, [pc, #48]	; (800dac8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da9e:	4613      	mov	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4a07      	ldr	r2, [pc, #28]	; (800dac4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800daa8:	441a      	add	r2, r3
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	3304      	adds	r3, #4
 800daae:	4619      	mov	r1, r3
 800dab0:	4610      	mov	r0, r2
 800dab2:	f7fe f83e 	bl	800bb32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dab6:	bf00      	nop
 800dab8:	3720      	adds	r7, #32
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200010bc 	.word	0x200010bc
 800dac4:	200010c0 	.word	0x200010c0
 800dac8:	20001598 	.word	0x20001598

0800dacc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dacc:	b480      	push	{r7}
 800dace:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dad0:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dad8:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dade:	3201      	adds	r2, #1
 800dae0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dae2:	4b03      	ldr	r3, [pc, #12]	; (800daf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dae4:	681b      	ldr	r3, [r3, #0]
	}
 800dae6:	4618      	mov	r0, r3
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	200010bc 	.word	0x200010bc

0800daf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dafe:	4b21      	ldr	r3, [pc, #132]	; (800db84 <prvAddCurrentTaskToDelayedList+0x90>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db04:	4b20      	ldr	r3, [pc, #128]	; (800db88 <prvAddCurrentTaskToDelayedList+0x94>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	3304      	adds	r3, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe f86e 	bl	800bbec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db16:	d10a      	bne.n	800db2e <prvAddCurrentTaskToDelayedList+0x3a>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d007      	beq.n	800db2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1e:	4b1a      	ldr	r3, [pc, #104]	; (800db88 <prvAddCurrentTaskToDelayedList+0x94>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4819      	ldr	r0, [pc, #100]	; (800db8c <prvAddCurrentTaskToDelayedList+0x98>)
 800db28:	f7fe f803 	bl	800bb32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db2c:	e026      	b.n	800db7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4413      	add	r3, r2
 800db34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <prvAddCurrentTaskToDelayedList+0x94>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68ba      	ldr	r2, [r7, #8]
 800db3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	429a      	cmp	r2, r3
 800db44:	d209      	bcs.n	800db5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <prvAddCurrentTaskToDelayedList+0x94>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	3304      	adds	r3, #4
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	f7fe f811 	bl	800bb7a <vListInsert>
}
 800db58:	e010      	b.n	800db7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db5a:	4b0e      	ldr	r3, [pc, #56]	; (800db94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <prvAddCurrentTaskToDelayedList+0x94>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	3304      	adds	r3, #4
 800db64:	4619      	mov	r1, r3
 800db66:	4610      	mov	r0, r2
 800db68:	f7fe f807 	bl	800bb7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db6c:	4b0a      	ldr	r3, [pc, #40]	; (800db98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	429a      	cmp	r2, r3
 800db74:	d202      	bcs.n	800db7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db76:	4a08      	ldr	r2, [pc, #32]	; (800db98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	6013      	str	r3, [r2, #0]
}
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20001594 	.word	0x20001594
 800db88:	200010bc 	.word	0x200010bc
 800db8c:	2000157c 	.word	0x2000157c
 800db90:	2000154c 	.word	0x2000154c
 800db94:	20001548 	.word	0x20001548
 800db98:	200015b0 	.word	0x200015b0

0800db9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08a      	sub	sp, #40	; 0x28
 800dba0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dba6:	f000 fba1 	bl	800e2ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dbaa:	4b1c      	ldr	r3, [pc, #112]	; (800dc1c <xTimerCreateTimerTask+0x80>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d021      	beq.n	800dbf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dbba:	1d3a      	adds	r2, r7, #4
 800dbbc:	f107 0108 	add.w	r1, r7, #8
 800dbc0:	f107 030c 	add.w	r3, r7, #12
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd ff6d 	bl	800baa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	9202      	str	r2, [sp, #8]
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	2337      	movs	r3, #55	; 0x37
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	460a      	mov	r2, r1
 800dbdc:	4910      	ldr	r1, [pc, #64]	; (800dc20 <xTimerCreateTimerTask+0x84>)
 800dbde:	4811      	ldr	r0, [pc, #68]	; (800dc24 <xTimerCreateTimerTask+0x88>)
 800dbe0:	f7fe fffe 	bl	800cbe0 <xTaskCreateStatic>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	4a10      	ldr	r2, [pc, #64]	; (800dc28 <xTimerCreateTimerTask+0x8c>)
 800dbe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbea:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <xTimerCreateTimerTask+0x8c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	613b      	str	r3, [r7, #16]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc12:	697b      	ldr	r3, [r7, #20]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	200015ec 	.word	0x200015ec
 800dc20:	080122e8 	.word	0x080122e8
 800dc24:	0800de95 	.word	0x0800de95
 800dc28:	200015f0 	.word	0x200015f0

0800dc2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dc3a:	202c      	movs	r0, #44	; 0x2c
 800dc3c:	f000 fe04 	bl	800e848 <pvPortMalloc>
 800dc40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00d      	beq.n	800dc64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	6a3b      	ldr	r3, [r7, #32]
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	68b9      	ldr	r1, [r7, #8]
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f000 f843 	bl	800dcea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dc64:	697b      	ldr	r3, [r7, #20]
	}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b08a      	sub	sp, #40	; 0x28
 800dc72:	af02      	add	r7, sp, #8
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800dc7c:	232c      	movs	r3, #44	; 0x2c
 800dc7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b2c      	cmp	r3, #44	; 0x2c
 800dc84:	d00a      	beq.n	800dc9c <xTimerCreateStatic+0x2e>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	61bb      	str	r3, [r7, #24]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dc9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800dc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10a      	bne.n	800dcba <xTimerCreateStatic+0x4c>
	__asm volatile
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	617b      	str	r3, [r7, #20]
}
 800dcb6:	bf00      	nop
 800dcb8:	e7fe      	b.n	800dcb8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00d      	beq.n	800dce0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	68b9      	ldr	r1, [r7, #8]
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f000 f805 	bl	800dcea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dce0:	69fb      	ldr	r3, [r7, #28]
	}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3720      	adds	r7, #32
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b086      	sub	sp, #24
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	607a      	str	r2, [r7, #4]
 800dcf6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	617b      	str	r3, [r7, #20]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d01e      	beq.n	800dd58 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dd1a:	f000 fae7 	bl	800e2ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	6a3a      	ldr	r2, [r7, #32]
 800dd34:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	3304      	adds	r3, #4
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fd feec 	bl	800bb18 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d008      	beq.n	800dd58 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd4c:	f043 0304 	orr.w	r3, r3, #4
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dd58:	bf00      	nop
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	; 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
 800dd6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	623b      	str	r3, [r7, #32]
}
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02a      	beq.n	800ddec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b05      	cmp	r3, #5
 800dda6:	dc18      	bgt.n	800ddda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dda8:	f7ff fd1a 	bl	800d7e0 <xTaskGetSchedulerState>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d109      	bne.n	800ddc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb2:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f107 0110 	add.w	r1, r7, #16
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbe:	f7fe f8d9 	bl	800bf74 <xQueueGenericSend>
 800ddc2:	6278      	str	r0, [r7, #36]	; 0x24
 800ddc4:	e012      	b.n	800ddec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddc6:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f107 0110 	add.w	r1, r7, #16
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f7fe f8cf 	bl	800bf74 <xQueueGenericSend>
 800ddd6:	6278      	str	r0, [r7, #36]	; 0x24
 800ddd8:	e008      	b.n	800ddec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddda:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <xTimerGenericCommand+0x98>)
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	f107 0110 	add.w	r1, r7, #16
 800dde2:	2300      	movs	r3, #0
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	f7fe f9ab 	bl	800c140 <xQueueGenericSendFromISR>
 800ddea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3728      	adds	r7, #40	; 0x28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	200015ec 	.word	0x200015ec

0800ddfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b088      	sub	sp, #32
 800de00:	af02      	add	r7, sp, #8
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de06:	4b22      	ldr	r3, [pc, #136]	; (800de90 <prvProcessExpiredTimer+0x94>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	3304      	adds	r3, #4
 800de14:	4618      	mov	r0, r3
 800de16:	f7fd fee9 	bl	800bbec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de20:	f003 0304 	and.w	r3, r3, #4
 800de24:	2b00      	cmp	r3, #0
 800de26:	d022      	beq.n	800de6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	699a      	ldr	r2, [r3, #24]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	18d1      	adds	r1, r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	6978      	ldr	r0, [r7, #20]
 800de36:	f000 f8d1 	bl	800dfdc <prvInsertTimerInActiveList>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01f      	beq.n	800de80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de40:	2300      	movs	r3, #0
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	2100      	movs	r1, #0
 800de4a:	6978      	ldr	r0, [r7, #20]
 800de4c:	f7ff ff88 	bl	800dd60 <xTimerGenericCommand>
 800de50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d113      	bne.n	800de80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	60fb      	str	r3, [r7, #12]
}
 800de6a:	bf00      	nop
 800de6c:	e7fe      	b.n	800de6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de74:	f023 0301 	bic.w	r3, r3, #1
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	6978      	ldr	r0, [r7, #20]
 800de86:	4798      	blx	r3
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	200015e4 	.word	0x200015e4

0800de94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f857 	bl	800df54 <prvGetNextExpireTime>
 800dea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4619      	mov	r1, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f803 	bl	800deb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800deb2:	f000 f8d5 	bl	800e060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deb6:	e7f1      	b.n	800de9c <prvTimerTask+0x8>

0800deb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dec2:	f7ff f8d9 	bl	800d078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f866 	bl	800df9c <prvSampleTimeNow>
 800ded0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d130      	bne.n	800df3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10a      	bne.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d806      	bhi.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dee6:	f7ff f8d5 	bl	800d094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deea:	68f9      	ldr	r1, [r7, #12]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ff85 	bl	800ddfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800def2:	e024      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d008      	beq.n	800df0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800defa:	4b13      	ldr	r3, [pc, #76]	; (800df48 <prvProcessTimerOrBlockTask+0x90>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <prvProcessTimerOrBlockTask+0x50>
 800df04:	2301      	movs	r3, #1
 800df06:	e000      	b.n	800df0a <prvProcessTimerOrBlockTask+0x52>
 800df08:	2300      	movs	r3, #0
 800df0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df0c:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <prvProcessTimerOrBlockTask+0x94>)
 800df0e:	6818      	ldr	r0, [r3, #0]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	4619      	mov	r1, r3
 800df1a:	f7fe fe2d 	bl	800cb78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df1e:	f7ff f8b9 	bl	800d094 <xTaskResumeAll>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df28:	4b09      	ldr	r3, [pc, #36]	; (800df50 <prvProcessTimerOrBlockTask+0x98>)
 800df2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	f3bf 8f6f 	isb	sy
}
 800df38:	e001      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df3a:	f7ff f8ab 	bl	800d094 <xTaskResumeAll>
}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	200015e8 	.word	0x200015e8
 800df4c:	200015ec 	.word	0x200015ec
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <prvGetNextExpireTime+0x16>
 800df66:	2201      	movs	r2, #1
 800df68:	e000      	b.n	800df6c <prvGetNextExpireTime+0x18>
 800df6a:	2200      	movs	r2, #0
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d105      	bne.n	800df84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df78:	4b07      	ldr	r3, [pc, #28]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e001      	b.n	800df88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df88:	68fb      	ldr	r3, [r7, #12]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	200015e4 	.word	0x200015e4

0800df9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfa4:	f7ff f906 	bl	800d1b4 <xTaskGetTickCount>
 800dfa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d205      	bcs.n	800dfc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfb4:	f000 f936 	bl	800e224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	e002      	b.n	800dfc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfc6:	4a04      	ldr	r2, [pc, #16]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	200015f4 	.word	0x200015f4

0800dfdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d812      	bhi.n	800e028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	1ad2      	subs	r2, r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d302      	bcc.n	800e016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	e01b      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e016:	4b10      	ldr	r3, [pc, #64]	; (800e058 <prvInsertTimerInActiveList+0x7c>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fd fdaa 	bl	800bb7a <vListInsert>
 800e026:	e012      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d206      	bcs.n	800e03e <prvInsertTimerInActiveList+0x62>
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d302      	bcc.n	800e03e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	617b      	str	r3, [r7, #20]
 800e03c:	e007      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e03e:	4b07      	ldr	r3, [pc, #28]	; (800e05c <prvInsertTimerInActiveList+0x80>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3304      	adds	r3, #4
 800e046:	4619      	mov	r1, r3
 800e048:	4610      	mov	r0, r2
 800e04a:	f7fd fd96 	bl	800bb7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e04e:	697b      	ldr	r3, [r7, #20]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	200015e8 	.word	0x200015e8
 800e05c:	200015e4 	.word	0x200015e4

0800e060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e066:	e0ca      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da18      	bge.n	800e0a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e06e:	1d3b      	adds	r3, r7, #4
 800e070:	3304      	adds	r3, #4
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	61fb      	str	r3, [r7, #28]
}
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e096:	6850      	ldr	r0, [r2, #4]
 800e098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09a:	6892      	ldr	r2, [r2, #8]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f2c0 80aa 	blt.w	800e1fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fd fd97 	bl	800bbec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0be:	463b      	mov	r3, r7
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff ff6b 	bl	800df9c <prvSampleTimeNow>
 800e0c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b09      	cmp	r3, #9
 800e0cc:	f200 8097 	bhi.w	800e1fe <prvProcessReceivedCommands+0x19e>
 800e0d0:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <prvProcessReceivedCommands+0x78>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e175 	.word	0x0800e175
 800e0e8:	0800e189 	.word	0x0800e189
 800e0ec:	0800e1d3 	.word	0x0800e1d3
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e101 	.word	0x0800e101
 800e0f8:	0800e175 	.word	0x0800e175
 800e0fc:	0800e189 	.word	0x0800e189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	699b      	ldr	r3, [r3, #24]
 800e118:	18d1      	adds	r1, r2, r3
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e120:	f7ff ff5c 	bl	800dfdc <prvInsertTimerInActiveList>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d069      	beq.n	800e1fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e138:	f003 0304 	and.w	r3, r3, #4
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d05e      	beq.n	800e1fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	441a      	add	r2, r3
 800e148:	2300      	movs	r3, #0
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	2300      	movs	r3, #0
 800e14e:	2100      	movs	r1, #0
 800e150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e152:	f7ff fe05 	bl	800dd60 <xTimerGenericCommand>
 800e156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d14f      	bne.n	800e1fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	61bb      	str	r3, [r7, #24]
}
 800e170:	bf00      	nop
 800e172:	e7fe      	b.n	800e172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e17a:	f023 0301 	bic.w	r3, r3, #1
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e186:	e03a      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e18e:	f043 0301 	orr.w	r3, r3, #1
 800e192:	b2da      	uxtb	r2, r3
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10a      	bne.n	800e1be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	617b      	str	r3, [r7, #20]
}
 800e1ba:	bf00      	nop
 800e1bc:	e7fe      	b.n	800e1bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	699a      	ldr	r2, [r3, #24]
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	18d1      	adds	r1, r2, r3
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1cc:	f7ff ff06 	bl	800dfdc <prvInsertTimerInActiveList>
					break;
 800e1d0:	e015      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d103      	bne.n	800e1e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e2:	f000 fbfd 	bl	800e9e0 <vPortFree>
 800e1e6:	e00a      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1ee:	f023 0301 	bic.w	r3, r3, #1
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1fa:	e000      	b.n	800e1fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e1fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1fe:	4b08      	ldr	r3, [pc, #32]	; (800e220 <prvProcessReceivedCommands+0x1c0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	1d39      	adds	r1, r7, #4
 800e204:	2200      	movs	r2, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe f8c2 	bl	800c390 <xQueueReceive>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f47f af2a 	bne.w	800e068 <prvProcessReceivedCommands+0x8>
	}
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	3730      	adds	r7, #48	; 0x30
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	200015ec 	.word	0x200015ec

0800e224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e22a:	e048      	b.n	800e2be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e22c:	4b2d      	ldr	r3, [pc, #180]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e236:	4b2b      	ldr	r3, [pc, #172]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3304      	adds	r3, #4
 800e244:	4618      	mov	r0, r3
 800e246:	f7fd fcd1 	bl	800bbec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e258:	f003 0304 	and.w	r3, r3, #4
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02e      	beq.n	800e2be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	4413      	add	r3, r2
 800e268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d90e      	bls.n	800e290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e27e:	4b19      	ldr	r3, [pc, #100]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3304      	adds	r3, #4
 800e286:	4619      	mov	r1, r3
 800e288:	4610      	mov	r0, r2
 800e28a:	f7fd fc76 	bl	800bb7a <vListInsert>
 800e28e:	e016      	b.n	800e2be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e290:	2300      	movs	r3, #0
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	2300      	movs	r3, #0
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	2100      	movs	r1, #0
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7ff fd60 	bl	800dd60 <xTimerGenericCommand>
 800e2a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	603b      	str	r3, [r7, #0]
}
 800e2ba:	bf00      	nop
 800e2bc:	e7fe      	b.n	800e2bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1b1      	bne.n	800e22c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <prvSwitchTimerLists+0xc4>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a04      	ldr	r2, [pc, #16]	; (800e2e4 <prvSwitchTimerLists+0xc0>)
 800e2d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2d6:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <prvSwitchTimerLists+0xc4>)
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	6013      	str	r3, [r2, #0]
}
 800e2dc:	bf00      	nop
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	200015e4 	.word	0x200015e4
 800e2e8:	200015e8 	.word	0x200015e8

0800e2ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2f2:	f000 f987 	bl	800e604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2f6:	4b15      	ldr	r3, [pc, #84]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d120      	bne.n	800e340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2fe:	4814      	ldr	r0, [pc, #80]	; (800e350 <prvCheckForValidListAndQueue+0x64>)
 800e300:	f7fd fbea 	bl	800bad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e304:	4813      	ldr	r0, [pc, #76]	; (800e354 <prvCheckForValidListAndQueue+0x68>)
 800e306:	f7fd fbe7 	bl	800bad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e30a:	4b13      	ldr	r3, [pc, #76]	; (800e358 <prvCheckForValidListAndQueue+0x6c>)
 800e30c:	4a10      	ldr	r2, [pc, #64]	; (800e350 <prvCheckForValidListAndQueue+0x64>)
 800e30e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e310:	4b12      	ldr	r3, [pc, #72]	; (800e35c <prvCheckForValidListAndQueue+0x70>)
 800e312:	4a10      	ldr	r2, [pc, #64]	; (800e354 <prvCheckForValidListAndQueue+0x68>)
 800e314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e316:	2300      	movs	r3, #0
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4b11      	ldr	r3, [pc, #68]	; (800e360 <prvCheckForValidListAndQueue+0x74>)
 800e31c:	4a11      	ldr	r2, [pc, #68]	; (800e364 <prvCheckForValidListAndQueue+0x78>)
 800e31e:	2110      	movs	r1, #16
 800e320:	200a      	movs	r0, #10
 800e322:	f7fd fce8 	bl	800bcf6 <xQueueGenericCreateStatic>
 800e326:	4603      	mov	r3, r0
 800e328:	4a08      	ldr	r2, [pc, #32]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e32a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e334:	4b05      	ldr	r3, [pc, #20]	; (800e34c <prvCheckForValidListAndQueue+0x60>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	490b      	ldr	r1, [pc, #44]	; (800e368 <prvCheckForValidListAndQueue+0x7c>)
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fbc8 	bl	800cad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e340:	f000 f990 	bl	800e664 <vPortExitCritical>
}
 800e344:	bf00      	nop
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200015ec 	.word	0x200015ec
 800e350:	200015bc 	.word	0x200015bc
 800e354:	200015d0 	.word	0x200015d0
 800e358:	200015e4 	.word	0x200015e4
 800e35c:	200015e8 	.word	0x200015e8
 800e360:	20001698 	.word	0x20001698
 800e364:	200015f8 	.word	0x200015f8
 800e368:	080122f0 	.word	0x080122f0

0800e36c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10a      	bne.n	800e394 <pvTimerGetTimerID+0x28>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	60fb      	str	r3, [r7, #12]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e394:	f000 f936 	bl	800e604 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	69db      	ldr	r3, [r3, #28]
 800e39c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e39e:	f000 f961 	bl	800e664 <vPortExitCritical>

	return pvReturn;
 800e3a2:	693b      	ldr	r3, [r7, #16]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	3b04      	subs	r3, #4
 800e3bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3b04      	subs	r3, #4
 800e3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	f023 0201 	bic.w	r2, r3, #1
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3b04      	subs	r3, #4
 800e3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3dc:	4a0c      	ldr	r2, [pc, #48]	; (800e410 <pxPortInitialiseStack+0x64>)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3b14      	subs	r3, #20
 800e3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f06f 0202 	mvn.w	r2, #2
 800e3fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3b20      	subs	r3, #32
 800e400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e402:	68fb      	ldr	r3, [r7, #12]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	0800e415 	.word	0x0800e415

0800e414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e41e:	4b12      	ldr	r3, [pc, #72]	; (800e468 <prvTaskExitError+0x54>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e426:	d00a      	beq.n	800e43e <prvTaskExitError+0x2a>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	60fb      	str	r3, [r7, #12]
}
 800e43a:	bf00      	nop
 800e43c:	e7fe      	b.n	800e43c <prvTaskExitError+0x28>
	__asm volatile
 800e43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	60bb      	str	r3, [r7, #8]
}
 800e450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e452:	bf00      	nop
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0fc      	beq.n	800e454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	20000024 	.word	0x20000024
 800e46c:	00000000 	.word	0x00000000

0800e470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <pxCurrentTCBConst2>)
 800e472:	6819      	ldr	r1, [r3, #0]
 800e474:	6808      	ldr	r0, [r1, #0]
 800e476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47a:	f380 8809 	msr	PSP, r0
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f04f 0000 	mov.w	r0, #0
 800e486:	f380 8811 	msr	BASEPRI, r0
 800e48a:	4770      	bx	lr
 800e48c:	f3af 8000 	nop.w

0800e490 <pxCurrentTCBConst2>:
 800e490:	200010bc 	.word	0x200010bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e494:	bf00      	nop
 800e496:	bf00      	nop

0800e498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e498:	4808      	ldr	r0, [pc, #32]	; (800e4bc <prvPortStartFirstTask+0x24>)
 800e49a:	6800      	ldr	r0, [r0, #0]
 800e49c:	6800      	ldr	r0, [r0, #0]
 800e49e:	f380 8808 	msr	MSP, r0
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	f380 8814 	msr	CONTROL, r0
 800e4aa:	b662      	cpsie	i
 800e4ac:	b661      	cpsie	f
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	df00      	svc	0
 800e4b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4ba:	bf00      	nop
 800e4bc:	e000ed08 	.word	0xe000ed08

0800e4c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4c6:	4b46      	ldr	r3, [pc, #280]	; (800e5e0 <xPortStartScheduler+0x120>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a46      	ldr	r2, [pc, #280]	; (800e5e4 <xPortStartScheduler+0x124>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d10a      	bne.n	800e4e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	613b      	str	r3, [r7, #16]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4e6:	4b3e      	ldr	r3, [pc, #248]	; (800e5e0 <xPortStartScheduler+0x120>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a3f      	ldr	r2, [pc, #252]	; (800e5e8 <xPortStartScheduler+0x128>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d10a      	bne.n	800e506 <xPortStartScheduler+0x46>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	60fb      	str	r3, [r7, #12]
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e506:	4b39      	ldr	r3, [pc, #228]	; (800e5ec <xPortStartScheduler+0x12c>)
 800e508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	4b31      	ldr	r3, [pc, #196]	; (800e5f0 <xPortStartScheduler+0x130>)
 800e52c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e52e:	4b31      	ldr	r3, [pc, #196]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e530:	2207      	movs	r2, #7
 800e532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e534:	e009      	b.n	800e54a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e536:	4b2f      	ldr	r3, [pc, #188]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	4a2d      	ldr	r2, [pc, #180]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e53e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	b2db      	uxtb	r3, r3
 800e548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e54a:	78fb      	ldrb	r3, [r7, #3]
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e552:	2b80      	cmp	r3, #128	; 0x80
 800e554:	d0ef      	beq.n	800e536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e556:	4b27      	ldr	r3, [pc, #156]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f1c3 0307 	rsb	r3, r3, #7
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d00a      	beq.n	800e578 <xPortStartScheduler+0xb8>
	__asm volatile
 800e562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e566:	f383 8811 	msr	BASEPRI, r3
 800e56a:	f3bf 8f6f 	isb	sy
 800e56e:	f3bf 8f4f 	dsb	sy
 800e572:	60bb      	str	r3, [r7, #8]
}
 800e574:	bf00      	nop
 800e576:	e7fe      	b.n	800e576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e578:	4b1e      	ldr	r3, [pc, #120]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	021b      	lsls	r3, r3, #8
 800e57e:	4a1d      	ldr	r2, [pc, #116]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e582:	4b1c      	ldr	r3, [pc, #112]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e58a:	4a1a      	ldr	r2, [pc, #104]	; (800e5f4 <xPortStartScheduler+0x134>)
 800e58c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	b2da      	uxtb	r2, r3
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e596:	4b18      	ldr	r3, [pc, #96]	; (800e5f8 <xPortStartScheduler+0x138>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a17      	ldr	r2, [pc, #92]	; (800e5f8 <xPortStartScheduler+0x138>)
 800e59c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5a2:	4b15      	ldr	r3, [pc, #84]	; (800e5f8 <xPortStartScheduler+0x138>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a14      	ldr	r2, [pc, #80]	; (800e5f8 <xPortStartScheduler+0x138>)
 800e5a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5ae:	f000 f8dd 	bl	800e76c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5b2:	4b12      	ldr	r3, [pc, #72]	; (800e5fc <xPortStartScheduler+0x13c>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5b8:	f000 f8fc 	bl	800e7b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5bc:	4b10      	ldr	r3, [pc, #64]	; (800e600 <xPortStartScheduler+0x140>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0f      	ldr	r2, [pc, #60]	; (800e600 <xPortStartScheduler+0x140>)
 800e5c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5c8:	f7ff ff66 	bl	800e498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5cc:	f7fe fe98 	bl	800d300 <vTaskSwitchContext>
	prvTaskExitError();
 800e5d0:	f7ff ff20 	bl	800e414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	e000ed00 	.word	0xe000ed00
 800e5e4:	410fc271 	.word	0x410fc271
 800e5e8:	410fc270 	.word	0x410fc270
 800e5ec:	e000e400 	.word	0xe000e400
 800e5f0:	200016e8 	.word	0x200016e8
 800e5f4:	200016ec 	.word	0x200016ec
 800e5f8:	e000ed20 	.word	0xe000ed20
 800e5fc:	20000024 	.word	0x20000024
 800e600:	e000ef34 	.word	0xe000ef34

0800e604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	607b      	str	r3, [r7, #4]
}
 800e61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <vPortEnterCritical+0x58>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3301      	adds	r3, #1
 800e624:	4a0d      	ldr	r2, [pc, #52]	; (800e65c <vPortEnterCritical+0x58>)
 800e626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e628:	4b0c      	ldr	r3, [pc, #48]	; (800e65c <vPortEnterCritical+0x58>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d10f      	bne.n	800e650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e630:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <vPortEnterCritical+0x5c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	b2db      	uxtb	r3, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00a      	beq.n	800e650 <vPortEnterCritical+0x4c>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	603b      	str	r3, [r7, #0]
}
 800e64c:	bf00      	nop
 800e64e:	e7fe      	b.n	800e64e <vPortEnterCritical+0x4a>
	}
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	20000024 	.word	0x20000024
 800e660:	e000ed04 	.word	0xe000ed04

0800e664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e66a:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <vPortExitCritical+0x50>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10a      	bne.n	800e688 <vPortExitCritical+0x24>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	607b      	str	r3, [r7, #4]
}
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e688:	4b0a      	ldr	r3, [pc, #40]	; (800e6b4 <vPortExitCritical+0x50>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	4a09      	ldr	r2, [pc, #36]	; (800e6b4 <vPortExitCritical+0x50>)
 800e690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e692:	4b08      	ldr	r3, [pc, #32]	; (800e6b4 <vPortExitCritical+0x50>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d105      	bne.n	800e6a6 <vPortExitCritical+0x42>
 800e69a:	2300      	movs	r3, #0
 800e69c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	f383 8811 	msr	BASEPRI, r3
}
 800e6a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6a6:	bf00      	nop
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20000024 	.word	0x20000024
	...

0800e6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6c0:	f3ef 8009 	mrs	r0, PSP
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	4b15      	ldr	r3, [pc, #84]	; (800e720 <pxCurrentTCBConst>)
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	f01e 0f10 	tst.w	lr, #16
 800e6d0:	bf08      	it	eq
 800e6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6da:	6010      	str	r0, [r2, #0]
 800e6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6e4:	f380 8811 	msr	BASEPRI, r0
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f7fe fe06 	bl	800d300 <vTaskSwitchContext>
 800e6f4:	f04f 0000 	mov.w	r0, #0
 800e6f8:	f380 8811 	msr	BASEPRI, r0
 800e6fc:	bc09      	pop	{r0, r3}
 800e6fe:	6819      	ldr	r1, [r3, #0]
 800e700:	6808      	ldr	r0, [r1, #0]
 800e702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e706:	f01e 0f10 	tst.w	lr, #16
 800e70a:	bf08      	it	eq
 800e70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e710:	f380 8809 	msr	PSP, r0
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	f3af 8000 	nop.w

0800e720 <pxCurrentTCBConst>:
 800e720:	200010bc 	.word	0x200010bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop

0800e728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	607b      	str	r3, [r7, #4]
}
 800e740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e742:	f7fe fd47 	bl	800d1d4 <xTaskIncrementTick>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d003      	beq.n	800e754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e74c:	4b06      	ldr	r3, [pc, #24]	; (800e768 <xPortSysTickHandler+0x40>)
 800e74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e752:	601a      	str	r2, [r3, #0]
 800e754:	2300      	movs	r3, #0
 800e756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	f383 8811 	msr	BASEPRI, r3
}
 800e75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e760:	bf00      	nop
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	e000ed04 	.word	0xe000ed04

0800e76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e76c:	b480      	push	{r7}
 800e76e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e770:	4b0b      	ldr	r3, [pc, #44]	; (800e7a0 <vPortSetupTimerInterrupt+0x34>)
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e776:	4b0b      	ldr	r3, [pc, #44]	; (800e7a4 <vPortSetupTimerInterrupt+0x38>)
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e77c:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <vPortSetupTimerInterrupt+0x3c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <vPortSetupTimerInterrupt+0x40>)
 800e782:	fba2 2303 	umull	r2, r3, r2, r3
 800e786:	099b      	lsrs	r3, r3, #6
 800e788:	4a09      	ldr	r2, [pc, #36]	; (800e7b0 <vPortSetupTimerInterrupt+0x44>)
 800e78a:	3b01      	subs	r3, #1
 800e78c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e78e:	4b04      	ldr	r3, [pc, #16]	; (800e7a0 <vPortSetupTimerInterrupt+0x34>)
 800e790:	2207      	movs	r2, #7
 800e792:	601a      	str	r2, [r3, #0]
}
 800e794:	bf00      	nop
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	e000e010 	.word	0xe000e010
 800e7a4:	e000e018 	.word	0xe000e018
 800e7a8:	20000004 	.word	0x20000004
 800e7ac:	10624dd3 	.word	0x10624dd3
 800e7b0:	e000e014 	.word	0xe000e014

0800e7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7c4 <vPortEnableVFP+0x10>
 800e7b8:	6801      	ldr	r1, [r0, #0]
 800e7ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7be:	6001      	str	r1, [r0, #0]
 800e7c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7c2:	bf00      	nop
 800e7c4:	e000ed88 	.word	0xe000ed88

0800e7c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7ce:	f3ef 8305 	mrs	r3, IPSR
 800e7d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b0f      	cmp	r3, #15
 800e7d8:	d914      	bls.n	800e804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7da:	4a17      	ldr	r2, [pc, #92]	; (800e838 <vPortValidateInterruptPriority+0x70>)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7e4:	4b15      	ldr	r3, [pc, #84]	; (800e83c <vPortValidateInterruptPriority+0x74>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	7afa      	ldrb	r2, [r7, #11]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d20a      	bcs.n	800e804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	607b      	str	r3, [r7, #4]
}
 800e800:	bf00      	nop
 800e802:	e7fe      	b.n	800e802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e804:	4b0e      	ldr	r3, [pc, #56]	; (800e840 <vPortValidateInterruptPriority+0x78>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e80c:	4b0d      	ldr	r3, [pc, #52]	; (800e844 <vPortValidateInterruptPriority+0x7c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	429a      	cmp	r2, r3
 800e812:	d90a      	bls.n	800e82a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	603b      	str	r3, [r7, #0]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <vPortValidateInterruptPriority+0x60>
	}
 800e82a:	bf00      	nop
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	e000e3f0 	.word	0xe000e3f0
 800e83c:	200016e8 	.word	0x200016e8
 800e840:	e000ed0c 	.word	0xe000ed0c
 800e844:	200016ec 	.word	0x200016ec

0800e848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08a      	sub	sp, #40	; 0x28
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e850:	2300      	movs	r3, #0
 800e852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e854:	f7fe fc10 	bl	800d078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e858:	4b5b      	ldr	r3, [pc, #364]	; (800e9c8 <pvPortMalloc+0x180>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e860:	f000 f920 	bl	800eaa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e864:	4b59      	ldr	r3, [pc, #356]	; (800e9cc <pvPortMalloc+0x184>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4013      	ands	r3, r2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f040 8093 	bne.w	800e998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d01d      	beq.n	800e8b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e878:	2208      	movs	r2, #8
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4413      	add	r3, r2
 800e87e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f003 0307 	and.w	r3, r3, #7
 800e886:	2b00      	cmp	r3, #0
 800e888:	d014      	beq.n	800e8b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f023 0307 	bic.w	r3, r3, #7
 800e890:	3308      	adds	r3, #8
 800e892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f003 0307 	and.w	r3, r3, #7
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00a      	beq.n	800e8b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	617b      	str	r3, [r7, #20]
}
 800e8b0:	bf00      	nop
 800e8b2:	e7fe      	b.n	800e8b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d06e      	beq.n	800e998 <pvPortMalloc+0x150>
 800e8ba:	4b45      	ldr	r3, [pc, #276]	; (800e9d0 <pvPortMalloc+0x188>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d869      	bhi.n	800e998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8c4:	4b43      	ldr	r3, [pc, #268]	; (800e9d4 <pvPortMalloc+0x18c>)
 800e8c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8c8:	4b42      	ldr	r3, [pc, #264]	; (800e9d4 <pvPortMalloc+0x18c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ce:	e004      	b.n	800e8da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d903      	bls.n	800e8ec <pvPortMalloc+0xa4>
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1f1      	bne.n	800e8d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8ec:	4b36      	ldr	r3, [pc, #216]	; (800e9c8 <pvPortMalloc+0x180>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d050      	beq.n	800e998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2208      	movs	r2, #8
 800e8fc:	4413      	add	r3, r2
 800e8fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	685a      	ldr	r2, [r3, #4]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	1ad2      	subs	r2, r2, r3
 800e910:	2308      	movs	r3, #8
 800e912:	005b      	lsls	r3, r3, #1
 800e914:	429a      	cmp	r2, r3
 800e916:	d91f      	bls.n	800e958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4413      	add	r3, r2
 800e91e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	f003 0307 	and.w	r3, r3, #7
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00a      	beq.n	800e940 <pvPortMalloc+0xf8>
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	613b      	str	r3, [r7, #16]
}
 800e93c:	bf00      	nop
 800e93e:	e7fe      	b.n	800e93e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	1ad2      	subs	r2, r2, r3
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e952:	69b8      	ldr	r0, [r7, #24]
 800e954:	f000 f908 	bl	800eb68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e958:	4b1d      	ldr	r3, [pc, #116]	; (800e9d0 <pvPortMalloc+0x188>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	4a1b      	ldr	r2, [pc, #108]	; (800e9d0 <pvPortMalloc+0x188>)
 800e964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e966:	4b1a      	ldr	r3, [pc, #104]	; (800e9d0 <pvPortMalloc+0x188>)
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	4b1b      	ldr	r3, [pc, #108]	; (800e9d8 <pvPortMalloc+0x190>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d203      	bcs.n	800e97a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e972:	4b17      	ldr	r3, [pc, #92]	; (800e9d0 <pvPortMalloc+0x188>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a18      	ldr	r2, [pc, #96]	; (800e9d8 <pvPortMalloc+0x190>)
 800e978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <pvPortMalloc+0x184>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	431a      	orrs	r2, r3
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e98e:	4b13      	ldr	r3, [pc, #76]	; (800e9dc <pvPortMalloc+0x194>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3301      	adds	r3, #1
 800e994:	4a11      	ldr	r2, [pc, #68]	; (800e9dc <pvPortMalloc+0x194>)
 800e996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e998:	f7fe fb7c 	bl	800d094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	f003 0307 	and.w	r3, r3, #7
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00a      	beq.n	800e9bc <pvPortMalloc+0x174>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	60fb      	str	r3, [r7, #12]
}
 800e9b8:	bf00      	nop
 800e9ba:	e7fe      	b.n	800e9ba <pvPortMalloc+0x172>
	return pvReturn;
 800e9bc:	69fb      	ldr	r3, [r7, #28]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3728      	adds	r7, #40	; 0x28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20006518 	.word	0x20006518
 800e9cc:	2000652c 	.word	0x2000652c
 800e9d0:	2000651c 	.word	0x2000651c
 800e9d4:	20006510 	.word	0x20006510
 800e9d8:	20006520 	.word	0x20006520
 800e9dc:	20006524 	.word	0x20006524

0800e9e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d04d      	beq.n	800ea8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9f2:	2308      	movs	r3, #8
 800e9f4:	425b      	negs	r3, r3
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	4b24      	ldr	r3, [pc, #144]	; (800ea98 <vPortFree+0xb8>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4013      	ands	r3, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10a      	bne.n	800ea24 <vPortFree+0x44>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	60fb      	str	r3, [r7, #12]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00a      	beq.n	800ea42 <vPortFree+0x62>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	60bb      	str	r3, [r7, #8]
}
 800ea3e:	bf00      	nop
 800ea40:	e7fe      	b.n	800ea40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <vPortFree+0xb8>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d01e      	beq.n	800ea8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d11a      	bne.n	800ea8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	4b0e      	ldr	r3, [pc, #56]	; (800ea98 <vPortFree+0xb8>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	43db      	mvns	r3, r3
 800ea62:	401a      	ands	r2, r3
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea68:	f7fe fb06 	bl	800d078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <vPortFree+0xbc>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4413      	add	r3, r2
 800ea76:	4a09      	ldr	r2, [pc, #36]	; (800ea9c <vPortFree+0xbc>)
 800ea78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea7a:	6938      	ldr	r0, [r7, #16]
 800ea7c:	f000 f874 	bl	800eb68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <vPortFree+0xc0>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	3301      	adds	r3, #1
 800ea86:	4a06      	ldr	r2, [pc, #24]	; (800eaa0 <vPortFree+0xc0>)
 800ea88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea8a:	f7fe fb03 	bl	800d094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea8e:	bf00      	nop
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	2000652c 	.word	0x2000652c
 800ea9c:	2000651c 	.word	0x2000651c
 800eaa0:	20006528 	.word	0x20006528

0800eaa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eaaa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800eaae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eab0:	4b27      	ldr	r3, [pc, #156]	; (800eb50 <prvHeapInit+0xac>)
 800eab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f003 0307 	and.w	r3, r3, #7
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00c      	beq.n	800ead8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3307      	adds	r3, #7
 800eac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f023 0307 	bic.w	r3, r3, #7
 800eaca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	4a1f      	ldr	r2, [pc, #124]	; (800eb50 <prvHeapInit+0xac>)
 800ead4:	4413      	add	r3, r2
 800ead6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eadc:	4a1d      	ldr	r2, [pc, #116]	; (800eb54 <prvHeapInit+0xb0>)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eae2:	4b1c      	ldr	r3, [pc, #112]	; (800eb54 <prvHeapInit+0xb0>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	4413      	add	r3, r2
 800eaee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eaf0:	2208      	movs	r2, #8
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	1a9b      	subs	r3, r3, r2
 800eaf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f023 0307 	bic.w	r3, r3, #7
 800eafe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	4a15      	ldr	r2, [pc, #84]	; (800eb58 <prvHeapInit+0xb4>)
 800eb04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb06:	4b14      	ldr	r3, [pc, #80]	; (800eb58 <prvHeapInit+0xb4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb0e:	4b12      	ldr	r3, [pc, #72]	; (800eb58 <prvHeapInit+0xb4>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2200      	movs	r2, #0
 800eb14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	68fa      	ldr	r2, [r7, #12]
 800eb1e:	1ad2      	subs	r2, r2, r3
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb24:	4b0c      	ldr	r3, [pc, #48]	; (800eb58 <prvHeapInit+0xb4>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	4a0a      	ldr	r2, [pc, #40]	; (800eb5c <prvHeapInit+0xb8>)
 800eb32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4a09      	ldr	r2, [pc, #36]	; (800eb60 <prvHeapInit+0xbc>)
 800eb3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb3c:	4b09      	ldr	r3, [pc, #36]	; (800eb64 <prvHeapInit+0xc0>)
 800eb3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb42:	601a      	str	r2, [r3, #0]
}
 800eb44:	bf00      	nop
 800eb46:	3714      	adds	r7, #20
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	200016f0 	.word	0x200016f0
 800eb54:	20006510 	.word	0x20006510
 800eb58:	20006518 	.word	0x20006518
 800eb5c:	20006520 	.word	0x20006520
 800eb60:	2000651c 	.word	0x2000651c
 800eb64:	2000652c 	.word	0x2000652c

0800eb68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb70:	4b28      	ldr	r3, [pc, #160]	; (800ec14 <prvInsertBlockIntoFreeList+0xac>)
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	e002      	b.n	800eb7c <prvInsertBlockIntoFreeList+0x14>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d8f7      	bhi.n	800eb76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	4413      	add	r3, r2
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d108      	bne.n	800ebaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	441a      	add	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	441a      	add	r2, r3
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d118      	bne.n	800ebf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <prvInsertBlockIntoFreeList+0xb0>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d00d      	beq.n	800ebe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	601a      	str	r2, [r3, #0]
 800ebe4:	e008      	b.n	800ebf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <prvInsertBlockIntoFreeList+0xb0>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	e003      	b.n	800ebf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d002      	beq.n	800ec06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec06:	bf00      	nop
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	20006510 	.word	0x20006510
 800ec18:	20006518 	.word	0x20006518

0800ec1c <__errno>:
 800ec1c:	4b01      	ldr	r3, [pc, #4]	; (800ec24 <__errno+0x8>)
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	20000028 	.word	0x20000028

0800ec28 <std>:
 800ec28:	2300      	movs	r3, #0
 800ec2a:	b510      	push	{r4, lr}
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec36:	6083      	str	r3, [r0, #8]
 800ec38:	8181      	strh	r1, [r0, #12]
 800ec3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec3c:	81c2      	strh	r2, [r0, #14]
 800ec3e:	6183      	str	r3, [r0, #24]
 800ec40:	4619      	mov	r1, r3
 800ec42:	2208      	movs	r2, #8
 800ec44:	305c      	adds	r0, #92	; 0x5c
 800ec46:	f000 f91a 	bl	800ee7e <memset>
 800ec4a:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <std+0x38>)
 800ec4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ec4e:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <std+0x3c>)
 800ec50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec52:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <std+0x40>)
 800ec54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec56:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <std+0x44>)
 800ec58:	6224      	str	r4, [r4, #32]
 800ec5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ec5c:	bd10      	pop	{r4, pc}
 800ec5e:	bf00      	nop
 800ec60:	0800f9c1 	.word	0x0800f9c1
 800ec64:	0800f9e3 	.word	0x0800f9e3
 800ec68:	0800fa1b 	.word	0x0800fa1b
 800ec6c:	0800fa3f 	.word	0x0800fa3f

0800ec70 <_cleanup_r>:
 800ec70:	4901      	ldr	r1, [pc, #4]	; (800ec78 <_cleanup_r+0x8>)
 800ec72:	f000 b8af 	b.w	800edd4 <_fwalk_reent>
 800ec76:	bf00      	nop
 800ec78:	08010891 	.word	0x08010891

0800ec7c <__sfmoreglue>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	2268      	movs	r2, #104	; 0x68
 800ec80:	1e4d      	subs	r5, r1, #1
 800ec82:	4355      	muls	r5, r2
 800ec84:	460e      	mov	r6, r1
 800ec86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec8a:	f000 f921 	bl	800eed0 <_malloc_r>
 800ec8e:	4604      	mov	r4, r0
 800ec90:	b140      	cbz	r0, 800eca4 <__sfmoreglue+0x28>
 800ec92:	2100      	movs	r1, #0
 800ec94:	e9c0 1600 	strd	r1, r6, [r0]
 800ec98:	300c      	adds	r0, #12
 800ec9a:	60a0      	str	r0, [r4, #8]
 800ec9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eca0:	f000 f8ed 	bl	800ee7e <memset>
 800eca4:	4620      	mov	r0, r4
 800eca6:	bd70      	pop	{r4, r5, r6, pc}

0800eca8 <__sfp_lock_acquire>:
 800eca8:	4801      	ldr	r0, [pc, #4]	; (800ecb0 <__sfp_lock_acquire+0x8>)
 800ecaa:	f000 b8d8 	b.w	800ee5e <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	20006531 	.word	0x20006531

0800ecb4 <__sfp_lock_release>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	; (800ecbc <__sfp_lock_release+0x8>)
 800ecb6:	f000 b8d3 	b.w	800ee60 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	20006531 	.word	0x20006531

0800ecc0 <__sinit_lock_acquire>:
 800ecc0:	4801      	ldr	r0, [pc, #4]	; (800ecc8 <__sinit_lock_acquire+0x8>)
 800ecc2:	f000 b8cc 	b.w	800ee5e <__retarget_lock_acquire_recursive>
 800ecc6:	bf00      	nop
 800ecc8:	20006532 	.word	0x20006532

0800eccc <__sinit_lock_release>:
 800eccc:	4801      	ldr	r0, [pc, #4]	; (800ecd4 <__sinit_lock_release+0x8>)
 800ecce:	f000 b8c7 	b.w	800ee60 <__retarget_lock_release_recursive>
 800ecd2:	bf00      	nop
 800ecd4:	20006532 	.word	0x20006532

0800ecd8 <__sinit>:
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	4604      	mov	r4, r0
 800ecdc:	f7ff fff0 	bl	800ecc0 <__sinit_lock_acquire>
 800ece0:	69a3      	ldr	r3, [r4, #24]
 800ece2:	b11b      	cbz	r3, 800ecec <__sinit+0x14>
 800ece4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece8:	f7ff bff0 	b.w	800eccc <__sinit_lock_release>
 800ecec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecf0:	6523      	str	r3, [r4, #80]	; 0x50
 800ecf2:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <__sinit+0x68>)
 800ecf4:	4a13      	ldr	r2, [pc, #76]	; (800ed44 <__sinit+0x6c>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecfa:	42a3      	cmp	r3, r4
 800ecfc:	bf04      	itt	eq
 800ecfe:	2301      	moveq	r3, #1
 800ed00:	61a3      	streq	r3, [r4, #24]
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 f820 	bl	800ed48 <__sfp>
 800ed08:	6060      	str	r0, [r4, #4]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f81c 	bl	800ed48 <__sfp>
 800ed10:	60a0      	str	r0, [r4, #8]
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 f818 	bl	800ed48 <__sfp>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	60e0      	str	r0, [r4, #12]
 800ed1c:	2104      	movs	r1, #4
 800ed1e:	6860      	ldr	r0, [r4, #4]
 800ed20:	f7ff ff82 	bl	800ec28 <std>
 800ed24:	68a0      	ldr	r0, [r4, #8]
 800ed26:	2201      	movs	r2, #1
 800ed28:	2109      	movs	r1, #9
 800ed2a:	f7ff ff7d 	bl	800ec28 <std>
 800ed2e:	68e0      	ldr	r0, [r4, #12]
 800ed30:	2202      	movs	r2, #2
 800ed32:	2112      	movs	r1, #18
 800ed34:	f7ff ff78 	bl	800ec28 <std>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	61a3      	str	r3, [r4, #24]
 800ed3c:	e7d2      	b.n	800ece4 <__sinit+0xc>
 800ed3e:	bf00      	nop
 800ed40:	08012508 	.word	0x08012508
 800ed44:	0800ec71 	.word	0x0800ec71

0800ed48 <__sfp>:
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	4607      	mov	r7, r0
 800ed4c:	f7ff ffac 	bl	800eca8 <__sfp_lock_acquire>
 800ed50:	4b1e      	ldr	r3, [pc, #120]	; (800edcc <__sfp+0x84>)
 800ed52:	681e      	ldr	r6, [r3, #0]
 800ed54:	69b3      	ldr	r3, [r6, #24]
 800ed56:	b913      	cbnz	r3, 800ed5e <__sfp+0x16>
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff ffbd 	bl	800ecd8 <__sinit>
 800ed5e:	3648      	adds	r6, #72	; 0x48
 800ed60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	d503      	bpl.n	800ed70 <__sfp+0x28>
 800ed68:	6833      	ldr	r3, [r6, #0]
 800ed6a:	b30b      	cbz	r3, 800edb0 <__sfp+0x68>
 800ed6c:	6836      	ldr	r6, [r6, #0]
 800ed6e:	e7f7      	b.n	800ed60 <__sfp+0x18>
 800ed70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed74:	b9d5      	cbnz	r5, 800edac <__sfp+0x64>
 800ed76:	4b16      	ldr	r3, [pc, #88]	; (800edd0 <__sfp+0x88>)
 800ed78:	60e3      	str	r3, [r4, #12]
 800ed7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ed80:	f000 f86c 	bl	800ee5c <__retarget_lock_init_recursive>
 800ed84:	f7ff ff96 	bl	800ecb4 <__sfp_lock_release>
 800ed88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed90:	6025      	str	r5, [r4, #0]
 800ed92:	61a5      	str	r5, [r4, #24]
 800ed94:	2208      	movs	r2, #8
 800ed96:	4629      	mov	r1, r5
 800ed98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed9c:	f000 f86f 	bl	800ee7e <memset>
 800eda0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eda4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eda8:	4620      	mov	r0, r4
 800edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edac:	3468      	adds	r4, #104	; 0x68
 800edae:	e7d9      	b.n	800ed64 <__sfp+0x1c>
 800edb0:	2104      	movs	r1, #4
 800edb2:	4638      	mov	r0, r7
 800edb4:	f7ff ff62 	bl	800ec7c <__sfmoreglue>
 800edb8:	4604      	mov	r4, r0
 800edba:	6030      	str	r0, [r6, #0]
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d1d5      	bne.n	800ed6c <__sfp+0x24>
 800edc0:	f7ff ff78 	bl	800ecb4 <__sfp_lock_release>
 800edc4:	230c      	movs	r3, #12
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	e7ee      	b.n	800eda8 <__sfp+0x60>
 800edca:	bf00      	nop
 800edcc:	08012508 	.word	0x08012508
 800edd0:	ffff0001 	.word	0xffff0001

0800edd4 <_fwalk_reent>:
 800edd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edd8:	4606      	mov	r6, r0
 800edda:	4688      	mov	r8, r1
 800eddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ede0:	2700      	movs	r7, #0
 800ede2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ede6:	f1b9 0901 	subs.w	r9, r9, #1
 800edea:	d505      	bpl.n	800edf8 <_fwalk_reent+0x24>
 800edec:	6824      	ldr	r4, [r4, #0]
 800edee:	2c00      	cmp	r4, #0
 800edf0:	d1f7      	bne.n	800ede2 <_fwalk_reent+0xe>
 800edf2:	4638      	mov	r0, r7
 800edf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf8:	89ab      	ldrh	r3, [r5, #12]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d907      	bls.n	800ee0e <_fwalk_reent+0x3a>
 800edfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee02:	3301      	adds	r3, #1
 800ee04:	d003      	beq.n	800ee0e <_fwalk_reent+0x3a>
 800ee06:	4629      	mov	r1, r5
 800ee08:	4630      	mov	r0, r6
 800ee0a:	47c0      	blx	r8
 800ee0c:	4307      	orrs	r7, r0
 800ee0e:	3568      	adds	r5, #104	; 0x68
 800ee10:	e7e9      	b.n	800ede6 <_fwalk_reent+0x12>
	...

0800ee14 <__libc_init_array>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	4d0d      	ldr	r5, [pc, #52]	; (800ee4c <__libc_init_array+0x38>)
 800ee18:	4c0d      	ldr	r4, [pc, #52]	; (800ee50 <__libc_init_array+0x3c>)
 800ee1a:	1b64      	subs	r4, r4, r5
 800ee1c:	10a4      	asrs	r4, r4, #2
 800ee1e:	2600      	movs	r6, #0
 800ee20:	42a6      	cmp	r6, r4
 800ee22:	d109      	bne.n	800ee38 <__libc_init_array+0x24>
 800ee24:	4d0b      	ldr	r5, [pc, #44]	; (800ee54 <__libc_init_array+0x40>)
 800ee26:	4c0c      	ldr	r4, [pc, #48]	; (800ee58 <__libc_init_array+0x44>)
 800ee28:	f002 fe78 	bl	8011b1c <_init>
 800ee2c:	1b64      	subs	r4, r4, r5
 800ee2e:	10a4      	asrs	r4, r4, #2
 800ee30:	2600      	movs	r6, #0
 800ee32:	42a6      	cmp	r6, r4
 800ee34:	d105      	bne.n	800ee42 <__libc_init_array+0x2e>
 800ee36:	bd70      	pop	{r4, r5, r6, pc}
 800ee38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee3c:	4798      	blx	r3
 800ee3e:	3601      	adds	r6, #1
 800ee40:	e7ee      	b.n	800ee20 <__libc_init_array+0xc>
 800ee42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee46:	4798      	blx	r3
 800ee48:	3601      	adds	r6, #1
 800ee4a:	e7f2      	b.n	800ee32 <__libc_init_array+0x1e>
 800ee4c:	0801288c 	.word	0x0801288c
 800ee50:	0801288c 	.word	0x0801288c
 800ee54:	0801288c 	.word	0x0801288c
 800ee58:	08012890 	.word	0x08012890

0800ee5c <__retarget_lock_init_recursive>:
 800ee5c:	4770      	bx	lr

0800ee5e <__retarget_lock_acquire_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <__retarget_lock_release_recursive>:
 800ee60:	4770      	bx	lr

0800ee62 <memcpy>:
 800ee62:	440a      	add	r2, r1
 800ee64:	4291      	cmp	r1, r2
 800ee66:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee6a:	d100      	bne.n	800ee6e <memcpy+0xc>
 800ee6c:	4770      	bx	lr
 800ee6e:	b510      	push	{r4, lr}
 800ee70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee78:	4291      	cmp	r1, r2
 800ee7a:	d1f9      	bne.n	800ee70 <memcpy+0xe>
 800ee7c:	bd10      	pop	{r4, pc}

0800ee7e <memset>:
 800ee7e:	4402      	add	r2, r0
 800ee80:	4603      	mov	r3, r0
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d100      	bne.n	800ee88 <memset+0xa>
 800ee86:	4770      	bx	lr
 800ee88:	f803 1b01 	strb.w	r1, [r3], #1
 800ee8c:	e7f9      	b.n	800ee82 <memset+0x4>
	...

0800ee90 <sbrk_aligned>:
 800ee90:	b570      	push	{r4, r5, r6, lr}
 800ee92:	4e0e      	ldr	r6, [pc, #56]	; (800eecc <sbrk_aligned+0x3c>)
 800ee94:	460c      	mov	r4, r1
 800ee96:	6831      	ldr	r1, [r6, #0]
 800ee98:	4605      	mov	r5, r0
 800ee9a:	b911      	cbnz	r1, 800eea2 <sbrk_aligned+0x12>
 800ee9c:	f000 fd60 	bl	800f960 <_sbrk_r>
 800eea0:	6030      	str	r0, [r6, #0]
 800eea2:	4621      	mov	r1, r4
 800eea4:	4628      	mov	r0, r5
 800eea6:	f000 fd5b 	bl	800f960 <_sbrk_r>
 800eeaa:	1c43      	adds	r3, r0, #1
 800eeac:	d00a      	beq.n	800eec4 <sbrk_aligned+0x34>
 800eeae:	1cc4      	adds	r4, r0, #3
 800eeb0:	f024 0403 	bic.w	r4, r4, #3
 800eeb4:	42a0      	cmp	r0, r4
 800eeb6:	d007      	beq.n	800eec8 <sbrk_aligned+0x38>
 800eeb8:	1a21      	subs	r1, r4, r0
 800eeba:	4628      	mov	r0, r5
 800eebc:	f000 fd50 	bl	800f960 <_sbrk_r>
 800eec0:	3001      	adds	r0, #1
 800eec2:	d101      	bne.n	800eec8 <sbrk_aligned+0x38>
 800eec4:	f04f 34ff 	mov.w	r4, #4294967295
 800eec8:	4620      	mov	r0, r4
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	20006538 	.word	0x20006538

0800eed0 <_malloc_r>:
 800eed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed4:	1ccd      	adds	r5, r1, #3
 800eed6:	f025 0503 	bic.w	r5, r5, #3
 800eeda:	3508      	adds	r5, #8
 800eedc:	2d0c      	cmp	r5, #12
 800eede:	bf38      	it	cc
 800eee0:	250c      	movcc	r5, #12
 800eee2:	2d00      	cmp	r5, #0
 800eee4:	4607      	mov	r7, r0
 800eee6:	db01      	blt.n	800eeec <_malloc_r+0x1c>
 800eee8:	42a9      	cmp	r1, r5
 800eeea:	d905      	bls.n	800eef8 <_malloc_r+0x28>
 800eeec:	230c      	movs	r3, #12
 800eeee:	603b      	str	r3, [r7, #0]
 800eef0:	2600      	movs	r6, #0
 800eef2:	4630      	mov	r0, r6
 800eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef8:	4e2e      	ldr	r6, [pc, #184]	; (800efb4 <_malloc_r+0xe4>)
 800eefa:	f001 fd23 	bl	8010944 <__malloc_lock>
 800eefe:	6833      	ldr	r3, [r6, #0]
 800ef00:	461c      	mov	r4, r3
 800ef02:	bb34      	cbnz	r4, 800ef52 <_malloc_r+0x82>
 800ef04:	4629      	mov	r1, r5
 800ef06:	4638      	mov	r0, r7
 800ef08:	f7ff ffc2 	bl	800ee90 <sbrk_aligned>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	4604      	mov	r4, r0
 800ef10:	d14d      	bne.n	800efae <_malloc_r+0xde>
 800ef12:	6834      	ldr	r4, [r6, #0]
 800ef14:	4626      	mov	r6, r4
 800ef16:	2e00      	cmp	r6, #0
 800ef18:	d140      	bne.n	800ef9c <_malloc_r+0xcc>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	4631      	mov	r1, r6
 800ef1e:	4638      	mov	r0, r7
 800ef20:	eb04 0803 	add.w	r8, r4, r3
 800ef24:	f000 fd1c 	bl	800f960 <_sbrk_r>
 800ef28:	4580      	cmp	r8, r0
 800ef2a:	d13a      	bne.n	800efa2 <_malloc_r+0xd2>
 800ef2c:	6821      	ldr	r1, [r4, #0]
 800ef2e:	3503      	adds	r5, #3
 800ef30:	1a6d      	subs	r5, r5, r1
 800ef32:	f025 0503 	bic.w	r5, r5, #3
 800ef36:	3508      	adds	r5, #8
 800ef38:	2d0c      	cmp	r5, #12
 800ef3a:	bf38      	it	cc
 800ef3c:	250c      	movcc	r5, #12
 800ef3e:	4629      	mov	r1, r5
 800ef40:	4638      	mov	r0, r7
 800ef42:	f7ff ffa5 	bl	800ee90 <sbrk_aligned>
 800ef46:	3001      	adds	r0, #1
 800ef48:	d02b      	beq.n	800efa2 <_malloc_r+0xd2>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	442b      	add	r3, r5
 800ef4e:	6023      	str	r3, [r4, #0]
 800ef50:	e00e      	b.n	800ef70 <_malloc_r+0xa0>
 800ef52:	6822      	ldr	r2, [r4, #0]
 800ef54:	1b52      	subs	r2, r2, r5
 800ef56:	d41e      	bmi.n	800ef96 <_malloc_r+0xc6>
 800ef58:	2a0b      	cmp	r2, #11
 800ef5a:	d916      	bls.n	800ef8a <_malloc_r+0xba>
 800ef5c:	1961      	adds	r1, r4, r5
 800ef5e:	42a3      	cmp	r3, r4
 800ef60:	6025      	str	r5, [r4, #0]
 800ef62:	bf18      	it	ne
 800ef64:	6059      	strne	r1, [r3, #4]
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	bf08      	it	eq
 800ef6a:	6031      	streq	r1, [r6, #0]
 800ef6c:	5162      	str	r2, [r4, r5]
 800ef6e:	604b      	str	r3, [r1, #4]
 800ef70:	4638      	mov	r0, r7
 800ef72:	f104 060b 	add.w	r6, r4, #11
 800ef76:	f001 fceb 	bl	8010950 <__malloc_unlock>
 800ef7a:	f026 0607 	bic.w	r6, r6, #7
 800ef7e:	1d23      	adds	r3, r4, #4
 800ef80:	1af2      	subs	r2, r6, r3
 800ef82:	d0b6      	beq.n	800eef2 <_malloc_r+0x22>
 800ef84:	1b9b      	subs	r3, r3, r6
 800ef86:	50a3      	str	r3, [r4, r2]
 800ef88:	e7b3      	b.n	800eef2 <_malloc_r+0x22>
 800ef8a:	6862      	ldr	r2, [r4, #4]
 800ef8c:	42a3      	cmp	r3, r4
 800ef8e:	bf0c      	ite	eq
 800ef90:	6032      	streq	r2, [r6, #0]
 800ef92:	605a      	strne	r2, [r3, #4]
 800ef94:	e7ec      	b.n	800ef70 <_malloc_r+0xa0>
 800ef96:	4623      	mov	r3, r4
 800ef98:	6864      	ldr	r4, [r4, #4]
 800ef9a:	e7b2      	b.n	800ef02 <_malloc_r+0x32>
 800ef9c:	4634      	mov	r4, r6
 800ef9e:	6876      	ldr	r6, [r6, #4]
 800efa0:	e7b9      	b.n	800ef16 <_malloc_r+0x46>
 800efa2:	230c      	movs	r3, #12
 800efa4:	603b      	str	r3, [r7, #0]
 800efa6:	4638      	mov	r0, r7
 800efa8:	f001 fcd2 	bl	8010950 <__malloc_unlock>
 800efac:	e7a1      	b.n	800eef2 <_malloc_r+0x22>
 800efae:	6025      	str	r5, [r4, #0]
 800efb0:	e7de      	b.n	800ef70 <_malloc_r+0xa0>
 800efb2:	bf00      	nop
 800efb4:	20006534 	.word	0x20006534

0800efb8 <__cvt>:
 800efb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	ec55 4b10 	vmov	r4, r5, d0
 800efc0:	2d00      	cmp	r5, #0
 800efc2:	460e      	mov	r6, r1
 800efc4:	4619      	mov	r1, r3
 800efc6:	462b      	mov	r3, r5
 800efc8:	bfbb      	ittet	lt
 800efca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efce:	461d      	movlt	r5, r3
 800efd0:	2300      	movge	r3, #0
 800efd2:	232d      	movlt	r3, #45	; 0x2d
 800efd4:	700b      	strb	r3, [r1, #0]
 800efd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efdc:	4691      	mov	r9, r2
 800efde:	f023 0820 	bic.w	r8, r3, #32
 800efe2:	bfbc      	itt	lt
 800efe4:	4622      	movlt	r2, r4
 800efe6:	4614      	movlt	r4, r2
 800efe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efec:	d005      	beq.n	800effa <__cvt+0x42>
 800efee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eff2:	d100      	bne.n	800eff6 <__cvt+0x3e>
 800eff4:	3601      	adds	r6, #1
 800eff6:	2102      	movs	r1, #2
 800eff8:	e000      	b.n	800effc <__cvt+0x44>
 800effa:	2103      	movs	r1, #3
 800effc:	ab03      	add	r3, sp, #12
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	ab02      	add	r3, sp, #8
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	ec45 4b10 	vmov	d0, r4, r5
 800f008:	4653      	mov	r3, sl
 800f00a:	4632      	mov	r2, r6
 800f00c:	f000 fdcc 	bl	800fba8 <_dtoa_r>
 800f010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f014:	4607      	mov	r7, r0
 800f016:	d102      	bne.n	800f01e <__cvt+0x66>
 800f018:	f019 0f01 	tst.w	r9, #1
 800f01c:	d022      	beq.n	800f064 <__cvt+0xac>
 800f01e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f022:	eb07 0906 	add.w	r9, r7, r6
 800f026:	d110      	bne.n	800f04a <__cvt+0x92>
 800f028:	783b      	ldrb	r3, [r7, #0]
 800f02a:	2b30      	cmp	r3, #48	; 0x30
 800f02c:	d10a      	bne.n	800f044 <__cvt+0x8c>
 800f02e:	2200      	movs	r2, #0
 800f030:	2300      	movs	r3, #0
 800f032:	4620      	mov	r0, r4
 800f034:	4629      	mov	r1, r5
 800f036:	f7f1 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f03a:	b918      	cbnz	r0, 800f044 <__cvt+0x8c>
 800f03c:	f1c6 0601 	rsb	r6, r6, #1
 800f040:	f8ca 6000 	str.w	r6, [sl]
 800f044:	f8da 3000 	ldr.w	r3, [sl]
 800f048:	4499      	add	r9, r3
 800f04a:	2200      	movs	r2, #0
 800f04c:	2300      	movs	r3, #0
 800f04e:	4620      	mov	r0, r4
 800f050:	4629      	mov	r1, r5
 800f052:	f7f1 fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 800f056:	b108      	cbz	r0, 800f05c <__cvt+0xa4>
 800f058:	f8cd 900c 	str.w	r9, [sp, #12]
 800f05c:	2230      	movs	r2, #48	; 0x30
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	454b      	cmp	r3, r9
 800f062:	d307      	bcc.n	800f074 <__cvt+0xbc>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f068:	1bdb      	subs	r3, r3, r7
 800f06a:	4638      	mov	r0, r7
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	b004      	add	sp, #16
 800f070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f074:	1c59      	adds	r1, r3, #1
 800f076:	9103      	str	r1, [sp, #12]
 800f078:	701a      	strb	r2, [r3, #0]
 800f07a:	e7f0      	b.n	800f05e <__cvt+0xa6>

0800f07c <__exponent>:
 800f07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f07e:	4603      	mov	r3, r0
 800f080:	2900      	cmp	r1, #0
 800f082:	bfb8      	it	lt
 800f084:	4249      	neglt	r1, r1
 800f086:	f803 2b02 	strb.w	r2, [r3], #2
 800f08a:	bfb4      	ite	lt
 800f08c:	222d      	movlt	r2, #45	; 0x2d
 800f08e:	222b      	movge	r2, #43	; 0x2b
 800f090:	2909      	cmp	r1, #9
 800f092:	7042      	strb	r2, [r0, #1]
 800f094:	dd2a      	ble.n	800f0ec <__exponent+0x70>
 800f096:	f10d 0407 	add.w	r4, sp, #7
 800f09a:	46a4      	mov	ip, r4
 800f09c:	270a      	movs	r7, #10
 800f09e:	46a6      	mov	lr, r4
 800f0a0:	460a      	mov	r2, r1
 800f0a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f0a6:	fb07 1516 	mls	r5, r7, r6, r1
 800f0aa:	3530      	adds	r5, #48	; 0x30
 800f0ac:	2a63      	cmp	r2, #99	; 0x63
 800f0ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	dcf1      	bgt.n	800f09e <__exponent+0x22>
 800f0ba:	3130      	adds	r1, #48	; 0x30
 800f0bc:	f1ae 0502 	sub.w	r5, lr, #2
 800f0c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0c4:	1c44      	adds	r4, r0, #1
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	4561      	cmp	r1, ip
 800f0ca:	d30a      	bcc.n	800f0e2 <__exponent+0x66>
 800f0cc:	f10d 0209 	add.w	r2, sp, #9
 800f0d0:	eba2 020e 	sub.w	r2, r2, lr
 800f0d4:	4565      	cmp	r5, ip
 800f0d6:	bf88      	it	hi
 800f0d8:	2200      	movhi	r2, #0
 800f0da:	4413      	add	r3, r2
 800f0dc:	1a18      	subs	r0, r3, r0
 800f0de:	b003      	add	sp, #12
 800f0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0ea:	e7ed      	b.n	800f0c8 <__exponent+0x4c>
 800f0ec:	2330      	movs	r3, #48	; 0x30
 800f0ee:	3130      	adds	r1, #48	; 0x30
 800f0f0:	7083      	strb	r3, [r0, #2]
 800f0f2:	70c1      	strb	r1, [r0, #3]
 800f0f4:	1d03      	adds	r3, r0, #4
 800f0f6:	e7f1      	b.n	800f0dc <__exponent+0x60>

0800f0f8 <_printf_float>:
 800f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fc:	ed2d 8b02 	vpush	{d8}
 800f100:	b08d      	sub	sp, #52	; 0x34
 800f102:	460c      	mov	r4, r1
 800f104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f108:	4616      	mov	r6, r2
 800f10a:	461f      	mov	r7, r3
 800f10c:	4605      	mov	r5, r0
 800f10e:	f001 fbfb 	bl	8010908 <_localeconv_r>
 800f112:	f8d0 a000 	ldr.w	sl, [r0]
 800f116:	4650      	mov	r0, sl
 800f118:	f7f1 f862 	bl	80001e0 <strlen>
 800f11c:	2300      	movs	r3, #0
 800f11e:	930a      	str	r3, [sp, #40]	; 0x28
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	f8d8 3000 	ldr.w	r3, [r8]
 800f128:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f12c:	3307      	adds	r3, #7
 800f12e:	f023 0307 	bic.w	r3, r3, #7
 800f132:	f103 0208 	add.w	r2, r3, #8
 800f136:	f8c8 2000 	str.w	r2, [r8]
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f142:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f14a:	9307      	str	r3, [sp, #28]
 800f14c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f150:	ee08 0a10 	vmov	s16, r0
 800f154:	4b9f      	ldr	r3, [pc, #636]	; (800f3d4 <_printf_float+0x2dc>)
 800f156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f15a:	f04f 32ff 	mov.w	r2, #4294967295
 800f15e:	f7f1 fced 	bl	8000b3c <__aeabi_dcmpun>
 800f162:	bb88      	cbnz	r0, 800f1c8 <_printf_float+0xd0>
 800f164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f168:	4b9a      	ldr	r3, [pc, #616]	; (800f3d4 <_printf_float+0x2dc>)
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	f7f1 fcc7 	bl	8000b00 <__aeabi_dcmple>
 800f172:	bb48      	cbnz	r0, 800f1c8 <_printf_float+0xd0>
 800f174:	2200      	movs	r2, #0
 800f176:	2300      	movs	r3, #0
 800f178:	4640      	mov	r0, r8
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 fcb6 	bl	8000aec <__aeabi_dcmplt>
 800f180:	b110      	cbz	r0, 800f188 <_printf_float+0x90>
 800f182:	232d      	movs	r3, #45	; 0x2d
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f188:	4b93      	ldr	r3, [pc, #588]	; (800f3d8 <_printf_float+0x2e0>)
 800f18a:	4894      	ldr	r0, [pc, #592]	; (800f3dc <_printf_float+0x2e4>)
 800f18c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f190:	bf94      	ite	ls
 800f192:	4698      	movls	r8, r3
 800f194:	4680      	movhi	r8, r0
 800f196:	2303      	movs	r3, #3
 800f198:	6123      	str	r3, [r4, #16]
 800f19a:	9b05      	ldr	r3, [sp, #20]
 800f19c:	f023 0204 	bic.w	r2, r3, #4
 800f1a0:	6022      	str	r2, [r4, #0]
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	9700      	str	r7, [sp, #0]
 800f1a8:	4633      	mov	r3, r6
 800f1aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	f000 f9d8 	bl	800f564 <_printf_common>
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	f040 8090 	bne.w	800f2da <_printf_float+0x1e2>
 800f1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f1be:	b00d      	add	sp, #52	; 0x34
 800f1c0:	ecbd 8b02 	vpop	{d8}
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	464b      	mov	r3, r9
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 fcb4 	bl	8000b3c <__aeabi_dcmpun>
 800f1d4:	b140      	cbz	r0, 800f1e8 <_printf_float+0xf0>
 800f1d6:	464b      	mov	r3, r9
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	bfbc      	itt	lt
 800f1dc:	232d      	movlt	r3, #45	; 0x2d
 800f1de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1e2:	487f      	ldr	r0, [pc, #508]	; (800f3e0 <_printf_float+0x2e8>)
 800f1e4:	4b7f      	ldr	r3, [pc, #508]	; (800f3e4 <_printf_float+0x2ec>)
 800f1e6:	e7d1      	b.n	800f18c <_printf_float+0x94>
 800f1e8:	6863      	ldr	r3, [r4, #4]
 800f1ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1ee:	9206      	str	r2, [sp, #24]
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	d13f      	bne.n	800f274 <_printf_float+0x17c>
 800f1f4:	2306      	movs	r3, #6
 800f1f6:	6063      	str	r3, [r4, #4]
 800f1f8:	9b05      	ldr	r3, [sp, #20]
 800f1fa:	6861      	ldr	r1, [r4, #4]
 800f1fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f200:	2300      	movs	r3, #0
 800f202:	9303      	str	r3, [sp, #12]
 800f204:	ab0a      	add	r3, sp, #40	; 0x28
 800f206:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f20a:	ab09      	add	r3, sp, #36	; 0x24
 800f20c:	ec49 8b10 	vmov	d0, r8, r9
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	6022      	str	r2, [r4, #0]
 800f214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f218:	4628      	mov	r0, r5
 800f21a:	f7ff fecd 	bl	800efb8 <__cvt>
 800f21e:	9b06      	ldr	r3, [sp, #24]
 800f220:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f222:	2b47      	cmp	r3, #71	; 0x47
 800f224:	4680      	mov	r8, r0
 800f226:	d108      	bne.n	800f23a <_printf_float+0x142>
 800f228:	1cc8      	adds	r0, r1, #3
 800f22a:	db02      	blt.n	800f232 <_printf_float+0x13a>
 800f22c:	6863      	ldr	r3, [r4, #4]
 800f22e:	4299      	cmp	r1, r3
 800f230:	dd41      	ble.n	800f2b6 <_printf_float+0x1be>
 800f232:	f1ab 0b02 	sub.w	fp, fp, #2
 800f236:	fa5f fb8b 	uxtb.w	fp, fp
 800f23a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f23e:	d820      	bhi.n	800f282 <_printf_float+0x18a>
 800f240:	3901      	subs	r1, #1
 800f242:	465a      	mov	r2, fp
 800f244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f248:	9109      	str	r1, [sp, #36]	; 0x24
 800f24a:	f7ff ff17 	bl	800f07c <__exponent>
 800f24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f250:	1813      	adds	r3, r2, r0
 800f252:	2a01      	cmp	r2, #1
 800f254:	4681      	mov	r9, r0
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	dc02      	bgt.n	800f260 <_printf_float+0x168>
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	07d2      	lsls	r2, r2, #31
 800f25e:	d501      	bpl.n	800f264 <_printf_float+0x16c>
 800f260:	3301      	adds	r3, #1
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d09c      	beq.n	800f1a6 <_printf_float+0xae>
 800f26c:	232d      	movs	r3, #45	; 0x2d
 800f26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f272:	e798      	b.n	800f1a6 <_printf_float+0xae>
 800f274:	9a06      	ldr	r2, [sp, #24]
 800f276:	2a47      	cmp	r2, #71	; 0x47
 800f278:	d1be      	bne.n	800f1f8 <_printf_float+0x100>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1bc      	bne.n	800f1f8 <_printf_float+0x100>
 800f27e:	2301      	movs	r3, #1
 800f280:	e7b9      	b.n	800f1f6 <_printf_float+0xfe>
 800f282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f286:	d118      	bne.n	800f2ba <_printf_float+0x1c2>
 800f288:	2900      	cmp	r1, #0
 800f28a:	6863      	ldr	r3, [r4, #4]
 800f28c:	dd0b      	ble.n	800f2a6 <_printf_float+0x1ae>
 800f28e:	6121      	str	r1, [r4, #16]
 800f290:	b913      	cbnz	r3, 800f298 <_printf_float+0x1a0>
 800f292:	6822      	ldr	r2, [r4, #0]
 800f294:	07d0      	lsls	r0, r2, #31
 800f296:	d502      	bpl.n	800f29e <_printf_float+0x1a6>
 800f298:	3301      	adds	r3, #1
 800f29a:	440b      	add	r3, r1
 800f29c:	6123      	str	r3, [r4, #16]
 800f29e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2a0:	f04f 0900 	mov.w	r9, #0
 800f2a4:	e7de      	b.n	800f264 <_printf_float+0x16c>
 800f2a6:	b913      	cbnz	r3, 800f2ae <_printf_float+0x1b6>
 800f2a8:	6822      	ldr	r2, [r4, #0]
 800f2aa:	07d2      	lsls	r2, r2, #31
 800f2ac:	d501      	bpl.n	800f2b2 <_printf_float+0x1ba>
 800f2ae:	3302      	adds	r3, #2
 800f2b0:	e7f4      	b.n	800f29c <_printf_float+0x1a4>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e7f2      	b.n	800f29c <_printf_float+0x1a4>
 800f2b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2bc:	4299      	cmp	r1, r3
 800f2be:	db05      	blt.n	800f2cc <_printf_float+0x1d4>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	6121      	str	r1, [r4, #16]
 800f2c4:	07d8      	lsls	r0, r3, #31
 800f2c6:	d5ea      	bpl.n	800f29e <_printf_float+0x1a6>
 800f2c8:	1c4b      	adds	r3, r1, #1
 800f2ca:	e7e7      	b.n	800f29c <_printf_float+0x1a4>
 800f2cc:	2900      	cmp	r1, #0
 800f2ce:	bfd4      	ite	le
 800f2d0:	f1c1 0202 	rsble	r2, r1, #2
 800f2d4:	2201      	movgt	r2, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	e7e0      	b.n	800f29c <_printf_float+0x1a4>
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	055a      	lsls	r2, r3, #21
 800f2de:	d407      	bmi.n	800f2f0 <_printf_float+0x1f8>
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	4642      	mov	r2, r8
 800f2e4:	4631      	mov	r1, r6
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	47b8      	blx	r7
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d12c      	bne.n	800f348 <_printf_float+0x250>
 800f2ee:	e764      	b.n	800f1ba <_printf_float+0xc2>
 800f2f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2f4:	f240 80e0 	bls.w	800f4b8 <_printf_float+0x3c0>
 800f2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2300      	movs	r3, #0
 800f300:	f7f1 fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 800f304:	2800      	cmp	r0, #0
 800f306:	d034      	beq.n	800f372 <_printf_float+0x27a>
 800f308:	4a37      	ldr	r2, [pc, #220]	; (800f3e8 <_printf_float+0x2f0>)
 800f30a:	2301      	movs	r3, #1
 800f30c:	4631      	mov	r1, r6
 800f30e:	4628      	mov	r0, r5
 800f310:	47b8      	blx	r7
 800f312:	3001      	adds	r0, #1
 800f314:	f43f af51 	beq.w	800f1ba <_printf_float+0xc2>
 800f318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f31c:	429a      	cmp	r2, r3
 800f31e:	db02      	blt.n	800f326 <_printf_float+0x22e>
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	07d8      	lsls	r0, r3, #31
 800f324:	d510      	bpl.n	800f348 <_printf_float+0x250>
 800f326:	ee18 3a10 	vmov	r3, s16
 800f32a:	4652      	mov	r2, sl
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af41 	beq.w	800f1ba <_printf_float+0xc2>
 800f338:	f04f 0800 	mov.w	r8, #0
 800f33c:	f104 091a 	add.w	r9, r4, #26
 800f340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f342:	3b01      	subs	r3, #1
 800f344:	4543      	cmp	r3, r8
 800f346:	dc09      	bgt.n	800f35c <_printf_float+0x264>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	079b      	lsls	r3, r3, #30
 800f34c:	f100 8105 	bmi.w	800f55a <_printf_float+0x462>
 800f350:	68e0      	ldr	r0, [r4, #12]
 800f352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f354:	4298      	cmp	r0, r3
 800f356:	bfb8      	it	lt
 800f358:	4618      	movlt	r0, r3
 800f35a:	e730      	b.n	800f1be <_printf_float+0xc6>
 800f35c:	2301      	movs	r3, #1
 800f35e:	464a      	mov	r2, r9
 800f360:	4631      	mov	r1, r6
 800f362:	4628      	mov	r0, r5
 800f364:	47b8      	blx	r7
 800f366:	3001      	adds	r0, #1
 800f368:	f43f af27 	beq.w	800f1ba <_printf_float+0xc2>
 800f36c:	f108 0801 	add.w	r8, r8, #1
 800f370:	e7e6      	b.n	800f340 <_printf_float+0x248>
 800f372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f374:	2b00      	cmp	r3, #0
 800f376:	dc39      	bgt.n	800f3ec <_printf_float+0x2f4>
 800f378:	4a1b      	ldr	r2, [pc, #108]	; (800f3e8 <_printf_float+0x2f0>)
 800f37a:	2301      	movs	r3, #1
 800f37c:	4631      	mov	r1, r6
 800f37e:	4628      	mov	r0, r5
 800f380:	47b8      	blx	r7
 800f382:	3001      	adds	r0, #1
 800f384:	f43f af19 	beq.w	800f1ba <_printf_float+0xc2>
 800f388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f38c:	4313      	orrs	r3, r2
 800f38e:	d102      	bne.n	800f396 <_printf_float+0x29e>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	07d9      	lsls	r1, r3, #31
 800f394:	d5d8      	bpl.n	800f348 <_printf_float+0x250>
 800f396:	ee18 3a10 	vmov	r3, s16
 800f39a:	4652      	mov	r2, sl
 800f39c:	4631      	mov	r1, r6
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f43f af09 	beq.w	800f1ba <_printf_float+0xc2>
 800f3a8:	f04f 0900 	mov.w	r9, #0
 800f3ac:	f104 0a1a 	add.w	sl, r4, #26
 800f3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b2:	425b      	negs	r3, r3
 800f3b4:	454b      	cmp	r3, r9
 800f3b6:	dc01      	bgt.n	800f3bc <_printf_float+0x2c4>
 800f3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ba:	e792      	b.n	800f2e2 <_printf_float+0x1ea>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	4652      	mov	r2, sl
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	f43f aef7 	beq.w	800f1ba <_printf_float+0xc2>
 800f3cc:	f109 0901 	add.w	r9, r9, #1
 800f3d0:	e7ee      	b.n	800f3b0 <_printf_float+0x2b8>
 800f3d2:	bf00      	nop
 800f3d4:	7fefffff 	.word	0x7fefffff
 800f3d8:	0801250c 	.word	0x0801250c
 800f3dc:	08012510 	.word	0x08012510
 800f3e0:	08012518 	.word	0x08012518
 800f3e4:	08012514 	.word	0x08012514
 800f3e8:	0801251c 	.word	0x0801251c
 800f3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	bfa8      	it	ge
 800f3f4:	461a      	movge	r2, r3
 800f3f6:	2a00      	cmp	r2, #0
 800f3f8:	4691      	mov	r9, r2
 800f3fa:	dc37      	bgt.n	800f46c <_printf_float+0x374>
 800f3fc:	f04f 0b00 	mov.w	fp, #0
 800f400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f404:	f104 021a 	add.w	r2, r4, #26
 800f408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f40a:	9305      	str	r3, [sp, #20]
 800f40c:	eba3 0309 	sub.w	r3, r3, r9
 800f410:	455b      	cmp	r3, fp
 800f412:	dc33      	bgt.n	800f47c <_printf_float+0x384>
 800f414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f418:	429a      	cmp	r2, r3
 800f41a:	db3b      	blt.n	800f494 <_printf_float+0x39c>
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	07da      	lsls	r2, r3, #31
 800f420:	d438      	bmi.n	800f494 <_printf_float+0x39c>
 800f422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f424:	9a05      	ldr	r2, [sp, #20]
 800f426:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f428:	1a9a      	subs	r2, r3, r2
 800f42a:	eba3 0901 	sub.w	r9, r3, r1
 800f42e:	4591      	cmp	r9, r2
 800f430:	bfa8      	it	ge
 800f432:	4691      	movge	r9, r2
 800f434:	f1b9 0f00 	cmp.w	r9, #0
 800f438:	dc35      	bgt.n	800f4a6 <_printf_float+0x3ae>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f442:	f104 0a1a 	add.w	sl, r4, #26
 800f446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f44a:	1a9b      	subs	r3, r3, r2
 800f44c:	eba3 0309 	sub.w	r3, r3, r9
 800f450:	4543      	cmp	r3, r8
 800f452:	f77f af79 	ble.w	800f348 <_printf_float+0x250>
 800f456:	2301      	movs	r3, #1
 800f458:	4652      	mov	r2, sl
 800f45a:	4631      	mov	r1, r6
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b8      	blx	r7
 800f460:	3001      	adds	r0, #1
 800f462:	f43f aeaa 	beq.w	800f1ba <_printf_float+0xc2>
 800f466:	f108 0801 	add.w	r8, r8, #1
 800f46a:	e7ec      	b.n	800f446 <_printf_float+0x34e>
 800f46c:	4613      	mov	r3, r2
 800f46e:	4631      	mov	r1, r6
 800f470:	4642      	mov	r2, r8
 800f472:	4628      	mov	r0, r5
 800f474:	47b8      	blx	r7
 800f476:	3001      	adds	r0, #1
 800f478:	d1c0      	bne.n	800f3fc <_printf_float+0x304>
 800f47a:	e69e      	b.n	800f1ba <_printf_float+0xc2>
 800f47c:	2301      	movs	r3, #1
 800f47e:	4631      	mov	r1, r6
 800f480:	4628      	mov	r0, r5
 800f482:	9205      	str	r2, [sp, #20]
 800f484:	47b8      	blx	r7
 800f486:	3001      	adds	r0, #1
 800f488:	f43f ae97 	beq.w	800f1ba <_printf_float+0xc2>
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	f10b 0b01 	add.w	fp, fp, #1
 800f492:	e7b9      	b.n	800f408 <_printf_float+0x310>
 800f494:	ee18 3a10 	vmov	r3, s16
 800f498:	4652      	mov	r2, sl
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d1be      	bne.n	800f422 <_printf_float+0x32a>
 800f4a4:	e689      	b.n	800f1ba <_printf_float+0xc2>
 800f4a6:	9a05      	ldr	r2, [sp, #20]
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	4442      	add	r2, r8
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b8      	blx	r7
 800f4b2:	3001      	adds	r0, #1
 800f4b4:	d1c1      	bne.n	800f43a <_printf_float+0x342>
 800f4b6:	e680      	b.n	800f1ba <_printf_float+0xc2>
 800f4b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4ba:	2a01      	cmp	r2, #1
 800f4bc:	dc01      	bgt.n	800f4c2 <_printf_float+0x3ca>
 800f4be:	07db      	lsls	r3, r3, #31
 800f4c0:	d538      	bpl.n	800f534 <_printf_float+0x43c>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f43f ae74 	beq.w	800f1ba <_printf_float+0xc2>
 800f4d2:	ee18 3a10 	vmov	r3, s16
 800f4d6:	4652      	mov	r2, sl
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4628      	mov	r0, r5
 800f4dc:	47b8      	blx	r7
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f43f ae6b 	beq.w	800f1ba <_printf_float+0xc2>
 800f4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f7f1 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4f0:	b9d8      	cbnz	r0, 800f52a <_printf_float+0x432>
 800f4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4f4:	f108 0201 	add.w	r2, r8, #1
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	d10e      	bne.n	800f522 <_printf_float+0x42a>
 800f504:	e659      	b.n	800f1ba <_printf_float+0xc2>
 800f506:	2301      	movs	r3, #1
 800f508:	4652      	mov	r2, sl
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	f43f ae52 	beq.w	800f1ba <_printf_float+0xc2>
 800f516:	f108 0801 	add.w	r8, r8, #1
 800f51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f51c:	3b01      	subs	r3, #1
 800f51e:	4543      	cmp	r3, r8
 800f520:	dcf1      	bgt.n	800f506 <_printf_float+0x40e>
 800f522:	464b      	mov	r3, r9
 800f524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f528:	e6dc      	b.n	800f2e4 <_printf_float+0x1ec>
 800f52a:	f04f 0800 	mov.w	r8, #0
 800f52e:	f104 0a1a 	add.w	sl, r4, #26
 800f532:	e7f2      	b.n	800f51a <_printf_float+0x422>
 800f534:	2301      	movs	r3, #1
 800f536:	4642      	mov	r2, r8
 800f538:	e7df      	b.n	800f4fa <_printf_float+0x402>
 800f53a:	2301      	movs	r3, #1
 800f53c:	464a      	mov	r2, r9
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	f43f ae38 	beq.w	800f1ba <_printf_float+0xc2>
 800f54a:	f108 0801 	add.w	r8, r8, #1
 800f54e:	68e3      	ldr	r3, [r4, #12]
 800f550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f552:	1a5b      	subs	r3, r3, r1
 800f554:	4543      	cmp	r3, r8
 800f556:	dcf0      	bgt.n	800f53a <_printf_float+0x442>
 800f558:	e6fa      	b.n	800f350 <_printf_float+0x258>
 800f55a:	f04f 0800 	mov.w	r8, #0
 800f55e:	f104 0919 	add.w	r9, r4, #25
 800f562:	e7f4      	b.n	800f54e <_printf_float+0x456>

0800f564 <_printf_common>:
 800f564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f568:	4616      	mov	r6, r2
 800f56a:	4699      	mov	r9, r3
 800f56c:	688a      	ldr	r2, [r1, #8]
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f574:	4293      	cmp	r3, r2
 800f576:	bfb8      	it	lt
 800f578:	4613      	movlt	r3, r2
 800f57a:	6033      	str	r3, [r6, #0]
 800f57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f580:	4607      	mov	r7, r0
 800f582:	460c      	mov	r4, r1
 800f584:	b10a      	cbz	r2, 800f58a <_printf_common+0x26>
 800f586:	3301      	adds	r3, #1
 800f588:	6033      	str	r3, [r6, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	0699      	lsls	r1, r3, #26
 800f58e:	bf42      	ittt	mi
 800f590:	6833      	ldrmi	r3, [r6, #0]
 800f592:	3302      	addmi	r3, #2
 800f594:	6033      	strmi	r3, [r6, #0]
 800f596:	6825      	ldr	r5, [r4, #0]
 800f598:	f015 0506 	ands.w	r5, r5, #6
 800f59c:	d106      	bne.n	800f5ac <_printf_common+0x48>
 800f59e:	f104 0a19 	add.w	sl, r4, #25
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	6832      	ldr	r2, [r6, #0]
 800f5a6:	1a9b      	subs	r3, r3, r2
 800f5a8:	42ab      	cmp	r3, r5
 800f5aa:	dc26      	bgt.n	800f5fa <_printf_common+0x96>
 800f5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5b0:	1e13      	subs	r3, r2, #0
 800f5b2:	6822      	ldr	r2, [r4, #0]
 800f5b4:	bf18      	it	ne
 800f5b6:	2301      	movne	r3, #1
 800f5b8:	0692      	lsls	r2, r2, #26
 800f5ba:	d42b      	bmi.n	800f614 <_printf_common+0xb0>
 800f5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5c0:	4649      	mov	r1, r9
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	47c0      	blx	r8
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d01e      	beq.n	800f608 <_printf_common+0xa4>
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	68e5      	ldr	r5, [r4, #12]
 800f5ce:	6832      	ldr	r2, [r6, #0]
 800f5d0:	f003 0306 	and.w	r3, r3, #6
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	bf08      	it	eq
 800f5d8:	1aad      	subeq	r5, r5, r2
 800f5da:	68a3      	ldr	r3, [r4, #8]
 800f5dc:	6922      	ldr	r2, [r4, #16]
 800f5de:	bf0c      	ite	eq
 800f5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e4:	2500      	movne	r5, #0
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	bfc4      	itt	gt
 800f5ea:	1a9b      	subgt	r3, r3, r2
 800f5ec:	18ed      	addgt	r5, r5, r3
 800f5ee:	2600      	movs	r6, #0
 800f5f0:	341a      	adds	r4, #26
 800f5f2:	42b5      	cmp	r5, r6
 800f5f4:	d11a      	bne.n	800f62c <_printf_common+0xc8>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	e008      	b.n	800f60c <_printf_common+0xa8>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	4649      	mov	r1, r9
 800f600:	4638      	mov	r0, r7
 800f602:	47c0      	blx	r8
 800f604:	3001      	adds	r0, #1
 800f606:	d103      	bne.n	800f610 <_printf_common+0xac>
 800f608:	f04f 30ff 	mov.w	r0, #4294967295
 800f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f610:	3501      	adds	r5, #1
 800f612:	e7c6      	b.n	800f5a2 <_printf_common+0x3e>
 800f614:	18e1      	adds	r1, r4, r3
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	2030      	movs	r0, #48	; 0x30
 800f61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f61e:	4422      	add	r2, r4
 800f620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f628:	3302      	adds	r3, #2
 800f62a:	e7c7      	b.n	800f5bc <_printf_common+0x58>
 800f62c:	2301      	movs	r3, #1
 800f62e:	4622      	mov	r2, r4
 800f630:	4649      	mov	r1, r9
 800f632:	4638      	mov	r0, r7
 800f634:	47c0      	blx	r8
 800f636:	3001      	adds	r0, #1
 800f638:	d0e6      	beq.n	800f608 <_printf_common+0xa4>
 800f63a:	3601      	adds	r6, #1
 800f63c:	e7d9      	b.n	800f5f2 <_printf_common+0x8e>
	...

0800f640 <_printf_i>:
 800f640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f644:	7e0f      	ldrb	r7, [r1, #24]
 800f646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f648:	2f78      	cmp	r7, #120	; 0x78
 800f64a:	4691      	mov	r9, r2
 800f64c:	4680      	mov	r8, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	469a      	mov	sl, r3
 800f652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f656:	d807      	bhi.n	800f668 <_printf_i+0x28>
 800f658:	2f62      	cmp	r7, #98	; 0x62
 800f65a:	d80a      	bhi.n	800f672 <_printf_i+0x32>
 800f65c:	2f00      	cmp	r7, #0
 800f65e:	f000 80d8 	beq.w	800f812 <_printf_i+0x1d2>
 800f662:	2f58      	cmp	r7, #88	; 0x58
 800f664:	f000 80a3 	beq.w	800f7ae <_printf_i+0x16e>
 800f668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f670:	e03a      	b.n	800f6e8 <_printf_i+0xa8>
 800f672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f676:	2b15      	cmp	r3, #21
 800f678:	d8f6      	bhi.n	800f668 <_printf_i+0x28>
 800f67a:	a101      	add	r1, pc, #4	; (adr r1, 800f680 <_printf_i+0x40>)
 800f67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f680:	0800f6d9 	.word	0x0800f6d9
 800f684:	0800f6ed 	.word	0x0800f6ed
 800f688:	0800f669 	.word	0x0800f669
 800f68c:	0800f669 	.word	0x0800f669
 800f690:	0800f669 	.word	0x0800f669
 800f694:	0800f669 	.word	0x0800f669
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f669 	.word	0x0800f669
 800f6a0:	0800f669 	.word	0x0800f669
 800f6a4:	0800f669 	.word	0x0800f669
 800f6a8:	0800f669 	.word	0x0800f669
 800f6ac:	0800f7f9 	.word	0x0800f7f9
 800f6b0:	0800f71d 	.word	0x0800f71d
 800f6b4:	0800f7db 	.word	0x0800f7db
 800f6b8:	0800f669 	.word	0x0800f669
 800f6bc:	0800f669 	.word	0x0800f669
 800f6c0:	0800f81b 	.word	0x0800f81b
 800f6c4:	0800f669 	.word	0x0800f669
 800f6c8:	0800f71d 	.word	0x0800f71d
 800f6cc:	0800f669 	.word	0x0800f669
 800f6d0:	0800f669 	.word	0x0800f669
 800f6d4:	0800f7e3 	.word	0x0800f7e3
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	1d1a      	adds	r2, r3, #4
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	602a      	str	r2, [r5, #0]
 800f6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e0a3      	b.n	800f834 <_printf_i+0x1f4>
 800f6ec:	6820      	ldr	r0, [r4, #0]
 800f6ee:	6829      	ldr	r1, [r5, #0]
 800f6f0:	0606      	lsls	r6, r0, #24
 800f6f2:	f101 0304 	add.w	r3, r1, #4
 800f6f6:	d50a      	bpl.n	800f70e <_printf_i+0xce>
 800f6f8:	680e      	ldr	r6, [r1, #0]
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	2e00      	cmp	r6, #0
 800f6fe:	da03      	bge.n	800f708 <_printf_i+0xc8>
 800f700:	232d      	movs	r3, #45	; 0x2d
 800f702:	4276      	negs	r6, r6
 800f704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f708:	485e      	ldr	r0, [pc, #376]	; (800f884 <_printf_i+0x244>)
 800f70a:	230a      	movs	r3, #10
 800f70c:	e019      	b.n	800f742 <_printf_i+0x102>
 800f70e:	680e      	ldr	r6, [r1, #0]
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f716:	bf18      	it	ne
 800f718:	b236      	sxthne	r6, r6
 800f71a:	e7ef      	b.n	800f6fc <_printf_i+0xbc>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	1d19      	adds	r1, r3, #4
 800f722:	6029      	str	r1, [r5, #0]
 800f724:	0601      	lsls	r1, r0, #24
 800f726:	d501      	bpl.n	800f72c <_printf_i+0xec>
 800f728:	681e      	ldr	r6, [r3, #0]
 800f72a:	e002      	b.n	800f732 <_printf_i+0xf2>
 800f72c:	0646      	lsls	r6, r0, #25
 800f72e:	d5fb      	bpl.n	800f728 <_printf_i+0xe8>
 800f730:	881e      	ldrh	r6, [r3, #0]
 800f732:	4854      	ldr	r0, [pc, #336]	; (800f884 <_printf_i+0x244>)
 800f734:	2f6f      	cmp	r7, #111	; 0x6f
 800f736:	bf0c      	ite	eq
 800f738:	2308      	moveq	r3, #8
 800f73a:	230a      	movne	r3, #10
 800f73c:	2100      	movs	r1, #0
 800f73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f742:	6865      	ldr	r5, [r4, #4]
 800f744:	60a5      	str	r5, [r4, #8]
 800f746:	2d00      	cmp	r5, #0
 800f748:	bfa2      	ittt	ge
 800f74a:	6821      	ldrge	r1, [r4, #0]
 800f74c:	f021 0104 	bicge.w	r1, r1, #4
 800f750:	6021      	strge	r1, [r4, #0]
 800f752:	b90e      	cbnz	r6, 800f758 <_printf_i+0x118>
 800f754:	2d00      	cmp	r5, #0
 800f756:	d04d      	beq.n	800f7f4 <_printf_i+0x1b4>
 800f758:	4615      	mov	r5, r2
 800f75a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f75e:	fb03 6711 	mls	r7, r3, r1, r6
 800f762:	5dc7      	ldrb	r7, [r0, r7]
 800f764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f768:	4637      	mov	r7, r6
 800f76a:	42bb      	cmp	r3, r7
 800f76c:	460e      	mov	r6, r1
 800f76e:	d9f4      	bls.n	800f75a <_printf_i+0x11a>
 800f770:	2b08      	cmp	r3, #8
 800f772:	d10b      	bne.n	800f78c <_printf_i+0x14c>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	07de      	lsls	r6, r3, #31
 800f778:	d508      	bpl.n	800f78c <_printf_i+0x14c>
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	6861      	ldr	r1, [r4, #4]
 800f77e:	4299      	cmp	r1, r3
 800f780:	bfde      	ittt	le
 800f782:	2330      	movle	r3, #48	; 0x30
 800f784:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f78c:	1b52      	subs	r2, r2, r5
 800f78e:	6122      	str	r2, [r4, #16]
 800f790:	f8cd a000 	str.w	sl, [sp]
 800f794:	464b      	mov	r3, r9
 800f796:	aa03      	add	r2, sp, #12
 800f798:	4621      	mov	r1, r4
 800f79a:	4640      	mov	r0, r8
 800f79c:	f7ff fee2 	bl	800f564 <_printf_common>
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d14c      	bne.n	800f83e <_printf_i+0x1fe>
 800f7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a8:	b004      	add	sp, #16
 800f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ae:	4835      	ldr	r0, [pc, #212]	; (800f884 <_printf_i+0x244>)
 800f7b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7b4:	6829      	ldr	r1, [r5, #0]
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7bc:	6029      	str	r1, [r5, #0]
 800f7be:	061d      	lsls	r5, r3, #24
 800f7c0:	d514      	bpl.n	800f7ec <_printf_i+0x1ac>
 800f7c2:	07df      	lsls	r7, r3, #31
 800f7c4:	bf44      	itt	mi
 800f7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800f7ca:	6023      	strmi	r3, [r4, #0]
 800f7cc:	b91e      	cbnz	r6, 800f7d6 <_printf_i+0x196>
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	f023 0320 	bic.w	r3, r3, #32
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	e7b0      	b.n	800f73c <_printf_i+0xfc>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	f043 0320 	orr.w	r3, r3, #32
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	2378      	movs	r3, #120	; 0x78
 800f7e4:	4828      	ldr	r0, [pc, #160]	; (800f888 <_printf_i+0x248>)
 800f7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7ea:	e7e3      	b.n	800f7b4 <_printf_i+0x174>
 800f7ec:	0659      	lsls	r1, r3, #25
 800f7ee:	bf48      	it	mi
 800f7f0:	b2b6      	uxthmi	r6, r6
 800f7f2:	e7e6      	b.n	800f7c2 <_printf_i+0x182>
 800f7f4:	4615      	mov	r5, r2
 800f7f6:	e7bb      	b.n	800f770 <_printf_i+0x130>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	6826      	ldr	r6, [r4, #0]
 800f7fc:	6961      	ldr	r1, [r4, #20]
 800f7fe:	1d18      	adds	r0, r3, #4
 800f800:	6028      	str	r0, [r5, #0]
 800f802:	0635      	lsls	r5, r6, #24
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	d501      	bpl.n	800f80c <_printf_i+0x1cc>
 800f808:	6019      	str	r1, [r3, #0]
 800f80a:	e002      	b.n	800f812 <_printf_i+0x1d2>
 800f80c:	0670      	lsls	r0, r6, #25
 800f80e:	d5fb      	bpl.n	800f808 <_printf_i+0x1c8>
 800f810:	8019      	strh	r1, [r3, #0]
 800f812:	2300      	movs	r3, #0
 800f814:	6123      	str	r3, [r4, #16]
 800f816:	4615      	mov	r5, r2
 800f818:	e7ba      	b.n	800f790 <_printf_i+0x150>
 800f81a:	682b      	ldr	r3, [r5, #0]
 800f81c:	1d1a      	adds	r2, r3, #4
 800f81e:	602a      	str	r2, [r5, #0]
 800f820:	681d      	ldr	r5, [r3, #0]
 800f822:	6862      	ldr	r2, [r4, #4]
 800f824:	2100      	movs	r1, #0
 800f826:	4628      	mov	r0, r5
 800f828:	f7f0 fce2 	bl	80001f0 <memchr>
 800f82c:	b108      	cbz	r0, 800f832 <_printf_i+0x1f2>
 800f82e:	1b40      	subs	r0, r0, r5
 800f830:	6060      	str	r0, [r4, #4]
 800f832:	6863      	ldr	r3, [r4, #4]
 800f834:	6123      	str	r3, [r4, #16]
 800f836:	2300      	movs	r3, #0
 800f838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f83c:	e7a8      	b.n	800f790 <_printf_i+0x150>
 800f83e:	6923      	ldr	r3, [r4, #16]
 800f840:	462a      	mov	r2, r5
 800f842:	4649      	mov	r1, r9
 800f844:	4640      	mov	r0, r8
 800f846:	47d0      	blx	sl
 800f848:	3001      	adds	r0, #1
 800f84a:	d0ab      	beq.n	800f7a4 <_printf_i+0x164>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	079b      	lsls	r3, r3, #30
 800f850:	d413      	bmi.n	800f87a <_printf_i+0x23a>
 800f852:	68e0      	ldr	r0, [r4, #12]
 800f854:	9b03      	ldr	r3, [sp, #12]
 800f856:	4298      	cmp	r0, r3
 800f858:	bfb8      	it	lt
 800f85a:	4618      	movlt	r0, r3
 800f85c:	e7a4      	b.n	800f7a8 <_printf_i+0x168>
 800f85e:	2301      	movs	r3, #1
 800f860:	4632      	mov	r2, r6
 800f862:	4649      	mov	r1, r9
 800f864:	4640      	mov	r0, r8
 800f866:	47d0      	blx	sl
 800f868:	3001      	adds	r0, #1
 800f86a:	d09b      	beq.n	800f7a4 <_printf_i+0x164>
 800f86c:	3501      	adds	r5, #1
 800f86e:	68e3      	ldr	r3, [r4, #12]
 800f870:	9903      	ldr	r1, [sp, #12]
 800f872:	1a5b      	subs	r3, r3, r1
 800f874:	42ab      	cmp	r3, r5
 800f876:	dcf2      	bgt.n	800f85e <_printf_i+0x21e>
 800f878:	e7eb      	b.n	800f852 <_printf_i+0x212>
 800f87a:	2500      	movs	r5, #0
 800f87c:	f104 0619 	add.w	r6, r4, #25
 800f880:	e7f5      	b.n	800f86e <_printf_i+0x22e>
 800f882:	bf00      	nop
 800f884:	0801251e 	.word	0x0801251e
 800f888:	0801252f 	.word	0x0801252f

0800f88c <cleanup_glue>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	460c      	mov	r4, r1
 800f890:	6809      	ldr	r1, [r1, #0]
 800f892:	4605      	mov	r5, r0
 800f894:	b109      	cbz	r1, 800f89a <cleanup_glue+0xe>
 800f896:	f7ff fff9 	bl	800f88c <cleanup_glue>
 800f89a:	4621      	mov	r1, r4
 800f89c:	4628      	mov	r0, r5
 800f89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a2:	f001 bbf5 	b.w	8011090 <_free_r>
	...

0800f8a8 <_reclaim_reent>:
 800f8a8:	4b2c      	ldr	r3, [pc, #176]	; (800f95c <_reclaim_reent+0xb4>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4283      	cmp	r3, r0
 800f8ae:	b570      	push	{r4, r5, r6, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	d051      	beq.n	800f958 <_reclaim_reent+0xb0>
 800f8b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f8b6:	b143      	cbz	r3, 800f8ca <_reclaim_reent+0x22>
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d14a      	bne.n	800f954 <_reclaim_reent+0xac>
 800f8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8c0:	6819      	ldr	r1, [r3, #0]
 800f8c2:	b111      	cbz	r1, 800f8ca <_reclaim_reent+0x22>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f001 fbe3 	bl	8011090 <_free_r>
 800f8ca:	6961      	ldr	r1, [r4, #20]
 800f8cc:	b111      	cbz	r1, 800f8d4 <_reclaim_reent+0x2c>
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f001 fbde 	bl	8011090 <_free_r>
 800f8d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f8d6:	b111      	cbz	r1, 800f8de <_reclaim_reent+0x36>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f001 fbd9 	bl	8011090 <_free_r>
 800f8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f8e0:	b111      	cbz	r1, 800f8e8 <_reclaim_reent+0x40>
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f001 fbd4 	bl	8011090 <_free_r>
 800f8e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f8ea:	b111      	cbz	r1, 800f8f2 <_reclaim_reent+0x4a>
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f001 fbcf 	bl	8011090 <_free_r>
 800f8f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f8f4:	b111      	cbz	r1, 800f8fc <_reclaim_reent+0x54>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f001 fbca 	bl	8011090 <_free_r>
 800f8fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f8fe:	b111      	cbz	r1, 800f906 <_reclaim_reent+0x5e>
 800f900:	4620      	mov	r0, r4
 800f902:	f001 fbc5 	bl	8011090 <_free_r>
 800f906:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f908:	b111      	cbz	r1, 800f910 <_reclaim_reent+0x68>
 800f90a:	4620      	mov	r0, r4
 800f90c:	f001 fbc0 	bl	8011090 <_free_r>
 800f910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f912:	b111      	cbz	r1, 800f91a <_reclaim_reent+0x72>
 800f914:	4620      	mov	r0, r4
 800f916:	f001 fbbb 	bl	8011090 <_free_r>
 800f91a:	69a3      	ldr	r3, [r4, #24]
 800f91c:	b1e3      	cbz	r3, 800f958 <_reclaim_reent+0xb0>
 800f91e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f920:	4620      	mov	r0, r4
 800f922:	4798      	blx	r3
 800f924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f926:	b1b9      	cbz	r1, 800f958 <_reclaim_reent+0xb0>
 800f928:	4620      	mov	r0, r4
 800f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92e:	f7ff bfad 	b.w	800f88c <cleanup_glue>
 800f932:	5949      	ldr	r1, [r1, r5]
 800f934:	b941      	cbnz	r1, 800f948 <_reclaim_reent+0xa0>
 800f936:	3504      	adds	r5, #4
 800f938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f93a:	2d80      	cmp	r5, #128	; 0x80
 800f93c:	68d9      	ldr	r1, [r3, #12]
 800f93e:	d1f8      	bne.n	800f932 <_reclaim_reent+0x8a>
 800f940:	4620      	mov	r0, r4
 800f942:	f001 fba5 	bl	8011090 <_free_r>
 800f946:	e7ba      	b.n	800f8be <_reclaim_reent+0x16>
 800f948:	680e      	ldr	r6, [r1, #0]
 800f94a:	4620      	mov	r0, r4
 800f94c:	f001 fba0 	bl	8011090 <_free_r>
 800f950:	4631      	mov	r1, r6
 800f952:	e7ef      	b.n	800f934 <_reclaim_reent+0x8c>
 800f954:	2500      	movs	r5, #0
 800f956:	e7ef      	b.n	800f938 <_reclaim_reent+0x90>
 800f958:	bd70      	pop	{r4, r5, r6, pc}
 800f95a:	bf00      	nop
 800f95c:	20000028 	.word	0x20000028

0800f960 <_sbrk_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4d06      	ldr	r5, [pc, #24]	; (800f97c <_sbrk_r+0x1c>)
 800f964:	2300      	movs	r3, #0
 800f966:	4604      	mov	r4, r0
 800f968:	4608      	mov	r0, r1
 800f96a:	602b      	str	r3, [r5, #0]
 800f96c:	f7f5 f9a8 	bl	8004cc0 <_sbrk>
 800f970:	1c43      	adds	r3, r0, #1
 800f972:	d102      	bne.n	800f97a <_sbrk_r+0x1a>
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	b103      	cbz	r3, 800f97a <_sbrk_r+0x1a>
 800f978:	6023      	str	r3, [r4, #0]
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	2000653c 	.word	0x2000653c

0800f980 <siprintf>:
 800f980:	b40e      	push	{r1, r2, r3}
 800f982:	b500      	push	{lr}
 800f984:	b09c      	sub	sp, #112	; 0x70
 800f986:	ab1d      	add	r3, sp, #116	; 0x74
 800f988:	9002      	str	r0, [sp, #8]
 800f98a:	9006      	str	r0, [sp, #24]
 800f98c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f990:	4809      	ldr	r0, [pc, #36]	; (800f9b8 <siprintf+0x38>)
 800f992:	9107      	str	r1, [sp, #28]
 800f994:	9104      	str	r1, [sp, #16]
 800f996:	4909      	ldr	r1, [pc, #36]	; (800f9bc <siprintf+0x3c>)
 800f998:	f853 2b04 	ldr.w	r2, [r3], #4
 800f99c:	9105      	str	r1, [sp, #20]
 800f99e:	6800      	ldr	r0, [r0, #0]
 800f9a0:	9301      	str	r3, [sp, #4]
 800f9a2:	a902      	add	r1, sp, #8
 800f9a4:	f001 fc1c 	bl	80111e0 <_svfiprintf_r>
 800f9a8:	9b02      	ldr	r3, [sp, #8]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	701a      	strb	r2, [r3, #0]
 800f9ae:	b01c      	add	sp, #112	; 0x70
 800f9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b4:	b003      	add	sp, #12
 800f9b6:	4770      	bx	lr
 800f9b8:	20000028 	.word	0x20000028
 800f9bc:	ffff0208 	.word	0xffff0208

0800f9c0 <__sread>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c8:	f001 fd0a 	bl	80113e0 <_read_r>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	bfab      	itete	ge
 800f9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9d4:	181b      	addge	r3, r3, r0
 800f9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9da:	bfac      	ite	ge
 800f9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9de:	81a3      	strhlt	r3, [r4, #12]
 800f9e0:	bd10      	pop	{r4, pc}

0800f9e2 <__swrite>:
 800f9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e6:	461f      	mov	r7, r3
 800f9e8:	898b      	ldrh	r3, [r1, #12]
 800f9ea:	05db      	lsls	r3, r3, #23
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	4616      	mov	r6, r2
 800f9f2:	d505      	bpl.n	800fa00 <__swrite+0x1e>
 800f9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f8:	2302      	movs	r3, #2
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f000 ff88 	bl	8010910 <_lseek_r>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa0a:	81a3      	strh	r3, [r4, #12]
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	463b      	mov	r3, r7
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa16:	f000 b817 	b.w	800fa48 <_write_r>

0800fa1a <__sseek>:
 800fa1a:	b510      	push	{r4, lr}
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa22:	f000 ff75 	bl	8010910 <_lseek_r>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	bf15      	itete	ne
 800fa2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa36:	81a3      	strheq	r3, [r4, #12]
 800fa38:	bf18      	it	ne
 800fa3a:	81a3      	strhne	r3, [r4, #12]
 800fa3c:	bd10      	pop	{r4, pc}

0800fa3e <__sclose>:
 800fa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa42:	f000 b813 	b.w	800fa6c <_close_r>
	...

0800fa48 <_write_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d07      	ldr	r5, [pc, #28]	; (800fa68 <_write_r+0x20>)
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	2200      	movs	r2, #0
 800fa54:	602a      	str	r2, [r5, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	f7f5 f8e1 	bl	8004c1e <_write>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	d102      	bne.n	800fa66 <_write_r+0x1e>
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	b103      	cbz	r3, 800fa66 <_write_r+0x1e>
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	bd38      	pop	{r3, r4, r5, pc}
 800fa68:	2000653c 	.word	0x2000653c

0800fa6c <_close_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d06      	ldr	r5, [pc, #24]	; (800fa88 <_close_r+0x1c>)
 800fa70:	2300      	movs	r3, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	602b      	str	r3, [r5, #0]
 800fa78:	f7f5 f8ed 	bl	8004c56 <_close>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_close_r+0x1a>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_close_r+0x1a>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	2000653c 	.word	0x2000653c

0800fa8c <quorem>:
 800fa8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	6903      	ldr	r3, [r0, #16]
 800fa92:	690c      	ldr	r4, [r1, #16]
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	4607      	mov	r7, r0
 800fa98:	f2c0 8081 	blt.w	800fb9e <quorem+0x112>
 800fa9c:	3c01      	subs	r4, #1
 800fa9e:	f101 0814 	add.w	r8, r1, #20
 800faa2:	f100 0514 	add.w	r5, r0, #20
 800faa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fab4:	3301      	adds	r3, #1
 800fab6:	429a      	cmp	r2, r3
 800fab8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fabc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fac0:	fbb2 f6f3 	udiv	r6, r2, r3
 800fac4:	d331      	bcc.n	800fb2a <quorem+0x9e>
 800fac6:	f04f 0e00 	mov.w	lr, #0
 800faca:	4640      	mov	r0, r8
 800facc:	46ac      	mov	ip, r5
 800face:	46f2      	mov	sl, lr
 800fad0:	f850 2b04 	ldr.w	r2, [r0], #4
 800fad4:	b293      	uxth	r3, r2
 800fad6:	fb06 e303 	mla	r3, r6, r3, lr
 800fada:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fade:	b29b      	uxth	r3, r3
 800fae0:	ebaa 0303 	sub.w	r3, sl, r3
 800fae4:	f8dc a000 	ldr.w	sl, [ip]
 800fae8:	0c12      	lsrs	r2, r2, #16
 800faea:	fa13 f38a 	uxtah	r3, r3, sl
 800faee:	fb06 e202 	mla	r2, r6, r2, lr
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	9b00      	ldr	r3, [sp, #0]
 800faf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fafa:	b292      	uxth	r2, r2
 800fafc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb04:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb08:	4581      	cmp	r9, r0
 800fb0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb0e:	f84c 3b04 	str.w	r3, [ip], #4
 800fb12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb16:	d2db      	bcs.n	800fad0 <quorem+0x44>
 800fb18:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb1c:	b92b      	cbnz	r3, 800fb2a <quorem+0x9e>
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	3b04      	subs	r3, #4
 800fb22:	429d      	cmp	r5, r3
 800fb24:	461a      	mov	r2, r3
 800fb26:	d32e      	bcc.n	800fb86 <quorem+0xfa>
 800fb28:	613c      	str	r4, [r7, #16]
 800fb2a:	4638      	mov	r0, r7
 800fb2c:	f001 f998 	bl	8010e60 <__mcmp>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	db24      	blt.n	800fb7e <quorem+0xf2>
 800fb34:	3601      	adds	r6, #1
 800fb36:	4628      	mov	r0, r5
 800fb38:	f04f 0c00 	mov.w	ip, #0
 800fb3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb40:	f8d0 e000 	ldr.w	lr, [r0]
 800fb44:	b293      	uxth	r3, r2
 800fb46:	ebac 0303 	sub.w	r3, ip, r3
 800fb4a:	0c12      	lsrs	r2, r2, #16
 800fb4c:	fa13 f38e 	uxtah	r3, r3, lr
 800fb50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb5e:	45c1      	cmp	r9, r8
 800fb60:	f840 3b04 	str.w	r3, [r0], #4
 800fb64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb68:	d2e8      	bcs.n	800fb3c <quorem+0xb0>
 800fb6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb72:	b922      	cbnz	r2, 800fb7e <quorem+0xf2>
 800fb74:	3b04      	subs	r3, #4
 800fb76:	429d      	cmp	r5, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	d30a      	bcc.n	800fb92 <quorem+0x106>
 800fb7c:	613c      	str	r4, [r7, #16]
 800fb7e:	4630      	mov	r0, r6
 800fb80:	b003      	add	sp, #12
 800fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb86:	6812      	ldr	r2, [r2, #0]
 800fb88:	3b04      	subs	r3, #4
 800fb8a:	2a00      	cmp	r2, #0
 800fb8c:	d1cc      	bne.n	800fb28 <quorem+0x9c>
 800fb8e:	3c01      	subs	r4, #1
 800fb90:	e7c7      	b.n	800fb22 <quorem+0x96>
 800fb92:	6812      	ldr	r2, [r2, #0]
 800fb94:	3b04      	subs	r3, #4
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	d1f0      	bne.n	800fb7c <quorem+0xf0>
 800fb9a:	3c01      	subs	r4, #1
 800fb9c:	e7eb      	b.n	800fb76 <quorem+0xea>
 800fb9e:	2000      	movs	r0, #0
 800fba0:	e7ee      	b.n	800fb80 <quorem+0xf4>
 800fba2:	0000      	movs	r0, r0
 800fba4:	0000      	movs	r0, r0
	...

0800fba8 <_dtoa_r>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	ed2d 8b04 	vpush	{d8-d9}
 800fbb0:	ec57 6b10 	vmov	r6, r7, d0
 800fbb4:	b093      	sub	sp, #76	; 0x4c
 800fbb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbbc:	9106      	str	r1, [sp, #24]
 800fbbe:	ee10 aa10 	vmov	sl, s0
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbc6:	930c      	str	r3, [sp, #48]	; 0x30
 800fbc8:	46bb      	mov	fp, r7
 800fbca:	b975      	cbnz	r5, 800fbea <_dtoa_r+0x42>
 800fbcc:	2010      	movs	r0, #16
 800fbce:	f000 feb1 	bl	8010934 <malloc>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	6260      	str	r0, [r4, #36]	; 0x24
 800fbd6:	b920      	cbnz	r0, 800fbe2 <_dtoa_r+0x3a>
 800fbd8:	4ba7      	ldr	r3, [pc, #668]	; (800fe78 <_dtoa_r+0x2d0>)
 800fbda:	21ea      	movs	r1, #234	; 0xea
 800fbdc:	48a7      	ldr	r0, [pc, #668]	; (800fe7c <_dtoa_r+0x2d4>)
 800fbde:	f001 fc11 	bl	8011404 <__assert_func>
 800fbe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbe6:	6005      	str	r5, [r0, #0]
 800fbe8:	60c5      	str	r5, [r0, #12]
 800fbea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbec:	6819      	ldr	r1, [r3, #0]
 800fbee:	b151      	cbz	r1, 800fc06 <_dtoa_r+0x5e>
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	604a      	str	r2, [r1, #4]
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	4093      	lsls	r3, r2
 800fbf8:	608b      	str	r3, [r1, #8]
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f000 feee 	bl	80109dc <_Bfree>
 800fc00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc02:	2200      	movs	r2, #0
 800fc04:	601a      	str	r2, [r3, #0]
 800fc06:	1e3b      	subs	r3, r7, #0
 800fc08:	bfaa      	itet	ge
 800fc0a:	2300      	movge	r3, #0
 800fc0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc10:	f8c8 3000 	strge.w	r3, [r8]
 800fc14:	4b9a      	ldr	r3, [pc, #616]	; (800fe80 <_dtoa_r+0x2d8>)
 800fc16:	bfbc      	itt	lt
 800fc18:	2201      	movlt	r2, #1
 800fc1a:	f8c8 2000 	strlt.w	r2, [r8]
 800fc1e:	ea33 030b 	bics.w	r3, r3, fp
 800fc22:	d11b      	bne.n	800fc5c <_dtoa_r+0xb4>
 800fc24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc26:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc2a:	6013      	str	r3, [r2, #0]
 800fc2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc30:	4333      	orrs	r3, r6
 800fc32:	f000 8592 	beq.w	801075a <_dtoa_r+0xbb2>
 800fc36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc38:	b963      	cbnz	r3, 800fc54 <_dtoa_r+0xac>
 800fc3a:	4b92      	ldr	r3, [pc, #584]	; (800fe84 <_dtoa_r+0x2dc>)
 800fc3c:	e022      	b.n	800fc84 <_dtoa_r+0xdc>
 800fc3e:	4b92      	ldr	r3, [pc, #584]	; (800fe88 <_dtoa_r+0x2e0>)
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	3308      	adds	r3, #8
 800fc44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc46:	6013      	str	r3, [r2, #0]
 800fc48:	9801      	ldr	r0, [sp, #4]
 800fc4a:	b013      	add	sp, #76	; 0x4c
 800fc4c:	ecbd 8b04 	vpop	{d8-d9}
 800fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc54:	4b8b      	ldr	r3, [pc, #556]	; (800fe84 <_dtoa_r+0x2dc>)
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	3303      	adds	r3, #3
 800fc5a:	e7f3      	b.n	800fc44 <_dtoa_r+0x9c>
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	2300      	movs	r3, #0
 800fc60:	4650      	mov	r0, sl
 800fc62:	4659      	mov	r1, fp
 800fc64:	f7f0 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc68:	ec4b ab19 	vmov	d9, sl, fp
 800fc6c:	4680      	mov	r8, r0
 800fc6e:	b158      	cbz	r0, 800fc88 <_dtoa_r+0xe0>
 800fc70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc72:	2301      	movs	r3, #1
 800fc74:	6013      	str	r3, [r2, #0]
 800fc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 856b 	beq.w	8010754 <_dtoa_r+0xbac>
 800fc7e:	4883      	ldr	r0, [pc, #524]	; (800fe8c <_dtoa_r+0x2e4>)
 800fc80:	6018      	str	r0, [r3, #0]
 800fc82:	1e43      	subs	r3, r0, #1
 800fc84:	9301      	str	r3, [sp, #4]
 800fc86:	e7df      	b.n	800fc48 <_dtoa_r+0xa0>
 800fc88:	ec4b ab10 	vmov	d0, sl, fp
 800fc8c:	aa10      	add	r2, sp, #64	; 0x40
 800fc8e:	a911      	add	r1, sp, #68	; 0x44
 800fc90:	4620      	mov	r0, r4
 800fc92:	f001 f98b 	bl	8010fac <__d2b>
 800fc96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fc9a:	ee08 0a10 	vmov	s16, r0
 800fc9e:	2d00      	cmp	r5, #0
 800fca0:	f000 8084 	beq.w	800fdac <_dtoa_r+0x204>
 800fca4:	ee19 3a90 	vmov	r3, s19
 800fca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fcb0:	4656      	mov	r6, sl
 800fcb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fcb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fcbe:	4b74      	ldr	r3, [pc, #464]	; (800fe90 <_dtoa_r+0x2e8>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	4639      	mov	r1, r7
 800fcc6:	f7f0 fae7 	bl	8000298 <__aeabi_dsub>
 800fcca:	a365      	add	r3, pc, #404	; (adr r3, 800fe60 <_dtoa_r+0x2b8>)
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	f7f0 fc9a 	bl	8000608 <__aeabi_dmul>
 800fcd4:	a364      	add	r3, pc, #400	; (adr r3, 800fe68 <_dtoa_r+0x2c0>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f7f0 fadf 	bl	800029c <__adddf3>
 800fcde:	4606      	mov	r6, r0
 800fce0:	4628      	mov	r0, r5
 800fce2:	460f      	mov	r7, r1
 800fce4:	f7f0 fc26 	bl	8000534 <__aeabi_i2d>
 800fce8:	a361      	add	r3, pc, #388	; (adr r3, 800fe70 <_dtoa_r+0x2c8>)
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	f7f0 fc8b 	bl	8000608 <__aeabi_dmul>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 facf 	bl	800029c <__adddf3>
 800fcfe:	4606      	mov	r6, r0
 800fd00:	460f      	mov	r7, r1
 800fd02:	f7f0 ff31 	bl	8000b68 <__aeabi_d2iz>
 800fd06:	2200      	movs	r2, #0
 800fd08:	9000      	str	r0, [sp, #0]
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	4639      	mov	r1, r7
 800fd10:	f7f0 feec 	bl	8000aec <__aeabi_dcmplt>
 800fd14:	b150      	cbz	r0, 800fd2c <_dtoa_r+0x184>
 800fd16:	9800      	ldr	r0, [sp, #0]
 800fd18:	f7f0 fc0c 	bl	8000534 <__aeabi_i2d>
 800fd1c:	4632      	mov	r2, r6
 800fd1e:	463b      	mov	r3, r7
 800fd20:	f7f0 feda 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd24:	b910      	cbnz	r0, 800fd2c <_dtoa_r+0x184>
 800fd26:	9b00      	ldr	r3, [sp, #0]
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	9b00      	ldr	r3, [sp, #0]
 800fd2e:	2b16      	cmp	r3, #22
 800fd30:	d85a      	bhi.n	800fde8 <_dtoa_r+0x240>
 800fd32:	9a00      	ldr	r2, [sp, #0]
 800fd34:	4b57      	ldr	r3, [pc, #348]	; (800fe94 <_dtoa_r+0x2ec>)
 800fd36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	ec51 0b19 	vmov	r0, r1, d9
 800fd42:	f7f0 fed3 	bl	8000aec <__aeabi_dcmplt>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d050      	beq.n	800fdec <_dtoa_r+0x244>
 800fd4a:	9b00      	ldr	r3, [sp, #0]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	2300      	movs	r3, #0
 800fd52:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd56:	1b5d      	subs	r5, r3, r5
 800fd58:	1e6b      	subs	r3, r5, #1
 800fd5a:	9305      	str	r3, [sp, #20]
 800fd5c:	bf45      	ittet	mi
 800fd5e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd62:	9304      	strmi	r3, [sp, #16]
 800fd64:	2300      	movpl	r3, #0
 800fd66:	2300      	movmi	r3, #0
 800fd68:	bf4c      	ite	mi
 800fd6a:	9305      	strmi	r3, [sp, #20]
 800fd6c:	9304      	strpl	r3, [sp, #16]
 800fd6e:	9b00      	ldr	r3, [sp, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	db3d      	blt.n	800fdf0 <_dtoa_r+0x248>
 800fd74:	9b05      	ldr	r3, [sp, #20]
 800fd76:	9a00      	ldr	r2, [sp, #0]
 800fd78:	920a      	str	r2, [sp, #40]	; 0x28
 800fd7a:	4413      	add	r3, r2
 800fd7c:	9305      	str	r3, [sp, #20]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	9307      	str	r3, [sp, #28]
 800fd82:	9b06      	ldr	r3, [sp, #24]
 800fd84:	2b09      	cmp	r3, #9
 800fd86:	f200 8089 	bhi.w	800fe9c <_dtoa_r+0x2f4>
 800fd8a:	2b05      	cmp	r3, #5
 800fd8c:	bfc4      	itt	gt
 800fd8e:	3b04      	subgt	r3, #4
 800fd90:	9306      	strgt	r3, [sp, #24]
 800fd92:	9b06      	ldr	r3, [sp, #24]
 800fd94:	f1a3 0302 	sub.w	r3, r3, #2
 800fd98:	bfcc      	ite	gt
 800fd9a:	2500      	movgt	r5, #0
 800fd9c:	2501      	movle	r5, #1
 800fd9e:	2b03      	cmp	r3, #3
 800fda0:	f200 8087 	bhi.w	800feb2 <_dtoa_r+0x30a>
 800fda4:	e8df f003 	tbb	[pc, r3]
 800fda8:	59383a2d 	.word	0x59383a2d
 800fdac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fdb0:	441d      	add	r5, r3
 800fdb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fdb6:	2b20      	cmp	r3, #32
 800fdb8:	bfc1      	itttt	gt
 800fdba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fdc2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fdc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fdca:	bfda      	itte	le
 800fdcc:	f1c3 0320 	rsble	r3, r3, #32
 800fdd0:	fa06 f003 	lslle.w	r0, r6, r3
 800fdd4:	4318      	orrgt	r0, r3
 800fdd6:	f7f0 fb9d 	bl	8000514 <__aeabi_ui2d>
 800fdda:	2301      	movs	r3, #1
 800fddc:	4606      	mov	r6, r0
 800fdde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fde2:	3d01      	subs	r5, #1
 800fde4:	930e      	str	r3, [sp, #56]	; 0x38
 800fde6:	e76a      	b.n	800fcbe <_dtoa_r+0x116>
 800fde8:	2301      	movs	r3, #1
 800fdea:	e7b2      	b.n	800fd52 <_dtoa_r+0x1aa>
 800fdec:	900b      	str	r0, [sp, #44]	; 0x2c
 800fdee:	e7b1      	b.n	800fd54 <_dtoa_r+0x1ac>
 800fdf0:	9b04      	ldr	r3, [sp, #16]
 800fdf2:	9a00      	ldr	r2, [sp, #0]
 800fdf4:	1a9b      	subs	r3, r3, r2
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	4253      	negs	r3, r2
 800fdfa:	9307      	str	r3, [sp, #28]
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	930a      	str	r3, [sp, #40]	; 0x28
 800fe00:	e7bf      	b.n	800fd82 <_dtoa_r+0x1da>
 800fe02:	2300      	movs	r3, #0
 800fe04:	9308      	str	r3, [sp, #32]
 800fe06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dc55      	bgt.n	800feb8 <_dtoa_r+0x310>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe12:	461a      	mov	r2, r3
 800fe14:	9209      	str	r2, [sp, #36]	; 0x24
 800fe16:	e00c      	b.n	800fe32 <_dtoa_r+0x28a>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e7f3      	b.n	800fe04 <_dtoa_r+0x25c>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe20:	9308      	str	r3, [sp, #32]
 800fe22:	9b00      	ldr	r3, [sp, #0]
 800fe24:	4413      	add	r3, r2
 800fe26:	9302      	str	r3, [sp, #8]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	9303      	str	r3, [sp, #12]
 800fe2e:	bfb8      	it	lt
 800fe30:	2301      	movlt	r3, #1
 800fe32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe34:	2200      	movs	r2, #0
 800fe36:	6042      	str	r2, [r0, #4]
 800fe38:	2204      	movs	r2, #4
 800fe3a:	f102 0614 	add.w	r6, r2, #20
 800fe3e:	429e      	cmp	r6, r3
 800fe40:	6841      	ldr	r1, [r0, #4]
 800fe42:	d93d      	bls.n	800fec0 <_dtoa_r+0x318>
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 fd89 	bl	801095c <_Balloc>
 800fe4a:	9001      	str	r0, [sp, #4]
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d13b      	bne.n	800fec8 <_dtoa_r+0x320>
 800fe50:	4b11      	ldr	r3, [pc, #68]	; (800fe98 <_dtoa_r+0x2f0>)
 800fe52:	4602      	mov	r2, r0
 800fe54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe58:	e6c0      	b.n	800fbdc <_dtoa_r+0x34>
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e7df      	b.n	800fe1e <_dtoa_r+0x276>
 800fe5e:	bf00      	nop
 800fe60:	636f4361 	.word	0x636f4361
 800fe64:	3fd287a7 	.word	0x3fd287a7
 800fe68:	8b60c8b3 	.word	0x8b60c8b3
 800fe6c:	3fc68a28 	.word	0x3fc68a28
 800fe70:	509f79fb 	.word	0x509f79fb
 800fe74:	3fd34413 	.word	0x3fd34413
 800fe78:	0801254d 	.word	0x0801254d
 800fe7c:	08012564 	.word	0x08012564
 800fe80:	7ff00000 	.word	0x7ff00000
 800fe84:	08012549 	.word	0x08012549
 800fe88:	08012540 	.word	0x08012540
 800fe8c:	0801251d 	.word	0x0801251d
 800fe90:	3ff80000 	.word	0x3ff80000
 800fe94:	08012658 	.word	0x08012658
 800fe98:	080125bf 	.word	0x080125bf
 800fe9c:	2501      	movs	r5, #1
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9306      	str	r3, [sp, #24]
 800fea2:	9508      	str	r5, [sp, #32]
 800fea4:	f04f 33ff 	mov.w	r3, #4294967295
 800fea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800feac:	2200      	movs	r2, #0
 800feae:	2312      	movs	r3, #18
 800feb0:	e7b0      	b.n	800fe14 <_dtoa_r+0x26c>
 800feb2:	2301      	movs	r3, #1
 800feb4:	9308      	str	r3, [sp, #32]
 800feb6:	e7f5      	b.n	800fea4 <_dtoa_r+0x2fc>
 800feb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800febe:	e7b8      	b.n	800fe32 <_dtoa_r+0x28a>
 800fec0:	3101      	adds	r1, #1
 800fec2:	6041      	str	r1, [r0, #4]
 800fec4:	0052      	lsls	r2, r2, #1
 800fec6:	e7b8      	b.n	800fe3a <_dtoa_r+0x292>
 800fec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feca:	9a01      	ldr	r2, [sp, #4]
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	2b0e      	cmp	r3, #14
 800fed2:	f200 809d 	bhi.w	8010010 <_dtoa_r+0x468>
 800fed6:	2d00      	cmp	r5, #0
 800fed8:	f000 809a 	beq.w	8010010 <_dtoa_r+0x468>
 800fedc:	9b00      	ldr	r3, [sp, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dd32      	ble.n	800ff48 <_dtoa_r+0x3a0>
 800fee2:	4ab7      	ldr	r2, [pc, #732]	; (80101c0 <_dtoa_r+0x618>)
 800fee4:	f003 030f 	and.w	r3, r3, #15
 800fee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800feec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fef0:	9b00      	ldr	r3, [sp, #0]
 800fef2:	05d8      	lsls	r0, r3, #23
 800fef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fef8:	d516      	bpl.n	800ff28 <_dtoa_r+0x380>
 800fefa:	4bb2      	ldr	r3, [pc, #712]	; (80101c4 <_dtoa_r+0x61c>)
 800fefc:	ec51 0b19 	vmov	r0, r1, d9
 800ff00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff04:	f7f0 fcaa 	bl	800085c <__aeabi_ddiv>
 800ff08:	f007 070f 	and.w	r7, r7, #15
 800ff0c:	4682      	mov	sl, r0
 800ff0e:	468b      	mov	fp, r1
 800ff10:	2503      	movs	r5, #3
 800ff12:	4eac      	ldr	r6, [pc, #688]	; (80101c4 <_dtoa_r+0x61c>)
 800ff14:	b957      	cbnz	r7, 800ff2c <_dtoa_r+0x384>
 800ff16:	4642      	mov	r2, r8
 800ff18:	464b      	mov	r3, r9
 800ff1a:	4650      	mov	r0, sl
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	f7f0 fc9d 	bl	800085c <__aeabi_ddiv>
 800ff22:	4682      	mov	sl, r0
 800ff24:	468b      	mov	fp, r1
 800ff26:	e028      	b.n	800ff7a <_dtoa_r+0x3d2>
 800ff28:	2502      	movs	r5, #2
 800ff2a:	e7f2      	b.n	800ff12 <_dtoa_r+0x36a>
 800ff2c:	07f9      	lsls	r1, r7, #31
 800ff2e:	d508      	bpl.n	800ff42 <_dtoa_r+0x39a>
 800ff30:	4640      	mov	r0, r8
 800ff32:	4649      	mov	r1, r9
 800ff34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff38:	f7f0 fb66 	bl	8000608 <__aeabi_dmul>
 800ff3c:	3501      	adds	r5, #1
 800ff3e:	4680      	mov	r8, r0
 800ff40:	4689      	mov	r9, r1
 800ff42:	107f      	asrs	r7, r7, #1
 800ff44:	3608      	adds	r6, #8
 800ff46:	e7e5      	b.n	800ff14 <_dtoa_r+0x36c>
 800ff48:	f000 809b 	beq.w	8010082 <_dtoa_r+0x4da>
 800ff4c:	9b00      	ldr	r3, [sp, #0]
 800ff4e:	4f9d      	ldr	r7, [pc, #628]	; (80101c4 <_dtoa_r+0x61c>)
 800ff50:	425e      	negs	r6, r3
 800ff52:	4b9b      	ldr	r3, [pc, #620]	; (80101c0 <_dtoa_r+0x618>)
 800ff54:	f006 020f 	and.w	r2, r6, #15
 800ff58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	ec51 0b19 	vmov	r0, r1, d9
 800ff64:	f7f0 fb50 	bl	8000608 <__aeabi_dmul>
 800ff68:	1136      	asrs	r6, r6, #4
 800ff6a:	4682      	mov	sl, r0
 800ff6c:	468b      	mov	fp, r1
 800ff6e:	2300      	movs	r3, #0
 800ff70:	2502      	movs	r5, #2
 800ff72:	2e00      	cmp	r6, #0
 800ff74:	d17a      	bne.n	801006c <_dtoa_r+0x4c4>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1d3      	bne.n	800ff22 <_dtoa_r+0x37a>
 800ff7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 8082 	beq.w	8010086 <_dtoa_r+0x4de>
 800ff82:	4b91      	ldr	r3, [pc, #580]	; (80101c8 <_dtoa_r+0x620>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	4650      	mov	r0, sl
 800ff88:	4659      	mov	r1, fp
 800ff8a:	f7f0 fdaf 	bl	8000aec <__aeabi_dcmplt>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d079      	beq.n	8010086 <_dtoa_r+0x4de>
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d076      	beq.n	8010086 <_dtoa_r+0x4de>
 800ff98:	9b02      	ldr	r3, [sp, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dd36      	ble.n	801000c <_dtoa_r+0x464>
 800ff9e:	9b00      	ldr	r3, [sp, #0]
 800ffa0:	4650      	mov	r0, sl
 800ffa2:	4659      	mov	r1, fp
 800ffa4:	1e5f      	subs	r7, r3, #1
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4b88      	ldr	r3, [pc, #544]	; (80101cc <_dtoa_r+0x624>)
 800ffaa:	f7f0 fb2d 	bl	8000608 <__aeabi_dmul>
 800ffae:	9e02      	ldr	r6, [sp, #8]
 800ffb0:	4682      	mov	sl, r0
 800ffb2:	468b      	mov	fp, r1
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f7f0 fabc 	bl	8000534 <__aeabi_i2d>
 800ffbc:	4652      	mov	r2, sl
 800ffbe:	465b      	mov	r3, fp
 800ffc0:	f7f0 fb22 	bl	8000608 <__aeabi_dmul>
 800ffc4:	4b82      	ldr	r3, [pc, #520]	; (80101d0 <_dtoa_r+0x628>)
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f7f0 f968 	bl	800029c <__adddf3>
 800ffcc:	46d0      	mov	r8, sl
 800ffce:	46d9      	mov	r9, fp
 800ffd0:	4682      	mov	sl, r0
 800ffd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	d158      	bne.n	801008c <_dtoa_r+0x4e4>
 800ffda:	4b7e      	ldr	r3, [pc, #504]	; (80101d4 <_dtoa_r+0x62c>)
 800ffdc:	2200      	movs	r2, #0
 800ffde:	4640      	mov	r0, r8
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	f7f0 f959 	bl	8000298 <__aeabi_dsub>
 800ffe6:	4652      	mov	r2, sl
 800ffe8:	465b      	mov	r3, fp
 800ffea:	4680      	mov	r8, r0
 800ffec:	4689      	mov	r9, r1
 800ffee:	f7f0 fd9b 	bl	8000b28 <__aeabi_dcmpgt>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	f040 8295 	bne.w	8010522 <_dtoa_r+0x97a>
 800fff8:	4652      	mov	r2, sl
 800fffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fffe:	4640      	mov	r0, r8
 8010000:	4649      	mov	r1, r9
 8010002:	f7f0 fd73 	bl	8000aec <__aeabi_dcmplt>
 8010006:	2800      	cmp	r0, #0
 8010008:	f040 8289 	bne.w	801051e <_dtoa_r+0x976>
 801000c:	ec5b ab19 	vmov	sl, fp, d9
 8010010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010012:	2b00      	cmp	r3, #0
 8010014:	f2c0 8148 	blt.w	80102a8 <_dtoa_r+0x700>
 8010018:	9a00      	ldr	r2, [sp, #0]
 801001a:	2a0e      	cmp	r2, #14
 801001c:	f300 8144 	bgt.w	80102a8 <_dtoa_r+0x700>
 8010020:	4b67      	ldr	r3, [pc, #412]	; (80101c0 <_dtoa_r+0x618>)
 8010022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010026:	e9d3 8900 	ldrd	r8, r9, [r3]
 801002a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002c:	2b00      	cmp	r3, #0
 801002e:	f280 80d5 	bge.w	80101dc <_dtoa_r+0x634>
 8010032:	9b03      	ldr	r3, [sp, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f300 80d1 	bgt.w	80101dc <_dtoa_r+0x634>
 801003a:	f040 826f 	bne.w	801051c <_dtoa_r+0x974>
 801003e:	4b65      	ldr	r3, [pc, #404]	; (80101d4 <_dtoa_r+0x62c>)
 8010040:	2200      	movs	r2, #0
 8010042:	4640      	mov	r0, r8
 8010044:	4649      	mov	r1, r9
 8010046:	f7f0 fadf 	bl	8000608 <__aeabi_dmul>
 801004a:	4652      	mov	r2, sl
 801004c:	465b      	mov	r3, fp
 801004e:	f7f0 fd61 	bl	8000b14 <__aeabi_dcmpge>
 8010052:	9e03      	ldr	r6, [sp, #12]
 8010054:	4637      	mov	r7, r6
 8010056:	2800      	cmp	r0, #0
 8010058:	f040 8245 	bne.w	80104e6 <_dtoa_r+0x93e>
 801005c:	9d01      	ldr	r5, [sp, #4]
 801005e:	2331      	movs	r3, #49	; 0x31
 8010060:	f805 3b01 	strb.w	r3, [r5], #1
 8010064:	9b00      	ldr	r3, [sp, #0]
 8010066:	3301      	adds	r3, #1
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	e240      	b.n	80104ee <_dtoa_r+0x946>
 801006c:	07f2      	lsls	r2, r6, #31
 801006e:	d505      	bpl.n	801007c <_dtoa_r+0x4d4>
 8010070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010074:	f7f0 fac8 	bl	8000608 <__aeabi_dmul>
 8010078:	3501      	adds	r5, #1
 801007a:	2301      	movs	r3, #1
 801007c:	1076      	asrs	r6, r6, #1
 801007e:	3708      	adds	r7, #8
 8010080:	e777      	b.n	800ff72 <_dtoa_r+0x3ca>
 8010082:	2502      	movs	r5, #2
 8010084:	e779      	b.n	800ff7a <_dtoa_r+0x3d2>
 8010086:	9f00      	ldr	r7, [sp, #0]
 8010088:	9e03      	ldr	r6, [sp, #12]
 801008a:	e794      	b.n	800ffb6 <_dtoa_r+0x40e>
 801008c:	9901      	ldr	r1, [sp, #4]
 801008e:	4b4c      	ldr	r3, [pc, #304]	; (80101c0 <_dtoa_r+0x618>)
 8010090:	4431      	add	r1, r6
 8010092:	910d      	str	r1, [sp, #52]	; 0x34
 8010094:	9908      	ldr	r1, [sp, #32]
 8010096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801009a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801009e:	2900      	cmp	r1, #0
 80100a0:	d043      	beq.n	801012a <_dtoa_r+0x582>
 80100a2:	494d      	ldr	r1, [pc, #308]	; (80101d8 <_dtoa_r+0x630>)
 80100a4:	2000      	movs	r0, #0
 80100a6:	f7f0 fbd9 	bl	800085c <__aeabi_ddiv>
 80100aa:	4652      	mov	r2, sl
 80100ac:	465b      	mov	r3, fp
 80100ae:	f7f0 f8f3 	bl	8000298 <__aeabi_dsub>
 80100b2:	9d01      	ldr	r5, [sp, #4]
 80100b4:	4682      	mov	sl, r0
 80100b6:	468b      	mov	fp, r1
 80100b8:	4649      	mov	r1, r9
 80100ba:	4640      	mov	r0, r8
 80100bc:	f7f0 fd54 	bl	8000b68 <__aeabi_d2iz>
 80100c0:	4606      	mov	r6, r0
 80100c2:	f7f0 fa37 	bl	8000534 <__aeabi_i2d>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 f8e3 	bl	8000298 <__aeabi_dsub>
 80100d2:	3630      	adds	r6, #48	; 0x30
 80100d4:	f805 6b01 	strb.w	r6, [r5], #1
 80100d8:	4652      	mov	r2, sl
 80100da:	465b      	mov	r3, fp
 80100dc:	4680      	mov	r8, r0
 80100de:	4689      	mov	r9, r1
 80100e0:	f7f0 fd04 	bl	8000aec <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d163      	bne.n	80101b0 <_dtoa_r+0x608>
 80100e8:	4642      	mov	r2, r8
 80100ea:	464b      	mov	r3, r9
 80100ec:	4936      	ldr	r1, [pc, #216]	; (80101c8 <_dtoa_r+0x620>)
 80100ee:	2000      	movs	r0, #0
 80100f0:	f7f0 f8d2 	bl	8000298 <__aeabi_dsub>
 80100f4:	4652      	mov	r2, sl
 80100f6:	465b      	mov	r3, fp
 80100f8:	f7f0 fcf8 	bl	8000aec <__aeabi_dcmplt>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	f040 80b5 	bne.w	801026c <_dtoa_r+0x6c4>
 8010102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010104:	429d      	cmp	r5, r3
 8010106:	d081      	beq.n	801000c <_dtoa_r+0x464>
 8010108:	4b30      	ldr	r3, [pc, #192]	; (80101cc <_dtoa_r+0x624>)
 801010a:	2200      	movs	r2, #0
 801010c:	4650      	mov	r0, sl
 801010e:	4659      	mov	r1, fp
 8010110:	f7f0 fa7a 	bl	8000608 <__aeabi_dmul>
 8010114:	4b2d      	ldr	r3, [pc, #180]	; (80101cc <_dtoa_r+0x624>)
 8010116:	4682      	mov	sl, r0
 8010118:	468b      	mov	fp, r1
 801011a:	4640      	mov	r0, r8
 801011c:	4649      	mov	r1, r9
 801011e:	2200      	movs	r2, #0
 8010120:	f7f0 fa72 	bl	8000608 <__aeabi_dmul>
 8010124:	4680      	mov	r8, r0
 8010126:	4689      	mov	r9, r1
 8010128:	e7c6      	b.n	80100b8 <_dtoa_r+0x510>
 801012a:	4650      	mov	r0, sl
 801012c:	4659      	mov	r1, fp
 801012e:	f7f0 fa6b 	bl	8000608 <__aeabi_dmul>
 8010132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010134:	9d01      	ldr	r5, [sp, #4]
 8010136:	930f      	str	r3, [sp, #60]	; 0x3c
 8010138:	4682      	mov	sl, r0
 801013a:	468b      	mov	fp, r1
 801013c:	4649      	mov	r1, r9
 801013e:	4640      	mov	r0, r8
 8010140:	f7f0 fd12 	bl	8000b68 <__aeabi_d2iz>
 8010144:	4606      	mov	r6, r0
 8010146:	f7f0 f9f5 	bl	8000534 <__aeabi_i2d>
 801014a:	3630      	adds	r6, #48	; 0x30
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	4640      	mov	r0, r8
 8010152:	4649      	mov	r1, r9
 8010154:	f7f0 f8a0 	bl	8000298 <__aeabi_dsub>
 8010158:	f805 6b01 	strb.w	r6, [r5], #1
 801015c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801015e:	429d      	cmp	r5, r3
 8010160:	4680      	mov	r8, r0
 8010162:	4689      	mov	r9, r1
 8010164:	f04f 0200 	mov.w	r2, #0
 8010168:	d124      	bne.n	80101b4 <_dtoa_r+0x60c>
 801016a:	4b1b      	ldr	r3, [pc, #108]	; (80101d8 <_dtoa_r+0x630>)
 801016c:	4650      	mov	r0, sl
 801016e:	4659      	mov	r1, fp
 8010170:	f7f0 f894 	bl	800029c <__adddf3>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4640      	mov	r0, r8
 801017a:	4649      	mov	r1, r9
 801017c:	f7f0 fcd4 	bl	8000b28 <__aeabi_dcmpgt>
 8010180:	2800      	cmp	r0, #0
 8010182:	d173      	bne.n	801026c <_dtoa_r+0x6c4>
 8010184:	4652      	mov	r2, sl
 8010186:	465b      	mov	r3, fp
 8010188:	4913      	ldr	r1, [pc, #76]	; (80101d8 <_dtoa_r+0x630>)
 801018a:	2000      	movs	r0, #0
 801018c:	f7f0 f884 	bl	8000298 <__aeabi_dsub>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4640      	mov	r0, r8
 8010196:	4649      	mov	r1, r9
 8010198:	f7f0 fca8 	bl	8000aec <__aeabi_dcmplt>
 801019c:	2800      	cmp	r0, #0
 801019e:	f43f af35 	beq.w	801000c <_dtoa_r+0x464>
 80101a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80101a4:	1e6b      	subs	r3, r5, #1
 80101a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101ac:	2b30      	cmp	r3, #48	; 0x30
 80101ae:	d0f8      	beq.n	80101a2 <_dtoa_r+0x5fa>
 80101b0:	9700      	str	r7, [sp, #0]
 80101b2:	e049      	b.n	8010248 <_dtoa_r+0x6a0>
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <_dtoa_r+0x624>)
 80101b6:	f7f0 fa27 	bl	8000608 <__aeabi_dmul>
 80101ba:	4680      	mov	r8, r0
 80101bc:	4689      	mov	r9, r1
 80101be:	e7bd      	b.n	801013c <_dtoa_r+0x594>
 80101c0:	08012658 	.word	0x08012658
 80101c4:	08012630 	.word	0x08012630
 80101c8:	3ff00000 	.word	0x3ff00000
 80101cc:	40240000 	.word	0x40240000
 80101d0:	401c0000 	.word	0x401c0000
 80101d4:	40140000 	.word	0x40140000
 80101d8:	3fe00000 	.word	0x3fe00000
 80101dc:	9d01      	ldr	r5, [sp, #4]
 80101de:	4656      	mov	r6, sl
 80101e0:	465f      	mov	r7, fp
 80101e2:	4642      	mov	r2, r8
 80101e4:	464b      	mov	r3, r9
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7f0 fb37 	bl	800085c <__aeabi_ddiv>
 80101ee:	f7f0 fcbb 	bl	8000b68 <__aeabi_d2iz>
 80101f2:	4682      	mov	sl, r0
 80101f4:	f7f0 f99e 	bl	8000534 <__aeabi_i2d>
 80101f8:	4642      	mov	r2, r8
 80101fa:	464b      	mov	r3, r9
 80101fc:	f7f0 fa04 	bl	8000608 <__aeabi_dmul>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4630      	mov	r0, r6
 8010206:	4639      	mov	r1, r7
 8010208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801020c:	f7f0 f844 	bl	8000298 <__aeabi_dsub>
 8010210:	f805 6b01 	strb.w	r6, [r5], #1
 8010214:	9e01      	ldr	r6, [sp, #4]
 8010216:	9f03      	ldr	r7, [sp, #12]
 8010218:	1bae      	subs	r6, r5, r6
 801021a:	42b7      	cmp	r7, r6
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	d135      	bne.n	801028e <_dtoa_r+0x6e6>
 8010222:	f7f0 f83b 	bl	800029c <__adddf3>
 8010226:	4642      	mov	r2, r8
 8010228:	464b      	mov	r3, r9
 801022a:	4606      	mov	r6, r0
 801022c:	460f      	mov	r7, r1
 801022e:	f7f0 fc7b 	bl	8000b28 <__aeabi_dcmpgt>
 8010232:	b9d0      	cbnz	r0, 801026a <_dtoa_r+0x6c2>
 8010234:	4642      	mov	r2, r8
 8010236:	464b      	mov	r3, r9
 8010238:	4630      	mov	r0, r6
 801023a:	4639      	mov	r1, r7
 801023c:	f7f0 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010240:	b110      	cbz	r0, 8010248 <_dtoa_r+0x6a0>
 8010242:	f01a 0f01 	tst.w	sl, #1
 8010246:	d110      	bne.n	801026a <_dtoa_r+0x6c2>
 8010248:	4620      	mov	r0, r4
 801024a:	ee18 1a10 	vmov	r1, s16
 801024e:	f000 fbc5 	bl	80109dc <_Bfree>
 8010252:	2300      	movs	r3, #0
 8010254:	9800      	ldr	r0, [sp, #0]
 8010256:	702b      	strb	r3, [r5, #0]
 8010258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801025a:	3001      	adds	r0, #1
 801025c:	6018      	str	r0, [r3, #0]
 801025e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010260:	2b00      	cmp	r3, #0
 8010262:	f43f acf1 	beq.w	800fc48 <_dtoa_r+0xa0>
 8010266:	601d      	str	r5, [r3, #0]
 8010268:	e4ee      	b.n	800fc48 <_dtoa_r+0xa0>
 801026a:	9f00      	ldr	r7, [sp, #0]
 801026c:	462b      	mov	r3, r5
 801026e:	461d      	mov	r5, r3
 8010270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010274:	2a39      	cmp	r2, #57	; 0x39
 8010276:	d106      	bne.n	8010286 <_dtoa_r+0x6de>
 8010278:	9a01      	ldr	r2, [sp, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d1f7      	bne.n	801026e <_dtoa_r+0x6c6>
 801027e:	9901      	ldr	r1, [sp, #4]
 8010280:	2230      	movs	r2, #48	; 0x30
 8010282:	3701      	adds	r7, #1
 8010284:	700a      	strb	r2, [r1, #0]
 8010286:	781a      	ldrb	r2, [r3, #0]
 8010288:	3201      	adds	r2, #1
 801028a:	701a      	strb	r2, [r3, #0]
 801028c:	e790      	b.n	80101b0 <_dtoa_r+0x608>
 801028e:	4ba6      	ldr	r3, [pc, #664]	; (8010528 <_dtoa_r+0x980>)
 8010290:	2200      	movs	r2, #0
 8010292:	f7f0 f9b9 	bl	8000608 <__aeabi_dmul>
 8010296:	2200      	movs	r2, #0
 8010298:	2300      	movs	r3, #0
 801029a:	4606      	mov	r6, r0
 801029c:	460f      	mov	r7, r1
 801029e:	f7f0 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d09d      	beq.n	80101e2 <_dtoa_r+0x63a>
 80102a6:	e7cf      	b.n	8010248 <_dtoa_r+0x6a0>
 80102a8:	9a08      	ldr	r2, [sp, #32]
 80102aa:	2a00      	cmp	r2, #0
 80102ac:	f000 80d7 	beq.w	801045e <_dtoa_r+0x8b6>
 80102b0:	9a06      	ldr	r2, [sp, #24]
 80102b2:	2a01      	cmp	r2, #1
 80102b4:	f300 80ba 	bgt.w	801042c <_dtoa_r+0x884>
 80102b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102ba:	2a00      	cmp	r2, #0
 80102bc:	f000 80b2 	beq.w	8010424 <_dtoa_r+0x87c>
 80102c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102c4:	9e07      	ldr	r6, [sp, #28]
 80102c6:	9d04      	ldr	r5, [sp, #16]
 80102c8:	9a04      	ldr	r2, [sp, #16]
 80102ca:	441a      	add	r2, r3
 80102cc:	9204      	str	r2, [sp, #16]
 80102ce:	9a05      	ldr	r2, [sp, #20]
 80102d0:	2101      	movs	r1, #1
 80102d2:	441a      	add	r2, r3
 80102d4:	4620      	mov	r0, r4
 80102d6:	9205      	str	r2, [sp, #20]
 80102d8:	f000 fc38 	bl	8010b4c <__i2b>
 80102dc:	4607      	mov	r7, r0
 80102de:	2d00      	cmp	r5, #0
 80102e0:	dd0c      	ble.n	80102fc <_dtoa_r+0x754>
 80102e2:	9b05      	ldr	r3, [sp, #20]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	dd09      	ble.n	80102fc <_dtoa_r+0x754>
 80102e8:	42ab      	cmp	r3, r5
 80102ea:	9a04      	ldr	r2, [sp, #16]
 80102ec:	bfa8      	it	ge
 80102ee:	462b      	movge	r3, r5
 80102f0:	1ad2      	subs	r2, r2, r3
 80102f2:	9204      	str	r2, [sp, #16]
 80102f4:	9a05      	ldr	r2, [sp, #20]
 80102f6:	1aed      	subs	r5, r5, r3
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	9305      	str	r3, [sp, #20]
 80102fc:	9b07      	ldr	r3, [sp, #28]
 80102fe:	b31b      	cbz	r3, 8010348 <_dtoa_r+0x7a0>
 8010300:	9b08      	ldr	r3, [sp, #32]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80af 	beq.w	8010466 <_dtoa_r+0x8be>
 8010308:	2e00      	cmp	r6, #0
 801030a:	dd13      	ble.n	8010334 <_dtoa_r+0x78c>
 801030c:	4639      	mov	r1, r7
 801030e:	4632      	mov	r2, r6
 8010310:	4620      	mov	r0, r4
 8010312:	f000 fcdb 	bl	8010ccc <__pow5mult>
 8010316:	ee18 2a10 	vmov	r2, s16
 801031a:	4601      	mov	r1, r0
 801031c:	4607      	mov	r7, r0
 801031e:	4620      	mov	r0, r4
 8010320:	f000 fc2a 	bl	8010b78 <__multiply>
 8010324:	ee18 1a10 	vmov	r1, s16
 8010328:	4680      	mov	r8, r0
 801032a:	4620      	mov	r0, r4
 801032c:	f000 fb56 	bl	80109dc <_Bfree>
 8010330:	ee08 8a10 	vmov	s16, r8
 8010334:	9b07      	ldr	r3, [sp, #28]
 8010336:	1b9a      	subs	r2, r3, r6
 8010338:	d006      	beq.n	8010348 <_dtoa_r+0x7a0>
 801033a:	ee18 1a10 	vmov	r1, s16
 801033e:	4620      	mov	r0, r4
 8010340:	f000 fcc4 	bl	8010ccc <__pow5mult>
 8010344:	ee08 0a10 	vmov	s16, r0
 8010348:	2101      	movs	r1, #1
 801034a:	4620      	mov	r0, r4
 801034c:	f000 fbfe 	bl	8010b4c <__i2b>
 8010350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010352:	2b00      	cmp	r3, #0
 8010354:	4606      	mov	r6, r0
 8010356:	f340 8088 	ble.w	801046a <_dtoa_r+0x8c2>
 801035a:	461a      	mov	r2, r3
 801035c:	4601      	mov	r1, r0
 801035e:	4620      	mov	r0, r4
 8010360:	f000 fcb4 	bl	8010ccc <__pow5mult>
 8010364:	9b06      	ldr	r3, [sp, #24]
 8010366:	2b01      	cmp	r3, #1
 8010368:	4606      	mov	r6, r0
 801036a:	f340 8081 	ble.w	8010470 <_dtoa_r+0x8c8>
 801036e:	f04f 0800 	mov.w	r8, #0
 8010372:	6933      	ldr	r3, [r6, #16]
 8010374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010378:	6918      	ldr	r0, [r3, #16]
 801037a:	f000 fb97 	bl	8010aac <__hi0bits>
 801037e:	f1c0 0020 	rsb	r0, r0, #32
 8010382:	9b05      	ldr	r3, [sp, #20]
 8010384:	4418      	add	r0, r3
 8010386:	f010 001f 	ands.w	r0, r0, #31
 801038a:	f000 8092 	beq.w	80104b2 <_dtoa_r+0x90a>
 801038e:	f1c0 0320 	rsb	r3, r0, #32
 8010392:	2b04      	cmp	r3, #4
 8010394:	f340 808a 	ble.w	80104ac <_dtoa_r+0x904>
 8010398:	f1c0 001c 	rsb	r0, r0, #28
 801039c:	9b04      	ldr	r3, [sp, #16]
 801039e:	4403      	add	r3, r0
 80103a0:	9304      	str	r3, [sp, #16]
 80103a2:	9b05      	ldr	r3, [sp, #20]
 80103a4:	4403      	add	r3, r0
 80103a6:	4405      	add	r5, r0
 80103a8:	9305      	str	r3, [sp, #20]
 80103aa:	9b04      	ldr	r3, [sp, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dd07      	ble.n	80103c0 <_dtoa_r+0x818>
 80103b0:	ee18 1a10 	vmov	r1, s16
 80103b4:	461a      	mov	r2, r3
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 fce2 	bl	8010d80 <__lshift>
 80103bc:	ee08 0a10 	vmov	s16, r0
 80103c0:	9b05      	ldr	r3, [sp, #20]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	dd05      	ble.n	80103d2 <_dtoa_r+0x82a>
 80103c6:	4631      	mov	r1, r6
 80103c8:	461a      	mov	r2, r3
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 fcd8 	bl	8010d80 <__lshift>
 80103d0:	4606      	mov	r6, r0
 80103d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d06e      	beq.n	80104b6 <_dtoa_r+0x90e>
 80103d8:	ee18 0a10 	vmov	r0, s16
 80103dc:	4631      	mov	r1, r6
 80103de:	f000 fd3f 	bl	8010e60 <__mcmp>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	da67      	bge.n	80104b6 <_dtoa_r+0x90e>
 80103e6:	9b00      	ldr	r3, [sp, #0]
 80103e8:	3b01      	subs	r3, #1
 80103ea:	ee18 1a10 	vmov	r1, s16
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	220a      	movs	r2, #10
 80103f2:	2300      	movs	r3, #0
 80103f4:	4620      	mov	r0, r4
 80103f6:	f000 fb13 	bl	8010a20 <__multadd>
 80103fa:	9b08      	ldr	r3, [sp, #32]
 80103fc:	ee08 0a10 	vmov	s16, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 81b1 	beq.w	8010768 <_dtoa_r+0xbc0>
 8010406:	2300      	movs	r3, #0
 8010408:	4639      	mov	r1, r7
 801040a:	220a      	movs	r2, #10
 801040c:	4620      	mov	r0, r4
 801040e:	f000 fb07 	bl	8010a20 <__multadd>
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	4607      	mov	r7, r0
 8010418:	f300 808e 	bgt.w	8010538 <_dtoa_r+0x990>
 801041c:	9b06      	ldr	r3, [sp, #24]
 801041e:	2b02      	cmp	r3, #2
 8010420:	dc51      	bgt.n	80104c6 <_dtoa_r+0x91e>
 8010422:	e089      	b.n	8010538 <_dtoa_r+0x990>
 8010424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801042a:	e74b      	b.n	80102c4 <_dtoa_r+0x71c>
 801042c:	9b03      	ldr	r3, [sp, #12]
 801042e:	1e5e      	subs	r6, r3, #1
 8010430:	9b07      	ldr	r3, [sp, #28]
 8010432:	42b3      	cmp	r3, r6
 8010434:	bfbf      	itttt	lt
 8010436:	9b07      	ldrlt	r3, [sp, #28]
 8010438:	9607      	strlt	r6, [sp, #28]
 801043a:	1af2      	sublt	r2, r6, r3
 801043c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801043e:	bfb6      	itet	lt
 8010440:	189b      	addlt	r3, r3, r2
 8010442:	1b9e      	subge	r6, r3, r6
 8010444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	bfb8      	it	lt
 801044a:	2600      	movlt	r6, #0
 801044c:	2b00      	cmp	r3, #0
 801044e:	bfb7      	itett	lt
 8010450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010458:	1a9d      	sublt	r5, r3, r2
 801045a:	2300      	movlt	r3, #0
 801045c:	e734      	b.n	80102c8 <_dtoa_r+0x720>
 801045e:	9e07      	ldr	r6, [sp, #28]
 8010460:	9d04      	ldr	r5, [sp, #16]
 8010462:	9f08      	ldr	r7, [sp, #32]
 8010464:	e73b      	b.n	80102de <_dtoa_r+0x736>
 8010466:	9a07      	ldr	r2, [sp, #28]
 8010468:	e767      	b.n	801033a <_dtoa_r+0x792>
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	2b01      	cmp	r3, #1
 801046e:	dc18      	bgt.n	80104a2 <_dtoa_r+0x8fa>
 8010470:	f1ba 0f00 	cmp.w	sl, #0
 8010474:	d115      	bne.n	80104a2 <_dtoa_r+0x8fa>
 8010476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801047a:	b993      	cbnz	r3, 80104a2 <_dtoa_r+0x8fa>
 801047c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010480:	0d1b      	lsrs	r3, r3, #20
 8010482:	051b      	lsls	r3, r3, #20
 8010484:	b183      	cbz	r3, 80104a8 <_dtoa_r+0x900>
 8010486:	9b04      	ldr	r3, [sp, #16]
 8010488:	3301      	adds	r3, #1
 801048a:	9304      	str	r3, [sp, #16]
 801048c:	9b05      	ldr	r3, [sp, #20]
 801048e:	3301      	adds	r3, #1
 8010490:	9305      	str	r3, [sp, #20]
 8010492:	f04f 0801 	mov.w	r8, #1
 8010496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010498:	2b00      	cmp	r3, #0
 801049a:	f47f af6a 	bne.w	8010372 <_dtoa_r+0x7ca>
 801049e:	2001      	movs	r0, #1
 80104a0:	e76f      	b.n	8010382 <_dtoa_r+0x7da>
 80104a2:	f04f 0800 	mov.w	r8, #0
 80104a6:	e7f6      	b.n	8010496 <_dtoa_r+0x8ee>
 80104a8:	4698      	mov	r8, r3
 80104aa:	e7f4      	b.n	8010496 <_dtoa_r+0x8ee>
 80104ac:	f43f af7d 	beq.w	80103aa <_dtoa_r+0x802>
 80104b0:	4618      	mov	r0, r3
 80104b2:	301c      	adds	r0, #28
 80104b4:	e772      	b.n	801039c <_dtoa_r+0x7f4>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	dc37      	bgt.n	801052c <_dtoa_r+0x984>
 80104bc:	9b06      	ldr	r3, [sp, #24]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	dd34      	ble.n	801052c <_dtoa_r+0x984>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	9302      	str	r3, [sp, #8]
 80104c6:	9b02      	ldr	r3, [sp, #8]
 80104c8:	b96b      	cbnz	r3, 80104e6 <_dtoa_r+0x93e>
 80104ca:	4631      	mov	r1, r6
 80104cc:	2205      	movs	r2, #5
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 faa6 	bl	8010a20 <__multadd>
 80104d4:	4601      	mov	r1, r0
 80104d6:	4606      	mov	r6, r0
 80104d8:	ee18 0a10 	vmov	r0, s16
 80104dc:	f000 fcc0 	bl	8010e60 <__mcmp>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	f73f adbb 	bgt.w	801005c <_dtoa_r+0x4b4>
 80104e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e8:	9d01      	ldr	r5, [sp, #4]
 80104ea:	43db      	mvns	r3, r3
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	f04f 0800 	mov.w	r8, #0
 80104f2:	4631      	mov	r1, r6
 80104f4:	4620      	mov	r0, r4
 80104f6:	f000 fa71 	bl	80109dc <_Bfree>
 80104fa:	2f00      	cmp	r7, #0
 80104fc:	f43f aea4 	beq.w	8010248 <_dtoa_r+0x6a0>
 8010500:	f1b8 0f00 	cmp.w	r8, #0
 8010504:	d005      	beq.n	8010512 <_dtoa_r+0x96a>
 8010506:	45b8      	cmp	r8, r7
 8010508:	d003      	beq.n	8010512 <_dtoa_r+0x96a>
 801050a:	4641      	mov	r1, r8
 801050c:	4620      	mov	r0, r4
 801050e:	f000 fa65 	bl	80109dc <_Bfree>
 8010512:	4639      	mov	r1, r7
 8010514:	4620      	mov	r0, r4
 8010516:	f000 fa61 	bl	80109dc <_Bfree>
 801051a:	e695      	b.n	8010248 <_dtoa_r+0x6a0>
 801051c:	2600      	movs	r6, #0
 801051e:	4637      	mov	r7, r6
 8010520:	e7e1      	b.n	80104e6 <_dtoa_r+0x93e>
 8010522:	9700      	str	r7, [sp, #0]
 8010524:	4637      	mov	r7, r6
 8010526:	e599      	b.n	801005c <_dtoa_r+0x4b4>
 8010528:	40240000 	.word	0x40240000
 801052c:	9b08      	ldr	r3, [sp, #32]
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 80ca 	beq.w	80106c8 <_dtoa_r+0xb20>
 8010534:	9b03      	ldr	r3, [sp, #12]
 8010536:	9302      	str	r3, [sp, #8]
 8010538:	2d00      	cmp	r5, #0
 801053a:	dd05      	ble.n	8010548 <_dtoa_r+0x9a0>
 801053c:	4639      	mov	r1, r7
 801053e:	462a      	mov	r2, r5
 8010540:	4620      	mov	r0, r4
 8010542:	f000 fc1d 	bl	8010d80 <__lshift>
 8010546:	4607      	mov	r7, r0
 8010548:	f1b8 0f00 	cmp.w	r8, #0
 801054c:	d05b      	beq.n	8010606 <_dtoa_r+0xa5e>
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fa03 	bl	801095c <_Balloc>
 8010556:	4605      	mov	r5, r0
 8010558:	b928      	cbnz	r0, 8010566 <_dtoa_r+0x9be>
 801055a:	4b87      	ldr	r3, [pc, #540]	; (8010778 <_dtoa_r+0xbd0>)
 801055c:	4602      	mov	r2, r0
 801055e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010562:	f7ff bb3b 	b.w	800fbdc <_dtoa_r+0x34>
 8010566:	693a      	ldr	r2, [r7, #16]
 8010568:	3202      	adds	r2, #2
 801056a:	0092      	lsls	r2, r2, #2
 801056c:	f107 010c 	add.w	r1, r7, #12
 8010570:	300c      	adds	r0, #12
 8010572:	f7fe fc76 	bl	800ee62 <memcpy>
 8010576:	2201      	movs	r2, #1
 8010578:	4629      	mov	r1, r5
 801057a:	4620      	mov	r0, r4
 801057c:	f000 fc00 	bl	8010d80 <__lshift>
 8010580:	9b01      	ldr	r3, [sp, #4]
 8010582:	f103 0901 	add.w	r9, r3, #1
 8010586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801058a:	4413      	add	r3, r2
 801058c:	9305      	str	r3, [sp, #20]
 801058e:	f00a 0301 	and.w	r3, sl, #1
 8010592:	46b8      	mov	r8, r7
 8010594:	9304      	str	r3, [sp, #16]
 8010596:	4607      	mov	r7, r0
 8010598:	4631      	mov	r1, r6
 801059a:	ee18 0a10 	vmov	r0, s16
 801059e:	f7ff fa75 	bl	800fa8c <quorem>
 80105a2:	4641      	mov	r1, r8
 80105a4:	9002      	str	r0, [sp, #8]
 80105a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80105aa:	ee18 0a10 	vmov	r0, s16
 80105ae:	f000 fc57 	bl	8010e60 <__mcmp>
 80105b2:	463a      	mov	r2, r7
 80105b4:	9003      	str	r0, [sp, #12]
 80105b6:	4631      	mov	r1, r6
 80105b8:	4620      	mov	r0, r4
 80105ba:	f000 fc6d 	bl	8010e98 <__mdiff>
 80105be:	68c2      	ldr	r2, [r0, #12]
 80105c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80105c4:	4605      	mov	r5, r0
 80105c6:	bb02      	cbnz	r2, 801060a <_dtoa_r+0xa62>
 80105c8:	4601      	mov	r1, r0
 80105ca:	ee18 0a10 	vmov	r0, s16
 80105ce:	f000 fc47 	bl	8010e60 <__mcmp>
 80105d2:	4602      	mov	r2, r0
 80105d4:	4629      	mov	r1, r5
 80105d6:	4620      	mov	r0, r4
 80105d8:	9207      	str	r2, [sp, #28]
 80105da:	f000 f9ff 	bl	80109dc <_Bfree>
 80105de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80105e2:	ea43 0102 	orr.w	r1, r3, r2
 80105e6:	9b04      	ldr	r3, [sp, #16]
 80105e8:	430b      	orrs	r3, r1
 80105ea:	464d      	mov	r5, r9
 80105ec:	d10f      	bne.n	801060e <_dtoa_r+0xa66>
 80105ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80105f2:	d02a      	beq.n	801064a <_dtoa_r+0xaa2>
 80105f4:	9b03      	ldr	r3, [sp, #12]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dd02      	ble.n	8010600 <_dtoa_r+0xa58>
 80105fa:	9b02      	ldr	r3, [sp, #8]
 80105fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010600:	f88b a000 	strb.w	sl, [fp]
 8010604:	e775      	b.n	80104f2 <_dtoa_r+0x94a>
 8010606:	4638      	mov	r0, r7
 8010608:	e7ba      	b.n	8010580 <_dtoa_r+0x9d8>
 801060a:	2201      	movs	r2, #1
 801060c:	e7e2      	b.n	80105d4 <_dtoa_r+0xa2c>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	db04      	blt.n	801061e <_dtoa_r+0xa76>
 8010614:	9906      	ldr	r1, [sp, #24]
 8010616:	430b      	orrs	r3, r1
 8010618:	9904      	ldr	r1, [sp, #16]
 801061a:	430b      	orrs	r3, r1
 801061c:	d122      	bne.n	8010664 <_dtoa_r+0xabc>
 801061e:	2a00      	cmp	r2, #0
 8010620:	ddee      	ble.n	8010600 <_dtoa_r+0xa58>
 8010622:	ee18 1a10 	vmov	r1, s16
 8010626:	2201      	movs	r2, #1
 8010628:	4620      	mov	r0, r4
 801062a:	f000 fba9 	bl	8010d80 <__lshift>
 801062e:	4631      	mov	r1, r6
 8010630:	ee08 0a10 	vmov	s16, r0
 8010634:	f000 fc14 	bl	8010e60 <__mcmp>
 8010638:	2800      	cmp	r0, #0
 801063a:	dc03      	bgt.n	8010644 <_dtoa_r+0xa9c>
 801063c:	d1e0      	bne.n	8010600 <_dtoa_r+0xa58>
 801063e:	f01a 0f01 	tst.w	sl, #1
 8010642:	d0dd      	beq.n	8010600 <_dtoa_r+0xa58>
 8010644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010648:	d1d7      	bne.n	80105fa <_dtoa_r+0xa52>
 801064a:	2339      	movs	r3, #57	; 0x39
 801064c:	f88b 3000 	strb.w	r3, [fp]
 8010650:	462b      	mov	r3, r5
 8010652:	461d      	mov	r5, r3
 8010654:	3b01      	subs	r3, #1
 8010656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801065a:	2a39      	cmp	r2, #57	; 0x39
 801065c:	d071      	beq.n	8010742 <_dtoa_r+0xb9a>
 801065e:	3201      	adds	r2, #1
 8010660:	701a      	strb	r2, [r3, #0]
 8010662:	e746      	b.n	80104f2 <_dtoa_r+0x94a>
 8010664:	2a00      	cmp	r2, #0
 8010666:	dd07      	ble.n	8010678 <_dtoa_r+0xad0>
 8010668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801066c:	d0ed      	beq.n	801064a <_dtoa_r+0xaa2>
 801066e:	f10a 0301 	add.w	r3, sl, #1
 8010672:	f88b 3000 	strb.w	r3, [fp]
 8010676:	e73c      	b.n	80104f2 <_dtoa_r+0x94a>
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801067e:	4599      	cmp	r9, r3
 8010680:	d047      	beq.n	8010712 <_dtoa_r+0xb6a>
 8010682:	ee18 1a10 	vmov	r1, s16
 8010686:	2300      	movs	r3, #0
 8010688:	220a      	movs	r2, #10
 801068a:	4620      	mov	r0, r4
 801068c:	f000 f9c8 	bl	8010a20 <__multadd>
 8010690:	45b8      	cmp	r8, r7
 8010692:	ee08 0a10 	vmov	s16, r0
 8010696:	f04f 0300 	mov.w	r3, #0
 801069a:	f04f 020a 	mov.w	r2, #10
 801069e:	4641      	mov	r1, r8
 80106a0:	4620      	mov	r0, r4
 80106a2:	d106      	bne.n	80106b2 <_dtoa_r+0xb0a>
 80106a4:	f000 f9bc 	bl	8010a20 <__multadd>
 80106a8:	4680      	mov	r8, r0
 80106aa:	4607      	mov	r7, r0
 80106ac:	f109 0901 	add.w	r9, r9, #1
 80106b0:	e772      	b.n	8010598 <_dtoa_r+0x9f0>
 80106b2:	f000 f9b5 	bl	8010a20 <__multadd>
 80106b6:	4639      	mov	r1, r7
 80106b8:	4680      	mov	r8, r0
 80106ba:	2300      	movs	r3, #0
 80106bc:	220a      	movs	r2, #10
 80106be:	4620      	mov	r0, r4
 80106c0:	f000 f9ae 	bl	8010a20 <__multadd>
 80106c4:	4607      	mov	r7, r0
 80106c6:	e7f1      	b.n	80106ac <_dtoa_r+0xb04>
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	9302      	str	r3, [sp, #8]
 80106cc:	9d01      	ldr	r5, [sp, #4]
 80106ce:	ee18 0a10 	vmov	r0, s16
 80106d2:	4631      	mov	r1, r6
 80106d4:	f7ff f9da 	bl	800fa8c <quorem>
 80106d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106dc:	9b01      	ldr	r3, [sp, #4]
 80106de:	f805 ab01 	strb.w	sl, [r5], #1
 80106e2:	1aea      	subs	r2, r5, r3
 80106e4:	9b02      	ldr	r3, [sp, #8]
 80106e6:	4293      	cmp	r3, r2
 80106e8:	dd09      	ble.n	80106fe <_dtoa_r+0xb56>
 80106ea:	ee18 1a10 	vmov	r1, s16
 80106ee:	2300      	movs	r3, #0
 80106f0:	220a      	movs	r2, #10
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 f994 	bl	8010a20 <__multadd>
 80106f8:	ee08 0a10 	vmov	s16, r0
 80106fc:	e7e7      	b.n	80106ce <_dtoa_r+0xb26>
 80106fe:	9b02      	ldr	r3, [sp, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	bfc8      	it	gt
 8010704:	461d      	movgt	r5, r3
 8010706:	9b01      	ldr	r3, [sp, #4]
 8010708:	bfd8      	it	le
 801070a:	2501      	movle	r5, #1
 801070c:	441d      	add	r5, r3
 801070e:	f04f 0800 	mov.w	r8, #0
 8010712:	ee18 1a10 	vmov	r1, s16
 8010716:	2201      	movs	r2, #1
 8010718:	4620      	mov	r0, r4
 801071a:	f000 fb31 	bl	8010d80 <__lshift>
 801071e:	4631      	mov	r1, r6
 8010720:	ee08 0a10 	vmov	s16, r0
 8010724:	f000 fb9c 	bl	8010e60 <__mcmp>
 8010728:	2800      	cmp	r0, #0
 801072a:	dc91      	bgt.n	8010650 <_dtoa_r+0xaa8>
 801072c:	d102      	bne.n	8010734 <_dtoa_r+0xb8c>
 801072e:	f01a 0f01 	tst.w	sl, #1
 8010732:	d18d      	bne.n	8010650 <_dtoa_r+0xaa8>
 8010734:	462b      	mov	r3, r5
 8010736:	461d      	mov	r5, r3
 8010738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801073c:	2a30      	cmp	r2, #48	; 0x30
 801073e:	d0fa      	beq.n	8010736 <_dtoa_r+0xb8e>
 8010740:	e6d7      	b.n	80104f2 <_dtoa_r+0x94a>
 8010742:	9a01      	ldr	r2, [sp, #4]
 8010744:	429a      	cmp	r2, r3
 8010746:	d184      	bne.n	8010652 <_dtoa_r+0xaaa>
 8010748:	9b00      	ldr	r3, [sp, #0]
 801074a:	3301      	adds	r3, #1
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	2331      	movs	r3, #49	; 0x31
 8010750:	7013      	strb	r3, [r2, #0]
 8010752:	e6ce      	b.n	80104f2 <_dtoa_r+0x94a>
 8010754:	4b09      	ldr	r3, [pc, #36]	; (801077c <_dtoa_r+0xbd4>)
 8010756:	f7ff ba95 	b.w	800fc84 <_dtoa_r+0xdc>
 801075a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801075c:	2b00      	cmp	r3, #0
 801075e:	f47f aa6e 	bne.w	800fc3e <_dtoa_r+0x96>
 8010762:	4b07      	ldr	r3, [pc, #28]	; (8010780 <_dtoa_r+0xbd8>)
 8010764:	f7ff ba8e 	b.w	800fc84 <_dtoa_r+0xdc>
 8010768:	9b02      	ldr	r3, [sp, #8]
 801076a:	2b00      	cmp	r3, #0
 801076c:	dcae      	bgt.n	80106cc <_dtoa_r+0xb24>
 801076e:	9b06      	ldr	r3, [sp, #24]
 8010770:	2b02      	cmp	r3, #2
 8010772:	f73f aea8 	bgt.w	80104c6 <_dtoa_r+0x91e>
 8010776:	e7a9      	b.n	80106cc <_dtoa_r+0xb24>
 8010778:	080125bf 	.word	0x080125bf
 801077c:	0801251c 	.word	0x0801251c
 8010780:	08012540 	.word	0x08012540

08010784 <__sflush_r>:
 8010784:	898a      	ldrh	r2, [r1, #12]
 8010786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	4605      	mov	r5, r0
 801078c:	0710      	lsls	r0, r2, #28
 801078e:	460c      	mov	r4, r1
 8010790:	d458      	bmi.n	8010844 <__sflush_r+0xc0>
 8010792:	684b      	ldr	r3, [r1, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dc05      	bgt.n	80107a4 <__sflush_r+0x20>
 8010798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801079a:	2b00      	cmp	r3, #0
 801079c:	dc02      	bgt.n	80107a4 <__sflush_r+0x20>
 801079e:	2000      	movs	r0, #0
 80107a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a6:	2e00      	cmp	r6, #0
 80107a8:	d0f9      	beq.n	801079e <__sflush_r+0x1a>
 80107aa:	2300      	movs	r3, #0
 80107ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107b0:	682f      	ldr	r7, [r5, #0]
 80107b2:	602b      	str	r3, [r5, #0]
 80107b4:	d032      	beq.n	801081c <__sflush_r+0x98>
 80107b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	075a      	lsls	r2, r3, #29
 80107bc:	d505      	bpl.n	80107ca <__sflush_r+0x46>
 80107be:	6863      	ldr	r3, [r4, #4]
 80107c0:	1ac0      	subs	r0, r0, r3
 80107c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107c4:	b10b      	cbz	r3, 80107ca <__sflush_r+0x46>
 80107c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107c8:	1ac0      	subs	r0, r0, r3
 80107ca:	2300      	movs	r3, #0
 80107cc:	4602      	mov	r2, r0
 80107ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107d0:	6a21      	ldr	r1, [r4, #32]
 80107d2:	4628      	mov	r0, r5
 80107d4:	47b0      	blx	r6
 80107d6:	1c43      	adds	r3, r0, #1
 80107d8:	89a3      	ldrh	r3, [r4, #12]
 80107da:	d106      	bne.n	80107ea <__sflush_r+0x66>
 80107dc:	6829      	ldr	r1, [r5, #0]
 80107de:	291d      	cmp	r1, #29
 80107e0:	d82c      	bhi.n	801083c <__sflush_r+0xb8>
 80107e2:	4a2a      	ldr	r2, [pc, #168]	; (801088c <__sflush_r+0x108>)
 80107e4:	40ca      	lsrs	r2, r1
 80107e6:	07d6      	lsls	r6, r2, #31
 80107e8:	d528      	bpl.n	801083c <__sflush_r+0xb8>
 80107ea:	2200      	movs	r2, #0
 80107ec:	6062      	str	r2, [r4, #4]
 80107ee:	04d9      	lsls	r1, r3, #19
 80107f0:	6922      	ldr	r2, [r4, #16]
 80107f2:	6022      	str	r2, [r4, #0]
 80107f4:	d504      	bpl.n	8010800 <__sflush_r+0x7c>
 80107f6:	1c42      	adds	r2, r0, #1
 80107f8:	d101      	bne.n	80107fe <__sflush_r+0x7a>
 80107fa:	682b      	ldr	r3, [r5, #0]
 80107fc:	b903      	cbnz	r3, 8010800 <__sflush_r+0x7c>
 80107fe:	6560      	str	r0, [r4, #84]	; 0x54
 8010800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010802:	602f      	str	r7, [r5, #0]
 8010804:	2900      	cmp	r1, #0
 8010806:	d0ca      	beq.n	801079e <__sflush_r+0x1a>
 8010808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801080c:	4299      	cmp	r1, r3
 801080e:	d002      	beq.n	8010816 <__sflush_r+0x92>
 8010810:	4628      	mov	r0, r5
 8010812:	f000 fc3d 	bl	8011090 <_free_r>
 8010816:	2000      	movs	r0, #0
 8010818:	6360      	str	r0, [r4, #52]	; 0x34
 801081a:	e7c1      	b.n	80107a0 <__sflush_r+0x1c>
 801081c:	6a21      	ldr	r1, [r4, #32]
 801081e:	2301      	movs	r3, #1
 8010820:	4628      	mov	r0, r5
 8010822:	47b0      	blx	r6
 8010824:	1c41      	adds	r1, r0, #1
 8010826:	d1c7      	bne.n	80107b8 <__sflush_r+0x34>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d0c4      	beq.n	80107b8 <__sflush_r+0x34>
 801082e:	2b1d      	cmp	r3, #29
 8010830:	d001      	beq.n	8010836 <__sflush_r+0xb2>
 8010832:	2b16      	cmp	r3, #22
 8010834:	d101      	bne.n	801083a <__sflush_r+0xb6>
 8010836:	602f      	str	r7, [r5, #0]
 8010838:	e7b1      	b.n	801079e <__sflush_r+0x1a>
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	81a3      	strh	r3, [r4, #12]
 8010842:	e7ad      	b.n	80107a0 <__sflush_r+0x1c>
 8010844:	690f      	ldr	r7, [r1, #16]
 8010846:	2f00      	cmp	r7, #0
 8010848:	d0a9      	beq.n	801079e <__sflush_r+0x1a>
 801084a:	0793      	lsls	r3, r2, #30
 801084c:	680e      	ldr	r6, [r1, #0]
 801084e:	bf08      	it	eq
 8010850:	694b      	ldreq	r3, [r1, #20]
 8010852:	600f      	str	r7, [r1, #0]
 8010854:	bf18      	it	ne
 8010856:	2300      	movne	r3, #0
 8010858:	eba6 0807 	sub.w	r8, r6, r7
 801085c:	608b      	str	r3, [r1, #8]
 801085e:	f1b8 0f00 	cmp.w	r8, #0
 8010862:	dd9c      	ble.n	801079e <__sflush_r+0x1a>
 8010864:	6a21      	ldr	r1, [r4, #32]
 8010866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010868:	4643      	mov	r3, r8
 801086a:	463a      	mov	r2, r7
 801086c:	4628      	mov	r0, r5
 801086e:	47b0      	blx	r6
 8010870:	2800      	cmp	r0, #0
 8010872:	dc06      	bgt.n	8010882 <__sflush_r+0xfe>
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801087a:	81a3      	strh	r3, [r4, #12]
 801087c:	f04f 30ff 	mov.w	r0, #4294967295
 8010880:	e78e      	b.n	80107a0 <__sflush_r+0x1c>
 8010882:	4407      	add	r7, r0
 8010884:	eba8 0800 	sub.w	r8, r8, r0
 8010888:	e7e9      	b.n	801085e <__sflush_r+0xda>
 801088a:	bf00      	nop
 801088c:	20400001 	.word	0x20400001

08010890 <_fflush_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	690b      	ldr	r3, [r1, #16]
 8010894:	4605      	mov	r5, r0
 8010896:	460c      	mov	r4, r1
 8010898:	b913      	cbnz	r3, 80108a0 <_fflush_r+0x10>
 801089a:	2500      	movs	r5, #0
 801089c:	4628      	mov	r0, r5
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	b118      	cbz	r0, 80108aa <_fflush_r+0x1a>
 80108a2:	6983      	ldr	r3, [r0, #24]
 80108a4:	b90b      	cbnz	r3, 80108aa <_fflush_r+0x1a>
 80108a6:	f7fe fa17 	bl	800ecd8 <__sinit>
 80108aa:	4b14      	ldr	r3, [pc, #80]	; (80108fc <_fflush_r+0x6c>)
 80108ac:	429c      	cmp	r4, r3
 80108ae:	d11b      	bne.n	80108e8 <_fflush_r+0x58>
 80108b0:	686c      	ldr	r4, [r5, #4]
 80108b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d0ef      	beq.n	801089a <_fflush_r+0xa>
 80108ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108bc:	07d0      	lsls	r0, r2, #31
 80108be:	d404      	bmi.n	80108ca <_fflush_r+0x3a>
 80108c0:	0599      	lsls	r1, r3, #22
 80108c2:	d402      	bmi.n	80108ca <_fflush_r+0x3a>
 80108c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108c6:	f7fe faca 	bl	800ee5e <__retarget_lock_acquire_recursive>
 80108ca:	4628      	mov	r0, r5
 80108cc:	4621      	mov	r1, r4
 80108ce:	f7ff ff59 	bl	8010784 <__sflush_r>
 80108d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108d4:	07da      	lsls	r2, r3, #31
 80108d6:	4605      	mov	r5, r0
 80108d8:	d4e0      	bmi.n	801089c <_fflush_r+0xc>
 80108da:	89a3      	ldrh	r3, [r4, #12]
 80108dc:	059b      	lsls	r3, r3, #22
 80108de:	d4dd      	bmi.n	801089c <_fflush_r+0xc>
 80108e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108e2:	f7fe fabd 	bl	800ee60 <__retarget_lock_release_recursive>
 80108e6:	e7d9      	b.n	801089c <_fflush_r+0xc>
 80108e8:	4b05      	ldr	r3, [pc, #20]	; (8010900 <_fflush_r+0x70>)
 80108ea:	429c      	cmp	r4, r3
 80108ec:	d101      	bne.n	80108f2 <_fflush_r+0x62>
 80108ee:	68ac      	ldr	r4, [r5, #8]
 80108f0:	e7df      	b.n	80108b2 <_fflush_r+0x22>
 80108f2:	4b04      	ldr	r3, [pc, #16]	; (8010904 <_fflush_r+0x74>)
 80108f4:	429c      	cmp	r4, r3
 80108f6:	bf08      	it	eq
 80108f8:	68ec      	ldreq	r4, [r5, #12]
 80108fa:	e7da      	b.n	80108b2 <_fflush_r+0x22>
 80108fc:	080124c8 	.word	0x080124c8
 8010900:	080124e8 	.word	0x080124e8
 8010904:	080124a8 	.word	0x080124a8

08010908 <_localeconv_r>:
 8010908:	4800      	ldr	r0, [pc, #0]	; (801090c <_localeconv_r+0x4>)
 801090a:	4770      	bx	lr
 801090c:	2000017c 	.word	0x2000017c

08010910 <_lseek_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4d07      	ldr	r5, [pc, #28]	; (8010930 <_lseek_r+0x20>)
 8010914:	4604      	mov	r4, r0
 8010916:	4608      	mov	r0, r1
 8010918:	4611      	mov	r1, r2
 801091a:	2200      	movs	r2, #0
 801091c:	602a      	str	r2, [r5, #0]
 801091e:	461a      	mov	r2, r3
 8010920:	f7f4 f9c0 	bl	8004ca4 <_lseek>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d102      	bne.n	801092e <_lseek_r+0x1e>
 8010928:	682b      	ldr	r3, [r5, #0]
 801092a:	b103      	cbz	r3, 801092e <_lseek_r+0x1e>
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	bd38      	pop	{r3, r4, r5, pc}
 8010930:	2000653c 	.word	0x2000653c

08010934 <malloc>:
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <malloc+0xc>)
 8010936:	4601      	mov	r1, r0
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	f7fe bac9 	b.w	800eed0 <_malloc_r>
 801093e:	bf00      	nop
 8010940:	20000028 	.word	0x20000028

08010944 <__malloc_lock>:
 8010944:	4801      	ldr	r0, [pc, #4]	; (801094c <__malloc_lock+0x8>)
 8010946:	f7fe ba8a 	b.w	800ee5e <__retarget_lock_acquire_recursive>
 801094a:	bf00      	nop
 801094c:	20006530 	.word	0x20006530

08010950 <__malloc_unlock>:
 8010950:	4801      	ldr	r0, [pc, #4]	; (8010958 <__malloc_unlock+0x8>)
 8010952:	f7fe ba85 	b.w	800ee60 <__retarget_lock_release_recursive>
 8010956:	bf00      	nop
 8010958:	20006530 	.word	0x20006530

0801095c <_Balloc>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010960:	4604      	mov	r4, r0
 8010962:	460d      	mov	r5, r1
 8010964:	b976      	cbnz	r6, 8010984 <_Balloc+0x28>
 8010966:	2010      	movs	r0, #16
 8010968:	f7ff ffe4 	bl	8010934 <malloc>
 801096c:	4602      	mov	r2, r0
 801096e:	6260      	str	r0, [r4, #36]	; 0x24
 8010970:	b920      	cbnz	r0, 801097c <_Balloc+0x20>
 8010972:	4b18      	ldr	r3, [pc, #96]	; (80109d4 <_Balloc+0x78>)
 8010974:	4818      	ldr	r0, [pc, #96]	; (80109d8 <_Balloc+0x7c>)
 8010976:	2166      	movs	r1, #102	; 0x66
 8010978:	f000 fd44 	bl	8011404 <__assert_func>
 801097c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010980:	6006      	str	r6, [r0, #0]
 8010982:	60c6      	str	r6, [r0, #12]
 8010984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010986:	68f3      	ldr	r3, [r6, #12]
 8010988:	b183      	cbz	r3, 80109ac <_Balloc+0x50>
 801098a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010992:	b9b8      	cbnz	r0, 80109c4 <_Balloc+0x68>
 8010994:	2101      	movs	r1, #1
 8010996:	fa01 f605 	lsl.w	r6, r1, r5
 801099a:	1d72      	adds	r2, r6, #5
 801099c:	0092      	lsls	r2, r2, #2
 801099e:	4620      	mov	r0, r4
 80109a0:	f000 fb60 	bl	8011064 <_calloc_r>
 80109a4:	b160      	cbz	r0, 80109c0 <_Balloc+0x64>
 80109a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109aa:	e00e      	b.n	80109ca <_Balloc+0x6e>
 80109ac:	2221      	movs	r2, #33	; 0x21
 80109ae:	2104      	movs	r1, #4
 80109b0:	4620      	mov	r0, r4
 80109b2:	f000 fb57 	bl	8011064 <_calloc_r>
 80109b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109b8:	60f0      	str	r0, [r6, #12]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1e4      	bne.n	801098a <_Balloc+0x2e>
 80109c0:	2000      	movs	r0, #0
 80109c2:	bd70      	pop	{r4, r5, r6, pc}
 80109c4:	6802      	ldr	r2, [r0, #0]
 80109c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109ca:	2300      	movs	r3, #0
 80109cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109d0:	e7f7      	b.n	80109c2 <_Balloc+0x66>
 80109d2:	bf00      	nop
 80109d4:	0801254d 	.word	0x0801254d
 80109d8:	080125d0 	.word	0x080125d0

080109dc <_Bfree>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80109e0:	4605      	mov	r5, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	b976      	cbnz	r6, 8010a04 <_Bfree+0x28>
 80109e6:	2010      	movs	r0, #16
 80109e8:	f7ff ffa4 	bl	8010934 <malloc>
 80109ec:	4602      	mov	r2, r0
 80109ee:	6268      	str	r0, [r5, #36]	; 0x24
 80109f0:	b920      	cbnz	r0, 80109fc <_Bfree+0x20>
 80109f2:	4b09      	ldr	r3, [pc, #36]	; (8010a18 <_Bfree+0x3c>)
 80109f4:	4809      	ldr	r0, [pc, #36]	; (8010a1c <_Bfree+0x40>)
 80109f6:	218a      	movs	r1, #138	; 0x8a
 80109f8:	f000 fd04 	bl	8011404 <__assert_func>
 80109fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a00:	6006      	str	r6, [r0, #0]
 8010a02:	60c6      	str	r6, [r0, #12]
 8010a04:	b13c      	cbz	r4, 8010a16 <_Bfree+0x3a>
 8010a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a08:	6862      	ldr	r2, [r4, #4]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a10:	6021      	str	r1, [r4, #0]
 8010a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a16:	bd70      	pop	{r4, r5, r6, pc}
 8010a18:	0801254d 	.word	0x0801254d
 8010a1c:	080125d0 	.word	0x080125d0

08010a20 <__multadd>:
 8010a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a24:	690d      	ldr	r5, [r1, #16]
 8010a26:	4607      	mov	r7, r0
 8010a28:	460c      	mov	r4, r1
 8010a2a:	461e      	mov	r6, r3
 8010a2c:	f101 0c14 	add.w	ip, r1, #20
 8010a30:	2000      	movs	r0, #0
 8010a32:	f8dc 3000 	ldr.w	r3, [ip]
 8010a36:	b299      	uxth	r1, r3
 8010a38:	fb02 6101 	mla	r1, r2, r1, r6
 8010a3c:	0c1e      	lsrs	r6, r3, #16
 8010a3e:	0c0b      	lsrs	r3, r1, #16
 8010a40:	fb02 3306 	mla	r3, r2, r6, r3
 8010a44:	b289      	uxth	r1, r1
 8010a46:	3001      	adds	r0, #1
 8010a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a4c:	4285      	cmp	r5, r0
 8010a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8010a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a56:	dcec      	bgt.n	8010a32 <__multadd+0x12>
 8010a58:	b30e      	cbz	r6, 8010a9e <__multadd+0x7e>
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	42ab      	cmp	r3, r5
 8010a5e:	dc19      	bgt.n	8010a94 <__multadd+0x74>
 8010a60:	6861      	ldr	r1, [r4, #4]
 8010a62:	4638      	mov	r0, r7
 8010a64:	3101      	adds	r1, #1
 8010a66:	f7ff ff79 	bl	801095c <_Balloc>
 8010a6a:	4680      	mov	r8, r0
 8010a6c:	b928      	cbnz	r0, 8010a7a <__multadd+0x5a>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	4b0c      	ldr	r3, [pc, #48]	; (8010aa4 <__multadd+0x84>)
 8010a72:	480d      	ldr	r0, [pc, #52]	; (8010aa8 <__multadd+0x88>)
 8010a74:	21b5      	movs	r1, #181	; 0xb5
 8010a76:	f000 fcc5 	bl	8011404 <__assert_func>
 8010a7a:	6922      	ldr	r2, [r4, #16]
 8010a7c:	3202      	adds	r2, #2
 8010a7e:	f104 010c 	add.w	r1, r4, #12
 8010a82:	0092      	lsls	r2, r2, #2
 8010a84:	300c      	adds	r0, #12
 8010a86:	f7fe f9ec 	bl	800ee62 <memcpy>
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4638      	mov	r0, r7
 8010a8e:	f7ff ffa5 	bl	80109dc <_Bfree>
 8010a92:	4644      	mov	r4, r8
 8010a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a98:	3501      	adds	r5, #1
 8010a9a:	615e      	str	r6, [r3, #20]
 8010a9c:	6125      	str	r5, [r4, #16]
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa4:	080125bf 	.word	0x080125bf
 8010aa8:	080125d0 	.word	0x080125d0

08010aac <__hi0bits>:
 8010aac:	0c03      	lsrs	r3, r0, #16
 8010aae:	041b      	lsls	r3, r3, #16
 8010ab0:	b9d3      	cbnz	r3, 8010ae8 <__hi0bits+0x3c>
 8010ab2:	0400      	lsls	r0, r0, #16
 8010ab4:	2310      	movs	r3, #16
 8010ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010aba:	bf04      	itt	eq
 8010abc:	0200      	lsleq	r0, r0, #8
 8010abe:	3308      	addeq	r3, #8
 8010ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ac4:	bf04      	itt	eq
 8010ac6:	0100      	lsleq	r0, r0, #4
 8010ac8:	3304      	addeq	r3, #4
 8010aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ace:	bf04      	itt	eq
 8010ad0:	0080      	lsleq	r0, r0, #2
 8010ad2:	3302      	addeq	r3, #2
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	db05      	blt.n	8010ae4 <__hi0bits+0x38>
 8010ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010adc:	f103 0301 	add.w	r3, r3, #1
 8010ae0:	bf08      	it	eq
 8010ae2:	2320      	moveq	r3, #32
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	4770      	bx	lr
 8010ae8:	2300      	movs	r3, #0
 8010aea:	e7e4      	b.n	8010ab6 <__hi0bits+0xa>

08010aec <__lo0bits>:
 8010aec:	6803      	ldr	r3, [r0, #0]
 8010aee:	f013 0207 	ands.w	r2, r3, #7
 8010af2:	4601      	mov	r1, r0
 8010af4:	d00b      	beq.n	8010b0e <__lo0bits+0x22>
 8010af6:	07da      	lsls	r2, r3, #31
 8010af8:	d423      	bmi.n	8010b42 <__lo0bits+0x56>
 8010afa:	0798      	lsls	r0, r3, #30
 8010afc:	bf49      	itett	mi
 8010afe:	085b      	lsrmi	r3, r3, #1
 8010b00:	089b      	lsrpl	r3, r3, #2
 8010b02:	2001      	movmi	r0, #1
 8010b04:	600b      	strmi	r3, [r1, #0]
 8010b06:	bf5c      	itt	pl
 8010b08:	600b      	strpl	r3, [r1, #0]
 8010b0a:	2002      	movpl	r0, #2
 8010b0c:	4770      	bx	lr
 8010b0e:	b298      	uxth	r0, r3
 8010b10:	b9a8      	cbnz	r0, 8010b3e <__lo0bits+0x52>
 8010b12:	0c1b      	lsrs	r3, r3, #16
 8010b14:	2010      	movs	r0, #16
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	b90a      	cbnz	r2, 8010b1e <__lo0bits+0x32>
 8010b1a:	3008      	adds	r0, #8
 8010b1c:	0a1b      	lsrs	r3, r3, #8
 8010b1e:	071a      	lsls	r2, r3, #28
 8010b20:	bf04      	itt	eq
 8010b22:	091b      	lsreq	r3, r3, #4
 8010b24:	3004      	addeq	r0, #4
 8010b26:	079a      	lsls	r2, r3, #30
 8010b28:	bf04      	itt	eq
 8010b2a:	089b      	lsreq	r3, r3, #2
 8010b2c:	3002      	addeq	r0, #2
 8010b2e:	07da      	lsls	r2, r3, #31
 8010b30:	d403      	bmi.n	8010b3a <__lo0bits+0x4e>
 8010b32:	085b      	lsrs	r3, r3, #1
 8010b34:	f100 0001 	add.w	r0, r0, #1
 8010b38:	d005      	beq.n	8010b46 <__lo0bits+0x5a>
 8010b3a:	600b      	str	r3, [r1, #0]
 8010b3c:	4770      	bx	lr
 8010b3e:	4610      	mov	r0, r2
 8010b40:	e7e9      	b.n	8010b16 <__lo0bits+0x2a>
 8010b42:	2000      	movs	r0, #0
 8010b44:	4770      	bx	lr
 8010b46:	2020      	movs	r0, #32
 8010b48:	4770      	bx	lr
	...

08010b4c <__i2b>:
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	460c      	mov	r4, r1
 8010b50:	2101      	movs	r1, #1
 8010b52:	f7ff ff03 	bl	801095c <_Balloc>
 8010b56:	4602      	mov	r2, r0
 8010b58:	b928      	cbnz	r0, 8010b66 <__i2b+0x1a>
 8010b5a:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <__i2b+0x24>)
 8010b5c:	4805      	ldr	r0, [pc, #20]	; (8010b74 <__i2b+0x28>)
 8010b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010b62:	f000 fc4f 	bl	8011404 <__assert_func>
 8010b66:	2301      	movs	r3, #1
 8010b68:	6144      	str	r4, [r0, #20]
 8010b6a:	6103      	str	r3, [r0, #16]
 8010b6c:	bd10      	pop	{r4, pc}
 8010b6e:	bf00      	nop
 8010b70:	080125bf 	.word	0x080125bf
 8010b74:	080125d0 	.word	0x080125d0

08010b78 <__multiply>:
 8010b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7c:	4691      	mov	r9, r2
 8010b7e:	690a      	ldr	r2, [r1, #16]
 8010b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	bfb8      	it	lt
 8010b88:	460b      	movlt	r3, r1
 8010b8a:	460c      	mov	r4, r1
 8010b8c:	bfbc      	itt	lt
 8010b8e:	464c      	movlt	r4, r9
 8010b90:	4699      	movlt	r9, r3
 8010b92:	6927      	ldr	r7, [r4, #16]
 8010b94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b98:	68a3      	ldr	r3, [r4, #8]
 8010b9a:	6861      	ldr	r1, [r4, #4]
 8010b9c:	eb07 060a 	add.w	r6, r7, sl
 8010ba0:	42b3      	cmp	r3, r6
 8010ba2:	b085      	sub	sp, #20
 8010ba4:	bfb8      	it	lt
 8010ba6:	3101      	addlt	r1, #1
 8010ba8:	f7ff fed8 	bl	801095c <_Balloc>
 8010bac:	b930      	cbnz	r0, 8010bbc <__multiply+0x44>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	4b44      	ldr	r3, [pc, #272]	; (8010cc4 <__multiply+0x14c>)
 8010bb2:	4845      	ldr	r0, [pc, #276]	; (8010cc8 <__multiply+0x150>)
 8010bb4:	f240 115d 	movw	r1, #349	; 0x15d
 8010bb8:	f000 fc24 	bl	8011404 <__assert_func>
 8010bbc:	f100 0514 	add.w	r5, r0, #20
 8010bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bc4:	462b      	mov	r3, r5
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	4543      	cmp	r3, r8
 8010bca:	d321      	bcc.n	8010c10 <__multiply+0x98>
 8010bcc:	f104 0314 	add.w	r3, r4, #20
 8010bd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010bd4:	f109 0314 	add.w	r3, r9, #20
 8010bd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010bdc:	9202      	str	r2, [sp, #8]
 8010bde:	1b3a      	subs	r2, r7, r4
 8010be0:	3a15      	subs	r2, #21
 8010be2:	f022 0203 	bic.w	r2, r2, #3
 8010be6:	3204      	adds	r2, #4
 8010be8:	f104 0115 	add.w	r1, r4, #21
 8010bec:	428f      	cmp	r7, r1
 8010bee:	bf38      	it	cc
 8010bf0:	2204      	movcc	r2, #4
 8010bf2:	9201      	str	r2, [sp, #4]
 8010bf4:	9a02      	ldr	r2, [sp, #8]
 8010bf6:	9303      	str	r3, [sp, #12]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d80c      	bhi.n	8010c16 <__multiply+0x9e>
 8010bfc:	2e00      	cmp	r6, #0
 8010bfe:	dd03      	ble.n	8010c08 <__multiply+0x90>
 8010c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d05a      	beq.n	8010cbe <__multiply+0x146>
 8010c08:	6106      	str	r6, [r0, #16]
 8010c0a:	b005      	add	sp, #20
 8010c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c10:	f843 2b04 	str.w	r2, [r3], #4
 8010c14:	e7d8      	b.n	8010bc8 <__multiply+0x50>
 8010c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c1a:	f1ba 0f00 	cmp.w	sl, #0
 8010c1e:	d024      	beq.n	8010c6a <__multiply+0xf2>
 8010c20:	f104 0e14 	add.w	lr, r4, #20
 8010c24:	46a9      	mov	r9, r5
 8010c26:	f04f 0c00 	mov.w	ip, #0
 8010c2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010c2e:	f8d9 1000 	ldr.w	r1, [r9]
 8010c32:	fa1f fb82 	uxth.w	fp, r2
 8010c36:	b289      	uxth	r1, r1
 8010c38:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c40:	f8d9 2000 	ldr.w	r2, [r9]
 8010c44:	4461      	add	r1, ip
 8010c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c52:	b289      	uxth	r1, r1
 8010c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c58:	4577      	cmp	r7, lr
 8010c5a:	f849 1b04 	str.w	r1, [r9], #4
 8010c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c62:	d8e2      	bhi.n	8010c2a <__multiply+0xb2>
 8010c64:	9a01      	ldr	r2, [sp, #4]
 8010c66:	f845 c002 	str.w	ip, [r5, r2]
 8010c6a:	9a03      	ldr	r2, [sp, #12]
 8010c6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c70:	3304      	adds	r3, #4
 8010c72:	f1b9 0f00 	cmp.w	r9, #0
 8010c76:	d020      	beq.n	8010cba <__multiply+0x142>
 8010c78:	6829      	ldr	r1, [r5, #0]
 8010c7a:	f104 0c14 	add.w	ip, r4, #20
 8010c7e:	46ae      	mov	lr, r5
 8010c80:	f04f 0a00 	mov.w	sl, #0
 8010c84:	f8bc b000 	ldrh.w	fp, [ip]
 8010c88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c8c:	fb09 220b 	mla	r2, r9, fp, r2
 8010c90:	4492      	add	sl, r2
 8010c92:	b289      	uxth	r1, r1
 8010c94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010c98:	f84e 1b04 	str.w	r1, [lr], #4
 8010c9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8010ca4:	0c12      	lsrs	r2, r2, #16
 8010ca6:	fb09 1102 	mla	r1, r9, r2, r1
 8010caa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010cae:	4567      	cmp	r7, ip
 8010cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010cb4:	d8e6      	bhi.n	8010c84 <__multiply+0x10c>
 8010cb6:	9a01      	ldr	r2, [sp, #4]
 8010cb8:	50a9      	str	r1, [r5, r2]
 8010cba:	3504      	adds	r5, #4
 8010cbc:	e79a      	b.n	8010bf4 <__multiply+0x7c>
 8010cbe:	3e01      	subs	r6, #1
 8010cc0:	e79c      	b.n	8010bfc <__multiply+0x84>
 8010cc2:	bf00      	nop
 8010cc4:	080125bf 	.word	0x080125bf
 8010cc8:	080125d0 	.word	0x080125d0

08010ccc <__pow5mult>:
 8010ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cd0:	4615      	mov	r5, r2
 8010cd2:	f012 0203 	ands.w	r2, r2, #3
 8010cd6:	4606      	mov	r6, r0
 8010cd8:	460f      	mov	r7, r1
 8010cda:	d007      	beq.n	8010cec <__pow5mult+0x20>
 8010cdc:	4c25      	ldr	r4, [pc, #148]	; (8010d74 <__pow5mult+0xa8>)
 8010cde:	3a01      	subs	r2, #1
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ce6:	f7ff fe9b 	bl	8010a20 <__multadd>
 8010cea:	4607      	mov	r7, r0
 8010cec:	10ad      	asrs	r5, r5, #2
 8010cee:	d03d      	beq.n	8010d6c <__pow5mult+0xa0>
 8010cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010cf2:	b97c      	cbnz	r4, 8010d14 <__pow5mult+0x48>
 8010cf4:	2010      	movs	r0, #16
 8010cf6:	f7ff fe1d 	bl	8010934 <malloc>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8010cfe:	b928      	cbnz	r0, 8010d0c <__pow5mult+0x40>
 8010d00:	4b1d      	ldr	r3, [pc, #116]	; (8010d78 <__pow5mult+0xac>)
 8010d02:	481e      	ldr	r0, [pc, #120]	; (8010d7c <__pow5mult+0xb0>)
 8010d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010d08:	f000 fb7c 	bl	8011404 <__assert_func>
 8010d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d10:	6004      	str	r4, [r0, #0]
 8010d12:	60c4      	str	r4, [r0, #12]
 8010d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d1c:	b94c      	cbnz	r4, 8010d32 <__pow5mult+0x66>
 8010d1e:	f240 2171 	movw	r1, #625	; 0x271
 8010d22:	4630      	mov	r0, r6
 8010d24:	f7ff ff12 	bl	8010b4c <__i2b>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d2e:	4604      	mov	r4, r0
 8010d30:	6003      	str	r3, [r0, #0]
 8010d32:	f04f 0900 	mov.w	r9, #0
 8010d36:	07eb      	lsls	r3, r5, #31
 8010d38:	d50a      	bpl.n	8010d50 <__pow5mult+0x84>
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	4622      	mov	r2, r4
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f7ff ff1a 	bl	8010b78 <__multiply>
 8010d44:	4639      	mov	r1, r7
 8010d46:	4680      	mov	r8, r0
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f7ff fe47 	bl	80109dc <_Bfree>
 8010d4e:	4647      	mov	r7, r8
 8010d50:	106d      	asrs	r5, r5, #1
 8010d52:	d00b      	beq.n	8010d6c <__pow5mult+0xa0>
 8010d54:	6820      	ldr	r0, [r4, #0]
 8010d56:	b938      	cbnz	r0, 8010d68 <__pow5mult+0x9c>
 8010d58:	4622      	mov	r2, r4
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	f7ff ff0b 	bl	8010b78 <__multiply>
 8010d62:	6020      	str	r0, [r4, #0]
 8010d64:	f8c0 9000 	str.w	r9, [r0]
 8010d68:	4604      	mov	r4, r0
 8010d6a:	e7e4      	b.n	8010d36 <__pow5mult+0x6a>
 8010d6c:	4638      	mov	r0, r7
 8010d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d72:	bf00      	nop
 8010d74:	08012720 	.word	0x08012720
 8010d78:	0801254d 	.word	0x0801254d
 8010d7c:	080125d0 	.word	0x080125d0

08010d80 <__lshift>:
 8010d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d84:	460c      	mov	r4, r1
 8010d86:	6849      	ldr	r1, [r1, #4]
 8010d88:	6923      	ldr	r3, [r4, #16]
 8010d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d8e:	68a3      	ldr	r3, [r4, #8]
 8010d90:	4607      	mov	r7, r0
 8010d92:	4691      	mov	r9, r2
 8010d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d98:	f108 0601 	add.w	r6, r8, #1
 8010d9c:	42b3      	cmp	r3, r6
 8010d9e:	db0b      	blt.n	8010db8 <__lshift+0x38>
 8010da0:	4638      	mov	r0, r7
 8010da2:	f7ff fddb 	bl	801095c <_Balloc>
 8010da6:	4605      	mov	r5, r0
 8010da8:	b948      	cbnz	r0, 8010dbe <__lshift+0x3e>
 8010daa:	4602      	mov	r2, r0
 8010dac:	4b2a      	ldr	r3, [pc, #168]	; (8010e58 <__lshift+0xd8>)
 8010dae:	482b      	ldr	r0, [pc, #172]	; (8010e5c <__lshift+0xdc>)
 8010db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010db4:	f000 fb26 	bl	8011404 <__assert_func>
 8010db8:	3101      	adds	r1, #1
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	e7ee      	b.n	8010d9c <__lshift+0x1c>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f100 0114 	add.w	r1, r0, #20
 8010dc4:	f100 0210 	add.w	r2, r0, #16
 8010dc8:	4618      	mov	r0, r3
 8010dca:	4553      	cmp	r3, sl
 8010dcc:	db37      	blt.n	8010e3e <__lshift+0xbe>
 8010dce:	6920      	ldr	r0, [r4, #16]
 8010dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dd4:	f104 0314 	add.w	r3, r4, #20
 8010dd8:	f019 091f 	ands.w	r9, r9, #31
 8010ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010de0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010de4:	d02f      	beq.n	8010e46 <__lshift+0xc6>
 8010de6:	f1c9 0e20 	rsb	lr, r9, #32
 8010dea:	468a      	mov	sl, r1
 8010dec:	f04f 0c00 	mov.w	ip, #0
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	fa02 f209 	lsl.w	r2, r2, r9
 8010df6:	ea42 020c 	orr.w	r2, r2, ip
 8010dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8010dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e02:	4298      	cmp	r0, r3
 8010e04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010e08:	d8f2      	bhi.n	8010df0 <__lshift+0x70>
 8010e0a:	1b03      	subs	r3, r0, r4
 8010e0c:	3b15      	subs	r3, #21
 8010e0e:	f023 0303 	bic.w	r3, r3, #3
 8010e12:	3304      	adds	r3, #4
 8010e14:	f104 0215 	add.w	r2, r4, #21
 8010e18:	4290      	cmp	r0, r2
 8010e1a:	bf38      	it	cc
 8010e1c:	2304      	movcc	r3, #4
 8010e1e:	f841 c003 	str.w	ip, [r1, r3]
 8010e22:	f1bc 0f00 	cmp.w	ip, #0
 8010e26:	d001      	beq.n	8010e2c <__lshift+0xac>
 8010e28:	f108 0602 	add.w	r6, r8, #2
 8010e2c:	3e01      	subs	r6, #1
 8010e2e:	4638      	mov	r0, r7
 8010e30:	612e      	str	r6, [r5, #16]
 8010e32:	4621      	mov	r1, r4
 8010e34:	f7ff fdd2 	bl	80109dc <_Bfree>
 8010e38:	4628      	mov	r0, r5
 8010e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e42:	3301      	adds	r3, #1
 8010e44:	e7c1      	b.n	8010dca <__lshift+0x4a>
 8010e46:	3904      	subs	r1, #4
 8010e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e50:	4298      	cmp	r0, r3
 8010e52:	d8f9      	bhi.n	8010e48 <__lshift+0xc8>
 8010e54:	e7ea      	b.n	8010e2c <__lshift+0xac>
 8010e56:	bf00      	nop
 8010e58:	080125bf 	.word	0x080125bf
 8010e5c:	080125d0 	.word	0x080125d0

08010e60 <__mcmp>:
 8010e60:	b530      	push	{r4, r5, lr}
 8010e62:	6902      	ldr	r2, [r0, #16]
 8010e64:	690c      	ldr	r4, [r1, #16]
 8010e66:	1b12      	subs	r2, r2, r4
 8010e68:	d10e      	bne.n	8010e88 <__mcmp+0x28>
 8010e6a:	f100 0314 	add.w	r3, r0, #20
 8010e6e:	3114      	adds	r1, #20
 8010e70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e80:	42a5      	cmp	r5, r4
 8010e82:	d003      	beq.n	8010e8c <__mcmp+0x2c>
 8010e84:	d305      	bcc.n	8010e92 <__mcmp+0x32>
 8010e86:	2201      	movs	r2, #1
 8010e88:	4610      	mov	r0, r2
 8010e8a:	bd30      	pop	{r4, r5, pc}
 8010e8c:	4283      	cmp	r3, r0
 8010e8e:	d3f3      	bcc.n	8010e78 <__mcmp+0x18>
 8010e90:	e7fa      	b.n	8010e88 <__mcmp+0x28>
 8010e92:	f04f 32ff 	mov.w	r2, #4294967295
 8010e96:	e7f7      	b.n	8010e88 <__mcmp+0x28>

08010e98 <__mdiff>:
 8010e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	4606      	mov	r6, r0
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	4690      	mov	r8, r2
 8010ea6:	f7ff ffdb 	bl	8010e60 <__mcmp>
 8010eaa:	1e05      	subs	r5, r0, #0
 8010eac:	d110      	bne.n	8010ed0 <__mdiff+0x38>
 8010eae:	4629      	mov	r1, r5
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	f7ff fd53 	bl	801095c <_Balloc>
 8010eb6:	b930      	cbnz	r0, 8010ec6 <__mdiff+0x2e>
 8010eb8:	4b3a      	ldr	r3, [pc, #232]	; (8010fa4 <__mdiff+0x10c>)
 8010eba:	4602      	mov	r2, r0
 8010ebc:	f240 2132 	movw	r1, #562	; 0x232
 8010ec0:	4839      	ldr	r0, [pc, #228]	; (8010fa8 <__mdiff+0x110>)
 8010ec2:	f000 fa9f 	bl	8011404 <__assert_func>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed0:	bfa4      	itt	ge
 8010ed2:	4643      	movge	r3, r8
 8010ed4:	46a0      	movge	r8, r4
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010edc:	bfa6      	itte	ge
 8010ede:	461c      	movge	r4, r3
 8010ee0:	2500      	movge	r5, #0
 8010ee2:	2501      	movlt	r5, #1
 8010ee4:	f7ff fd3a 	bl	801095c <_Balloc>
 8010ee8:	b920      	cbnz	r0, 8010ef4 <__mdiff+0x5c>
 8010eea:	4b2e      	ldr	r3, [pc, #184]	; (8010fa4 <__mdiff+0x10c>)
 8010eec:	4602      	mov	r2, r0
 8010eee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ef2:	e7e5      	b.n	8010ec0 <__mdiff+0x28>
 8010ef4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ef8:	6926      	ldr	r6, [r4, #16]
 8010efa:	60c5      	str	r5, [r0, #12]
 8010efc:	f104 0914 	add.w	r9, r4, #20
 8010f00:	f108 0514 	add.w	r5, r8, #20
 8010f04:	f100 0e14 	add.w	lr, r0, #20
 8010f08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010f0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010f10:	f108 0210 	add.w	r2, r8, #16
 8010f14:	46f2      	mov	sl, lr
 8010f16:	2100      	movs	r1, #0
 8010f18:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f20:	fa1f f883 	uxth.w	r8, r3
 8010f24:	fa11 f18b 	uxtah	r1, r1, fp
 8010f28:	0c1b      	lsrs	r3, r3, #16
 8010f2a:	eba1 0808 	sub.w	r8, r1, r8
 8010f2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f36:	fa1f f888 	uxth.w	r8, r8
 8010f3a:	1419      	asrs	r1, r3, #16
 8010f3c:	454e      	cmp	r6, r9
 8010f3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f42:	f84a 3b04 	str.w	r3, [sl], #4
 8010f46:	d8e7      	bhi.n	8010f18 <__mdiff+0x80>
 8010f48:	1b33      	subs	r3, r6, r4
 8010f4a:	3b15      	subs	r3, #21
 8010f4c:	f023 0303 	bic.w	r3, r3, #3
 8010f50:	3304      	adds	r3, #4
 8010f52:	3415      	adds	r4, #21
 8010f54:	42a6      	cmp	r6, r4
 8010f56:	bf38      	it	cc
 8010f58:	2304      	movcc	r3, #4
 8010f5a:	441d      	add	r5, r3
 8010f5c:	4473      	add	r3, lr
 8010f5e:	469e      	mov	lr, r3
 8010f60:	462e      	mov	r6, r5
 8010f62:	4566      	cmp	r6, ip
 8010f64:	d30e      	bcc.n	8010f84 <__mdiff+0xec>
 8010f66:	f10c 0203 	add.w	r2, ip, #3
 8010f6a:	1b52      	subs	r2, r2, r5
 8010f6c:	f022 0203 	bic.w	r2, r2, #3
 8010f70:	3d03      	subs	r5, #3
 8010f72:	45ac      	cmp	ip, r5
 8010f74:	bf38      	it	cc
 8010f76:	2200      	movcc	r2, #0
 8010f78:	441a      	add	r2, r3
 8010f7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010f7e:	b17b      	cbz	r3, 8010fa0 <__mdiff+0x108>
 8010f80:	6107      	str	r7, [r0, #16]
 8010f82:	e7a3      	b.n	8010ecc <__mdiff+0x34>
 8010f84:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f88:	fa11 f288 	uxtah	r2, r1, r8
 8010f8c:	1414      	asrs	r4, r2, #16
 8010f8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f92:	b292      	uxth	r2, r2
 8010f94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f98:	f84e 2b04 	str.w	r2, [lr], #4
 8010f9c:	1421      	asrs	r1, r4, #16
 8010f9e:	e7e0      	b.n	8010f62 <__mdiff+0xca>
 8010fa0:	3f01      	subs	r7, #1
 8010fa2:	e7ea      	b.n	8010f7a <__mdiff+0xe2>
 8010fa4:	080125bf 	.word	0x080125bf
 8010fa8:	080125d0 	.word	0x080125d0

08010fac <__d2b>:
 8010fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fb0:	4689      	mov	r9, r1
 8010fb2:	2101      	movs	r1, #1
 8010fb4:	ec57 6b10 	vmov	r6, r7, d0
 8010fb8:	4690      	mov	r8, r2
 8010fba:	f7ff fccf 	bl	801095c <_Balloc>
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	b930      	cbnz	r0, 8010fd0 <__d2b+0x24>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	4b25      	ldr	r3, [pc, #148]	; (801105c <__d2b+0xb0>)
 8010fc6:	4826      	ldr	r0, [pc, #152]	; (8011060 <__d2b+0xb4>)
 8010fc8:	f240 310a 	movw	r1, #778	; 0x30a
 8010fcc:	f000 fa1a 	bl	8011404 <__assert_func>
 8010fd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010fd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010fd8:	bb35      	cbnz	r5, 8011028 <__d2b+0x7c>
 8010fda:	2e00      	cmp	r6, #0
 8010fdc:	9301      	str	r3, [sp, #4]
 8010fde:	d028      	beq.n	8011032 <__d2b+0x86>
 8010fe0:	4668      	mov	r0, sp
 8010fe2:	9600      	str	r6, [sp, #0]
 8010fe4:	f7ff fd82 	bl	8010aec <__lo0bits>
 8010fe8:	9900      	ldr	r1, [sp, #0]
 8010fea:	b300      	cbz	r0, 801102e <__d2b+0x82>
 8010fec:	9a01      	ldr	r2, [sp, #4]
 8010fee:	f1c0 0320 	rsb	r3, r0, #32
 8010ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ff6:	430b      	orrs	r3, r1
 8010ff8:	40c2      	lsrs	r2, r0
 8010ffa:	6163      	str	r3, [r4, #20]
 8010ffc:	9201      	str	r2, [sp, #4]
 8010ffe:	9b01      	ldr	r3, [sp, #4]
 8011000:	61a3      	str	r3, [r4, #24]
 8011002:	2b00      	cmp	r3, #0
 8011004:	bf14      	ite	ne
 8011006:	2202      	movne	r2, #2
 8011008:	2201      	moveq	r2, #1
 801100a:	6122      	str	r2, [r4, #16]
 801100c:	b1d5      	cbz	r5, 8011044 <__d2b+0x98>
 801100e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011012:	4405      	add	r5, r0
 8011014:	f8c9 5000 	str.w	r5, [r9]
 8011018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801101c:	f8c8 0000 	str.w	r0, [r8]
 8011020:	4620      	mov	r0, r4
 8011022:	b003      	add	sp, #12
 8011024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801102c:	e7d5      	b.n	8010fda <__d2b+0x2e>
 801102e:	6161      	str	r1, [r4, #20]
 8011030:	e7e5      	b.n	8010ffe <__d2b+0x52>
 8011032:	a801      	add	r0, sp, #4
 8011034:	f7ff fd5a 	bl	8010aec <__lo0bits>
 8011038:	9b01      	ldr	r3, [sp, #4]
 801103a:	6163      	str	r3, [r4, #20]
 801103c:	2201      	movs	r2, #1
 801103e:	6122      	str	r2, [r4, #16]
 8011040:	3020      	adds	r0, #32
 8011042:	e7e3      	b.n	801100c <__d2b+0x60>
 8011044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801104c:	f8c9 0000 	str.w	r0, [r9]
 8011050:	6918      	ldr	r0, [r3, #16]
 8011052:	f7ff fd2b 	bl	8010aac <__hi0bits>
 8011056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801105a:	e7df      	b.n	801101c <__d2b+0x70>
 801105c:	080125bf 	.word	0x080125bf
 8011060:	080125d0 	.word	0x080125d0

08011064 <_calloc_r>:
 8011064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011066:	fba1 2402 	umull	r2, r4, r1, r2
 801106a:	b94c      	cbnz	r4, 8011080 <_calloc_r+0x1c>
 801106c:	4611      	mov	r1, r2
 801106e:	9201      	str	r2, [sp, #4]
 8011070:	f7fd ff2e 	bl	800eed0 <_malloc_r>
 8011074:	9a01      	ldr	r2, [sp, #4]
 8011076:	4605      	mov	r5, r0
 8011078:	b930      	cbnz	r0, 8011088 <_calloc_r+0x24>
 801107a:	4628      	mov	r0, r5
 801107c:	b003      	add	sp, #12
 801107e:	bd30      	pop	{r4, r5, pc}
 8011080:	220c      	movs	r2, #12
 8011082:	6002      	str	r2, [r0, #0]
 8011084:	2500      	movs	r5, #0
 8011086:	e7f8      	b.n	801107a <_calloc_r+0x16>
 8011088:	4621      	mov	r1, r4
 801108a:	f7fd fef8 	bl	800ee7e <memset>
 801108e:	e7f4      	b.n	801107a <_calloc_r+0x16>

08011090 <_free_r>:
 8011090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011092:	2900      	cmp	r1, #0
 8011094:	d044      	beq.n	8011120 <_free_r+0x90>
 8011096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801109a:	9001      	str	r0, [sp, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	f1a1 0404 	sub.w	r4, r1, #4
 80110a2:	bfb8      	it	lt
 80110a4:	18e4      	addlt	r4, r4, r3
 80110a6:	f7ff fc4d 	bl	8010944 <__malloc_lock>
 80110aa:	4a1e      	ldr	r2, [pc, #120]	; (8011124 <_free_r+0x94>)
 80110ac:	9801      	ldr	r0, [sp, #4]
 80110ae:	6813      	ldr	r3, [r2, #0]
 80110b0:	b933      	cbnz	r3, 80110c0 <_free_r+0x30>
 80110b2:	6063      	str	r3, [r4, #4]
 80110b4:	6014      	str	r4, [r2, #0]
 80110b6:	b003      	add	sp, #12
 80110b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110bc:	f7ff bc48 	b.w	8010950 <__malloc_unlock>
 80110c0:	42a3      	cmp	r3, r4
 80110c2:	d908      	bls.n	80110d6 <_free_r+0x46>
 80110c4:	6825      	ldr	r5, [r4, #0]
 80110c6:	1961      	adds	r1, r4, r5
 80110c8:	428b      	cmp	r3, r1
 80110ca:	bf01      	itttt	eq
 80110cc:	6819      	ldreq	r1, [r3, #0]
 80110ce:	685b      	ldreq	r3, [r3, #4]
 80110d0:	1949      	addeq	r1, r1, r5
 80110d2:	6021      	streq	r1, [r4, #0]
 80110d4:	e7ed      	b.n	80110b2 <_free_r+0x22>
 80110d6:	461a      	mov	r2, r3
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	b10b      	cbz	r3, 80110e0 <_free_r+0x50>
 80110dc:	42a3      	cmp	r3, r4
 80110de:	d9fa      	bls.n	80110d6 <_free_r+0x46>
 80110e0:	6811      	ldr	r1, [r2, #0]
 80110e2:	1855      	adds	r5, r2, r1
 80110e4:	42a5      	cmp	r5, r4
 80110e6:	d10b      	bne.n	8011100 <_free_r+0x70>
 80110e8:	6824      	ldr	r4, [r4, #0]
 80110ea:	4421      	add	r1, r4
 80110ec:	1854      	adds	r4, r2, r1
 80110ee:	42a3      	cmp	r3, r4
 80110f0:	6011      	str	r1, [r2, #0]
 80110f2:	d1e0      	bne.n	80110b6 <_free_r+0x26>
 80110f4:	681c      	ldr	r4, [r3, #0]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	6053      	str	r3, [r2, #4]
 80110fa:	4421      	add	r1, r4
 80110fc:	6011      	str	r1, [r2, #0]
 80110fe:	e7da      	b.n	80110b6 <_free_r+0x26>
 8011100:	d902      	bls.n	8011108 <_free_r+0x78>
 8011102:	230c      	movs	r3, #12
 8011104:	6003      	str	r3, [r0, #0]
 8011106:	e7d6      	b.n	80110b6 <_free_r+0x26>
 8011108:	6825      	ldr	r5, [r4, #0]
 801110a:	1961      	adds	r1, r4, r5
 801110c:	428b      	cmp	r3, r1
 801110e:	bf04      	itt	eq
 8011110:	6819      	ldreq	r1, [r3, #0]
 8011112:	685b      	ldreq	r3, [r3, #4]
 8011114:	6063      	str	r3, [r4, #4]
 8011116:	bf04      	itt	eq
 8011118:	1949      	addeq	r1, r1, r5
 801111a:	6021      	streq	r1, [r4, #0]
 801111c:	6054      	str	r4, [r2, #4]
 801111e:	e7ca      	b.n	80110b6 <_free_r+0x26>
 8011120:	b003      	add	sp, #12
 8011122:	bd30      	pop	{r4, r5, pc}
 8011124:	20006534 	.word	0x20006534

08011128 <__ssputs_r>:
 8011128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801112c:	688e      	ldr	r6, [r1, #8]
 801112e:	429e      	cmp	r6, r3
 8011130:	4682      	mov	sl, r0
 8011132:	460c      	mov	r4, r1
 8011134:	4690      	mov	r8, r2
 8011136:	461f      	mov	r7, r3
 8011138:	d838      	bhi.n	80111ac <__ssputs_r+0x84>
 801113a:	898a      	ldrh	r2, [r1, #12]
 801113c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011140:	d032      	beq.n	80111a8 <__ssputs_r+0x80>
 8011142:	6825      	ldr	r5, [r4, #0]
 8011144:	6909      	ldr	r1, [r1, #16]
 8011146:	eba5 0901 	sub.w	r9, r5, r1
 801114a:	6965      	ldr	r5, [r4, #20]
 801114c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011154:	3301      	adds	r3, #1
 8011156:	444b      	add	r3, r9
 8011158:	106d      	asrs	r5, r5, #1
 801115a:	429d      	cmp	r5, r3
 801115c:	bf38      	it	cc
 801115e:	461d      	movcc	r5, r3
 8011160:	0553      	lsls	r3, r2, #21
 8011162:	d531      	bpl.n	80111c8 <__ssputs_r+0xa0>
 8011164:	4629      	mov	r1, r5
 8011166:	f7fd feb3 	bl	800eed0 <_malloc_r>
 801116a:	4606      	mov	r6, r0
 801116c:	b950      	cbnz	r0, 8011184 <__ssputs_r+0x5c>
 801116e:	230c      	movs	r3, #12
 8011170:	f8ca 3000 	str.w	r3, [sl]
 8011174:	89a3      	ldrh	r3, [r4, #12]
 8011176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801117a:	81a3      	strh	r3, [r4, #12]
 801117c:	f04f 30ff 	mov.w	r0, #4294967295
 8011180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011184:	6921      	ldr	r1, [r4, #16]
 8011186:	464a      	mov	r2, r9
 8011188:	f7fd fe6b 	bl	800ee62 <memcpy>
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011196:	81a3      	strh	r3, [r4, #12]
 8011198:	6126      	str	r6, [r4, #16]
 801119a:	6165      	str	r5, [r4, #20]
 801119c:	444e      	add	r6, r9
 801119e:	eba5 0509 	sub.w	r5, r5, r9
 80111a2:	6026      	str	r6, [r4, #0]
 80111a4:	60a5      	str	r5, [r4, #8]
 80111a6:	463e      	mov	r6, r7
 80111a8:	42be      	cmp	r6, r7
 80111aa:	d900      	bls.n	80111ae <__ssputs_r+0x86>
 80111ac:	463e      	mov	r6, r7
 80111ae:	6820      	ldr	r0, [r4, #0]
 80111b0:	4632      	mov	r2, r6
 80111b2:	4641      	mov	r1, r8
 80111b4:	f000 f968 	bl	8011488 <memmove>
 80111b8:	68a3      	ldr	r3, [r4, #8]
 80111ba:	1b9b      	subs	r3, r3, r6
 80111bc:	60a3      	str	r3, [r4, #8]
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	4433      	add	r3, r6
 80111c2:	6023      	str	r3, [r4, #0]
 80111c4:	2000      	movs	r0, #0
 80111c6:	e7db      	b.n	8011180 <__ssputs_r+0x58>
 80111c8:	462a      	mov	r2, r5
 80111ca:	f000 f977 	bl	80114bc <_realloc_r>
 80111ce:	4606      	mov	r6, r0
 80111d0:	2800      	cmp	r0, #0
 80111d2:	d1e1      	bne.n	8011198 <__ssputs_r+0x70>
 80111d4:	6921      	ldr	r1, [r4, #16]
 80111d6:	4650      	mov	r0, sl
 80111d8:	f7ff ff5a 	bl	8011090 <_free_r>
 80111dc:	e7c7      	b.n	801116e <__ssputs_r+0x46>
	...

080111e0 <_svfiprintf_r>:
 80111e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e4:	4698      	mov	r8, r3
 80111e6:	898b      	ldrh	r3, [r1, #12]
 80111e8:	061b      	lsls	r3, r3, #24
 80111ea:	b09d      	sub	sp, #116	; 0x74
 80111ec:	4607      	mov	r7, r0
 80111ee:	460d      	mov	r5, r1
 80111f0:	4614      	mov	r4, r2
 80111f2:	d50e      	bpl.n	8011212 <_svfiprintf_r+0x32>
 80111f4:	690b      	ldr	r3, [r1, #16]
 80111f6:	b963      	cbnz	r3, 8011212 <_svfiprintf_r+0x32>
 80111f8:	2140      	movs	r1, #64	; 0x40
 80111fa:	f7fd fe69 	bl	800eed0 <_malloc_r>
 80111fe:	6028      	str	r0, [r5, #0]
 8011200:	6128      	str	r0, [r5, #16]
 8011202:	b920      	cbnz	r0, 801120e <_svfiprintf_r+0x2e>
 8011204:	230c      	movs	r3, #12
 8011206:	603b      	str	r3, [r7, #0]
 8011208:	f04f 30ff 	mov.w	r0, #4294967295
 801120c:	e0d1      	b.n	80113b2 <_svfiprintf_r+0x1d2>
 801120e:	2340      	movs	r3, #64	; 0x40
 8011210:	616b      	str	r3, [r5, #20]
 8011212:	2300      	movs	r3, #0
 8011214:	9309      	str	r3, [sp, #36]	; 0x24
 8011216:	2320      	movs	r3, #32
 8011218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801121c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011220:	2330      	movs	r3, #48	; 0x30
 8011222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80113cc <_svfiprintf_r+0x1ec>
 8011226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801122a:	f04f 0901 	mov.w	r9, #1
 801122e:	4623      	mov	r3, r4
 8011230:	469a      	mov	sl, r3
 8011232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011236:	b10a      	cbz	r2, 801123c <_svfiprintf_r+0x5c>
 8011238:	2a25      	cmp	r2, #37	; 0x25
 801123a:	d1f9      	bne.n	8011230 <_svfiprintf_r+0x50>
 801123c:	ebba 0b04 	subs.w	fp, sl, r4
 8011240:	d00b      	beq.n	801125a <_svfiprintf_r+0x7a>
 8011242:	465b      	mov	r3, fp
 8011244:	4622      	mov	r2, r4
 8011246:	4629      	mov	r1, r5
 8011248:	4638      	mov	r0, r7
 801124a:	f7ff ff6d 	bl	8011128 <__ssputs_r>
 801124e:	3001      	adds	r0, #1
 8011250:	f000 80aa 	beq.w	80113a8 <_svfiprintf_r+0x1c8>
 8011254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011256:	445a      	add	r2, fp
 8011258:	9209      	str	r2, [sp, #36]	; 0x24
 801125a:	f89a 3000 	ldrb.w	r3, [sl]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 80a2 	beq.w	80113a8 <_svfiprintf_r+0x1c8>
 8011264:	2300      	movs	r3, #0
 8011266:	f04f 32ff 	mov.w	r2, #4294967295
 801126a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801126e:	f10a 0a01 	add.w	sl, sl, #1
 8011272:	9304      	str	r3, [sp, #16]
 8011274:	9307      	str	r3, [sp, #28]
 8011276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801127a:	931a      	str	r3, [sp, #104]	; 0x68
 801127c:	4654      	mov	r4, sl
 801127e:	2205      	movs	r2, #5
 8011280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011284:	4851      	ldr	r0, [pc, #324]	; (80113cc <_svfiprintf_r+0x1ec>)
 8011286:	f7ee ffb3 	bl	80001f0 <memchr>
 801128a:	9a04      	ldr	r2, [sp, #16]
 801128c:	b9d8      	cbnz	r0, 80112c6 <_svfiprintf_r+0xe6>
 801128e:	06d0      	lsls	r0, r2, #27
 8011290:	bf44      	itt	mi
 8011292:	2320      	movmi	r3, #32
 8011294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011298:	0711      	lsls	r1, r2, #28
 801129a:	bf44      	itt	mi
 801129c:	232b      	movmi	r3, #43	; 0x2b
 801129e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112a2:	f89a 3000 	ldrb.w	r3, [sl]
 80112a6:	2b2a      	cmp	r3, #42	; 0x2a
 80112a8:	d015      	beq.n	80112d6 <_svfiprintf_r+0xf6>
 80112aa:	9a07      	ldr	r2, [sp, #28]
 80112ac:	4654      	mov	r4, sl
 80112ae:	2000      	movs	r0, #0
 80112b0:	f04f 0c0a 	mov.w	ip, #10
 80112b4:	4621      	mov	r1, r4
 80112b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112ba:	3b30      	subs	r3, #48	; 0x30
 80112bc:	2b09      	cmp	r3, #9
 80112be:	d94e      	bls.n	801135e <_svfiprintf_r+0x17e>
 80112c0:	b1b0      	cbz	r0, 80112f0 <_svfiprintf_r+0x110>
 80112c2:	9207      	str	r2, [sp, #28]
 80112c4:	e014      	b.n	80112f0 <_svfiprintf_r+0x110>
 80112c6:	eba0 0308 	sub.w	r3, r0, r8
 80112ca:	fa09 f303 	lsl.w	r3, r9, r3
 80112ce:	4313      	orrs	r3, r2
 80112d0:	9304      	str	r3, [sp, #16]
 80112d2:	46a2      	mov	sl, r4
 80112d4:	e7d2      	b.n	801127c <_svfiprintf_r+0x9c>
 80112d6:	9b03      	ldr	r3, [sp, #12]
 80112d8:	1d19      	adds	r1, r3, #4
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	9103      	str	r1, [sp, #12]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bfbb      	ittet	lt
 80112e2:	425b      	neglt	r3, r3
 80112e4:	f042 0202 	orrlt.w	r2, r2, #2
 80112e8:	9307      	strge	r3, [sp, #28]
 80112ea:	9307      	strlt	r3, [sp, #28]
 80112ec:	bfb8      	it	lt
 80112ee:	9204      	strlt	r2, [sp, #16]
 80112f0:	7823      	ldrb	r3, [r4, #0]
 80112f2:	2b2e      	cmp	r3, #46	; 0x2e
 80112f4:	d10c      	bne.n	8011310 <_svfiprintf_r+0x130>
 80112f6:	7863      	ldrb	r3, [r4, #1]
 80112f8:	2b2a      	cmp	r3, #42	; 0x2a
 80112fa:	d135      	bne.n	8011368 <_svfiprintf_r+0x188>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	1d1a      	adds	r2, r3, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	9203      	str	r2, [sp, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	bfb8      	it	lt
 8011308:	f04f 33ff 	movlt.w	r3, #4294967295
 801130c:	3402      	adds	r4, #2
 801130e:	9305      	str	r3, [sp, #20]
 8011310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80113dc <_svfiprintf_r+0x1fc>
 8011314:	7821      	ldrb	r1, [r4, #0]
 8011316:	2203      	movs	r2, #3
 8011318:	4650      	mov	r0, sl
 801131a:	f7ee ff69 	bl	80001f0 <memchr>
 801131e:	b140      	cbz	r0, 8011332 <_svfiprintf_r+0x152>
 8011320:	2340      	movs	r3, #64	; 0x40
 8011322:	eba0 000a 	sub.w	r0, r0, sl
 8011326:	fa03 f000 	lsl.w	r0, r3, r0
 801132a:	9b04      	ldr	r3, [sp, #16]
 801132c:	4303      	orrs	r3, r0
 801132e:	3401      	adds	r4, #1
 8011330:	9304      	str	r3, [sp, #16]
 8011332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011336:	4826      	ldr	r0, [pc, #152]	; (80113d0 <_svfiprintf_r+0x1f0>)
 8011338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801133c:	2206      	movs	r2, #6
 801133e:	f7ee ff57 	bl	80001f0 <memchr>
 8011342:	2800      	cmp	r0, #0
 8011344:	d038      	beq.n	80113b8 <_svfiprintf_r+0x1d8>
 8011346:	4b23      	ldr	r3, [pc, #140]	; (80113d4 <_svfiprintf_r+0x1f4>)
 8011348:	bb1b      	cbnz	r3, 8011392 <_svfiprintf_r+0x1b2>
 801134a:	9b03      	ldr	r3, [sp, #12]
 801134c:	3307      	adds	r3, #7
 801134e:	f023 0307 	bic.w	r3, r3, #7
 8011352:	3308      	adds	r3, #8
 8011354:	9303      	str	r3, [sp, #12]
 8011356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011358:	4433      	add	r3, r6
 801135a:	9309      	str	r3, [sp, #36]	; 0x24
 801135c:	e767      	b.n	801122e <_svfiprintf_r+0x4e>
 801135e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011362:	460c      	mov	r4, r1
 8011364:	2001      	movs	r0, #1
 8011366:	e7a5      	b.n	80112b4 <_svfiprintf_r+0xd4>
 8011368:	2300      	movs	r3, #0
 801136a:	3401      	adds	r4, #1
 801136c:	9305      	str	r3, [sp, #20]
 801136e:	4619      	mov	r1, r3
 8011370:	f04f 0c0a 	mov.w	ip, #10
 8011374:	4620      	mov	r0, r4
 8011376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801137a:	3a30      	subs	r2, #48	; 0x30
 801137c:	2a09      	cmp	r2, #9
 801137e:	d903      	bls.n	8011388 <_svfiprintf_r+0x1a8>
 8011380:	2b00      	cmp	r3, #0
 8011382:	d0c5      	beq.n	8011310 <_svfiprintf_r+0x130>
 8011384:	9105      	str	r1, [sp, #20]
 8011386:	e7c3      	b.n	8011310 <_svfiprintf_r+0x130>
 8011388:	fb0c 2101 	mla	r1, ip, r1, r2
 801138c:	4604      	mov	r4, r0
 801138e:	2301      	movs	r3, #1
 8011390:	e7f0      	b.n	8011374 <_svfiprintf_r+0x194>
 8011392:	ab03      	add	r3, sp, #12
 8011394:	9300      	str	r3, [sp, #0]
 8011396:	462a      	mov	r2, r5
 8011398:	4b0f      	ldr	r3, [pc, #60]	; (80113d8 <_svfiprintf_r+0x1f8>)
 801139a:	a904      	add	r1, sp, #16
 801139c:	4638      	mov	r0, r7
 801139e:	f7fd feab 	bl	800f0f8 <_printf_float>
 80113a2:	1c42      	adds	r2, r0, #1
 80113a4:	4606      	mov	r6, r0
 80113a6:	d1d6      	bne.n	8011356 <_svfiprintf_r+0x176>
 80113a8:	89ab      	ldrh	r3, [r5, #12]
 80113aa:	065b      	lsls	r3, r3, #25
 80113ac:	f53f af2c 	bmi.w	8011208 <_svfiprintf_r+0x28>
 80113b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113b2:	b01d      	add	sp, #116	; 0x74
 80113b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b8:	ab03      	add	r3, sp, #12
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	462a      	mov	r2, r5
 80113be:	4b06      	ldr	r3, [pc, #24]	; (80113d8 <_svfiprintf_r+0x1f8>)
 80113c0:	a904      	add	r1, sp, #16
 80113c2:	4638      	mov	r0, r7
 80113c4:	f7fe f93c 	bl	800f640 <_printf_i>
 80113c8:	e7eb      	b.n	80113a2 <_svfiprintf_r+0x1c2>
 80113ca:	bf00      	nop
 80113cc:	0801272c 	.word	0x0801272c
 80113d0:	08012736 	.word	0x08012736
 80113d4:	0800f0f9 	.word	0x0800f0f9
 80113d8:	08011129 	.word	0x08011129
 80113dc:	08012732 	.word	0x08012732

080113e0 <_read_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4d07      	ldr	r5, [pc, #28]	; (8011400 <_read_r+0x20>)
 80113e4:	4604      	mov	r4, r0
 80113e6:	4608      	mov	r0, r1
 80113e8:	4611      	mov	r1, r2
 80113ea:	2200      	movs	r2, #0
 80113ec:	602a      	str	r2, [r5, #0]
 80113ee:	461a      	mov	r2, r3
 80113f0:	f7f3 fbf8 	bl	8004be4 <_read>
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	d102      	bne.n	80113fe <_read_r+0x1e>
 80113f8:	682b      	ldr	r3, [r5, #0]
 80113fa:	b103      	cbz	r3, 80113fe <_read_r+0x1e>
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	bd38      	pop	{r3, r4, r5, pc}
 8011400:	2000653c 	.word	0x2000653c

08011404 <__assert_func>:
 8011404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011406:	4614      	mov	r4, r2
 8011408:	461a      	mov	r2, r3
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <__assert_func+0x2c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4605      	mov	r5, r0
 8011410:	68d8      	ldr	r0, [r3, #12]
 8011412:	b14c      	cbz	r4, 8011428 <__assert_func+0x24>
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <__assert_func+0x30>)
 8011416:	9100      	str	r1, [sp, #0]
 8011418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801141c:	4906      	ldr	r1, [pc, #24]	; (8011438 <__assert_func+0x34>)
 801141e:	462b      	mov	r3, r5
 8011420:	f000 f80e 	bl	8011440 <fiprintf>
 8011424:	f000 faa0 	bl	8011968 <abort>
 8011428:	4b04      	ldr	r3, [pc, #16]	; (801143c <__assert_func+0x38>)
 801142a:	461c      	mov	r4, r3
 801142c:	e7f3      	b.n	8011416 <__assert_func+0x12>
 801142e:	bf00      	nop
 8011430:	20000028 	.word	0x20000028
 8011434:	0801273d 	.word	0x0801273d
 8011438:	0801274a 	.word	0x0801274a
 801143c:	08012778 	.word	0x08012778

08011440 <fiprintf>:
 8011440:	b40e      	push	{r1, r2, r3}
 8011442:	b503      	push	{r0, r1, lr}
 8011444:	4601      	mov	r1, r0
 8011446:	ab03      	add	r3, sp, #12
 8011448:	4805      	ldr	r0, [pc, #20]	; (8011460 <fiprintf+0x20>)
 801144a:	f853 2b04 	ldr.w	r2, [r3], #4
 801144e:	6800      	ldr	r0, [r0, #0]
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	f000 f88b 	bl	801156c <_vfiprintf_r>
 8011456:	b002      	add	sp, #8
 8011458:	f85d eb04 	ldr.w	lr, [sp], #4
 801145c:	b003      	add	sp, #12
 801145e:	4770      	bx	lr
 8011460:	20000028 	.word	0x20000028

08011464 <__ascii_mbtowc>:
 8011464:	b082      	sub	sp, #8
 8011466:	b901      	cbnz	r1, 801146a <__ascii_mbtowc+0x6>
 8011468:	a901      	add	r1, sp, #4
 801146a:	b142      	cbz	r2, 801147e <__ascii_mbtowc+0x1a>
 801146c:	b14b      	cbz	r3, 8011482 <__ascii_mbtowc+0x1e>
 801146e:	7813      	ldrb	r3, [r2, #0]
 8011470:	600b      	str	r3, [r1, #0]
 8011472:	7812      	ldrb	r2, [r2, #0]
 8011474:	1e10      	subs	r0, r2, #0
 8011476:	bf18      	it	ne
 8011478:	2001      	movne	r0, #1
 801147a:	b002      	add	sp, #8
 801147c:	4770      	bx	lr
 801147e:	4610      	mov	r0, r2
 8011480:	e7fb      	b.n	801147a <__ascii_mbtowc+0x16>
 8011482:	f06f 0001 	mvn.w	r0, #1
 8011486:	e7f8      	b.n	801147a <__ascii_mbtowc+0x16>

08011488 <memmove>:
 8011488:	4288      	cmp	r0, r1
 801148a:	b510      	push	{r4, lr}
 801148c:	eb01 0402 	add.w	r4, r1, r2
 8011490:	d902      	bls.n	8011498 <memmove+0x10>
 8011492:	4284      	cmp	r4, r0
 8011494:	4623      	mov	r3, r4
 8011496:	d807      	bhi.n	80114a8 <memmove+0x20>
 8011498:	1e43      	subs	r3, r0, #1
 801149a:	42a1      	cmp	r1, r4
 801149c:	d008      	beq.n	80114b0 <memmove+0x28>
 801149e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114a6:	e7f8      	b.n	801149a <memmove+0x12>
 80114a8:	4402      	add	r2, r0
 80114aa:	4601      	mov	r1, r0
 80114ac:	428a      	cmp	r2, r1
 80114ae:	d100      	bne.n	80114b2 <memmove+0x2a>
 80114b0:	bd10      	pop	{r4, pc}
 80114b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114ba:	e7f7      	b.n	80114ac <memmove+0x24>

080114bc <_realloc_r>:
 80114bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c0:	4680      	mov	r8, r0
 80114c2:	4614      	mov	r4, r2
 80114c4:	460e      	mov	r6, r1
 80114c6:	b921      	cbnz	r1, 80114d2 <_realloc_r+0x16>
 80114c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114cc:	4611      	mov	r1, r2
 80114ce:	f7fd bcff 	b.w	800eed0 <_malloc_r>
 80114d2:	b92a      	cbnz	r2, 80114e0 <_realloc_r+0x24>
 80114d4:	f7ff fddc 	bl	8011090 <_free_r>
 80114d8:	4625      	mov	r5, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e0:	f000 faae 	bl	8011a40 <_malloc_usable_size_r>
 80114e4:	4284      	cmp	r4, r0
 80114e6:	4607      	mov	r7, r0
 80114e8:	d802      	bhi.n	80114f0 <_realloc_r+0x34>
 80114ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80114ee:	d812      	bhi.n	8011516 <_realloc_r+0x5a>
 80114f0:	4621      	mov	r1, r4
 80114f2:	4640      	mov	r0, r8
 80114f4:	f7fd fcec 	bl	800eed0 <_malloc_r>
 80114f8:	4605      	mov	r5, r0
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d0ed      	beq.n	80114da <_realloc_r+0x1e>
 80114fe:	42bc      	cmp	r4, r7
 8011500:	4622      	mov	r2, r4
 8011502:	4631      	mov	r1, r6
 8011504:	bf28      	it	cs
 8011506:	463a      	movcs	r2, r7
 8011508:	f7fd fcab 	bl	800ee62 <memcpy>
 801150c:	4631      	mov	r1, r6
 801150e:	4640      	mov	r0, r8
 8011510:	f7ff fdbe 	bl	8011090 <_free_r>
 8011514:	e7e1      	b.n	80114da <_realloc_r+0x1e>
 8011516:	4635      	mov	r5, r6
 8011518:	e7df      	b.n	80114da <_realloc_r+0x1e>

0801151a <__sfputc_r>:
 801151a:	6893      	ldr	r3, [r2, #8]
 801151c:	3b01      	subs	r3, #1
 801151e:	2b00      	cmp	r3, #0
 8011520:	b410      	push	{r4}
 8011522:	6093      	str	r3, [r2, #8]
 8011524:	da08      	bge.n	8011538 <__sfputc_r+0x1e>
 8011526:	6994      	ldr	r4, [r2, #24]
 8011528:	42a3      	cmp	r3, r4
 801152a:	db01      	blt.n	8011530 <__sfputc_r+0x16>
 801152c:	290a      	cmp	r1, #10
 801152e:	d103      	bne.n	8011538 <__sfputc_r+0x1e>
 8011530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011534:	f000 b94a 	b.w	80117cc <__swbuf_r>
 8011538:	6813      	ldr	r3, [r2, #0]
 801153a:	1c58      	adds	r0, r3, #1
 801153c:	6010      	str	r0, [r2, #0]
 801153e:	7019      	strb	r1, [r3, #0]
 8011540:	4608      	mov	r0, r1
 8011542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011546:	4770      	bx	lr

08011548 <__sfputs_r>:
 8011548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154a:	4606      	mov	r6, r0
 801154c:	460f      	mov	r7, r1
 801154e:	4614      	mov	r4, r2
 8011550:	18d5      	adds	r5, r2, r3
 8011552:	42ac      	cmp	r4, r5
 8011554:	d101      	bne.n	801155a <__sfputs_r+0x12>
 8011556:	2000      	movs	r0, #0
 8011558:	e007      	b.n	801156a <__sfputs_r+0x22>
 801155a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801155e:	463a      	mov	r2, r7
 8011560:	4630      	mov	r0, r6
 8011562:	f7ff ffda 	bl	801151a <__sfputc_r>
 8011566:	1c43      	adds	r3, r0, #1
 8011568:	d1f3      	bne.n	8011552 <__sfputs_r+0xa>
 801156a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801156c <_vfiprintf_r>:
 801156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011570:	460d      	mov	r5, r1
 8011572:	b09d      	sub	sp, #116	; 0x74
 8011574:	4614      	mov	r4, r2
 8011576:	4698      	mov	r8, r3
 8011578:	4606      	mov	r6, r0
 801157a:	b118      	cbz	r0, 8011584 <_vfiprintf_r+0x18>
 801157c:	6983      	ldr	r3, [r0, #24]
 801157e:	b90b      	cbnz	r3, 8011584 <_vfiprintf_r+0x18>
 8011580:	f7fd fbaa 	bl	800ecd8 <__sinit>
 8011584:	4b89      	ldr	r3, [pc, #548]	; (80117ac <_vfiprintf_r+0x240>)
 8011586:	429d      	cmp	r5, r3
 8011588:	d11b      	bne.n	80115c2 <_vfiprintf_r+0x56>
 801158a:	6875      	ldr	r5, [r6, #4]
 801158c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801158e:	07d9      	lsls	r1, r3, #31
 8011590:	d405      	bmi.n	801159e <_vfiprintf_r+0x32>
 8011592:	89ab      	ldrh	r3, [r5, #12]
 8011594:	059a      	lsls	r2, r3, #22
 8011596:	d402      	bmi.n	801159e <_vfiprintf_r+0x32>
 8011598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801159a:	f7fd fc60 	bl	800ee5e <__retarget_lock_acquire_recursive>
 801159e:	89ab      	ldrh	r3, [r5, #12]
 80115a0:	071b      	lsls	r3, r3, #28
 80115a2:	d501      	bpl.n	80115a8 <_vfiprintf_r+0x3c>
 80115a4:	692b      	ldr	r3, [r5, #16]
 80115a6:	b9eb      	cbnz	r3, 80115e4 <_vfiprintf_r+0x78>
 80115a8:	4629      	mov	r1, r5
 80115aa:	4630      	mov	r0, r6
 80115ac:	f000 f96e 	bl	801188c <__swsetup_r>
 80115b0:	b1c0      	cbz	r0, 80115e4 <_vfiprintf_r+0x78>
 80115b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115b4:	07dc      	lsls	r4, r3, #31
 80115b6:	d50e      	bpl.n	80115d6 <_vfiprintf_r+0x6a>
 80115b8:	f04f 30ff 	mov.w	r0, #4294967295
 80115bc:	b01d      	add	sp, #116	; 0x74
 80115be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c2:	4b7b      	ldr	r3, [pc, #492]	; (80117b0 <_vfiprintf_r+0x244>)
 80115c4:	429d      	cmp	r5, r3
 80115c6:	d101      	bne.n	80115cc <_vfiprintf_r+0x60>
 80115c8:	68b5      	ldr	r5, [r6, #8]
 80115ca:	e7df      	b.n	801158c <_vfiprintf_r+0x20>
 80115cc:	4b79      	ldr	r3, [pc, #484]	; (80117b4 <_vfiprintf_r+0x248>)
 80115ce:	429d      	cmp	r5, r3
 80115d0:	bf08      	it	eq
 80115d2:	68f5      	ldreq	r5, [r6, #12]
 80115d4:	e7da      	b.n	801158c <_vfiprintf_r+0x20>
 80115d6:	89ab      	ldrh	r3, [r5, #12]
 80115d8:	0598      	lsls	r0, r3, #22
 80115da:	d4ed      	bmi.n	80115b8 <_vfiprintf_r+0x4c>
 80115dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115de:	f7fd fc3f 	bl	800ee60 <__retarget_lock_release_recursive>
 80115e2:	e7e9      	b.n	80115b8 <_vfiprintf_r+0x4c>
 80115e4:	2300      	movs	r3, #0
 80115e6:	9309      	str	r3, [sp, #36]	; 0x24
 80115e8:	2320      	movs	r3, #32
 80115ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80115f2:	2330      	movs	r3, #48	; 0x30
 80115f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80117b8 <_vfiprintf_r+0x24c>
 80115f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115fc:	f04f 0901 	mov.w	r9, #1
 8011600:	4623      	mov	r3, r4
 8011602:	469a      	mov	sl, r3
 8011604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011608:	b10a      	cbz	r2, 801160e <_vfiprintf_r+0xa2>
 801160a:	2a25      	cmp	r2, #37	; 0x25
 801160c:	d1f9      	bne.n	8011602 <_vfiprintf_r+0x96>
 801160e:	ebba 0b04 	subs.w	fp, sl, r4
 8011612:	d00b      	beq.n	801162c <_vfiprintf_r+0xc0>
 8011614:	465b      	mov	r3, fp
 8011616:	4622      	mov	r2, r4
 8011618:	4629      	mov	r1, r5
 801161a:	4630      	mov	r0, r6
 801161c:	f7ff ff94 	bl	8011548 <__sfputs_r>
 8011620:	3001      	adds	r0, #1
 8011622:	f000 80aa 	beq.w	801177a <_vfiprintf_r+0x20e>
 8011626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011628:	445a      	add	r2, fp
 801162a:	9209      	str	r2, [sp, #36]	; 0x24
 801162c:	f89a 3000 	ldrb.w	r3, [sl]
 8011630:	2b00      	cmp	r3, #0
 8011632:	f000 80a2 	beq.w	801177a <_vfiprintf_r+0x20e>
 8011636:	2300      	movs	r3, #0
 8011638:	f04f 32ff 	mov.w	r2, #4294967295
 801163c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011640:	f10a 0a01 	add.w	sl, sl, #1
 8011644:	9304      	str	r3, [sp, #16]
 8011646:	9307      	str	r3, [sp, #28]
 8011648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801164c:	931a      	str	r3, [sp, #104]	; 0x68
 801164e:	4654      	mov	r4, sl
 8011650:	2205      	movs	r2, #5
 8011652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011656:	4858      	ldr	r0, [pc, #352]	; (80117b8 <_vfiprintf_r+0x24c>)
 8011658:	f7ee fdca 	bl	80001f0 <memchr>
 801165c:	9a04      	ldr	r2, [sp, #16]
 801165e:	b9d8      	cbnz	r0, 8011698 <_vfiprintf_r+0x12c>
 8011660:	06d1      	lsls	r1, r2, #27
 8011662:	bf44      	itt	mi
 8011664:	2320      	movmi	r3, #32
 8011666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801166a:	0713      	lsls	r3, r2, #28
 801166c:	bf44      	itt	mi
 801166e:	232b      	movmi	r3, #43	; 0x2b
 8011670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011674:	f89a 3000 	ldrb.w	r3, [sl]
 8011678:	2b2a      	cmp	r3, #42	; 0x2a
 801167a:	d015      	beq.n	80116a8 <_vfiprintf_r+0x13c>
 801167c:	9a07      	ldr	r2, [sp, #28]
 801167e:	4654      	mov	r4, sl
 8011680:	2000      	movs	r0, #0
 8011682:	f04f 0c0a 	mov.w	ip, #10
 8011686:	4621      	mov	r1, r4
 8011688:	f811 3b01 	ldrb.w	r3, [r1], #1
 801168c:	3b30      	subs	r3, #48	; 0x30
 801168e:	2b09      	cmp	r3, #9
 8011690:	d94e      	bls.n	8011730 <_vfiprintf_r+0x1c4>
 8011692:	b1b0      	cbz	r0, 80116c2 <_vfiprintf_r+0x156>
 8011694:	9207      	str	r2, [sp, #28]
 8011696:	e014      	b.n	80116c2 <_vfiprintf_r+0x156>
 8011698:	eba0 0308 	sub.w	r3, r0, r8
 801169c:	fa09 f303 	lsl.w	r3, r9, r3
 80116a0:	4313      	orrs	r3, r2
 80116a2:	9304      	str	r3, [sp, #16]
 80116a4:	46a2      	mov	sl, r4
 80116a6:	e7d2      	b.n	801164e <_vfiprintf_r+0xe2>
 80116a8:	9b03      	ldr	r3, [sp, #12]
 80116aa:	1d19      	adds	r1, r3, #4
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	9103      	str	r1, [sp, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	bfbb      	ittet	lt
 80116b4:	425b      	neglt	r3, r3
 80116b6:	f042 0202 	orrlt.w	r2, r2, #2
 80116ba:	9307      	strge	r3, [sp, #28]
 80116bc:	9307      	strlt	r3, [sp, #28]
 80116be:	bfb8      	it	lt
 80116c0:	9204      	strlt	r2, [sp, #16]
 80116c2:	7823      	ldrb	r3, [r4, #0]
 80116c4:	2b2e      	cmp	r3, #46	; 0x2e
 80116c6:	d10c      	bne.n	80116e2 <_vfiprintf_r+0x176>
 80116c8:	7863      	ldrb	r3, [r4, #1]
 80116ca:	2b2a      	cmp	r3, #42	; 0x2a
 80116cc:	d135      	bne.n	801173a <_vfiprintf_r+0x1ce>
 80116ce:	9b03      	ldr	r3, [sp, #12]
 80116d0:	1d1a      	adds	r2, r3, #4
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	9203      	str	r2, [sp, #12]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	bfb8      	it	lt
 80116da:	f04f 33ff 	movlt.w	r3, #4294967295
 80116de:	3402      	adds	r4, #2
 80116e0:	9305      	str	r3, [sp, #20]
 80116e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80117c8 <_vfiprintf_r+0x25c>
 80116e6:	7821      	ldrb	r1, [r4, #0]
 80116e8:	2203      	movs	r2, #3
 80116ea:	4650      	mov	r0, sl
 80116ec:	f7ee fd80 	bl	80001f0 <memchr>
 80116f0:	b140      	cbz	r0, 8011704 <_vfiprintf_r+0x198>
 80116f2:	2340      	movs	r3, #64	; 0x40
 80116f4:	eba0 000a 	sub.w	r0, r0, sl
 80116f8:	fa03 f000 	lsl.w	r0, r3, r0
 80116fc:	9b04      	ldr	r3, [sp, #16]
 80116fe:	4303      	orrs	r3, r0
 8011700:	3401      	adds	r4, #1
 8011702:	9304      	str	r3, [sp, #16]
 8011704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011708:	482c      	ldr	r0, [pc, #176]	; (80117bc <_vfiprintf_r+0x250>)
 801170a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801170e:	2206      	movs	r2, #6
 8011710:	f7ee fd6e 	bl	80001f0 <memchr>
 8011714:	2800      	cmp	r0, #0
 8011716:	d03f      	beq.n	8011798 <_vfiprintf_r+0x22c>
 8011718:	4b29      	ldr	r3, [pc, #164]	; (80117c0 <_vfiprintf_r+0x254>)
 801171a:	bb1b      	cbnz	r3, 8011764 <_vfiprintf_r+0x1f8>
 801171c:	9b03      	ldr	r3, [sp, #12]
 801171e:	3307      	adds	r3, #7
 8011720:	f023 0307 	bic.w	r3, r3, #7
 8011724:	3308      	adds	r3, #8
 8011726:	9303      	str	r3, [sp, #12]
 8011728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801172a:	443b      	add	r3, r7
 801172c:	9309      	str	r3, [sp, #36]	; 0x24
 801172e:	e767      	b.n	8011600 <_vfiprintf_r+0x94>
 8011730:	fb0c 3202 	mla	r2, ip, r2, r3
 8011734:	460c      	mov	r4, r1
 8011736:	2001      	movs	r0, #1
 8011738:	e7a5      	b.n	8011686 <_vfiprintf_r+0x11a>
 801173a:	2300      	movs	r3, #0
 801173c:	3401      	adds	r4, #1
 801173e:	9305      	str	r3, [sp, #20]
 8011740:	4619      	mov	r1, r3
 8011742:	f04f 0c0a 	mov.w	ip, #10
 8011746:	4620      	mov	r0, r4
 8011748:	f810 2b01 	ldrb.w	r2, [r0], #1
 801174c:	3a30      	subs	r2, #48	; 0x30
 801174e:	2a09      	cmp	r2, #9
 8011750:	d903      	bls.n	801175a <_vfiprintf_r+0x1ee>
 8011752:	2b00      	cmp	r3, #0
 8011754:	d0c5      	beq.n	80116e2 <_vfiprintf_r+0x176>
 8011756:	9105      	str	r1, [sp, #20]
 8011758:	e7c3      	b.n	80116e2 <_vfiprintf_r+0x176>
 801175a:	fb0c 2101 	mla	r1, ip, r1, r2
 801175e:	4604      	mov	r4, r0
 8011760:	2301      	movs	r3, #1
 8011762:	e7f0      	b.n	8011746 <_vfiprintf_r+0x1da>
 8011764:	ab03      	add	r3, sp, #12
 8011766:	9300      	str	r3, [sp, #0]
 8011768:	462a      	mov	r2, r5
 801176a:	4b16      	ldr	r3, [pc, #88]	; (80117c4 <_vfiprintf_r+0x258>)
 801176c:	a904      	add	r1, sp, #16
 801176e:	4630      	mov	r0, r6
 8011770:	f7fd fcc2 	bl	800f0f8 <_printf_float>
 8011774:	4607      	mov	r7, r0
 8011776:	1c78      	adds	r0, r7, #1
 8011778:	d1d6      	bne.n	8011728 <_vfiprintf_r+0x1bc>
 801177a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801177c:	07d9      	lsls	r1, r3, #31
 801177e:	d405      	bmi.n	801178c <_vfiprintf_r+0x220>
 8011780:	89ab      	ldrh	r3, [r5, #12]
 8011782:	059a      	lsls	r2, r3, #22
 8011784:	d402      	bmi.n	801178c <_vfiprintf_r+0x220>
 8011786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011788:	f7fd fb6a 	bl	800ee60 <__retarget_lock_release_recursive>
 801178c:	89ab      	ldrh	r3, [r5, #12]
 801178e:	065b      	lsls	r3, r3, #25
 8011790:	f53f af12 	bmi.w	80115b8 <_vfiprintf_r+0x4c>
 8011794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011796:	e711      	b.n	80115bc <_vfiprintf_r+0x50>
 8011798:	ab03      	add	r3, sp, #12
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	462a      	mov	r2, r5
 801179e:	4b09      	ldr	r3, [pc, #36]	; (80117c4 <_vfiprintf_r+0x258>)
 80117a0:	a904      	add	r1, sp, #16
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7fd ff4c 	bl	800f640 <_printf_i>
 80117a8:	e7e4      	b.n	8011774 <_vfiprintf_r+0x208>
 80117aa:	bf00      	nop
 80117ac:	080124c8 	.word	0x080124c8
 80117b0:	080124e8 	.word	0x080124e8
 80117b4:	080124a8 	.word	0x080124a8
 80117b8:	0801272c 	.word	0x0801272c
 80117bc:	08012736 	.word	0x08012736
 80117c0:	0800f0f9 	.word	0x0800f0f9
 80117c4:	08011549 	.word	0x08011549
 80117c8:	08012732 	.word	0x08012732

080117cc <__swbuf_r>:
 80117cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ce:	460e      	mov	r6, r1
 80117d0:	4614      	mov	r4, r2
 80117d2:	4605      	mov	r5, r0
 80117d4:	b118      	cbz	r0, 80117de <__swbuf_r+0x12>
 80117d6:	6983      	ldr	r3, [r0, #24]
 80117d8:	b90b      	cbnz	r3, 80117de <__swbuf_r+0x12>
 80117da:	f7fd fa7d 	bl	800ecd8 <__sinit>
 80117de:	4b21      	ldr	r3, [pc, #132]	; (8011864 <__swbuf_r+0x98>)
 80117e0:	429c      	cmp	r4, r3
 80117e2:	d12b      	bne.n	801183c <__swbuf_r+0x70>
 80117e4:	686c      	ldr	r4, [r5, #4]
 80117e6:	69a3      	ldr	r3, [r4, #24]
 80117e8:	60a3      	str	r3, [r4, #8]
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	071a      	lsls	r2, r3, #28
 80117ee:	d52f      	bpl.n	8011850 <__swbuf_r+0x84>
 80117f0:	6923      	ldr	r3, [r4, #16]
 80117f2:	b36b      	cbz	r3, 8011850 <__swbuf_r+0x84>
 80117f4:	6923      	ldr	r3, [r4, #16]
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	1ac0      	subs	r0, r0, r3
 80117fa:	6963      	ldr	r3, [r4, #20]
 80117fc:	b2f6      	uxtb	r6, r6
 80117fe:	4283      	cmp	r3, r0
 8011800:	4637      	mov	r7, r6
 8011802:	dc04      	bgt.n	801180e <__swbuf_r+0x42>
 8011804:	4621      	mov	r1, r4
 8011806:	4628      	mov	r0, r5
 8011808:	f7ff f842 	bl	8010890 <_fflush_r>
 801180c:	bb30      	cbnz	r0, 801185c <__swbuf_r+0x90>
 801180e:	68a3      	ldr	r3, [r4, #8]
 8011810:	3b01      	subs	r3, #1
 8011812:	60a3      	str	r3, [r4, #8]
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	6022      	str	r2, [r4, #0]
 801181a:	701e      	strb	r6, [r3, #0]
 801181c:	6963      	ldr	r3, [r4, #20]
 801181e:	3001      	adds	r0, #1
 8011820:	4283      	cmp	r3, r0
 8011822:	d004      	beq.n	801182e <__swbuf_r+0x62>
 8011824:	89a3      	ldrh	r3, [r4, #12]
 8011826:	07db      	lsls	r3, r3, #31
 8011828:	d506      	bpl.n	8011838 <__swbuf_r+0x6c>
 801182a:	2e0a      	cmp	r6, #10
 801182c:	d104      	bne.n	8011838 <__swbuf_r+0x6c>
 801182e:	4621      	mov	r1, r4
 8011830:	4628      	mov	r0, r5
 8011832:	f7ff f82d 	bl	8010890 <_fflush_r>
 8011836:	b988      	cbnz	r0, 801185c <__swbuf_r+0x90>
 8011838:	4638      	mov	r0, r7
 801183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <__swbuf_r+0x9c>)
 801183e:	429c      	cmp	r4, r3
 8011840:	d101      	bne.n	8011846 <__swbuf_r+0x7a>
 8011842:	68ac      	ldr	r4, [r5, #8]
 8011844:	e7cf      	b.n	80117e6 <__swbuf_r+0x1a>
 8011846:	4b09      	ldr	r3, [pc, #36]	; (801186c <__swbuf_r+0xa0>)
 8011848:	429c      	cmp	r4, r3
 801184a:	bf08      	it	eq
 801184c:	68ec      	ldreq	r4, [r5, #12]
 801184e:	e7ca      	b.n	80117e6 <__swbuf_r+0x1a>
 8011850:	4621      	mov	r1, r4
 8011852:	4628      	mov	r0, r5
 8011854:	f000 f81a 	bl	801188c <__swsetup_r>
 8011858:	2800      	cmp	r0, #0
 801185a:	d0cb      	beq.n	80117f4 <__swbuf_r+0x28>
 801185c:	f04f 37ff 	mov.w	r7, #4294967295
 8011860:	e7ea      	b.n	8011838 <__swbuf_r+0x6c>
 8011862:	bf00      	nop
 8011864:	080124c8 	.word	0x080124c8
 8011868:	080124e8 	.word	0x080124e8
 801186c:	080124a8 	.word	0x080124a8

08011870 <__ascii_wctomb>:
 8011870:	b149      	cbz	r1, 8011886 <__ascii_wctomb+0x16>
 8011872:	2aff      	cmp	r2, #255	; 0xff
 8011874:	bf85      	ittet	hi
 8011876:	238a      	movhi	r3, #138	; 0x8a
 8011878:	6003      	strhi	r3, [r0, #0]
 801187a:	700a      	strbls	r2, [r1, #0]
 801187c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011880:	bf98      	it	ls
 8011882:	2001      	movls	r0, #1
 8011884:	4770      	bx	lr
 8011886:	4608      	mov	r0, r1
 8011888:	4770      	bx	lr
	...

0801188c <__swsetup_r>:
 801188c:	4b32      	ldr	r3, [pc, #200]	; (8011958 <__swsetup_r+0xcc>)
 801188e:	b570      	push	{r4, r5, r6, lr}
 8011890:	681d      	ldr	r5, [r3, #0]
 8011892:	4606      	mov	r6, r0
 8011894:	460c      	mov	r4, r1
 8011896:	b125      	cbz	r5, 80118a2 <__swsetup_r+0x16>
 8011898:	69ab      	ldr	r3, [r5, #24]
 801189a:	b913      	cbnz	r3, 80118a2 <__swsetup_r+0x16>
 801189c:	4628      	mov	r0, r5
 801189e:	f7fd fa1b 	bl	800ecd8 <__sinit>
 80118a2:	4b2e      	ldr	r3, [pc, #184]	; (801195c <__swsetup_r+0xd0>)
 80118a4:	429c      	cmp	r4, r3
 80118a6:	d10f      	bne.n	80118c8 <__swsetup_r+0x3c>
 80118a8:	686c      	ldr	r4, [r5, #4]
 80118aa:	89a3      	ldrh	r3, [r4, #12]
 80118ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118b0:	0719      	lsls	r1, r3, #28
 80118b2:	d42c      	bmi.n	801190e <__swsetup_r+0x82>
 80118b4:	06dd      	lsls	r5, r3, #27
 80118b6:	d411      	bmi.n	80118dc <__swsetup_r+0x50>
 80118b8:	2309      	movs	r3, #9
 80118ba:	6033      	str	r3, [r6, #0]
 80118bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118c0:	81a3      	strh	r3, [r4, #12]
 80118c2:	f04f 30ff 	mov.w	r0, #4294967295
 80118c6:	e03e      	b.n	8011946 <__swsetup_r+0xba>
 80118c8:	4b25      	ldr	r3, [pc, #148]	; (8011960 <__swsetup_r+0xd4>)
 80118ca:	429c      	cmp	r4, r3
 80118cc:	d101      	bne.n	80118d2 <__swsetup_r+0x46>
 80118ce:	68ac      	ldr	r4, [r5, #8]
 80118d0:	e7eb      	b.n	80118aa <__swsetup_r+0x1e>
 80118d2:	4b24      	ldr	r3, [pc, #144]	; (8011964 <__swsetup_r+0xd8>)
 80118d4:	429c      	cmp	r4, r3
 80118d6:	bf08      	it	eq
 80118d8:	68ec      	ldreq	r4, [r5, #12]
 80118da:	e7e6      	b.n	80118aa <__swsetup_r+0x1e>
 80118dc:	0758      	lsls	r0, r3, #29
 80118de:	d512      	bpl.n	8011906 <__swsetup_r+0x7a>
 80118e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118e2:	b141      	cbz	r1, 80118f6 <__swsetup_r+0x6a>
 80118e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118e8:	4299      	cmp	r1, r3
 80118ea:	d002      	beq.n	80118f2 <__swsetup_r+0x66>
 80118ec:	4630      	mov	r0, r6
 80118ee:	f7ff fbcf 	bl	8011090 <_free_r>
 80118f2:	2300      	movs	r3, #0
 80118f4:	6363      	str	r3, [r4, #52]	; 0x34
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	2300      	movs	r3, #0
 8011900:	6063      	str	r3, [r4, #4]
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	f043 0308 	orr.w	r3, r3, #8
 801190c:	81a3      	strh	r3, [r4, #12]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	b94b      	cbnz	r3, 8011926 <__swsetup_r+0x9a>
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801191c:	d003      	beq.n	8011926 <__swsetup_r+0x9a>
 801191e:	4621      	mov	r1, r4
 8011920:	4630      	mov	r0, r6
 8011922:	f000 f84d 	bl	80119c0 <__smakebuf_r>
 8011926:	89a0      	ldrh	r0, [r4, #12]
 8011928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801192c:	f010 0301 	ands.w	r3, r0, #1
 8011930:	d00a      	beq.n	8011948 <__swsetup_r+0xbc>
 8011932:	2300      	movs	r3, #0
 8011934:	60a3      	str	r3, [r4, #8]
 8011936:	6963      	ldr	r3, [r4, #20]
 8011938:	425b      	negs	r3, r3
 801193a:	61a3      	str	r3, [r4, #24]
 801193c:	6923      	ldr	r3, [r4, #16]
 801193e:	b943      	cbnz	r3, 8011952 <__swsetup_r+0xc6>
 8011940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011944:	d1ba      	bne.n	80118bc <__swsetup_r+0x30>
 8011946:	bd70      	pop	{r4, r5, r6, pc}
 8011948:	0781      	lsls	r1, r0, #30
 801194a:	bf58      	it	pl
 801194c:	6963      	ldrpl	r3, [r4, #20]
 801194e:	60a3      	str	r3, [r4, #8]
 8011950:	e7f4      	b.n	801193c <__swsetup_r+0xb0>
 8011952:	2000      	movs	r0, #0
 8011954:	e7f7      	b.n	8011946 <__swsetup_r+0xba>
 8011956:	bf00      	nop
 8011958:	20000028 	.word	0x20000028
 801195c:	080124c8 	.word	0x080124c8
 8011960:	080124e8 	.word	0x080124e8
 8011964:	080124a8 	.word	0x080124a8

08011968 <abort>:
 8011968:	b508      	push	{r3, lr}
 801196a:	2006      	movs	r0, #6
 801196c:	f000 f898 	bl	8011aa0 <raise>
 8011970:	2001      	movs	r0, #1
 8011972:	f7f3 f92d 	bl	8004bd0 <_exit>

08011976 <__swhatbuf_r>:
 8011976:	b570      	push	{r4, r5, r6, lr}
 8011978:	460e      	mov	r6, r1
 801197a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801197e:	2900      	cmp	r1, #0
 8011980:	b096      	sub	sp, #88	; 0x58
 8011982:	4614      	mov	r4, r2
 8011984:	461d      	mov	r5, r3
 8011986:	da08      	bge.n	801199a <__swhatbuf_r+0x24>
 8011988:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	602a      	str	r2, [r5, #0]
 8011990:	061a      	lsls	r2, r3, #24
 8011992:	d410      	bmi.n	80119b6 <__swhatbuf_r+0x40>
 8011994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011998:	e00e      	b.n	80119b8 <__swhatbuf_r+0x42>
 801199a:	466a      	mov	r2, sp
 801199c:	f000 f89c 	bl	8011ad8 <_fstat_r>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	dbf1      	blt.n	8011988 <__swhatbuf_r+0x12>
 80119a4:	9a01      	ldr	r2, [sp, #4]
 80119a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119ae:	425a      	negs	r2, r3
 80119b0:	415a      	adcs	r2, r3
 80119b2:	602a      	str	r2, [r5, #0]
 80119b4:	e7ee      	b.n	8011994 <__swhatbuf_r+0x1e>
 80119b6:	2340      	movs	r3, #64	; 0x40
 80119b8:	2000      	movs	r0, #0
 80119ba:	6023      	str	r3, [r4, #0]
 80119bc:	b016      	add	sp, #88	; 0x58
 80119be:	bd70      	pop	{r4, r5, r6, pc}

080119c0 <__smakebuf_r>:
 80119c0:	898b      	ldrh	r3, [r1, #12]
 80119c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119c4:	079d      	lsls	r5, r3, #30
 80119c6:	4606      	mov	r6, r0
 80119c8:	460c      	mov	r4, r1
 80119ca:	d507      	bpl.n	80119dc <__smakebuf_r+0x1c>
 80119cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	6123      	str	r3, [r4, #16]
 80119d4:	2301      	movs	r3, #1
 80119d6:	6163      	str	r3, [r4, #20]
 80119d8:	b002      	add	sp, #8
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	ab01      	add	r3, sp, #4
 80119de:	466a      	mov	r2, sp
 80119e0:	f7ff ffc9 	bl	8011976 <__swhatbuf_r>
 80119e4:	9900      	ldr	r1, [sp, #0]
 80119e6:	4605      	mov	r5, r0
 80119e8:	4630      	mov	r0, r6
 80119ea:	f7fd fa71 	bl	800eed0 <_malloc_r>
 80119ee:	b948      	cbnz	r0, 8011a04 <__smakebuf_r+0x44>
 80119f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119f4:	059a      	lsls	r2, r3, #22
 80119f6:	d4ef      	bmi.n	80119d8 <__smakebuf_r+0x18>
 80119f8:	f023 0303 	bic.w	r3, r3, #3
 80119fc:	f043 0302 	orr.w	r3, r3, #2
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	e7e3      	b.n	80119cc <__smakebuf_r+0xc>
 8011a04:	4b0d      	ldr	r3, [pc, #52]	; (8011a3c <__smakebuf_r+0x7c>)
 8011a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	6020      	str	r0, [r4, #0]
 8011a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a10:	81a3      	strh	r3, [r4, #12]
 8011a12:	9b00      	ldr	r3, [sp, #0]
 8011a14:	6163      	str	r3, [r4, #20]
 8011a16:	9b01      	ldr	r3, [sp, #4]
 8011a18:	6120      	str	r0, [r4, #16]
 8011a1a:	b15b      	cbz	r3, 8011a34 <__smakebuf_r+0x74>
 8011a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a20:	4630      	mov	r0, r6
 8011a22:	f000 f86b 	bl	8011afc <_isatty_r>
 8011a26:	b128      	cbz	r0, 8011a34 <__smakebuf_r+0x74>
 8011a28:	89a3      	ldrh	r3, [r4, #12]
 8011a2a:	f023 0303 	bic.w	r3, r3, #3
 8011a2e:	f043 0301 	orr.w	r3, r3, #1
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	89a0      	ldrh	r0, [r4, #12]
 8011a36:	4305      	orrs	r5, r0
 8011a38:	81a5      	strh	r5, [r4, #12]
 8011a3a:	e7cd      	b.n	80119d8 <__smakebuf_r+0x18>
 8011a3c:	0800ec71 	.word	0x0800ec71

08011a40 <_malloc_usable_size_r>:
 8011a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a44:	1f18      	subs	r0, r3, #4
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	bfbc      	itt	lt
 8011a4a:	580b      	ldrlt	r3, [r1, r0]
 8011a4c:	18c0      	addlt	r0, r0, r3
 8011a4e:	4770      	bx	lr

08011a50 <_raise_r>:
 8011a50:	291f      	cmp	r1, #31
 8011a52:	b538      	push	{r3, r4, r5, lr}
 8011a54:	4604      	mov	r4, r0
 8011a56:	460d      	mov	r5, r1
 8011a58:	d904      	bls.n	8011a64 <_raise_r+0x14>
 8011a5a:	2316      	movs	r3, #22
 8011a5c:	6003      	str	r3, [r0, #0]
 8011a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a66:	b112      	cbz	r2, 8011a6e <_raise_r+0x1e>
 8011a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a6c:	b94b      	cbnz	r3, 8011a82 <_raise_r+0x32>
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 f830 	bl	8011ad4 <_getpid_r>
 8011a74:	462a      	mov	r2, r5
 8011a76:	4601      	mov	r1, r0
 8011a78:	4620      	mov	r0, r4
 8011a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a7e:	f000 b817 	b.w	8011ab0 <_kill_r>
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d00a      	beq.n	8011a9c <_raise_r+0x4c>
 8011a86:	1c59      	adds	r1, r3, #1
 8011a88:	d103      	bne.n	8011a92 <_raise_r+0x42>
 8011a8a:	2316      	movs	r3, #22
 8011a8c:	6003      	str	r3, [r0, #0]
 8011a8e:	2001      	movs	r0, #1
 8011a90:	e7e7      	b.n	8011a62 <_raise_r+0x12>
 8011a92:	2400      	movs	r4, #0
 8011a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a98:	4628      	mov	r0, r5
 8011a9a:	4798      	blx	r3
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	e7e0      	b.n	8011a62 <_raise_r+0x12>

08011aa0 <raise>:
 8011aa0:	4b02      	ldr	r3, [pc, #8]	; (8011aac <raise+0xc>)
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	6818      	ldr	r0, [r3, #0]
 8011aa6:	f7ff bfd3 	b.w	8011a50 <_raise_r>
 8011aaa:	bf00      	nop
 8011aac:	20000028 	.word	0x20000028

08011ab0 <_kill_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4d07      	ldr	r5, [pc, #28]	; (8011ad0 <_kill_r+0x20>)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	4608      	mov	r0, r1
 8011aba:	4611      	mov	r1, r2
 8011abc:	602b      	str	r3, [r5, #0]
 8011abe:	f7f3 f877 	bl	8004bb0 <_kill>
 8011ac2:	1c43      	adds	r3, r0, #1
 8011ac4:	d102      	bne.n	8011acc <_kill_r+0x1c>
 8011ac6:	682b      	ldr	r3, [r5, #0]
 8011ac8:	b103      	cbz	r3, 8011acc <_kill_r+0x1c>
 8011aca:	6023      	str	r3, [r4, #0]
 8011acc:	bd38      	pop	{r3, r4, r5, pc}
 8011ace:	bf00      	nop
 8011ad0:	2000653c 	.word	0x2000653c

08011ad4 <_getpid_r>:
 8011ad4:	f7f3 b864 	b.w	8004ba0 <_getpid>

08011ad8 <_fstat_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	; (8011af8 <_fstat_r+0x20>)
 8011adc:	2300      	movs	r3, #0
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	602b      	str	r3, [r5, #0]
 8011ae6:	f7f3 f8c2 	bl	8004c6e <_fstat>
 8011aea:	1c43      	adds	r3, r0, #1
 8011aec:	d102      	bne.n	8011af4 <_fstat_r+0x1c>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	b103      	cbz	r3, 8011af4 <_fstat_r+0x1c>
 8011af2:	6023      	str	r3, [r4, #0]
 8011af4:	bd38      	pop	{r3, r4, r5, pc}
 8011af6:	bf00      	nop
 8011af8:	2000653c 	.word	0x2000653c

08011afc <_isatty_r>:
 8011afc:	b538      	push	{r3, r4, r5, lr}
 8011afe:	4d06      	ldr	r5, [pc, #24]	; (8011b18 <_isatty_r+0x1c>)
 8011b00:	2300      	movs	r3, #0
 8011b02:	4604      	mov	r4, r0
 8011b04:	4608      	mov	r0, r1
 8011b06:	602b      	str	r3, [r5, #0]
 8011b08:	f7f3 f8c1 	bl	8004c8e <_isatty>
 8011b0c:	1c43      	adds	r3, r0, #1
 8011b0e:	d102      	bne.n	8011b16 <_isatty_r+0x1a>
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	b103      	cbz	r3, 8011b16 <_isatty_r+0x1a>
 8011b14:	6023      	str	r3, [r4, #0]
 8011b16:	bd38      	pop	{r3, r4, r5, pc}
 8011b18:	2000653c 	.word	0x2000653c

08011b1c <_init>:
 8011b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1e:	bf00      	nop
 8011b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b22:	bc08      	pop	{r3}
 8011b24:	469e      	mov	lr, r3
 8011b26:	4770      	bx	lr

08011b28 <_fini>:
 8011b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2a:	bf00      	nop
 8011b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b2e:	bc08      	pop	{r3}
 8011b30:	469e      	mov	lr, r3
 8011b32:	4770      	bx	lr

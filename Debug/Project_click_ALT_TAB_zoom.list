
Project_click_ALT_TAB_zoom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800be78  0800be78  0001be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c434  0800c434  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c43c  0800c43c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c43c  0800c43c  0001c43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c440  0800c440  0001c440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  200001e0  0800c624  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d84  0800c624  00024d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eaad  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa3  00000000  00000000  0003ecbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00042c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  000444f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a85b  00000000  00000000  00045c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfc6  00000000  00000000  0006046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd5c  00000000  00000000  0007d431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a18d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000785c  00000000  00000000  0011a1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be5c 	.word	0x0800be5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800be5c 	.word	0x0800be5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of clickTimer */
  clickTimerHandle = osTimerNew(clickCallback, osTimerOnce, NULL, &clickTimer_attributes);
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_FREERTOS_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <MX_FREERTOS_Init+0x54>)
 8000f08:	f005 fc0a 	bl	8006720 <osTimerNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <MX_FREERTOS_Init+0x58>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* creation of timerZoomIn */
  timerZoomInHandle = osTimerNew(zoomInCallback, osTimerOnce, NULL, &timerZoomIn_attributes);
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_FREERTOS_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <MX_FREERTOS_Init+0x60>)
 8000f1a:	f005 fc01 	bl	8006720 <osTimerNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <MX_FREERTOS_Init+0x64>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* creation of timerZoomOut */
  timerZoomOutHandle = osTimerNew(zoomOutCallback, osTimerOnce, NULL, &timerZoomOut_attributes);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_FREERTOS_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <MX_FREERTOS_Init+0x6c>)
 8000f2c:	f005 fbf8 	bl	8006720 <osTimerNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <MX_FREERTOS_Init+0x70>)
 8000f34:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTask */
  readTaskHandle = osThreadNew(StartReadTask, NULL, &readTask_attributes);
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <MX_FREERTOS_Init+0x74>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_FREERTOS_Init+0x78>)
 8000f3c:	f005 fb2e 	bl	800659c <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <MX_FREERTOS_Init+0x7c>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0800bfc0 	.word	0x0800bfc0
 8000f50:	08001279 	.word	0x08001279
 8000f54:	20000270 	.word	0x20000270
 8000f58:	0800bfd0 	.word	0x0800bfd0
 8000f5c:	080012e5 	.word	0x080012e5
 8000f60:	20000274 	.word	0x20000274
 8000f64:	0800bfe0 	.word	0x0800bfe0
 8000f68:	08001351 	.word	0x08001351
 8000f6c:	20000278 	.word	0x20000278
 8000f70:	0800bf9c 	.word	0x0800bf9c
 8000f74:	08000f7d 	.word	0x08000f7d
 8000f78:	2000026c 	.word	0x2000026c

08000f7c <StartReadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTask */
void StartReadTask(void *argument)
{
 8000f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f80:	b08b      	sub	sp, #44	; 0x2c
 8000f82:	af02      	add	r7, sp, #8
 8000f84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTask */
	while(MPU6050_Init(&hi2c1,&mpu_ind,MPU6050_Device_0,MPU6050_Accelerometer_16G,MPU6050_Gyroscope_250s)!=MPU6050_Result_Ok);
 8000f86:	bf00      	nop
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	49aa      	ldr	r1, [pc, #680]	; (800123c <StartReadTask+0x2c0>)
 8000f92:	48ab      	ldr	r0, [pc, #684]	; (8001240 <StartReadTask+0x2c4>)
 8000f94:	f000 fb29 	bl	80015ea <MPU6050_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f4      	bne.n	8000f88 <StartReadTask+0xc>
	while(MPU6050_Init(&hi2c1,&mpu_pol,MPU6050_Device_1,MPU6050_Accelerometer_16G,MPU6050_Gyroscope_250s)!=MPU6050_Result_Ok);
 8000f9e:	bf00      	nop
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	49a6      	ldr	r1, [pc, #664]	; (8001244 <StartReadTask+0x2c8>)
 8000faa:	48a5      	ldr	r0, [pc, #660]	; (8001240 <StartReadTask+0x2c4>)
 8000fac:	f000 fb1d 	bl	80015ea <MPU6050_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f4      	bne.n	8000fa0 <StartReadTask+0x24>

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	48a3      	ldr	r0, [pc, #652]	; (8001248 <StartReadTask+0x2cc>)
 8000fba:	f002 feb6 	bl	8003d2a <HAL_GPIO_TogglePin>

	uint8_t ALT_TAB_flag = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
 8000fc2:	466b      	mov	r3, sp
 8000fc4:	461e      	mov	r6, r3

		  int n=100;
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	61bb      	str	r3, [r7, #24]
		  char value[n];
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	1e4b      	subs	r3, r1, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	00eb      	lsls	r3, r5, #3
 8000fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fe6:	00e2      	lsls	r2, r4, #3
 8000fe8:	460a      	mov	r2, r1
 8000fea:	2300      	movs	r3, #0
 8000fec:	4690      	mov	r8, r2
 8000fee:	4699      	mov	r9, r3
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ffc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001000:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001004:	460b      	mov	r3, r1
 8001006:	3307      	adds	r3, #7
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	ebad 0d03 	sub.w	sp, sp, r3
 8001010:	ab02      	add	r3, sp, #8
 8001012:	3300      	adds	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
		  MPU6050_ReadGyroscope(&hi2c1,&mpu_ind);
 8001016:	4989      	ldr	r1, [pc, #548]	; (800123c <StartReadTask+0x2c0>)
 8001018:	4889      	ldr	r0, [pc, #548]	; (8001240 <StartReadTask+0x2c4>)
 800101a:	f000 fcda 	bl	80019d2 <MPU6050_ReadGyroscope>
		  MPU6050_ReadAccelerometer(&hi2c1,&mpu_ind);
 800101e:	4987      	ldr	r1, [pc, #540]	; (800123c <StartReadTask+0x2c0>)
 8001020:	4887      	ldr	r0, [pc, #540]	; (8001240 <StartReadTask+0x2c4>)
 8001022:	f000 fc5f 	bl	80018e4 <MPU6050_ReadAccelerometer>

		  MPU6050_ReadGyroscope(&hi2c1,&mpu_pol);
 8001026:	4987      	ldr	r1, [pc, #540]	; (8001244 <StartReadTask+0x2c8>)
 8001028:	4885      	ldr	r0, [pc, #532]	; (8001240 <StartReadTask+0x2c4>)
 800102a:	f000 fcd2 	bl	80019d2 <MPU6050_ReadGyroscope>
		  MPU6050_ReadAccelerometer(&hi2c1,&mpu_pol);
 800102e:	4985      	ldr	r1, [pc, #532]	; (8001244 <StartReadTask+0x2c8>)
 8001030:	4883      	ldr	r0, [pc, #524]	; (8001240 <StartReadTask+0x2c4>)
 8001032:	f000 fc57 	bl	80018e4 <MPU6050_ReadAccelerometer>
		  //HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);

		  //sprintf(value, "ax: %.3f ay: %.3f (5<>10) az: %.3f | %f < 3 | %d && %d \n", mpu_pol.accelerometer_X, mpu_pol.accelerometer_Y, mpu_pol.accelerometer_Z,mpu_pol.accelerometer_X + mpu_pol.accelerometer_Z, abs(mpu_pol.accelerometer_X + mpu_pol.accelerometer_Z)< 3, 5 < mpu_pol.accelerometer_Y && mpu_pol.accelerometer_Y < 10 );
		  //HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);

		  if ((numClick == 1) && (mpu_ind.gyroscope_X <= -120 && mpu_ind.accelerometer_Y < -2)){
 8001036:	4b85      	ldr	r3, [pc, #532]	; (800124c <StartReadTask+0x2d0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d119      	bne.n	8001072 <StartReadTask+0xf6>
 800103e:	4b7f      	ldr	r3, [pc, #508]	; (800123c <StartReadTask+0x2c0>)
 8001040:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001044:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001250 <StartReadTask+0x2d4>
 8001048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d80f      	bhi.n	8001072 <StartReadTask+0xf6>
 8001052:	4b7a      	ldr	r3, [pc, #488]	; (800123c <StartReadTask+0x2c0>)
 8001054:	edd3 7a07 	vldr	s15, [r3, #28]
 8001058:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d505      	bpl.n	8001072 <StartReadTask+0xf6>
		  			  numClick += 1;
 8001066:	4b79      	ldr	r3, [pc, #484]	; (800124c <StartReadTask+0x2d0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a77      	ldr	r2, [pc, #476]	; (800124c <StartReadTask+0x2d0>)
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e0de      	b.n	8001230 <StartReadTask+0x2b4>
		  } else if(mpu_ind.gyroscope_X <= -180 && mpu_ind.accelerometer_Y < -7){
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <StartReadTask+0x2c0>)
 8001074:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001078:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001254 <StartReadTask+0x2d8>
 800107c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d816      	bhi.n	80010b4 <StartReadTask+0x138>
 8001086:	4b6d      	ldr	r3, [pc, #436]	; (800123c <StartReadTask+0x2c0>)
 8001088:	edd3 7a07 	vldr	s15, [r3, #28]
 800108c:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d50c      	bpl.n	80010b4 <StartReadTask+0x138>
		  			  /* creation of clickTask */
		  			  //sprintf(value,"xdotool click 1\n");
		  			  //HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
		  			  numClick += 1;
 800109a:	4b6c      	ldr	r3, [pc, #432]	; (800124c <StartReadTask+0x2d0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <StartReadTask+0x2d0>)
 80010a2:	6013      	str	r3, [r2, #0]
		  			  osTimerStart(clickTimerHandle, 600);
 80010a4:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <StartReadTask+0x2dc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fbb3 	bl	8006818 <osTimerStart>
 80010b2:	e0bd      	b.n	8001230 <StartReadTask+0x2b4>

		  			// Condizione per accolgiere comandi per ALT+TAB
		  } else if ( abs(mpu_pol.accelerometer_X + mpu_pol.accelerometer_Z)< 3 && 5 < mpu_pol.accelerometer_Y && mpu_pol.accelerometer_Y < 10){
 80010b4:	4b63      	ldr	r3, [pc, #396]	; (8001244 <StartReadTask+0x2c8>)
 80010b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80010ba:	4b62      	ldr	r3, [pc, #392]	; (8001244 <StartReadTask+0x2c8>)
 80010bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	ee17 0a90 	vmov	r0, s15
 80010c8:	f7ff fa46 	bl	8000558 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	ec43 2b10 	vmov	d0, r2, r3
 80010d4:	f008 f90a 	bl	80092ec <abs>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b02      	cmp	r3, #2
 80010dc:	dc4c      	bgt.n	8001178 <StartReadTask+0x1fc>
 80010de:	4b59      	ldr	r3, [pc, #356]	; (8001244 <StartReadTask+0x2c8>)
 80010e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80010e4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd42      	ble.n	8001178 <StartReadTask+0x1fc>
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <StartReadTask+0x2c8>)
 80010f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80010f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	d538      	bpl.n	8001178 <StartReadTask+0x1fc>

			  if (ALT_TAB_flag == 0){
 8001106:	7ffb      	ldrb	r3, [r7, #31]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d110      	bne.n	800112e <StartReadTask+0x1b2>
				  sprintf(value,"xdotool keydown alt key Tab\n");
 800110c:	4953      	ldr	r1, [pc, #332]	; (800125c <StartReadTask+0x2e0>)
 800110e:	6938      	ldr	r0, [r7, #16]
 8001110:	f002 f916 	bl	8003340 <sprintf_>
				  HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 8001114:	6938      	ldr	r0, [r7, #16]
 8001116:	f7ff f863 	bl	80001e0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	484e      	ldr	r0, [pc, #312]	; (8001260 <StartReadTask+0x2e4>)
 8001126:	f004 fe36 	bl	8005d96 <HAL_UART_Transmit>
				 ALT_TAB_flag = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	77fb      	strb	r3, [r7, #31]
			  }

			  if(mpu_ind.gyroscope_X >= 160 && mpu_ind.accelerometer_Y < -2){
 800112e:	4b43      	ldr	r3, [pc, #268]	; (800123c <StartReadTask+0x2c0>)
 8001130:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001134:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001264 <StartReadTask+0x2e8>
 8001138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	db76      	blt.n	8001230 <StartReadTask+0x2b4>
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <StartReadTask+0x2c0>)
 8001144:	edd3 7a07 	vldr	s15, [r3, #28]
 8001148:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800114c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	d400      	bmi.n	8001158 <StartReadTask+0x1dc>
 8001156:	e06b      	b.n	8001230 <StartReadTask+0x2b4>
				  /* creation of clickTask */
				  sprintf(value,"xdotool keyup 0xffea\n");
 8001158:	4943      	ldr	r1, [pc, #268]	; (8001268 <StartReadTask+0x2ec>)
 800115a:	6938      	ldr	r0, [r7, #16]
 800115c:	f002 f8f0 	bl	8003340 <sprintf_>
				  HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 8001160:	6938      	ldr	r0, [r7, #16]
 8001162:	f7ff f83d 	bl	80001e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	6939      	ldr	r1, [r7, #16]
 8001170:	483b      	ldr	r0, [pc, #236]	; (8001260 <StartReadTask+0x2e4>)
 8001172:	f004 fe10 	bl	8005d96 <HAL_UART_Transmit>
			  if(mpu_ind.gyroscope_X >= 160 && mpu_ind.accelerometer_Y < -2){
 8001176:	e05b      	b.n	8001230 <StartReadTask+0x2b4>
			  }

			  /* Zoom */
		  } else if(mpu_pol.gyroscope_X <= -180 && mpu_pol.accelerometer_Y < -5){
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <StartReadTask+0x2c8>)
 800117a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800117e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001254 <StartReadTask+0x2d8>
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d816      	bhi.n	80011ba <StartReadTask+0x23e>
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <StartReadTask+0x2c8>)
 800118e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001192:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d50c      	bpl.n	80011ba <StartReadTask+0x23e>

  			  numZoom += 1;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <StartReadTask+0x2f0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <StartReadTask+0x2f0>)
 80011a8:	6013      	str	r3, [r2, #0]
  			  osTimerStart(timerZoomInHandle, 600);
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <StartReadTask+0x2f4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 fb30 	bl	8006818 <osTimerStart>
 80011b8:	e03a      	b.n	8001230 <StartReadTask+0x2b4>
		  	  }
		  else if(numClick == 0){
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <StartReadTask+0x2d0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d136      	bne.n	8001230 <StartReadTask+0x2b4>
			  ALT_TAB_flag = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
			  /* Movimento del mouse */
			  int m_x = (-(int) mpu_ind.accelerometer_X)  * 7;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <StartReadTask+0x2c0>)
 80011c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	461a      	mov	r2, r3
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	60fb      	str	r3, [r7, #12]
			  int m_y =  -((int) mpu_ind.accelerometer_Y) * 5;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <StartReadTask+0x2c0>)
 80011de:	edd3 7a07 	vldr	s15, [r3, #28]
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 2a90 	vmov	r2, s15
 80011ea:	4613      	mov	r3, r2
 80011ec:	079b      	lsls	r3, r3, #30
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]

			  //sprintf(value,"4,%d,%d\n",m_x,m_y);
			  sprintf(value,"xdotool mousemove_relative -- %d %d\n",m_x,m_y);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	491e      	ldr	r1, [pc, #120]	; (8001274 <StartReadTask+0x2f8>)
 80011fc:	6938      	ldr	r0, [r7, #16]
 80011fe:	f002 f89f 	bl	8003340 <sprintf_>
			  if(abs(m_x) + abs(m_y) >= 14)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001208:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfb8      	it	lt
 8001212:	425b      	neglt	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	2b0d      	cmp	r3, #13
 8001218:	dd0a      	ble.n	8001230 <StartReadTask+0x2b4>
				  HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	f7fe ffe0 	bl	80001e0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <StartReadTask+0x2e4>)
 800122c:	f004 fdb3 	bl	8005d96 <HAL_UART_Transmit>
		  }

    osDelay(100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f005 fa45 	bl	80066c0 <osDelay>
 8001236:	46b5      	mov	sp, r6
  {
 8001238:	e6c3      	b.n	8000fc2 <StartReadTask+0x46>
 800123a:	bf00      	nop
 800123c:	200001fc 	.word	0x200001fc
 8001240:	2000027c 	.word	0x2000027c
 8001244:	20000230 	.word	0x20000230
 8001248:	40020000 	.word	0x40020000
 800124c:	20000264 	.word	0x20000264
 8001250:	c2f00000 	.word	0xc2f00000
 8001254:	c3340000 	.word	0xc3340000
 8001258:	20000270 	.word	0x20000270
 800125c:	0800beac 	.word	0x0800beac
 8001260:	2000031c 	.word	0x2000031c
 8001264:	43200000 	.word	0x43200000
 8001268:	0800becc 	.word	0x0800becc
 800126c:	20000268 	.word	0x20000268
 8001270:	20000274 	.word	0x20000274
 8001274:	0800bee4 	.word	0x0800bee4

08001278 <clickCallback>:
  /* USER CODE END StartReadTask */
}

/* clickCallback function */
void clickCallback(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b09c      	sub	sp, #112	; 0x70
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN clickCallback */
	char value[100];
	//sprintf(value,"numclick = %d\n",numClick);
	//HAL_UART_Transmit(&huart2, (uint8_t *)value, sizeof(char)*strlen(value), 100);
  /* USER CODE BEGIN OTCallback */
	if(numClick >= 2){
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <clickCallback+0x5c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	dd06      	ble.n	8001296 <clickCallback+0x1e>
		  sprintf(value,"xdotool click --repeat 2 1\n");
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4912      	ldr	r1, [pc, #72]	; (80012d8 <clickCallback+0x60>)
 800128e:	4618      	mov	r0, r3
 8001290:	f002 f856 	bl	8003340 <sprintf_>
 8001294:	e009      	b.n	80012aa <clickCallback+0x32>

	}else if(numClick == 1 ){
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <clickCallback+0x5c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d105      	bne.n	80012aa <clickCallback+0x32>
		sprintf(value,"xdotool click 1\n");
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <clickCallback+0x64>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f84b 	bl	8003340 <sprintf_>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ff96 	bl	80001e0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <clickCallback+0x68>)
 80012c2:	f004 fd68 	bl	8005d96 <HAL_UART_Transmit>
	numClick = 0;
 80012c6:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <clickCallback+0x5c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
  /* USER CODE END clickCallback */
}
 80012cc:	bf00      	nop
 80012ce:	3770      	adds	r7, #112	; 0x70
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000264 	.word	0x20000264
 80012d8:	0800bf0c 	.word	0x0800bf0c
 80012dc:	0800bf28 	.word	0x0800bf28
 80012e0:	2000031c 	.word	0x2000031c

080012e4 <zoomInCallback>:

/* zoomInCallback function */
void zoomInCallback(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b09c      	sub	sp, #112	; 0x70
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN zoomInCallback */
	char value[100];

	if(numZoom >= 2){
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <zoomInCallback+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	dd06      	ble.n	8001302 <zoomInCallback+0x1e>
		  sprintf(value,"xdotool key Ctrl+minus\n");
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4912      	ldr	r1, [pc, #72]	; (8001344 <zoomInCallback+0x60>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 f820 	bl	8003340 <sprintf_>
 8001300:	e009      	b.n	8001316 <zoomInCallback+0x32>

	}else if(numZoom == 1 ){
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <zoomInCallback+0x5c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <zoomInCallback+0x32>
		sprintf(value,"xdotool key Ctrl+plus\n");
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <zoomInCallback+0x64>)
 8001310:	4618      	mov	r0, r3
 8001312:	f002 f815 	bl	8003340 <sprintf_>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff60 	bl	80001e0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 010c 	add.w	r1, r7, #12
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <zoomInCallback+0x68>)
 800132e:	f004 fd32 	bl	8005d96 <HAL_UART_Transmit>
	numZoom = 0;
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <zoomInCallback+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
  /* USER CODE END zoomInCallback */
}
 8001338:	bf00      	nop
 800133a:	3770      	adds	r7, #112	; 0x70
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000268 	.word	0x20000268
 8001344:	0800bf3c 	.word	0x0800bf3c
 8001348:	0800bf54 	.word	0x0800bf54
 800134c:	2000031c 	.word	0x2000031c

08001350 <zoomOutCallback>:

/* zoomOutCallback function */
void zoomOutCallback(void *argument)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN zoomOutCallback */
  /* USER CODE END zoomOutCallback */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_GPIO_Init+0x7c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <MX_GPIO_Init+0x7c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_GPIO_Init+0x7c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_GPIO_Init+0x7c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <MX_GPIO_Init+0x7c>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_GPIO_Init+0x7c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2120      	movs	r1, #32
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <MX_GPIO_Init+0x80>)
 80013b8:	f002 fc9e 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013bc:	2320      	movs	r3, #32
 80013be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_GPIO_Init+0x80>)
 80013d4:	f002 fb0c 	bl	80039f0 <HAL_GPIO_Init>

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f002 fc9b 	bl	8003d60 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 f8d6 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000027c 	.word	0x2000027c
 800143c:	40005400 	.word	0x40005400
 8001440:	00061a80 	.word	0x00061a80

08001444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <HAL_I2C_MspInit+0x8c>)
 80014a0:	f002 faa6 	bl	80039f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d8:	f002 f966 	bl	80037a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014dc:	f000 f80e 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e0:	f7ff ff40 	bl	8001364 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014e4:	f7ff ff80 	bl	80013e8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014e8:	f002 f8c2 	bl	8003670 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014ec:	f005 f80c 	bl	8006508 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014f0:	f7ff fd04 	bl	8000efc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014f4:	f005 f82c 	bl	8006550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <main+0x24>
	...

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f008 f823 	bl	8009556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemClock_Config+0xb8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <SystemClock_Config+0xb8>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <SystemClock_Config+0xb8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <SystemClock_Config+0xbc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <SystemClock_Config+0xbc>)
 800154a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <SystemClock_Config+0xbc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	2310      	movs	r3, #16
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fcb9 	bl	8004ee8 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800157c:	f000 f830 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 ff1c 	bl	80053d8 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015a6:	f000 f81b 	bl	80015e0 <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3750      	adds	r7, #80	; 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ce:	f002 f90d 	bl	80037ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40014000 	.word	0x40014000

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>

080015ea <MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

MPU6050_Result MPU6050_Init(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Device DeviceNumber, MPU6050_Accelerometer AccelerometerSensitivity, MPU6050_Gyroscope GyroscopeSensitivity)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b08a      	sub	sp, #40	; 0x28
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	460b      	mov	r3, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001600:	2375      	movs	r3, #117	; 0x75
 8001602:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800161a:	7efb      	ldrb	r3, [r7, #27]
 800161c:	b299      	uxth	r1, r3
 800161e:	2305      	movs	r3, #5
 8001620:	2202      	movs	r2, #2
 8001622:	69f8      	ldr	r0, [r7, #28]
 8001624:	f003 f804 	bl	8004630 <HAL_I2C_IsDeviceReady>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MPU6050_Init+0x48>
	{
				return MPU6050_Result_Error;
 800162e:	2301      	movs	r3, #1
 8001630:	e04c      	b.n	80016cc <MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001632:	7efb      	ldrb	r3, [r7, #27]
 8001634:	b299      	uxth	r1, r3
 8001636:	f107 021a 	add.w	r2, r7, #26
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	69f8      	ldr	r0, [r7, #28]
 8001644:	f002 fcd0 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MPU6050_Init+0x68>
		{
			return MPU6050_Result_Error;
 800164e:	2301      	movs	r3, #1
 8001650:	e03c      	b.n	80016cc <MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001652:	7efb      	ldrb	r3, [r7, #27]
 8001654:	b299      	uxth	r1, r3
 8001656:	f107 0219 	add.w	r2, r7, #25
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	69f8      	ldr	r0, [r7, #28]
 8001664:	f002 fdbe 	bl	80041e4 <HAL_I2C_Master_Receive>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <MPU6050_Init+0x8c>
		{
			return MPU6050_Result_Error;
 800166e:	2301      	movs	r3, #1
 8001670:	e02c      	b.n	80016cc <MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return MPU6050_Result_DeviceInvalid;
 8001672:	2303      	movs	r3, #3
 8001674:	e02a      	b.n	80016cc <MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001676:	bf00      	nop
 8001678:	7e7b      	ldrb	r3, [r7, #25]
 800167a:	2b68      	cmp	r3, #104	; 0x68
 800167c:	d1f9      	bne.n	8001672 <MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 800167e:	236b      	movs	r3, #107	; 0x6b
 8001680:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	b299      	uxth	r1, r3
 800168a:	f107 0214 	add.w	r2, r7, #20
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2302      	movs	r3, #2
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	f002 fca6 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MPU6050_Init+0xbc>
		{
					return MPU6050_Result_Error;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e012      	b.n	80016cc <MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 80016a6:	2207      	movs	r2, #7
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f812 	bl	80016d4 <MPU6050_SetDataRate>

	/* Config accelerometer */
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f830 	bl	800171c <MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80016bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016c0:	461a      	mov	r2, r3
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f899 	bl	80017fc <MPU6050_SetGyroscope>

	/* Return OK */
	return MPU6050_Result_Ok;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MPU6050_SetDataRate>:

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af02      	add	r7, sp, #8
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80016ec:	2319      	movs	r3, #25
 80016ee:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80016f4:	bf00      	nop
 80016f6:	7cfb      	ldrb	r3, [r7, #19]
 80016f8:	b299      	uxth	r1, r3
 80016fa:	f107 0210 	add.w	r2, r7, #16
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2302      	movs	r3, #2
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f002 fc6e 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f1      	bne.n	80016f6 <MPU6050_SetDataRate+0x22>

	/* Return OK */
	return MPU6050_Result_Ok;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <MPU6050_SetAccelerometer>:

MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001734:	231c      	movs	r3, #28
 8001736:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001738:	bf00      	nop
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	b299      	uxth	r1, r3
 800173e:	f107 0211 	add.w	r2, r7, #17
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f002 fc4c 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f1      	bne.n	800173a <MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001756:	bf00      	nop
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	b299      	uxth	r1, r3
 800175c:	f107 0212 	add.w	r2, r7, #18
 8001760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f002 fd3b 	bl	80041e4 <HAL_I2C_Master_Receive>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f1      	bne.n	8001758 <MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001774:	7cbb      	ldrb	r3, [r7, #18]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f023 0318 	bic.w	r3, r3, #24
 800177c:	b25a      	sxtb	r2, r3
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	b25b      	sxtb	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800178c:	bf00      	nop
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	b299      	uxth	r1, r3
 8001792:	f107 0212 	add.w	r2, r7, #18
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f002 fc22 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f1      	bne.n	800178e <MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d81f      	bhi.n	80017f0 <MPU6050_SetAccelerometer+0xd4>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <MPU6050_SetAccelerometer+0x9c>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017d3 	.word	0x080017d3
 80017c0:	080017dd 	.word	0x080017dd
 80017c4:	080017e7 	.word	0x080017e7
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80017ce:	609a      	str	r2, [r3, #8]
			break;
 80017d0:	e00f      	b.n	80017f2 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80017d8:	609a      	str	r2, [r3, #8]
			break;
 80017da:	e00a      	b.n	80017f2 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80017e2:	609a      	str	r2, [r3, #8]
			break;
 80017e4:	e005      	b.n	80017f2 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80017ec:	609a      	str	r2, [r3, #8]
			break;
 80017ee:	e000      	b.n	80017f2 <MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 80017f0:	bf00      	nop
		}

	/* Return OK */
	return MPU6050_Result_Ok;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MPU6050_SetGyroscope>:

MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001814:	231b      	movs	r3, #27
 8001816:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001818:	bf00      	nop
 800181a:	7cfb      	ldrb	r3, [r7, #19]
 800181c:	b299      	uxth	r1, r3
 800181e:	f107 0211 	add.w	r2, r7, #17
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2301      	movs	r3, #1
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f002 fbdc 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f1      	bne.n	800181a <MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001836:	bf00      	nop
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	b299      	uxth	r1, r3
 800183c:	f107 0212 	add.w	r2, r7, #18
 8001840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2301      	movs	r3, #1
 8001848:	6978      	ldr	r0, [r7, #20]
 800184a:	f002 fccb 	bl	80041e4 <HAL_I2C_Master_Receive>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f1      	bne.n	8001838 <MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001854:	7cbb      	ldrb	r3, [r7, #18]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f023 0318 	bic.w	r3, r3, #24
 800185c:	b25a      	sxtb	r2, r3
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	b25b      	sxtb	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	b25b      	sxtb	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800186c:	bf00      	nop
 800186e:	7cfb      	ldrb	r3, [r7, #19]
 8001870:	b299      	uxth	r1, r3
 8001872:	f107 0212 	add.w	r2, r7, #18
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2301      	movs	r3, #1
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f002 fbb2 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f1      	bne.n	800186e <MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d81b      	bhi.n	80018c8 <MPU6050_SetGyroscope+0xcc>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <MPU6050_SetGyroscope+0x9c>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018b1 	.word	0x080018b1
 80018a0:	080018b9 	.word	0x080018b9
 80018a4:	080018c1 	.word	0x080018c1
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <MPU6050_SetGyroscope+0xd8>)
 80018ac:	605a      	str	r2, [r3, #4]
				break;
 80018ae:	e00c      	b.n	80018ca <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <MPU6050_SetGyroscope+0xdc>)
 80018b4:	605a      	str	r2, [r3, #4]
				break;
 80018b6:	e008      	b.n	80018ca <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <MPU6050_SetGyroscope+0xe0>)
 80018bc:	605a      	str	r2, [r3, #4]
				break;
 80018be:	e004      	b.n	80018ca <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <MPU6050_SetGyroscope+0xe4>)
 80018c4:	605a      	str	r2, [r3, #4]
				break;
 80018c6:	e000      	b.n	80018ca <MPU6050_SetGyroscope+0xce>
			default:
				break;
 80018c8:	bf00      	nop
		}
	/* Return OK */
	return MPU6050_Result_Ok;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	3bfa232d 	.word	0x3bfa232d
 80018d8:	3c7a232d 	.word	0x3c7a232d
 80018dc:	3cf9c190 	.word	0x3cf9c190
 80018e0:	3d79c190 	.word	0x3d79c190

080018e4 <MPU6050_ReadAccelerometer>:

MPU6050_Result MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80018ee:	233b      	movs	r3, #59	; 0x3b
 80018f0:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80018fc:	bf00      	nop
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
 8001900:	b299      	uxth	r1, r3
 8001902:	f107 020b 	add.w	r2, r7, #11
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2301      	movs	r3, #1
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f002 fb6a 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f1      	bne.n	80018fe <MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 800191a:	bf00      	nop
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	b299      	uxth	r1, r3
 8001920:	f107 020c 	add.w	r2, r7, #12
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2306      	movs	r3, #6
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f002 fc59 	bl	80041e4 <HAL_I2C_Master_Receive>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f1      	bne.n	800191c <MPU6050_ReadAccelerometer+0x38>

	/* Format raw data */
	DataStruct->raw_accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8001938:	7b3b      	ldrb	r3, [r7, #12]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21a      	sxth	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	819a      	strh	r2, [r3, #12]
	DataStruct->raw_accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21a      	sxth	r2, r3
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b21b      	sxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b21a      	sxth	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	81da      	strh	r2, [r3, #14]
	DataStruct->raw_accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800195c:	7c3b      	ldrb	r3, [r7, #16]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	b21a      	sxth	r2, r3
 8001962:	7c7b      	ldrb	r3, [r7, #17]
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21a      	sxth	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	821a      	strh	r2, [r3, #16]
	/* Save original data */
	DataStruct->accelerometer_X = DataStruct->raw_accelerometer_X * DataStruct -> Acce_Mult;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->accelerometer_Y = DataStruct->raw_accelerometer_Y * DataStruct -> Acce_Mult;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->accelerometer_Z = DataStruct->raw_accelerometer_Z * DataStruct -> Acce_Mult;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	edc3 7a08 	vstr	s15, [r3, #32]
	/* Return OK */
	return MPU6050_Result_Ok;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <MPU6050_ReadGyroscope>:
MPU6050_Result MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af02      	add	r7, sp, #8
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80019dc:	2343      	movs	r3, #67	; 0x43
 80019de:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80019ea:	bf00      	nop
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	b299      	uxth	r1, r3
 80019f0:	f107 020b 	add.w	r2, r7, #11
 80019f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f002 faf3 	bl	8003fe8 <HAL_I2C_Master_Transmit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f1      	bne.n	80019ec <MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001a08:	bf00      	nop
 8001a0a:	7cfb      	ldrb	r3, [r7, #19]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	f107 020c 	add.w	r2, r7, #12
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2306      	movs	r3, #6
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f002 fbe2 	bl	80041e4 <HAL_I2C_Master_Receive>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f1      	bne.n	8001a0a <MPU6050_ReadGyroscope+0x38>

	/* Format raw data */
	DataStruct->raw_gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8001a26:	7b3b      	ldrb	r3, [r7, #12]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	825a      	strh	r2, [r3, #18]
	DataStruct->raw_gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	829a      	strh	r2, [r3, #20]
	DataStruct->raw_gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8001a4a:	7c3b      	ldrb	r3, [r7, #16]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	7c7b      	ldrb	r3, [r7, #17]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	82da      	strh	r2, [r3, #22]
	/* Save original data */
	DataStruct->gyroscope_X = DataStruct->raw_gyroscope_X * DataStruct -> Gyro_Mult;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->gyroscope_Y = DataStruct->raw_gyroscope_Y * DataStruct -> Gyro_Mult;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->gyroscope_Z = DataStruct->raw_gyroscope_Z * DataStruct -> Gyro_Mult;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Return OK */
	return MPU6050_Result_Ok;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d204      	bcs.n	8001ae2 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	701a      	strb	r2, [r3, #0]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e002      	b.n	8001b20 <_strnlen_s+0x16>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <_strnlen_s+0x28>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	603a      	str	r2, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f3      	bne.n	8001b1a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1ad3      	subs	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b2f      	cmp	r3, #47	; 0x2f
 8001b52:	d904      	bls.n	8001b5e <_is_digit+0x1a>
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b39      	cmp	r3, #57	; 0x39
 8001b58:	d801      	bhi.n	8001b5e <_is_digit+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <_is_digit+0x1c>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001b7e:	e00e      	b.n	8001b9e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c59      	adds	r1, r3, #1
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6011      	str	r1, [r2, #0]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b30      	subs	r3, #48	; 0x30
 8001b9c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ffcd 	bl	8001b44 <_is_digit>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e7      	bne.n	8001b80 <_atoi+0xe>
  }
  return i;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001bba:	b590      	push	{r4, r7, lr}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d125      	bne.n	8001c22 <_out_rev+0x68>
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d120      	bne.n	8001c22 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	1c53      	adds	r3, r2, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	68fc      	ldr	r4, [r7, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	2020      	movs	r0, #32
 8001bf4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3f0      	bcc.n	8001be6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001c04:	e00d      	b.n	8001c22 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	4413      	add	r3, r2
 8001c12:	7818      	ldrb	r0, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	1c53      	adds	r3, r2, #1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	68fc      	ldr	r4, [r7, #12]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	47a0      	blx	r4
  while (len) {
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ee      	bne.n	8001c06 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00e      	beq.n	8001c50 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001c32:	e007      	b.n	8001c44 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	1c53      	adds	r3, r2, #1
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	68fc      	ldr	r4, [r7, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	2020      	movs	r0, #32
 8001c42:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f1      	bhi.n	8001c34 <_out_rev+0x7a>
    }
  }

  return idx;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}

08001c5a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b088      	sub	sp, #32
 8001c5e:	af04      	add	r7, sp, #16
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d136      	bne.n	8001ce0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d018      	beq.n	8001caa <_ntoa_format+0x50>
 8001c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d013      	beq.n	8001caa <_ntoa_format+0x50>
 8001c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <_ntoa_format+0x3a>
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <_ntoa_format+0x50>
      width--;
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	3b01      	subs	r3, #1
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c9a:	e006      	b.n	8001caa <_ntoa_format+0x50>
      buf[len++] = '0';
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	61fa      	str	r2, [r7, #28]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2230      	movs	r2, #48	; 0x30
 8001ca8:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d20a      	bcs.n	8001cc8 <_ntoa_format+0x6e>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	2b1f      	cmp	r3, #31
 8001cb6:	d9f1      	bls.n	8001c9c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001cb8:	e006      	b.n	8001cc8 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	61fa      	str	r2, [r7, #28]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	2230      	movs	r2, #48	; 0x30
 8001cc6:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <_ntoa_format+0x86>
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d202      	bcs.n	8001ce0 <_ntoa_format+0x86>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	d9ec      	bls.n	8001cba <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d058      	beq.n	8001d9c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d116      	bne.n	8001d22 <_ntoa_format+0xc8>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d013      	beq.n	8001d22 <_ntoa_format+0xc8>
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d003      	beq.n	8001d0a <_ntoa_format+0xb0>
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d10b      	bne.n	8001d22 <_ntoa_format+0xc8>
      len--;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <_ntoa_format+0xc8>
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d102      	bne.n	8001d22 <_ntoa_format+0xc8>
        len--;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d10f      	bne.n	8001d48 <_ntoa_format+0xee>
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <_ntoa_format+0xee>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	2b1f      	cmp	r3, #31
 8001d36:	d807      	bhi.n	8001d48 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4413      	add	r3, r2
 8001d42:	2278      	movs	r2, #120	; 0x78
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e01f      	b.n	8001d88 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d10f      	bne.n	8001d6e <_ntoa_format+0x114>
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <_ntoa_format+0x114>
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b1f      	cmp	r3, #31
 8001d5c:	d807      	bhi.n	8001d6e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	61fa      	str	r2, [r7, #28]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4413      	add	r3, r2
 8001d68:	2258      	movs	r2, #88	; 0x58
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e00c      	b.n	8001d88 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d109      	bne.n	8001d88 <_ntoa_format+0x12e>
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b1f      	cmp	r3, #31
 8001d78:	d806      	bhi.n	8001d88 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	61fa      	str	r2, [r7, #28]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4413      	add	r3, r2
 8001d84:	2262      	movs	r2, #98	; 0x62
 8001d86:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b1f      	cmp	r3, #31
 8001d8c:	d806      	bhi.n	8001d9c <_ntoa_format+0x142>
      buf[len++] = '0';
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4413      	add	r3, r2
 8001d98:	2230      	movs	r2, #48	; 0x30
 8001d9a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b1f      	cmp	r3, #31
 8001da0:	d824      	bhi.n	8001dec <_ntoa_format+0x192>
    if (negative) {
 8001da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <_ntoa_format+0x160>
      buf[len++] = '-';
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	61fa      	str	r2, [r7, #28]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4413      	add	r3, r2
 8001db4:	222d      	movs	r2, #45	; 0x2d
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e018      	b.n	8001dec <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	61fa      	str	r2, [r7, #28]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4413      	add	r3, r2
 8001dce:	222b      	movs	r2, #43	; 0x2b
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e00b      	b.n	8001dec <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	61fa      	str	r2, [r7, #28]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4413      	add	r3, r2
 8001de8:	2220      	movs	r2, #32
 8001dea:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff fed9 	bl	8001bba <_out_rev>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b096      	sub	sp, #88	; 0x58
 8001e16:	af08      	add	r7, sp, #32
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	f023 0310 	bic.w	r3, r3, #16
 8001e30:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <_ntoa_long+0x30>
 8001e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d032      	beq.n	8001ea8 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001e4c:	fb01 f202 	mul.w	r2, r1, r2
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	d804      	bhi.n	8001e68 <_ntoa_long+0x56>
 8001e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e62:	3330      	adds	r3, #48	; 0x30
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	e00d      	b.n	8001e84 <_ntoa_long+0x72>
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_ntoa_long+0x64>
 8001e72:	2241      	movs	r2, #65	; 0x41
 8001e74:	e000      	b.n	8001e78 <_ntoa_long+0x66>
 8001e76:	2261      	movs	r2, #97	; 0x61
 8001e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3b0a      	subs	r3, #10
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	6379      	str	r1, [r7, #52]	; 0x34
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <_ntoa_long+0x96>
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	2b1f      	cmp	r3, #31
 8001ea6:	d9cc      	bls.n	8001e42 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	9306      	str	r3, [sp, #24]
 8001eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eae:	9305      	str	r3, [sp, #20]
 8001eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb2:	9304      	str	r3, [sp, #16]
 8001eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fec3 	bl	8001c5a <_ntoa_format>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3738      	adds	r7, #56	; 0x38
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b096      	sub	sp, #88	; 0x58
 8001ee2:	af08      	add	r7, sp, #32
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	d103      	bne.n	8001f00 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efa:	f023 0310 	bic.w	r3, r3, #16
 8001efe:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <_ntoa_long_long+0x34>
 8001f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	d037      	beq.n	8001f82 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001f12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f1a:	f7fe fe6d 	bl	8000bf8 <__aeabi_uldivmod>
 8001f1e:	4613      	mov	r3, r2
 8001f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d804      	bhi.n	8001f36 <_ntoa_long_long+0x58>
 8001f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	e00d      	b.n	8001f52 <_ntoa_long_long+0x74>
 8001f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ntoa_long_long+0x66>
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	e000      	b.n	8001f46 <_ntoa_long_long+0x68>
 8001f44:	2261      	movs	r2, #97	; 0x61
 8001f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3b0a      	subs	r3, #10
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f54:	1c59      	adds	r1, r3, #1
 8001f56:	6379      	str	r1, [r7, #52]	; 0x34
 8001f58:	3338      	adds	r3, #56	; 0x38
 8001f5a:	443b      	add	r3, r7
 8001f5c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f68:	f7fe fe46 	bl	8000bf8 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001f74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	d002      	beq.n	8001f82 <_ntoa_long_long+0xa4>
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	2b1f      	cmp	r3, #31
 8001f80:	d9c7      	bls.n	8001f12 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f86:	9206      	str	r2, [sp, #24]
 8001f88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f8a:	9205      	str	r2, [sp, #20]
 8001f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f8e:	9204      	str	r2, [sp, #16]
 8001f90:	9303      	str	r3, [sp, #12]
 8001f92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fe56 	bl	8001c5a <_ntoa_format>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3738      	adds	r7, #56	; 0x38
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b09d      	sub	sp, #116	; 0x74
 8001fbc:	af04      	add	r7, sp, #16
 8001fbe:	6178      	str	r0, [r7, #20]
 8001fc0:	6139      	str	r1, [r7, #16]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe2:	f7fe fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fee:	9303      	str	r3, [sp, #12]
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	4ba7      	ldr	r3, [pc, #668]	; (8002298 <_ftoa+0x2e0>)
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6939      	ldr	r1, [r7, #16]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff fdd9 	bl	8001bba <_out_rev>
 8002008:	4603      	mov	r3, r0
 800200a:	e222      	b.n	8002452 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002014:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002018:	f7fe fd68 	bl	8000aec <__aeabi_dcmplt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00f      	beq.n	8002042 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002024:	9303      	str	r3, [sp, #12]
 8002026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2304      	movs	r3, #4
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	4b9b      	ldr	r3, [pc, #620]	; (800229c <_ftoa+0x2e4>)
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f7ff fdbe 	bl	8001bba <_out_rev>
 800203e:	4603      	mov	r3, r0
 8002040:	e207      	b.n	8002452 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002042:	f04f 32ff 	mov.w	r2, #4294967295
 8002046:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <_ftoa+0x2e8>)
 8002048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800204c:	f7fe fd6c 	bl	8000b28 <__aeabi_dcmpgt>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01d      	beq.n	8002092 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <_ftoa+0xac>
 8002060:	4b90      	ldr	r3, [pc, #576]	; (80022a4 <_ftoa+0x2ec>)
 8002062:	e000      	b.n	8002066 <_ftoa+0xae>
 8002064:	4b90      	ldr	r3, [pc, #576]	; (80022a8 <_ftoa+0x2f0>)
 8002066:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002068:	f002 0204 	and.w	r2, r2, #4
 800206c:	2a00      	cmp	r2, #0
 800206e:	d001      	beq.n	8002074 <_ftoa+0xbc>
 8002070:	2204      	movs	r2, #4
 8002072:	e000      	b.n	8002076 <_ftoa+0xbe>
 8002074:	2203      	movs	r2, #3
 8002076:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002078:	9103      	str	r1, [sp, #12]
 800207a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800207c:	9102      	str	r1, [sp, #8]
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	6939      	ldr	r1, [r7, #16]
 8002088:	6978      	ldr	r0, [r7, #20]
 800208a:	f7ff fd96 	bl	8001bba <_out_rev>
 800208e:	4603      	mov	r3, r0
 8002090:	e1df      	b.n	8002452 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002092:	a37d      	add	r3, pc, #500	; (adr r3, 8002288 <_ftoa+0x2d0>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800209c:	f7fe fd44 	bl	8000b28 <__aeabi_dcmpgt>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <_ftoa+0x102>
 80020a6:	a37a      	add	r3, pc, #488	; (adr r3, 8002290 <_ftoa+0x2d8>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b0:	f7fe fd1c 	bl	8000aec <__aeabi_dcmplt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80020ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	ed97 0b00 	vldr	d0, [r7]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f000 f9c9 	bl	8002468 <_etoa>
 80020d6:	4603      	mov	r3, r0
 80020d8:	e1bb      	b.n	8002452 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020ec:	f7fe fcfe 	bl	8000aec <__aeabi_dcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <_ftoa+0x15c>
    negative = true;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80020fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	f7fe f8c6 	bl	8000298 <__aeabi_dsub>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800211e:	2306      	movs	r3, #6
 8002120:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002122:	e00a      	b.n	800213a <_ftoa+0x182>
    buf[len++] = '0';
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	65fa      	str	r2, [r7, #92]	; 0x5c
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	443b      	add	r3, r7
 800212e:	2230      	movs	r2, #48	; 0x30
 8002130:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002136:	3b01      	subs	r3, #1
 8002138:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213c:	2b1f      	cmp	r3, #31
 800213e:	d802      	bhi.n	8002146 <_ftoa+0x18e>
 8002140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002142:	2b09      	cmp	r3, #9
 8002144:	d8ee      	bhi.n	8002124 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800214a:	f7fe fd0d 	bl	8000b68 <__aeabi_d2iz>
 800214e:	4603      	mov	r3, r0
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002152:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002154:	f7fe f9ee 	bl	8000534 <__aeabi_i2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002160:	f7fe f89a 	bl	8000298 <__aeabi_dsub>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <_ftoa+0x2f4>)
 800216e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe fa46 	bl	8000608 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002184:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002188:	f7fe fd16 	bl	8000bb8 <__aeabi_d2uiz>
 800218c:	4603      	mov	r3, r0
 800218e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002190:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002192:	f7fe f9bf 	bl	8000514 <__aeabi_ui2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800219e:	f7fe f87b 	bl	8000298 <__aeabi_dsub>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <_ftoa+0x2f8>)
 80021b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021b4:	f7fe fcb8 	bl	8000b28 <__aeabi_dcmpgt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <_ftoa+0x234>
    ++frac;
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	3301      	adds	r3, #1
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80021c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80021c6:	f7fe f9a5 	bl	8000514 <__aeabi_ui2d>
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <_ftoa+0x2f4>)
 80021cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fc9d 	bl	8000b14 <__aeabi_dcmpge>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01a      	beq.n	8002216 <_ftoa+0x25e>
      frac = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	3301      	adds	r3, #1
 80021e8:	657b      	str	r3, [r7, #84]	; 0x54
 80021ea:	e014      	b.n	8002216 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <_ftoa+0x2f8>)
 80021f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021f6:	f7fe fc79 	bl	8000aec <__aeabi_dcmplt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <_ftoa+0x258>
 8002206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	3301      	adds	r3, #1
 8002214:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002218:	2b00      	cmp	r3, #0
 800221a:	d14b      	bne.n	80022b4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800221c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800221e:	f7fe f989 	bl	8000534 <__aeabi_i2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800222a:	f7fe f835 	bl	8000298 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002236:	2301      	movs	r3, #1
 8002238:	461c      	mov	r4, r3
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <_ftoa+0x2f8>)
 8002240:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002244:	f7fe fc52 	bl	8000aec <__aeabi_dcmplt>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <_ftoa+0x29a>
 800224e:	2300      	movs	r3, #0
 8002250:	461c      	mov	r4, r3
 8002252:	b2e3      	uxtb	r3, r4
 8002254:	f083 0301 	eor.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <_ftoa+0x2ba>
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <_ftoa+0x2f8>)
 8002264:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002268:	f7fe fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d064      	beq.n	800233c <_ftoa+0x384>
 8002272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8081 	beq.w	8002380 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800227e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002280:	3301      	adds	r3, #1
 8002282:	657b      	str	r3, [r7, #84]	; 0x54
 8002284:	e07c      	b.n	8002380 <_ftoa+0x3c8>
 8002286:	bf00      	nop
 8002288:	00000000 	.word	0x00000000
 800228c:	41cdcd65 	.word	0x41cdcd65
 8002290:	00000000 	.word	0x00000000
 8002294:	c1cdcd65 	.word	0xc1cdcd65
 8002298:	0800bf6c 	.word	0x0800bf6c
 800229c:	0800bf70 	.word	0x0800bf70
 80022a0:	7fefffff 	.word	0x7fefffff
 80022a4:	0800bf78 	.word	0x0800bf78
 80022a8:	0800bf80 	.word	0x0800bf80
 80022ac:	0800bff0 	.word	0x0800bff0
 80022b0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80022b8:	e01f      	b.n	80022fa <_ftoa+0x342>
      --count;
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	3b01      	subs	r3, #1
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80022c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022c2:	4b66      	ldr	r3, [pc, #408]	; (800245c <_ftoa+0x4a4>)
 80022c4:	fba3 2301 	umull	r2, r3, r3, r1
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	1aca      	subs	r2, r1, r3
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	1c59      	adds	r1, r3, #1
 80022da:	65f9      	str	r1, [r7, #92]	; 0x5c
 80022dc:	3230      	adds	r2, #48	; 0x30
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	3360      	adds	r3, #96	; 0x60
 80022e2:	443b      	add	r3, r7
 80022e4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80022e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <_ftoa+0x4a4>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	653b      	str	r3, [r7, #80]	; 0x50
 80022f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80022fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fc:	2b1f      	cmp	r3, #31
 80022fe:	d9dc      	bls.n	80022ba <_ftoa+0x302>
 8002300:	e009      	b.n	8002316 <_ftoa+0x35e>
        break;
 8002302:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002304:	e007      	b.n	8002316 <_ftoa+0x35e>
      buf[len++] = '0';
 8002306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	443b      	add	r3, r7
 8002310:	2230      	movs	r2, #48	; 0x30
 8002312:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002318:	2b1f      	cmp	r3, #31
 800231a:	d804      	bhi.n	8002326 <_ftoa+0x36e>
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002328:	2b1f      	cmp	r3, #31
 800232a:	d829      	bhi.n	8002380 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002332:	3360      	adds	r3, #96	; 0x60
 8002334:	443b      	add	r3, r7
 8002336:	222e      	movs	r2, #46	; 0x2e
 8002338:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800233c:	e020      	b.n	8002380 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800233e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <_ftoa+0x4a8>)
 8002342:	fb83 1302 	smull	r1, r3, r3, r2
 8002346:	1099      	asrs	r1, r3, #2
 8002348:	17d3      	asrs	r3, r2, #31
 800234a:	1ac9      	subs	r1, r1, r3
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	1ad1      	subs	r1, r2, r3
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235a:	1c59      	adds	r1, r3, #1
 800235c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800235e:	3230      	adds	r2, #48	; 0x30
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	3360      	adds	r3, #96	; 0x60
 8002364:	443b      	add	r3, r7
 8002366:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800236a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236c:	4a3c      	ldr	r2, [pc, #240]	; (8002460 <_ftoa+0x4a8>)
 800236e:	fb82 1203 	smull	r1, r2, r2, r3
 8002372:	1092      	asrs	r2, r2, #2
 8002374:	17db      	asrs	r3, r3, #31
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	657b      	str	r3, [r7, #84]	; 0x54
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002382:	2b1f      	cmp	r3, #31
 8002384:	d9db      	bls.n	800233e <_ftoa+0x386>
 8002386:	e000      	b.n	800238a <_ftoa+0x3d2>
      break;
 8002388:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800238a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d123      	bne.n	80023dc <_ftoa+0x424>
 8002394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01e      	beq.n	80023dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800239e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <_ftoa+0x416>
 80023a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <_ftoa+0x3fe>
 80023ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <_ftoa+0x416>
      width--;
 80023b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b8:	3b01      	subs	r3, #1
 80023ba:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80023bc:	e007      	b.n	80023ce <_ftoa+0x416>
      buf[len++] = '0';
 80023be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023c4:	3360      	adds	r3, #96	; 0x60
 80023c6:	443b      	add	r3, r7
 80023c8:	2230      	movs	r2, #48	; 0x30
 80023ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80023ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d202      	bcs.n	80023dc <_ftoa+0x424>
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	2b1f      	cmp	r3, #31
 80023da:	d9f0      	bls.n	80023be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80023dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023de:	2b1f      	cmp	r3, #31
 80023e0:	d827      	bhi.n	8002432 <_ftoa+0x47a>
    if (negative) {
 80023e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <_ftoa+0x444>
      buf[len++] = '-';
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	443b      	add	r3, r7
 80023f4:	222d      	movs	r2, #45	; 0x2d
 80023f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80023fa:	e01a      	b.n	8002432 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80023fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800240c:	3360      	adds	r3, #96	; 0x60
 800240e:	443b      	add	r3, r7
 8002410:	222b      	movs	r2, #43	; 0x2b
 8002412:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002416:	e00c      	b.n	8002432 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002428:	3360      	adds	r3, #96	; 0x60
 800242a:	443b      	add	r3, r7
 800242c:	2220      	movs	r2, #32
 800242e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff fbb5 	bl	8001bba <_out_rev>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3764      	adds	r7, #100	; 0x64
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	cccccccd 	.word	0xcccccccd
 8002460:	66666667 	.word	0x66666667
 8002464:	00000000 	.word	0x00000000

08002468 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246c:	b09f      	sub	sp, #124	; 0x7c
 800246e:	af06      	add	r7, sp, #24
 8002470:	6278      	str	r0, [r7, #36]	; 0x24
 8002472:	6239      	str	r1, [r7, #32]
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800247c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002480:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002484:	f7fe fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d014      	beq.n	80024b8 <_etoa+0x50>
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	4bc1      	ldr	r3, [pc, #772]	; (8002798 <_etoa+0x330>)
 8002494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002498:	f7fe fb46 	bl	8000b28 <__aeabi_dcmpgt>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <_etoa+0x50>
 80024a2:	f04f 32ff 	mov.w	r2, #4294967295
 80024a6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80024aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ae:	f7fe fb1d 	bl	8000aec <__aeabi_dcmplt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80024b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	ed97 0b04 	vldr	d0, [r7, #16]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	6a39      	ldr	r1, [r7, #32]
 80024d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024d6:	f7ff fd6f 	bl	8001fb8 <_ftoa>
 80024da:	4603      	mov	r3, r0
 80024dc:	e23f      	b.n	800295e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80024de:	2301      	movs	r3, #1
 80024e0:	461e      	mov	r6, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ee:	f7fe fafd 	bl	8000aec <__aeabi_dcmplt>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <_etoa+0x94>
 80024f8:	2300      	movs	r3, #0
 80024fa:	461e      	mov	r6, r3
 80024fc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8002500:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <_etoa+0xb4>
    value = -value;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	ed97 7b00 	vldr	d7, [r7]
 8002518:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800251c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002528:	2306      	movs	r3, #6
 800252a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800252e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002532:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	0d0a      	lsrs	r2, r1, #20
 8002544:	2300      	movs	r3, #0
 8002546:	4613      	mov	r3, r2
 8002548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002556:	4690      	mov	r8, r2
 8002558:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800255c:	4644      	mov	r4, r8
 800255e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002562:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002566:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800256a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800256c:	f7fd ffe2 	bl	8000534 <__aeabi_i2d>
 8002570:	a37d      	add	r3, pc, #500	; (adr r3, 8002768 <_etoa+0x300>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f847 	bl	8000608 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	a37b      	add	r3, pc, #492	; (adr r3, 8002770 <_etoa+0x308>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fd fe88 	bl	800029c <__adddf3>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4614      	mov	r4, r2
 8002592:	461d      	mov	r5, r3
 8002594:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b7f      	ldr	r3, [pc, #508]	; (800279c <_etoa+0x334>)
 800259e:	f7fd fe7b 	bl	8000298 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	a373      	add	r3, pc, #460	; (adr r3, 8002778 <_etoa+0x310>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f82a 	bl	8000608 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd fe6e 	bl	800029c <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe face 	bl	8000b68 <__aeabi_d2iz>
 80025cc:	4603      	mov	r3, r0
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80025d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80025d2:	f7fd ffaf 	bl	8000534 <__aeabi_i2d>
 80025d6:	a36a      	add	r3, pc, #424	; (adr r3, 8002780 <_etoa+0x318>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f814 	bl	8000608 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <_etoa+0x338>)
 80025ee:	f7fd fe55 	bl	800029c <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fab5 	bl	8000b68 <__aeabi_d2iz>
 80025fe:	4603      	mov	r3, r0
 8002600:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002602:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002604:	f7fd ff96 	bl	8000534 <__aeabi_i2d>
 8002608:	a35f      	add	r3, pc, #380	; (adr r3, 8002788 <_etoa+0x320>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fffb 	bl	8000608 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800261c:	f7fd ff8a 	bl	8000534 <__aeabi_i2d>
 8002620:	a35b      	add	r3, pc, #364	; (adr r3, 8002790 <_etoa+0x328>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd ffef 	bl	8000608 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f7fd fe31 	bl	8000298 <__aeabi_dsub>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800263e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002642:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002646:	f7fd ffdf 	bl	8000608 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002654:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002658:	17da      	asrs	r2, r3, #31
 800265a:	469a      	mov	sl, r3
 800265c:	4693      	mov	fp, r2
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800266a:	2200      	movs	r2, #0
 800266c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002670:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002674:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	f7fd fe0e 	bl	800029c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002694:	f7fd fe00 	bl	8000298 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4692      	mov	sl, r2
 800269e:	469b      	mov	fp, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <_etoa+0x33c>)
 80026a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026aa:	f7fe f8d7 	bl	800085c <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <_etoa+0x340>)
 80026bc:	f7fd fdee 	bl	800029c <__adddf3>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026c8:	f7fe f8c8 	bl	800085c <__aeabi_ddiv>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <_etoa+0x344>)
 80026da:	f7fd fddf 	bl	800029c <__adddf3>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026e6:	f7fe f8b9 	bl	800085c <__aeabi_ddiv>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4650      	mov	r0, sl
 80026f0:	4659      	mov	r1, fp
 80026f2:	f7fd fdd3 	bl	800029c <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4640      	mov	r0, r8
 80026fc:	4649      	mov	r1, r9
 80026fe:	f7fe f8ad 	bl	800085c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <_etoa+0x348>)
 8002710:	f7fd fdc4 	bl	800029c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd ff74 	bl	8000608 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800272c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002730:	f7fe f9dc 	bl	8000aec <__aeabi_dcmplt>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00d      	beq.n	8002756 <_etoa+0x2ee>
    expval--;
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	3b01      	subs	r3, #1
 800273e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <_etoa+0x340>)
 800274a:	f7fe f887 	bl	800085c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002758:	2b63      	cmp	r3, #99	; 0x63
 800275a:	dc2b      	bgt.n	80027b4 <_etoa+0x34c>
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002762:	db27      	blt.n	80027b4 <_etoa+0x34c>
 8002764:	2304      	movs	r3, #4
 8002766:	e026      	b.n	80027b6 <_etoa+0x34e>
 8002768:	509f79fb 	.word	0x509f79fb
 800276c:	3fd34413 	.word	0x3fd34413
 8002770:	8b60c8b3 	.word	0x8b60c8b3
 8002774:	3fc68a28 	.word	0x3fc68a28
 8002778:	636f4361 	.word	0x636f4361
 800277c:	3fd287a7 	.word	0x3fd287a7
 8002780:	0979a371 	.word	0x0979a371
 8002784:	400a934f 	.word	0x400a934f
 8002788:	bbb55516 	.word	0xbbb55516
 800278c:	40026bb1 	.word	0x40026bb1
 8002790:	fefa39ef 	.word	0xfefa39ef
 8002794:	3fe62e42 	.word	0x3fe62e42
 8002798:	7fefffff 	.word	0x7fefffff
 800279c:	3ff80000 	.word	0x3ff80000
 80027a0:	3fe00000 	.word	0x3fe00000
 80027a4:	402c0000 	.word	0x402c0000
 80027a8:	40240000 	.word	0x40240000
 80027ac:	40180000 	.word	0x40180000
 80027b0:	3ff00000 	.word	0x3ff00000
 80027b4:	2305      	movs	r3, #5
 80027b6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80027b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03d      	beq.n	8002840 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80027c4:	a368      	add	r3, pc, #416	; (adr r3, 8002968 <_etoa+0x500>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ce:	f7fe f9a1 	bl	8000b14 <__aeabi_dcmpge>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d024      	beq.n	8002822 <_etoa+0x3ba>
 80027d8:	a365      	add	r3, pc, #404	; (adr r3, 8002970 <_etoa+0x508>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e2:	f7fe f983 	bl	8000aec <__aeabi_dcmplt>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01a      	beq.n	8002822 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80027ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	da07      	bge.n	8002806 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80027f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80027fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002804:	e002      	b.n	800280c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800280c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002820:	e00e      	b.n	8002840 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <_etoa+0x3d8>
 800282a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <_etoa+0x3d8>
        --prec;
 8002836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800283a:	3b01      	subs	r3, #1
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002846:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800284a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284c:	429a      	cmp	r2, r3
 800284e:	d904      	bls.n	800285a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	657b      	str	r3, [r7, #84]	; 0x54
 8002858:	e001      	b.n	800285e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800285e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <_etoa+0x40c>
 800286a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <_etoa+0x426>
    value /= conv.F;
 800287a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800287e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002882:	f7fd ffeb 	bl	800085c <__aeabi_ddiv>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002892:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <_etoa+0x440>
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e003      	b.n	80028b0 <_etoa+0x448>
 80028a8:	ed97 7b04 	vldr	d7, [r7, #16]
 80028ac:	ed87 7b02 	vstr	d7, [r7, #8]
 80028b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d0:	f7ff fb72 	bl	8001fb8 <_ftoa>
 80028d4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80028d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d03f      	beq.n	800295c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80028dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <_etoa+0x484>
 80028e8:	2045      	movs	r0, #69	; 0x45
 80028ea:	e000      	b.n	80028ee <_etoa+0x486>
 80028ec:	2065      	movs	r0, #101	; 0x65
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	1c53      	adds	r3, r2, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80028fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bfb8      	it	lt
 8002902:	425b      	neglt	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002908:	0fdb      	lsrs	r3, r3, #31
 800290a:	b2db      	uxtb	r3, r3
 800290c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290e:	3a01      	subs	r2, #1
 8002910:	2105      	movs	r1, #5
 8002912:	9105      	str	r1, [sp, #20]
 8002914:	9204      	str	r2, [sp, #16]
 8002916:	2200      	movs	r2, #0
 8002918:	9203      	str	r2, [sp, #12]
 800291a:	220a      	movs	r2, #10
 800291c:	9202      	str	r2, [sp, #8]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	9000      	str	r0, [sp, #0]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292a:	f7ff fa72 	bl	8001e12 <_ntoa_long>
 800292e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00f      	beq.n	800295c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800293c:	e007      	b.n	800294e <_etoa+0x4e6>
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	1c53      	adds	r3, r2, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6a39      	ldr	r1, [r7, #32]
 800294a:	2020      	movs	r0, #32
 800294c:	47a0      	blx	r4
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002958:	429a      	cmp	r2, r3
 800295a:	d8f0      	bhi.n	800293e <_etoa+0x4d6>
    }
  }
  return idx;
 800295c:	69fb      	ldr	r3, [r7, #28]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3764      	adds	r7, #100	; 0x64
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002968:	eb1c432d 	.word	0xeb1c432d
 800296c:	3f1a36e2 	.word	0x3f1a36e2
 8002970:	00000000 	.word	0x00000000
 8002974:	412e8480 	.word	0x412e8480

08002978 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297c:	b0a3      	sub	sp, #140	; 0x8c
 800297e:	af0a      	add	r7, sp, #40	; 0x28
 8002980:	6178      	str	r0, [r7, #20]
 8002982:	6139      	str	r1, [r7, #16]
 8002984:	60fa      	str	r2, [r7, #12]
 8002986:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 84be 	bne.w	8003310 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8002994:	4ba3      	ldr	r3, [pc, #652]	; (8002c24 <_vsnprintf+0x2ac>)
 8002996:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002998:	f000 bcba 	b.w	8003310 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b25      	cmp	r3, #37	; 0x25
 80029a2:	d00d      	beq.n	80029c0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	7818      	ldrb	r0, [r3, #0]
 80029a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029aa:	1c53      	adds	r3, r2, #1
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ae:	697c      	ldr	r4, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6939      	ldr	r1, [r7, #16]
 80029b4:	47a0      	blx	r4
      format++;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
      continue;
 80029bc:	f000 bca8 	b.w	8003310 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3b20      	subs	r3, #32
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d857      	bhi.n	8002a84 <_vsnprintf+0x10c>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <_vsnprintf+0x64>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	08002a5d 	.word	0x08002a5d
 80029e0:	08002a85 	.word	0x08002a85
 80029e4:	08002a85 	.word	0x08002a85
 80029e8:	08002a71 	.word	0x08002a71
 80029ec:	08002a85 	.word	0x08002a85
 80029f0:	08002a85 	.word	0x08002a85
 80029f4:	08002a85 	.word	0x08002a85
 80029f8:	08002a85 	.word	0x08002a85
 80029fc:	08002a85 	.word	0x08002a85
 8002a00:	08002a85 	.word	0x08002a85
 8002a04:	08002a85 	.word	0x08002a85
 8002a08:	08002a49 	.word	0x08002a49
 8002a0c:	08002a85 	.word	0x08002a85
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a85 	.word	0x08002a85
 8002a18:	08002a85 	.word	0x08002a85
 8002a1c:	08002a21 	.word	0x08002a21
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	653b      	str	r3, [r7, #80]	; 0x50
 8002a32:	e02a      	b.n	8002a8a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	2301      	movs	r3, #1
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50
 8002a46:	e020      	b.n	8002a8a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	2301      	movs	r3, #1
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
 8002a5a:	e016      	b.n	8002a8a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a6e:	e00c      	b.n	8002a8a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
 8002a82:	e002      	b.n	8002a8a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002a84:	2300      	movs	r3, #0
 8002a86:	653b      	str	r3, [r7, #80]	; 0x50
 8002a88:	bf00      	nop
      }
    } while (n);
 8002a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d19c      	bne.n	80029ca <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f853 	bl	8001b44 <_is_digit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f862 	bl	8001b72 <_atoi>
 8002aae:	65b8      	str	r0, [r7, #88]	; 0x58
 8002ab0:	e01a      	b.n	8002ae8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab8:	d116      	bne.n	8002ae8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	da07      	bge.n	8002ade <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	425b      	negs	r3, r3
 8002ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8002adc:	e001      	b.n	8002ae2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b2e      	cmp	r3, #46	; 0x2e
 8002af2:	d127      	bne.n	8002b44 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f81c 	bl	8001b44 <_is_digit>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f82b 	bl	8001b72 <_atoi>
 8002b1c:	6578      	str	r0, [r7, #84]	; 0x54
 8002b1e:	e011      	b.n	8002b44 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b2a      	cmp	r3, #42	; 0x2a
 8002b26:	d10d      	bne.n	8002b44 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3b68      	subs	r3, #104	; 0x68
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d866      	bhi.n	8002c1c <_vsnprintf+0x2a4>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <_vsnprintf+0x1dc>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002bc7 	.word	0x08002bc7
 8002b58:	08002c1d 	.word	0x08002c1d
 8002b5c:	08002bfd 	.word	0x08002bfd
 8002b60:	08002c1d 	.word	0x08002c1d
 8002b64:	08002ba1 	.word	0x08002ba1
 8002b68:	08002c1d 	.word	0x08002c1d
 8002b6c:	08002c1d 	.word	0x08002c1d
 8002b70:	08002c1d 	.word	0x08002c1d
 8002b74:	08002c1d 	.word	0x08002c1d
 8002b78:	08002c1d 	.word	0x08002c1d
 8002b7c:	08002c1d 	.word	0x08002c1d
 8002b80:	08002c1d 	.word	0x08002c1d
 8002b84:	08002bed 	.word	0x08002bed
 8002b88:	08002c1d 	.word	0x08002c1d
 8002b8c:	08002c1d 	.word	0x08002c1d
 8002b90:	08002c1d 	.word	0x08002c1d
 8002b94:	08002c1d 	.word	0x08002c1d
 8002b98:	08002c1d 	.word	0x08002c1d
 8002b9c:	08002c0d 	.word	0x08002c0d
      case 'l' :
        flags |= FLAGS_LONG;
 8002ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b6c      	cmp	r3, #108	; 0x6c
 8002bb4:	d134      	bne.n	8002c20 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002bc4:	e02c      	b.n	8002c20 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b68      	cmp	r3, #104	; 0x68
 8002bda:	d125      	bne.n	8002c28 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002bea:	e01d      	b.n	8002c28 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
        break;
 8002bfa:	e016      	b.n	8002c2a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
        break;
 8002c0a:	e00e      	b.n	8002c2a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
        break;
 8002c1a:	e006      	b.n	8002c2a <_vsnprintf+0x2b2>
      default :
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e004      	b.n	8002c2a <_vsnprintf+0x2b2>
        break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <_vsnprintf+0x2b2>
 8002c24:	08001aef 	.word	0x08001aef
        break;
 8002c28:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3b25      	subs	r3, #37	; 0x25
 8002c30:	2b53      	cmp	r3, #83	; 0x53
 8002c32:	f200 8360 	bhi.w	80032f6 <_vsnprintf+0x97e>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <_vsnprintf+0x2c4>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	080032df 	.word	0x080032df
 8002c40:	080032f7 	.word	0x080032f7
 8002c44:	080032f7 	.word	0x080032f7
 8002c48:	080032f7 	.word	0x080032f7
 8002c4c:	080032f7 	.word	0x080032f7
 8002c50:	080032f7 	.word	0x080032f7
 8002c54:	080032f7 	.word	0x080032f7
 8002c58:	080032f7 	.word	0x080032f7
 8002c5c:	080032f7 	.word	0x080032f7
 8002c60:	080032f7 	.word	0x080032f7
 8002c64:	080032f7 	.word	0x080032f7
 8002c68:	080032f7 	.word	0x080032f7
 8002c6c:	080032f7 	.word	0x080032f7
 8002c70:	080032f7 	.word	0x080032f7
 8002c74:	080032f7 	.word	0x080032f7
 8002c78:	080032f7 	.word	0x080032f7
 8002c7c:	080032f7 	.word	0x080032f7
 8002c80:	080032f7 	.word	0x080032f7
 8002c84:	080032f7 	.word	0x080032f7
 8002c88:	080032f7 	.word	0x080032f7
 8002c8c:	080032f7 	.word	0x080032f7
 8002c90:	080032f7 	.word	0x080032f7
 8002c94:	080032f7 	.word	0x080032f7
 8002c98:	080032f7 	.word	0x080032f7
 8002c9c:	080032f7 	.word	0x080032f7
 8002ca0:	080032f7 	.word	0x080032f7
 8002ca4:	080032f7 	.word	0x080032f7
 8002ca8:	080032f7 	.word	0x080032f7
 8002cac:	080032f7 	.word	0x080032f7
 8002cb0:	080032f7 	.word	0x080032f7
 8002cb4:	080032f7 	.word	0x080032f7
 8002cb8:	080032f7 	.word	0x080032f7
 8002cbc:	08003093 	.word	0x08003093
 8002cc0:	08003043 	.word	0x08003043
 8002cc4:	08003093 	.word	0x08003093
 8002cc8:	080032f7 	.word	0x080032f7
 8002ccc:	080032f7 	.word	0x080032f7
 8002cd0:	080032f7 	.word	0x080032f7
 8002cd4:	080032f7 	.word	0x080032f7
 8002cd8:	080032f7 	.word	0x080032f7
 8002cdc:	080032f7 	.word	0x080032f7
 8002ce0:	080032f7 	.word	0x080032f7
 8002ce4:	080032f7 	.word	0x080032f7
 8002ce8:	080032f7 	.word	0x080032f7
 8002cec:	080032f7 	.word	0x080032f7
 8002cf0:	080032f7 	.word	0x080032f7
 8002cf4:	080032f7 	.word	0x080032f7
 8002cf8:	080032f7 	.word	0x080032f7
 8002cfc:	080032f7 	.word	0x080032f7
 8002d00:	080032f7 	.word	0x080032f7
 8002d04:	080032f7 	.word	0x080032f7
 8002d08:	08002d8d 	.word	0x08002d8d
 8002d0c:	080032f7 	.word	0x080032f7
 8002d10:	080032f7 	.word	0x080032f7
 8002d14:	080032f7 	.word	0x080032f7
 8002d18:	080032f7 	.word	0x080032f7
 8002d1c:	080032f7 	.word	0x080032f7
 8002d20:	080032f7 	.word	0x080032f7
 8002d24:	080032f7 	.word	0x080032f7
 8002d28:	080032f7 	.word	0x080032f7
 8002d2c:	080032f7 	.word	0x080032f7
 8002d30:	08002d8d 	.word	0x08002d8d
 8002d34:	08003103 	.word	0x08003103
 8002d38:	08002d8d 	.word	0x08002d8d
 8002d3c:	08003093 	.word	0x08003093
 8002d40:	08003043 	.word	0x08003043
 8002d44:	08003093 	.word	0x08003093
 8002d48:	080032f7 	.word	0x080032f7
 8002d4c:	08002d8d 	.word	0x08002d8d
 8002d50:	080032f7 	.word	0x080032f7
 8002d54:	080032f7 	.word	0x080032f7
 8002d58:	080032f7 	.word	0x080032f7
 8002d5c:	080032f7 	.word	0x080032f7
 8002d60:	080032f7 	.word	0x080032f7
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	08003243 	.word	0x08003243
 8002d6c:	080032f7 	.word	0x080032f7
 8002d70:	080032f7 	.word	0x080032f7
 8002d74:	0800317b 	.word	0x0800317b
 8002d78:	080032f7 	.word	0x080032f7
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	080032f7 	.word	0x080032f7
 8002d84:	080032f7 	.word	0x080032f7
 8002d88:	08002d8d 	.word	0x08002d8d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b78      	cmp	r3, #120	; 0x78
 8002d92:	d003      	beq.n	8002d9c <_vsnprintf+0x424>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b58      	cmp	r3, #88	; 0x58
 8002d9a:	d102      	bne.n	8002da2 <_vsnprintf+0x42a>
          base = 16U;
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da0:	e013      	b.n	8002dca <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b6f      	cmp	r3, #111	; 0x6f
 8002da8:	d102      	bne.n	8002db0 <_vsnprintf+0x438>
          base =  8U;
 8002daa:	2308      	movs	r3, #8
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dae:	e00c      	b.n	8002dca <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b62      	cmp	r3, #98	; 0x62
 8002db6:	d102      	bne.n	8002dbe <_vsnprintf+0x446>
          base =  2U;
 8002db8:	2302      	movs	r3, #2
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbc:	e005      	b.n	8002dca <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	f023 0310 	bic.w	r3, r3, #16
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b58      	cmp	r3, #88	; 0x58
 8002dd0:	d103      	bne.n	8002dda <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd4:	f043 0320 	orr.w	r3, r3, #32
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b69      	cmp	r3, #105	; 0x69
 8002de0:	d007      	beq.n	8002df2 <_vsnprintf+0x47a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d003      	beq.n	8002df2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dec:	f023 030c 	bic.w	r3, r3, #12
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8002dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b69      	cmp	r3, #105	; 0x69
 8002e0a:	d004      	beq.n	8002e16 <_vsnprintf+0x49e>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	f040 8098 	bne.w	8002f46 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d031      	beq.n	8002e84 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e24:	3307      	adds	r3, #7
 8002e26:	f023 0307 	bic.w	r3, r3, #7
 8002e2a:	f103 0208 	add.w	r2, r3, #8
 8002e2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da06      	bge.n	8002e50 <_vsnprintf+0x4d8>
 8002e42:	2100      	movs	r1, #0
 8002e44:	f1d2 0800 	rsbs	r8, r2, #0
 8002e48:	eb61 0903 	sbc.w	r9, r1, r3
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	69f9      	ldr	r1, [r7, #28]
 8002e52:	0fc9      	lsrs	r1, r1, #31
 8002e54:	b2c9      	uxtb	r1, r1
 8002e56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e58:	2400      	movs	r4, #0
 8002e5a:	4682      	mov	sl, r0
 8002e5c:	46a3      	mov	fp, r4
 8002e5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e60:	9008      	str	r0, [sp, #32]
 8002e62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e64:	9007      	str	r0, [sp, #28]
 8002e66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e68:	9006      	str	r0, [sp, #24]
 8002e6a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e6e:	9102      	str	r1, [sp, #8]
 8002e70:	e9cd 2300 	strd	r2, r3, [sp]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff f82f 	bl	8001ede <_ntoa_long_long>
 8002e80:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002e82:	e0da      	b.n	800303a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8002e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bfb8      	it	lt
 8002ea2:	425b      	neglt	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	0fdb      	lsrs	r3, r3, #31
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002eae:	9205      	str	r2, [sp, #20]
 8002eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb2:	9204      	str	r2, [sp, #16]
 8002eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eb6:	9203      	str	r2, [sp, #12]
 8002eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eba:	9202      	str	r2, [sp, #8]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	9100      	str	r1, [sp, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7fe ffa3 	bl	8001e12 <_ntoa_long>
 8002ecc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002ece:	e0b4      	b.n	800303a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <_vsnprintf+0x572>
 8002eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ede:	1d1a      	adds	r2, r3, #4
 8002ee0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e012      	b.n	8002f10 <_vsnprintf+0x598>
 8002eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <_vsnprintf+0x58c>
 8002ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ef8:	1d1a      	adds	r2, r3, #4
 8002efa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	e005      	b.n	8002f10 <_vsnprintf+0x598>
 8002f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f08:	1d1a      	adds	r2, r3, #4
 8002f0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bfb8      	it	lt
 8002f18:	425b      	neglt	r3, r3
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	0fdb      	lsrs	r3, r3, #31
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f24:	9205      	str	r2, [sp, #20]
 8002f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f28:	9204      	str	r2, [sp, #16]
 8002f2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f2c:	9203      	str	r2, [sp, #12]
 8002f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f30:	9202      	str	r2, [sp, #8]
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	9100      	str	r1, [sp, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f7fe ff68 	bl	8001e12 <_ntoa_long>
 8002f42:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002f44:	e079      	b.n	800303a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d022      	beq.n	8002f96 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f54:	3307      	adds	r3, #7
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	f103 0208 	add.w	r2, r3, #8
 8002f5e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f68:	2000      	movs	r0, #0
 8002f6a:	460d      	mov	r5, r1
 8002f6c:	4606      	mov	r6, r0
 8002f6e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002f70:	9108      	str	r1, [sp, #32]
 8002f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f74:	9107      	str	r1, [sp, #28]
 8002f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f78:	9106      	str	r1, [sp, #24]
 8002f7a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	9102      	str	r1, [sp, #8]
 8002f82:	e9cd 2300 	strd	r2, r3, [sp]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f8a:	6939      	ldr	r1, [r7, #16]
 8002f8c:	6978      	ldr	r0, [r7, #20]
 8002f8e:	f7fe ffa6 	bl	8001ede <_ntoa_long_long>
 8002f92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002f94:	e051      	b.n	800303a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fa4:	1d1a      	adds	r2, r3, #4
 8002fa6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fae:	9205      	str	r2, [sp, #20]
 8002fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb2:	9204      	str	r2, [sp, #16]
 8002fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fb6:	9203      	str	r2, [sp, #12]
 8002fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fba:	9202      	str	r2, [sp, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	9201      	str	r2, [sp, #4]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc6:	6939      	ldr	r1, [r7, #16]
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f7fe ff22 	bl	8001e12 <_ntoa_long>
 8002fce:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002fd0:	e033      	b.n	800303a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <_vsnprintf+0x674>
 8002fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe0:	1d1a      	adds	r2, r3, #4
 8002fe2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e012      	b.n	8003012 <_vsnprintf+0x69a>
 8002fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <_vsnprintf+0x68e>
 8002ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	e005      	b.n	8003012 <_vsnprintf+0x69a>
 8003006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301a:	9304      	str	r3, [sp, #16]
 800301c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301e:	9303      	str	r3, [sp, #12]
 8003020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	2300      	movs	r3, #0
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7fe feed 	bl	8001e12 <_ntoa_long>
 8003038:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
        break;
 8003040:	e166      	b.n	8003310 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b46      	cmp	r3, #70	; 0x46
 8003048:	d103      	bne.n	8003052 <_vsnprintf+0x6da>
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	f043 0320 	orr.w	r3, r3, #32
 8003050:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003056:	3307      	adds	r3, #7
 8003058:	f023 0307 	bic.w	r3, r3, #7
 800305c:	f103 0208 	add.w	r2, r3, #8
 8003060:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003064:	ed93 7b00 	vldr	d7, [r3]
 8003068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	eeb0 0a47 	vmov.f32	s0, s14
 8003078:	eef0 0a67 	vmov.f32	s1, s15
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7fe ff98 	bl	8001fb8 <_ftoa>
 8003088:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	3301      	adds	r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
        break;
 8003090:	e13e      	b.n	8003310 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b67      	cmp	r3, #103	; 0x67
 8003098:	d003      	beq.n	80030a2 <_vsnprintf+0x72a>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b47      	cmp	r3, #71	; 0x47
 80030a0:	d103      	bne.n	80030aa <_vsnprintf+0x732>
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b45      	cmp	r3, #69	; 0x45
 80030b0:	d003      	beq.n	80030ba <_vsnprintf+0x742>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b47      	cmp	r3, #71	; 0x47
 80030b8:	d103      	bne.n	80030c2 <_vsnprintf+0x74a>
 80030ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030bc:	f043 0320 	orr.w	r3, r3, #32
 80030c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80030c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c6:	3307      	adds	r3, #7
 80030c8:	f023 0307 	bic.w	r3, r3, #7
 80030cc:	f103 0208 	add.w	r2, r3, #8
 80030d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80030d4:	ed93 7b00 	vldr	d7, [r3]
 80030d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030da:	9302      	str	r3, [sp, #8]
 80030dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	eeb0 0a47 	vmov.f32	s0, s14
 80030e8:	eef0 0a67 	vmov.f32	s1, s15
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f0:	6939      	ldr	r1, [r7, #16]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff f9b8 	bl	8002468 <_etoa>
 80030f8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
        break;
 8003100:	e106      	b.n	8003310 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10e      	bne.n	800312e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003110:	e007      	b.n	8003122 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003114:	1c53      	adds	r3, r2, #1
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	697c      	ldr	r4, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6939      	ldr	r1, [r7, #16]
 800311e:	2020      	movs	r0, #32
 8003120:	47a0      	blx	r4
          while (l++ < width) {
 8003122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	647a      	str	r2, [r7, #68]	; 0x44
 8003128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800312a:	429a      	cmp	r2, r3
 800312c:	d8f1      	bhi.n	8003112 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800312e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800313e:	1c53      	adds	r3, r2, #1
 8003140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003142:	697c      	ldr	r4, [r7, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00e      	beq.n	8003172 <_vsnprintf+0x7fa>
          while (l++ < width) {
 8003154:	e007      	b.n	8003166 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8003156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003158:	1c53      	adds	r3, r2, #1
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	697c      	ldr	r4, [r7, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	2020      	movs	r0, #32
 8003164:	47a0      	blx	r4
          while (l++ < width) {
 8003166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	647a      	str	r2, [r7, #68]	; 0x44
 800316c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316e:	429a      	cmp	r2, r3
 8003170:	d8f1      	bhi.n	8003156 <_vsnprintf+0x7de>
          }
        }
        format++;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
        break;
 8003178:	e0ca      	b.n	8003310 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800317a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <_vsnprintf+0x81a>
 800318e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003190:	e001      	b.n	8003196 <_vsnprintf+0x81e>
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	4619      	mov	r1, r3
 8003198:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800319a:	f7fe fcb6 	bl	8001b0a <_strnlen_s>
 800319e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80031a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 80031aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	4293      	cmp	r3, r2
 80031b0:	bf28      	it	cs
 80031b2:	4613      	movcs	r3, r2
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80031b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11a      	bne.n	80031f6 <_vsnprintf+0x87e>
          while (l++ < width) {
 80031c0:	e007      	b.n	80031d2 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 80031c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c4:	1c53      	adds	r3, r2, #1
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	697c      	ldr	r4, [r7, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	2020      	movs	r0, #32
 80031d0:	47a0      	blx	r4
          while (l++ < width) {
 80031d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031da:	429a      	cmp	r2, r3
 80031dc:	d8f1      	bhi.n	80031c2 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80031de:	e00a      	b.n	80031f6 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	643a      	str	r2, [r7, #64]	; 0x40
 80031e6:	7818      	ldrb	r0, [r3, #0]
 80031e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ea:	1c53      	adds	r3, r2, #1
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ee:	697c      	ldr	r4, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6939      	ldr	r1, [r7, #16]
 80031f4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <_vsnprintf+0x89a>
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0eb      	beq.n	80031e0 <_vsnprintf+0x868>
 8003208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	657a      	str	r2, [r7, #84]	; 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e6      	bne.n	80031e0 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800321c:	e007      	b.n	800322e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800321e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003220:	1c53      	adds	r3, r2, #1
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003224:	697c      	ldr	r4, [r7, #20]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6939      	ldr	r1, [r7, #16]
 800322a:	2020      	movs	r0, #32
 800322c:	47a0      	blx	r4
          while (l++ < width) {
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003236:	429a      	cmp	r2, r3
 8003238:	d8f1      	bhi.n	800321e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3301      	adds	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
        break;
 8003240:	e066      	b.n	8003310 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003242:	2308      	movs	r3, #8
 8003244:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003248:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800324c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800324e:	2300      	movs	r3, #0
 8003250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003258:	2b00      	cmp	r3, #0
 800325a:	d023      	beq.n	80032a4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800325c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	2300      	movs	r3, #0
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003272:	9308      	str	r3, [sp, #32]
 8003274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003276:	9307      	str	r3, [sp, #28]
 8003278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327a:	9306      	str	r3, [sp, #24]
 800327c:	f04f 0210 	mov.w	r2, #16
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003290:	e9cd 3400 	strd	r3, r4, [sp]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003298:	6939      	ldr	r1, [r7, #16]
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7fe fe1f 	bl	8001ede <_ntoa_long_long>
 80032a0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80032a2:	e018      	b.n	80032d6 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80032a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032a8:	1d1a      	adds	r2, r3, #4
 80032aa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032bc:	9303      	str	r3, [sp, #12]
 80032be:	2310      	movs	r3, #16
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	9200      	str	r2, [sp, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032cc:	6939      	ldr	r1, [r7, #16]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7fe fd9f 	bl	8001e12 <_ntoa_long>
 80032d4:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
        break;
 80032dc:	e018      	b.n	8003310 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80032de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e0:	1c53      	adds	r3, r2, #1
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	697c      	ldr	r4, [r7, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	2025      	movs	r0, #37	; 0x25
 80032ec:	47a0      	blx	r4
        format++;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
        break;
 80032f4:	e00c      	b.n	8003310 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	7818      	ldrb	r0, [r3, #0]
 80032fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032fc:	1c53      	adds	r3, r2, #1
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003300:	697c      	ldr	r4, [r7, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	47a0      	blx	r4
        format++;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
        break;
 800330e:	bf00      	nop
  while (*format)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f ab41 	bne.w	800299c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800331a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <_vsnprintf+0x9b0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	e000      	b.n	800332a <_vsnprintf+0x9b2>
 8003328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800332a:	697c      	ldr	r4, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6939      	ldr	r1, [r7, #16]
 8003330:	2000      	movs	r0, #0
 8003332:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003336:	4618      	mov	r0, r3
 8003338:	3764      	adds	r7, #100	; 0x64
 800333a:	46bd      	mov	sp, r7
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003340 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003340:	b40e      	push	{r1, r2, r3}
 8003342:	b580      	push	{r7, lr}
 8003344:	b087      	sub	sp, #28
 8003346:	af02      	add	r7, sp, #8
 8003348:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800334a:	f107 0320 	add.w	r3, r7, #32
 800334e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f04f 32ff 	mov.w	r2, #4294967295
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4805      	ldr	r0, [pc, #20]	; (8003374 <sprintf_+0x34>)
 800335e:	f7ff fb0b 	bl	8002978 <_vsnprintf>
 8003362:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003370:	b003      	add	sp, #12
 8003372:	4770      	bx	lr
 8003374:	08001ac1 	.word	0x08001ac1

08003378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_MspInit+0x54>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a11      	ldr	r2, [pc, #68]	; (80033cc <HAL_MspInit+0x54>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_MspInit+0x54>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_MspInit+0x54>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_MspInit+0x54>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_MspInit+0x54>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	210f      	movs	r1, #15
 80033ba:	f06f 0001 	mvn.w	r0, #1
 80033be:	f000 faed 	bl	800399c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	2018      	movs	r0, #24
 80033e6:	f000 fad9 	bl	800399c <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033ea:	2018      	movs	r0, #24
 80033ec:	f000 faf2 	bl	80039d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_InitTick+0xa0>)
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_InitTick+0xa0>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_InitTick+0xa0>)
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800340c:	f107 0210 	add.w	r2, r7, #16
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f002 f9be 	bl	8005798 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800341c:	f002 f9a8 	bl	8005770 <HAL_RCC_GetPCLK2Freq>
 8003420:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <HAL_InitTick+0xa4>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	3b01      	subs	r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_InitTick+0xa8>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_InitTick+0xac>)
 8003434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_InitTick+0xa8>)
 8003438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800343c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_InitTick+0xa8>)
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_InitTick+0xa8>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_InitTick+0xa8>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <HAL_InitTick+0xa8>)
 8003452:	f002 f9d3 	bl	80057fc <HAL_TIM_Base_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 800345c:	4806      	ldr	r0, [pc, #24]	; (8003478 <HAL_InitTick+0xa8>)
 800345e:	f002 fa27 	bl	80058b0 <HAL_TIM_Base_Start_IT>
 8003462:	4603      	mov	r3, r0
 8003464:	e000      	b.n	8003468 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	431bde83 	.word	0x431bde83
 8003478:	200002d0 	.word	0x200002d0
 800347c:	40014000 	.word	0x40014000

08003480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <NMI_Handler+0x4>

08003486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <MemManage_Handler+0x4>

08003492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <BusFault_Handler+0x4>

08003498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <UsageFault_Handler+0x4>

0800349e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80034b2:	f002 fa5f 	bl	8005974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200002d0 	.word	0x200002d0

080034c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
	return 1;
 80034c4:	2301      	movs	r3, #1
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_kill>:

int _kill(int pid, int sig)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034da:	f005 ff0b 	bl	80092f4 <__errno>
 80034de:	4603      	mov	r3, r0
 80034e0:	2216      	movs	r2, #22
 80034e2:	601a      	str	r2, [r3, #0]
	return -1;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_exit>:

void _exit (int status)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ffe7 	bl	80034d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003502:	e7fe      	b.n	8003502 <_exit+0x12>

08003504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e00a      	b.n	800352c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003516:	f3af 8000 	nop.w
 800351a:	4601      	mov	r1, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	60ba      	str	r2, [r7, #8]
 8003522:	b2ca      	uxtb	r2, r1
 8003524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	3301      	adds	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	dbf0      	blt.n	8003516 <_read+0x12>
	}

return len;
 8003534:	687b      	ldr	r3, [r7, #4]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e009      	b.n	8003564 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	60ba      	str	r2, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	dbf1      	blt.n	8003550 <_write+0x12>
	}
	return len;
 800356c:	687b      	ldr	r3, [r7, #4]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_close>:

int _close(int file)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
	return -1;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800359e:	605a      	str	r2, [r3, #4]
	return 0;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_isatty>:

int _isatty(int file)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	return 1;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
	return 0;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <_sbrk+0x5c>)
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <_sbrk+0x60>)
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <_sbrk+0x64>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <_sbrk+0x64>)
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <_sbrk+0x68>)
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003610:	f005 fe70 	bl	80092f4 <__errno>
 8003614:	4603      	mov	r3, r0
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e009      	b.n	8003634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <_sbrk+0x64>)
 8003630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20018000 	.word	0x20018000
 8003640:	00000400 	.word	0x00000400
 8003644:	20000318 	.word	0x20000318
 8003648:	20004d88 	.word	0x20004d88

0800364c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <SystemInit+0x20>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <SystemInit+0x20>)
 8003658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800365c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <MX_USART2_UART_Init+0x50>)
 8003678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 800367c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 8003696:	220c      	movs	r2, #12
 8003698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036a6:	4805      	ldr	r0, [pc, #20]	; (80036bc <MX_USART2_UART_Init+0x4c>)
 80036a8:	f002 fb28 	bl	8005cfc <HAL_UART_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036b2:	f7fd ff95 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000031c 	.word	0x2000031c
 80036c0:	40004400 	.word	0x40004400

080036c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_UART_MspInit+0x84>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12b      	bne.n	800373e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <HAL_UART_MspInit+0x88>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_UART_MspInit+0x88>)
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_UART_MspInit+0x88>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_UART_MspInit+0x88>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_UART_MspInit+0x88>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_UART_MspInit+0x88>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800371e:	230c      	movs	r3, #12
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800372e:	2307      	movs	r3, #7
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	4805      	ldr	r0, [pc, #20]	; (8003750 <HAL_UART_MspInit+0x8c>)
 800373a:	f000 f959 	bl	80039f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800373e:	bf00      	nop
 8003740:	3728      	adds	r7, #40	; 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40004400 	.word	0x40004400
 800374c:	40023800 	.word	0x40023800
 8003750:	40020000 	.word	0x40020000

08003754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800378c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800375a:	490e      	ldr	r1, [pc, #56]	; (8003794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003770:	4c0b      	ldr	r4, [pc, #44]	; (80037a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800377e:	f7ff ff65 	bl	800364c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003782:	f005 feb3 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003786:	f7fd fea5 	bl	80014d4 <main>
  bx  lr    
 800378a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800378c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003794:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003798:	0800c444 	.word	0x0800c444
  ldr r2, =_sbss
 800379c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037a0:	20004d84 	.word	0x20004d84

080037a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a4:	e7fe      	b.n	80037a4 <ADC_IRQHandler>
	...

080037a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <HAL_Init+0x40>)
 80037b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_Init+0x40>)
 80037be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_Init+0x40>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d0:	2003      	movs	r0, #3
 80037d2:	f000 f8d8 	bl	8003986 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d6:	200f      	movs	r0, #15
 80037d8:	f7ff fdfa 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037dc:	f7ff fdcc 	bl	8003378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00

080037ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_IncTick+0x20>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x24>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_IncTick+0x24>)
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000008 	.word	0x20000008
 8003810:	20000360 	.word	0x20000360

08003814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return uwTick;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_GetTick+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000360 	.word	0x20000360

0800382c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60d3      	str	r3, [r2, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <__NVIC_GetPriorityGrouping+0x18>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 0307 	and.w	r3, r3, #7
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	db0b      	blt.n	80038ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4907      	ldr	r1, [pc, #28]	; (80038c8 <__NVIC_EnableIRQ+0x38>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2001      	movs	r0, #1
 80038b2:	fa00 f202 	lsl.w	r2, r0, r2
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e100 	.word	0xe000e100

080038cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db0a      	blt.n	80038f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <__NVIC_SetPriority+0x4c>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	440b      	add	r3, r1
 80038f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f4:	e00a      	b.n	800390c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <__NVIC_SetPriority+0x50>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3b04      	subs	r3, #4
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	440b      	add	r3, r1
 800390a:	761a      	strb	r2, [r3, #24]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf28      	it	cs
 800393e:	2304      	movcs	r3, #4
 8003940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3304      	adds	r3, #4
 8003946:	2b06      	cmp	r3, #6
 8003948:	d902      	bls.n	8003950 <NVIC_EncodePriority+0x30>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3b03      	subs	r3, #3
 800394e:	e000      	b.n	8003952 <NVIC_EncodePriority+0x32>
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003968:	f04f 31ff 	mov.w	r1, #4294967295
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43d9      	mvns	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	4313      	orrs	r3, r2
         );
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff4c 	bl	800382c <__NVIC_SetPriorityGrouping>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ae:	f7ff ff61 	bl	8003874 <__NVIC_GetPriorityGrouping>
 80039b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f7ff ffb1 	bl	8003920 <NVIC_EncodePriority>
 80039be:	4602      	mov	r2, r0
 80039c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff80 	bl	80038cc <__NVIC_SetPriority>
}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff54 	bl	8003890 <__NVIC_EnableIRQ>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e159      	b.n	8003cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	f040 8148 	bne.w	8003cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d005      	beq.n	8003a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d130      	bne.n	8003aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 0201 	and.w	r2, r3, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d017      	beq.n	8003ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d123      	bne.n	8003b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3208      	adds	r2, #8
 8003af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	69b9      	ldr	r1, [r7, #24]
 8003b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a2 	beq.w	8003cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	220f      	movs	r2, #15
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a49      	ldr	r2, [pc, #292]	; (8003ce0 <HAL_GPIO_Init+0x2f0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d019      	beq.n	8003bf2 <HAL_GPIO_Init+0x202>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_GPIO_Init+0x2f4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x1fe>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a47      	ldr	r2, [pc, #284]	; (8003ce8 <HAL_GPIO_Init+0x2f8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x1fa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_GPIO_Init+0x2fc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x1f6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x1f2>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be2:	2307      	movs	r3, #7
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f aea2 	bls.w	8003a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	619a      	str	r2, [r3, #24]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4013      	ands	r3, r2
 8003d42:	041a      	lsls	r2, r3, #16
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	400b      	ands	r3, r1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e12b      	b.n	8003fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fb5c 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f001 fcc0 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a81      	ldr	r2, [pc, #516]	; (8003fd4 <HAL_I2C_Init+0x274>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d807      	bhi.n	8003de4 <HAL_I2C_Init+0x84>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_I2C_Init+0x278>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bf94      	ite	ls
 8003ddc:	2301      	movls	r3, #1
 8003dde:	2300      	movhi	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e006      	b.n	8003df2 <HAL_I2C_Init+0x92>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a7d      	ldr	r2, [pc, #500]	; (8003fdc <HAL_I2C_Init+0x27c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0e7      	b.n	8003fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a78      	ldr	r2, [pc, #480]	; (8003fe0 <HAL_I2C_Init+0x280>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0c9b      	lsrs	r3, r3, #18
 8003e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a6a      	ldr	r2, [pc, #424]	; (8003fd4 <HAL_I2C_Init+0x274>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d802      	bhi.n	8003e34 <HAL_I2C_Init+0xd4>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3301      	adds	r3, #1
 8003e32:	e009      	b.n	8003e48 <HAL_I2C_Init+0xe8>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <HAL_I2C_Init+0x284>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	3301      	adds	r3, #1
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	495c      	ldr	r1, [pc, #368]	; (8003fd4 <HAL_I2C_Init+0x274>)
 8003e64:	428b      	cmp	r3, r1
 8003e66:	d819      	bhi.n	8003e9c <HAL_I2C_Init+0x13c>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e59      	subs	r1, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_I2C_Init+0x138>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1e59      	subs	r1, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	e051      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e04f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <HAL_I2C_Init+0x168>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1e58      	subs	r0, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e012      	b.n	8003eee <HAL_I2C_Init+0x18e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	0099      	lsls	r1, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Init+0x196>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10e      	bne.n	8003f1c <HAL_I2C_Init+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1e58      	subs	r0, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	440b      	add	r3, r1
 8003f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	e00f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	0099      	lsls	r1, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6911      	ldr	r1, [r2, #16]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	000186a0 	.word	0x000186a0
 8003fd8:	001e847f 	.word	0x001e847f
 8003fdc:	003d08ff 	.word	0x003d08ff
 8003fe0:	431bde83 	.word	0x431bde83
 8003fe4:	10624dd3 	.word	0x10624dd3

08003fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	817b      	strh	r3, [r7, #10]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff fc0a 	bl	8003814 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	f040 80e0 	bne.w	80041d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2319      	movs	r3, #25
 8004016:	2201      	movs	r2, #1
 8004018:	4970      	ldr	r1, [pc, #448]	; (80041dc <HAL_I2C_Master_Transmit+0x1f4>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fd86 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	e0d3      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2C_Master_Transmit+0x50>
 8004034:	2302      	movs	r3, #2
 8004036:	e0cc      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d007      	beq.n	800405e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2210      	movs	r2, #16
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a50      	ldr	r2, [pc, #320]	; (80041e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040a0:	8979      	ldrh	r1, [r7, #10]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fbf0 	bl	800488c <I2C_MasterRequestWrite>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e08d      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040cc:	e066      	b.n	800419c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fe00 	bl	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06b      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d11b      	bne.n	8004170 <HAL_I2C_Master_Transmit+0x188>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d017      	beq.n	8004170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	6a39      	ldr	r1, [r7, #32]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fdf0 	bl	8004d5a <I2C_WaitOnBTFFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b04      	cmp	r3, #4
 8004186:	d107      	bne.n	8004198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e01a      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d194      	bne.n	80040ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	00100002 	.word	0x00100002
 80041e0:	ffff0000 	.word	0xffff0000

080041e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	461a      	mov	r2, r3
 80041f0:	460b      	mov	r3, r1
 80041f2:	817b      	strh	r3, [r7, #10]
 80041f4:	4613      	mov	r3, r2
 80041f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7ff fb0c 	bl	8003814 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	f040 820b 	bne.w	8004622 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2319      	movs	r3, #25
 8004212:	2201      	movs	r2, #1
 8004214:	497c      	ldr	r1, [pc, #496]	; (8004408 <HAL_I2C_Master_Receive+0x224>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fc88 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	e1fe      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_I2C_Master_Receive+0x50>
 8004230:	2302      	movs	r3, #2
 8004232:	e1f7      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d007      	beq.n	800425a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2222      	movs	r2, #34	; 0x22
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2210      	movs	r2, #16
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	893a      	ldrh	r2, [r7, #8]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a5c      	ldr	r2, [pc, #368]	; (800440c <HAL_I2C_Master_Receive+0x228>)
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800429c:	8979      	ldrh	r1, [r7, #10]
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb74 	bl	8004990 <I2C_MasterRequestRead>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e1b8      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e18c      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d11b      	bne.n	8004322 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e16c      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11b      	bne.n	8004362 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	e14c      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004388:	e138      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	2b03      	cmp	r3, #3
 8004390:	f200 80f1 	bhi.w	8004576 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b01      	cmp	r3, #1
 800439a:	d123      	bne.n	80043e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fd1b 	bl	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e139      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e2:	e10b      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d14e      	bne.n	800448a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	4906      	ldr	r1, [pc, #24]	; (8004410 <HAL_I2C_Master_Receive+0x22c>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fb98 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e10e      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
 8004406:	bf00      	nop
 8004408:	00100002 	.word	0x00100002
 800440c:	ffff0000 	.word	0xffff0000
 8004410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004488:	e0b8      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	2200      	movs	r2, #0
 8004492:	4966      	ldr	r1, [pc, #408]	; (800462c <HAL_I2C_Master_Receive+0x448>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb49 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0bf      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	494f      	ldr	r1, [pc, #316]	; (800462c <HAL_I2C_Master_Receive+0x448>)
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb1b 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e091      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004574:	e042      	b.n	80045fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fc2e 	bl	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e04c      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d118      	bne.n	80045fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f aec2 	bne.w	800438a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00010004 	.word	0x00010004

08004630 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	460b      	mov	r3, r1
 800463e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff f8e8 	bl	8003814 <HAL_GetTick>
 8004644:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	f040 8111 	bne.w	800487a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	4988      	ldr	r1, [pc, #544]	; (8004884 <HAL_I2C_IsDeviceReady+0x254>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fa62 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
 8004670:	e104      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_I2C_IsDeviceReady+0x50>
 800467c:	2302      	movs	r3, #2
 800467e:	e0fd      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d007      	beq.n	80046a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2224      	movs	r2, #36	; 0x24
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a70      	ldr	r2, [pc, #448]	; (8004888 <HAL_I2C_IsDeviceReady+0x258>)
 80046c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fa20 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004700:	d103      	bne.n	800470a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0b6      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800470e:	897b      	ldrh	r3, [r7, #10]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800471c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800471e:	f7ff f879 	bl	8003814 <HAL_GetTick>
 8004722:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004752:	e025      	b.n	80047a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7ff f85e 	bl	8003814 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <HAL_I2C_IsDeviceReady+0x13a>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	22a0      	movs	r2, #160	; 0xa0
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2ba0      	cmp	r3, #160	; 0xa0
 80047aa:	d005      	beq.n	80047b8 <HAL_I2C_IsDeviceReady+0x188>
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_I2C_IsDeviceReady+0x188>
 80047b2:	7dbb      	ldrb	r3, [r7, #22]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0cd      	beq.n	8004754 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d129      	bne.n	8004822 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2319      	movs	r3, #25
 80047fa:	2201      	movs	r2, #1
 80047fc:	4921      	ldr	r1, [pc, #132]	; (8004884 <HAL_I2C_IsDeviceReady+0x254>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f994 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e036      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e02c      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004830:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800483a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2319      	movs	r3, #25
 8004842:	2201      	movs	r2, #1
 8004844:	490f      	ldr	r1, [pc, #60]	; (8004884 <HAL_I2C_IsDeviceReady+0x254>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f970 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e012      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3301      	adds	r3, #1
 800485a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	f4ff af32 	bcc.w	80046ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	00100002 	.word	0x00100002
 8004888:	ffff0000 	.word	0xffff0000

0800488c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d006      	beq.n	80048b6 <I2C_MasterRequestWrite+0x2a>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <I2C_MasterRequestWrite+0x2a>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e00b      	b.n	80048e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b12      	cmp	r3, #18
 80048ce:	d107      	bne.n	80048e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f91d 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004906:	d103      	bne.n	8004910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e035      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d108      	bne.n	8004930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e01b      	b.n	8004968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004930:	897b      	ldrh	r3, [r7, #10]
 8004932:	11db      	asrs	r3, r3, #7
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f063 030f 	orn	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	490e      	ldr	r1, [pc, #56]	; (8004988 <I2C_MasterRequestWrite+0xfc>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f943 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e010      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <I2C_MasterRequestWrite+0x100>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f933 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	00010008 	.word	0x00010008
 800498c:	00010002 	.word	0x00010002

08004990 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	460b      	mov	r3, r1
 800499e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d006      	beq.n	80049ca <I2C_MasterRequestRead+0x3a>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d003      	beq.n	80049ca <I2C_MasterRequestRead+0x3a>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049c8:	d108      	bne.n	80049dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e00b      	b.n	80049f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	2b11      	cmp	r3, #17
 80049e2:	d107      	bne.n	80049f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f893 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1a:	d103      	bne.n	8004a24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e079      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a30:	d108      	bne.n	8004a44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a32:	897b      	ldrh	r3, [r7, #10]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]
 8004a42:	e05f      	b.n	8004b04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a44:	897b      	ldrh	r3, [r7, #10]
 8004a46:	11db      	asrs	r3, r3, #7
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f063 030f 	orn	r3, r3, #15
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4930      	ldr	r1, [pc, #192]	; (8004b24 <I2C_MasterRequestRead+0x194>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f8b9 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e054      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4929      	ldr	r1, [pc, #164]	; (8004b28 <I2C_MasterRequestRead+0x198>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8a9 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e044      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f831 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ade:	d103      	bne.n	8004ae8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e017      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004aec:	897b      	ldrh	r3, [r7, #10]
 8004aee:	11db      	asrs	r3, r3, #7
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0306 	and.w	r3, r3, #6
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f063 030e 	orn	r3, r3, #14
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4907      	ldr	r1, [pc, #28]	; (8004b28 <I2C_MasterRequestRead+0x198>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f865 	bl	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	00010008 	.word	0x00010008
 8004b28:	00010002 	.word	0x00010002

08004b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b3c:	e025      	b.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d021      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fe fe65 	bl	8003814 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e023      	b.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10d      	bne.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	e00c      	b.n	8004bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d0b6      	beq.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004be8:	e051      	b.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d123      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0204 	orr.w	r2, r3, #4
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e046      	b.n	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d021      	beq.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fe fde3 	bl	8003814 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e020      	b.n	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10c      	bne.n	8004cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e00b      	b.n	8004cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d18d      	bne.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce4:	e02d      	b.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f8ce 	bl	8004e88 <I2C_IsAcknowledgeFailed>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e02d      	b.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d021      	beq.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fe fd89 	bl	8003814 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d116      	bne.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e007      	b.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d1ca      	bne.n	8004ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d66:	e02d      	b.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f88d 	bl	8004e88 <I2C_IsAcknowledgeFailed>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e02d      	b.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d021      	beq.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d80:	f7fe fd48 	bl	8003814 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e007      	b.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d1ca      	bne.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de8:	e042      	b.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d119      	bne.n	8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0210 	mvn.w	r2, #16
 8004e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e029      	b.n	8004e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7fe fcf2 	bl	8003814 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d116      	bne.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e007      	b.n	8004e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d1b5      	bne.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d11b      	bne.n	8004ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	f043 0204 	orr.w	r2, r3, #4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e267      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d075      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d00c      	beq.n	8004f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d112      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1e:	4b82      	ldr	r3, [pc, #520]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f2a:	d10b      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	4b7e      	ldr	r3, [pc, #504]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05b      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x108>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d157      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e242      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d106      	bne.n	8004f5c <HAL_RCC_OscConfig+0x74>
 8004f4e:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a75      	ldr	r2, [pc, #468]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e01d      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x98>
 8004f66:	4b70      	ldr	r3, [pc, #448]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6f      	ldr	r2, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b6d      	ldr	r3, [pc, #436]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6c      	ldr	r2, [pc, #432]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e00b      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f80:	4b69      	ldr	r3, [pc, #420]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a68      	ldr	r2, [pc, #416]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b66      	ldr	r3, [pc, #408]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a65      	ldr	r2, [pc, #404]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fe fc38 	bl	8003814 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fe fc34 	bl	8003814 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e207      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0xc0>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fe fc24 	bl	8003814 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fe fc20 	bl	8003814 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1f3      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe2:	4b51      	ldr	r3, [pc, #324]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xe8>
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d063      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005012:	2b08      	cmp	r3, #8
 8005014:	d11c      	bne.n	8005050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d116      	bne.n	8005050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_RCC_OscConfig+0x152>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e1c7      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4937      	ldr	r1, [pc, #220]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	e03a      	b.n	80050c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005058:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCC_OscConfig+0x244>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fe fbd9 	bl	8003814 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005066:	f7fe fbd5 	bl	8003814 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1a8      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005084:	4b28      	ldr	r3, [pc, #160]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4925      	ldr	r1, [pc, #148]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]
 8005098:	e015      	b.n	80050c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCC_OscConfig+0x244>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fe fbb8 	bl	8003814 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a8:	f7fe fbb4 	bl	8003814 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e187      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d036      	beq.n	8005140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCC_OscConfig+0x248>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fe fb98 	bl	8003814 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e8:	f7fe fb94 	bl	8003814 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e167      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_OscConfig+0x240>)
 80050fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x200>
 8005106:	e01b      	b.n	8005140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_OscConfig+0x248>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fe fb81 	bl	8003814 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005114:	e00e      	b.n	8005134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005116:	f7fe fb7d 	bl	8003814 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d907      	bls.n	8005134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e150      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
 8005128:	40023800 	.word	0x40023800
 800512c:	42470000 	.word	0x42470000
 8005130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	4b88      	ldr	r3, [pc, #544]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ea      	bne.n	8005116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8097 	beq.w	800527c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005152:	4b81      	ldr	r3, [pc, #516]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	4b7d      	ldr	r3, [pc, #500]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a7c      	ldr	r2, [pc, #496]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
 800516e:	4b7a      	ldr	r3, [pc, #488]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517e:	4b77      	ldr	r3, [pc, #476]	; (800535c <HAL_RCC_OscConfig+0x474>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <HAL_RCC_OscConfig+0x474>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a73      	ldr	r2, [pc, #460]	; (800535c <HAL_RCC_OscConfig+0x474>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005196:	f7fe fb3d 	bl	8003814 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519e:	f7fe fb39 	bl	8003814 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e10c      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_OscConfig+0x474>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2ea>
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a63      	ldr	r2, [pc, #396]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	e01c      	b.n	800520c <HAL_RCC_OscConfig+0x324>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x30c>
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a5e      	ldr	r2, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 0304 	orr.w	r3, r3, #4
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	4b5c      	ldr	r3, [pc, #368]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4a5b      	ldr	r2, [pc, #364]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	6713      	str	r3, [r2, #112]	; 0x70
 80051f2:	e00b      	b.n	800520c <HAL_RCC_OscConfig+0x324>
 80051f4:	4b58      	ldr	r3, [pc, #352]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005200:	4b55      	ldr	r3, [pc, #340]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	4a54      	ldr	r2, [pc, #336]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005206:	f023 0304 	bic.w	r3, r3, #4
 800520a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d015      	beq.n	8005240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fe fafe 	bl	8003814 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	e00a      	b.n	8005232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fe fafa 	bl	8003814 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	; 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0cb      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005232:	4b49      	ldr	r3, [pc, #292]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0ee      	beq.n	800521c <HAL_RCC_OscConfig+0x334>
 800523e:	e014      	b.n	800526a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005240:	f7fe fae8 	bl	8003814 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005246:	e00a      	b.n	800525e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fe fae4 	bl	8003814 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0b5      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525e:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1ee      	bne.n	8005248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005270:	4b39      	ldr	r3, [pc, #228]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	4a38      	ldr	r2, [pc, #224]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a1 	beq.w	80053c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d05c      	beq.n	800534c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d141      	bne.n	800531e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fe fab8 	bl	8003814 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fe fab4 	bl	8003814 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e087      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	4b27      	ldr	r3, [pc, #156]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	3b01      	subs	r3, #1
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	491b      	ldr	r1, [pc, #108]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f6:	f7fe fa8d 	bl	8003814 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fe fa89 	bl	8003814 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e05c      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x416>
 800531c:	e054      	b.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_OscConfig+0x478>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe fa76 	bl	8003814 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532c:	f7fe fa72 	bl	8003814 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e045      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_OscConfig+0x470>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x444>
 800534a:	e03d      	b.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e038      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
 8005358:	40023800 	.word	0x40023800
 800535c:	40007000 	.word	0x40007000
 8005360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCC_OscConfig+0x4ec>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d028      	beq.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d121      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d11a      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800539a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800539c:	4293      	cmp	r3, r2
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d107      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800

080053d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0cc      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ec:	4b68      	ldr	r3, [pc, #416]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d90c      	bls.n	8005414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b63      	ldr	r3, [pc, #396]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0b8      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542c:	4b59      	ldr	r3, [pc, #356]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a58      	ldr	r2, [pc, #352]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005444:	4b53      	ldr	r3, [pc, #332]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a52      	ldr	r2, [pc, #328]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800544e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005450:	4b50      	ldr	r3, [pc, #320]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	494d      	ldr	r1, [pc, #308]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d044      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d119      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005492:	2b03      	cmp	r3, #3
 8005494:	d107      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e06f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a6:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e067      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b6:	4b37      	ldr	r3, [pc, #220]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 0203 	bic.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4934      	ldr	r1, [pc, #208]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c8:	f7fe f9a4 	bl	8003814 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d0:	f7fe f9a0 	bl	8003814 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e04f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 020c 	and.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1eb      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d20c      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d001      	beq.n	8005520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e032      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800552c:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4916      	ldr	r1, [pc, #88]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	490e      	ldr	r1, [pc, #56]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800555e:	f000 f821 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8005562:	4602      	mov	r2, r0
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	490a      	ldr	r1, [pc, #40]	; (8005598 <HAL_RCC_ClockConfig+0x1c0>)
 8005570:	5ccb      	ldrb	r3, [r1, r3]
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_ClockConfig+0x1c8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd ff26 	bl	80033d0 <HAL_InitTick>

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023c00 	.word	0x40023c00
 8005594:	40023800 	.word	0x40023800
 8005598:	0800c040 	.word	0x0800c040
 800559c:	20000000 	.word	0x20000000
 80055a0:	20000004 	.word	0x20000004

080055a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b090      	sub	sp, #64	; 0x40
 80055aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
 80055b0:	2300      	movs	r3, #0
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	2300      	movs	r3, #0
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055bc:	4b59      	ldr	r3, [pc, #356]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d00d      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x40>
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	f200 80a1 	bhi.w	8005710 <HAL_RCC_GetSysClockFreq+0x16c>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x34>
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d003      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x3a>
 80055d6:	e09b      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055d8:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_RCC_GetSysClockFreq+0x184>)
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80055dc:	e09b      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055de:	4b53      	ldr	r3, [pc, #332]	; (800572c <HAL_RCC_GetSysClockFreq+0x188>)
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055e2:	e098      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055e4:	4b4f      	ldr	r3, [pc, #316]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ee:	4b4d      	ldr	r3, [pc, #308]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d028      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	099b      	lsrs	r3, r3, #6
 8005600:	2200      	movs	r2, #0
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	627a      	str	r2, [r7, #36]	; 0x24
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800560c:	2100      	movs	r1, #0
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_GetSysClockFreq+0x188>)
 8005610:	fb03 f201 	mul.w	r2, r3, r1
 8005614:	2300      	movs	r3, #0
 8005616:	fb00 f303 	mul.w	r3, r0, r3
 800561a:	4413      	add	r3, r2
 800561c:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_RCC_GetSysClockFreq+0x188>)
 800561e:	fba0 1202 	umull	r1, r2, r0, r2
 8005622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005624:	460a      	mov	r2, r1
 8005626:	62ba      	str	r2, [r7, #40]	; 0x28
 8005628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800562a:	4413      	add	r3, r2
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	2200      	movs	r2, #0
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	61fa      	str	r2, [r7, #28]
 8005636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800563a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800563e:	f7fb fadb 	bl	8000bf8 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4613      	mov	r3, r2
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564a:	e053      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800564c:	4b35      	ldr	r3, [pc, #212]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	099b      	lsrs	r3, r3, #6
 8005652:	2200      	movs	r2, #0
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	617a      	str	r2, [r7, #20]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	4652      	mov	r2, sl
 8005664:	465b      	mov	r3, fp
 8005666:	f04f 0000 	mov.w	r0, #0
 800566a:	f04f 0100 	mov.w	r1, #0
 800566e:	0159      	lsls	r1, r3, #5
 8005670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005674:	0150      	lsls	r0, r2, #5
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	ebb2 080a 	subs.w	r8, r2, sl
 800567e:	eb63 090b 	sbc.w	r9, r3, fp
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800568e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005692:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005696:	ebb2 0408 	subs.w	r4, r2, r8
 800569a:	eb63 0509 	sbc.w	r5, r3, r9
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	00eb      	lsls	r3, r5, #3
 80056a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ac:	00e2      	lsls	r2, r4, #3
 80056ae:	4614      	mov	r4, r2
 80056b0:	461d      	mov	r5, r3
 80056b2:	eb14 030a 	adds.w	r3, r4, sl
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	eb45 030b 	adc.w	r3, r5, fp
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ca:	4629      	mov	r1, r5
 80056cc:	028b      	lsls	r3, r1, #10
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d4:	4621      	mov	r1, r4
 80056d6:	028a      	lsls	r2, r1, #10
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	2200      	movs	r2, #0
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	60fa      	str	r2, [r7, #12]
 80056e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e8:	f7fb fa86 	bl	8000bf8 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4613      	mov	r3, r2
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_GetSysClockFreq+0x180>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	3301      	adds	r3, #1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800570e:	e002      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetSysClockFreq+0x184>)
 8005712:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005718:	4618      	mov	r0, r3
 800571a:	3740      	adds	r7, #64	; 0x40
 800571c:	46bd      	mov	sp, r7
 800571e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	00f42400 	.word	0x00f42400
 800572c:	017d7840 	.word	0x017d7840

08005730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_RCC_GetHCLKFreq+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000000 	.word	0x20000000

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800574c:	f7ff fff0 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800c050 	.word	0x0800c050

08005770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005774:	f7ff ffdc 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0b5b      	lsrs	r3, r3, #13
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	; (8005794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800c050 	.word	0x0800c050

08005798 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	220f      	movs	r2, #15
 80057a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <HAL_RCC_GetClockConfig+0x5c>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0203 	and.w	r2, r3, #3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCC_GetClockConfig+0x5c>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_RCC_GetClockConfig+0x5c>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_RCC_GetClockConfig+0x5c>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057da:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <HAL_RCC_GetClockConfig+0x60>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0207 	and.w	r2, r3, #7
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	601a      	str	r2, [r3, #0]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40023c00 	.word	0x40023c00

080057fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e041      	b.n	8005892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f839 	bl	800589a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f000 f9ca 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e044      	b.n	8005952 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_TIM_Base_Start_IT+0xb0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x6c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f2:	d013      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x6c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_TIM_Base_Start_IT+0xb4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x6c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_TIM_Base_Start_IT+0xb8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x6c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <HAL_TIM_Base_Start_IT+0xbc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a16      	ldr	r2, [pc, #88]	; (8005970 <HAL_TIM_Base_Start_IT+0xc0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d111      	bne.n	8005940 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b06      	cmp	r3, #6
 800592c:	d010      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	e007      	b.n	8005950 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40014000 	.word	0x40014000

08005974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0202 	mvn.w	r2, #2
 80059a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8ee 	bl	8005b98 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8e0 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8f1 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0204 	mvn.w	r2, #4
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8c4 	bl	8005b98 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8b6 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8c7 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0208 	mvn.w	r2, #8
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f89a 	bl	8005b98 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f88c 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f89d 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0210 	mvn.w	r2, #16
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f870 	bl	8005b98 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f862 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f873 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0201 	mvn.w	r2, #1
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fd62 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8e2 	bl	8005ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f838 	bl	8005bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0220 	mvn.w	r2, #32
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8ac 	bl	8005cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a34      	ldr	r2, [pc, #208]	; (8005cb8 <TIM_Base_SetConfig+0xe4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf2:	d00b      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a31      	ldr	r2, [pc, #196]	; (8005cbc <TIM_Base_SetConfig+0xe8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <TIM_Base_SetConfig+0xec>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <TIM_Base_SetConfig+0xf0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <TIM_Base_SetConfig+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2c:	d017      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a22      	ldr	r2, [pc, #136]	; (8005cbc <TIM_Base_SetConfig+0xe8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <TIM_Base_SetConfig+0xec>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <TIM_Base_SetConfig+0xf0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <TIM_Base_SetConfig+0xf4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <TIM_Base_SetConfig+0xf8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <TIM_Base_SetConfig+0xfc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <TIM_Base_SetConfig+0xe4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d103      	bne.n	8005ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]
}
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800

08005cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e03f      	b.n	8005d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fd fcce 	bl	80036c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	; 0x24
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f929 	bl	8005f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	; 0x28
 8005d9a:	af02      	add	r7, sp, #8
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d17c      	bne.n	8005eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_UART_Transmit+0x2c>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e075      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_UART_Transmit+0x3e>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e06e      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dea:	f7fd fd13 	bl	8003814 <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d108      	bne.n	8005e18 <HAL_UART_Transmit+0x82>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e003      	b.n	8005e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e28:	e02a      	b.n	8005e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f840 	bl	8005eba <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e036      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e007      	b.n	8005e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1cf      	bne.n	8005e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2140      	movs	r1, #64	; 0x40
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f810 	bl	8005eba <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e006      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b090      	sub	sp, #64	; 0x40
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eca:	e050      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d04c      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x30>
 8005eda:	f7fd fc9b 	bl	8003814 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d241      	bcs.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f0a:	637a      	str	r2, [r7, #52]	; 0x34
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3e:	623a      	str	r2, [r7, #32]
 8005f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	6a3a      	ldr	r2, [r7, #32]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e00f      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d09f      	beq.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3740      	adds	r7, #64	; 0x40
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b0c0      	sub	sp, #256	; 0x100
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	ea40 0301 	orr.w	r3, r0, r1
 8005fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff0:	f021 010c 	bic.w	r1, r1, #12
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ffe:	430b      	orrs	r3, r1
 8006000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	6999      	ldr	r1, [r3, #24]
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	ea40 0301 	orr.w	r3, r0, r1
 800601e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8f      	ldr	r3, [pc, #572]	; (8006264 <UART_SetConfig+0x2cc>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d005      	beq.n	8006038 <UART_SetConfig+0xa0>
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b8d      	ldr	r3, [pc, #564]	; (8006268 <UART_SetConfig+0x2d0>)
 8006034:	429a      	cmp	r2, r3
 8006036:	d104      	bne.n	8006042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006038:	f7ff fb9a 	bl	8005770 <HAL_RCC_GetPCLK2Freq>
 800603c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006040:	e003      	b.n	800604a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006042:	f7ff fb81 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8006046:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	f040 810c 	bne.w	8006270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006062:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	1891      	adds	r1, r2, r2
 8006070:	65b9      	str	r1, [r7, #88]	; 0x58
 8006072:	415b      	adcs	r3, r3
 8006074:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800607a:	4621      	mov	r1, r4
 800607c:	eb12 0801 	adds.w	r8, r2, r1
 8006080:	4629      	mov	r1, r5
 8006082:	eb43 0901 	adc.w	r9, r3, r1
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800609a:	4690      	mov	r8, r2
 800609c:	4699      	mov	r9, r3
 800609e:	4623      	mov	r3, r4
 80060a0:	eb18 0303 	adds.w	r3, r8, r3
 80060a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060a8:	462b      	mov	r3, r5
 80060aa:	eb49 0303 	adc.w	r3, r9, r3
 80060ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060c6:	460b      	mov	r3, r1
 80060c8:	18db      	adds	r3, r3, r3
 80060ca:	653b      	str	r3, [r7, #80]	; 0x50
 80060cc:	4613      	mov	r3, r2
 80060ce:	eb42 0303 	adc.w	r3, r2, r3
 80060d2:	657b      	str	r3, [r7, #84]	; 0x54
 80060d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060dc:	f7fa fd8c 	bl	8000bf8 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b61      	ldr	r3, [pc, #388]	; (800626c <UART_SetConfig+0x2d4>)
 80060e6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	011c      	lsls	r4, r3, #4
 80060ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	1891      	adds	r1, r2, r2
 8006106:	64b9      	str	r1, [r7, #72]	; 0x48
 8006108:	415b      	adcs	r3, r3
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006110:	4641      	mov	r1, r8
 8006112:	eb12 0a01 	adds.w	sl, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb43 0b01 	adc.w	fp, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800612c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006130:	4692      	mov	sl, r2
 8006132:	469b      	mov	fp, r3
 8006134:	4643      	mov	r3, r8
 8006136:	eb1a 0303 	adds.w	r3, sl, r3
 800613a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800613e:	464b      	mov	r3, r9
 8006140:	eb4b 0303 	adc.w	r3, fp, r3
 8006144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006154:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800615c:	460b      	mov	r3, r1
 800615e:	18db      	adds	r3, r3, r3
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
 8006162:	4613      	mov	r3, r2
 8006164:	eb42 0303 	adc.w	r3, r2, r3
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
 800616a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800616e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006172:	f7fa fd41 	bl	8000bf8 <__aeabi_uldivmod>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4611      	mov	r1, r2
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <UART_SetConfig+0x2d4>)
 800617e:	fba3 2301 	umull	r2, r3, r3, r1
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2264      	movs	r2, #100	; 0x64
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	1acb      	subs	r3, r1, r3
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <UART_SetConfig+0x2d4>)
 8006194:	fba3 2302 	umull	r2, r3, r3, r2
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a0:	441c      	add	r4, r3
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	1891      	adds	r1, r2, r2
 80061ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80061bc:	415b      	adcs	r3, r3
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061c4:	4641      	mov	r1, r8
 80061c6:	1851      	adds	r1, r2, r1
 80061c8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ca:	4649      	mov	r1, r9
 80061cc:	414b      	adcs	r3, r1
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061dc:	4659      	mov	r1, fp
 80061de:	00cb      	lsls	r3, r1, #3
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e6:	4651      	mov	r1, sl
 80061e8:	00ca      	lsls	r2, r1, #3
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	4642      	mov	r2, r8
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f8:	464b      	mov	r3, r9
 80061fa:	460a      	mov	r2, r1
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006210:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006218:	460b      	mov	r3, r1
 800621a:	18db      	adds	r3, r3, r3
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
 800621e:	4613      	mov	r3, r2
 8006220:	eb42 0303 	adc.w	r3, r2, r3
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800622a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800622e:	f7fa fce3 	bl	8000bf8 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <UART_SetConfig+0x2d4>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a08      	ldr	r2, [pc, #32]	; (800626c <UART_SetConfig+0x2d4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 0207 	and.w	r2, r3, #7
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4422      	add	r2, r4
 800625e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006260:	e105      	b.n	800646e <UART_SetConfig+0x4d6>
 8006262:	bf00      	nop
 8006264:	40011000 	.word	0x40011000
 8006268:	40011400 	.word	0x40011400
 800626c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006274:	2200      	movs	r2, #0
 8006276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800627a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800627e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006282:	4642      	mov	r2, r8
 8006284:	464b      	mov	r3, r9
 8006286:	1891      	adds	r1, r2, r2
 8006288:	6239      	str	r1, [r7, #32]
 800628a:	415b      	adcs	r3, r3
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
 800628e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006292:	4641      	mov	r1, r8
 8006294:	1854      	adds	r4, r2, r1
 8006296:	4649      	mov	r1, r9
 8006298:	eb43 0501 	adc.w	r5, r3, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	00eb      	lsls	r3, r5, #3
 80062a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062aa:	00e2      	lsls	r2, r4, #3
 80062ac:	4614      	mov	r4, r2
 80062ae:	461d      	mov	r5, r3
 80062b0:	4643      	mov	r3, r8
 80062b2:	18e3      	adds	r3, r4, r3
 80062b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062b8:	464b      	mov	r3, r9
 80062ba:	eb45 0303 	adc.w	r3, r5, r3
 80062be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062de:	4629      	mov	r1, r5
 80062e0:	008b      	lsls	r3, r1, #2
 80062e2:	4621      	mov	r1, r4
 80062e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e8:	4621      	mov	r1, r4
 80062ea:	008a      	lsls	r2, r1, #2
 80062ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f0:	f7fa fc82 	bl	8000bf8 <__aeabi_uldivmod>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4b60      	ldr	r3, [pc, #384]	; (800647c <UART_SetConfig+0x4e4>)
 80062fa:	fba3 2302 	umull	r2, r3, r3, r2
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	011c      	lsls	r4, r3, #4
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800630c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	61b9      	str	r1, [r7, #24]
 800631c:	415b      	adcs	r3, r3
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6139      	str	r1, [r7, #16]
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	67bb      	str	r3, [r7, #120]	; 0x78
 800636e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800637c:	4649      	mov	r1, r9
 800637e:	008b      	lsls	r3, r1, #2
 8006380:	4641      	mov	r1, r8
 8006382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006386:	4641      	mov	r1, r8
 8006388:	008a      	lsls	r2, r1, #2
 800638a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800638e:	f7fa fc33 	bl	8000bf8 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <UART_SetConfig+0x4e4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a34      	ldr	r2, [pc, #208]	; (800647c <UART_SetConfig+0x4e4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b6:	441c      	add	r4, r3
 80063b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063bc:	2200      	movs	r2, #0
 80063be:	673b      	str	r3, [r7, #112]	; 0x70
 80063c0:	677a      	str	r2, [r7, #116]	; 0x74
 80063c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	1891      	adds	r1, r2, r2
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	415b      	adcs	r3, r3
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063d6:	4641      	mov	r1, r8
 80063d8:	1851      	adds	r1, r2, r1
 80063da:	6039      	str	r1, [r7, #0]
 80063dc:	4649      	mov	r1, r9
 80063de:	414b      	adcs	r3, r1
 80063e0:	607b      	str	r3, [r7, #4]
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063ee:	4659      	mov	r1, fp
 80063f0:	00cb      	lsls	r3, r1, #3
 80063f2:	4651      	mov	r1, sl
 80063f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f8:	4651      	mov	r1, sl
 80063fa:	00ca      	lsls	r2, r1, #3
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	4603      	mov	r3, r0
 8006402:	4642      	mov	r2, r8
 8006404:	189b      	adds	r3, r3, r2
 8006406:	66bb      	str	r3, [r7, #104]	; 0x68
 8006408:	464b      	mov	r3, r9
 800640a:	460a      	mov	r2, r1
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	663b      	str	r3, [r7, #96]	; 0x60
 800641c:	667a      	str	r2, [r7, #100]	; 0x64
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800642a:	4649      	mov	r1, r9
 800642c:	008b      	lsls	r3, r1, #2
 800642e:	4641      	mov	r1, r8
 8006430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006434:	4641      	mov	r1, r8
 8006436:	008a      	lsls	r2, r1, #2
 8006438:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800643c:	f7fa fbdc 	bl	8000bf8 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <UART_SetConfig+0x4e4>)
 8006446:	fba3 1302 	umull	r1, r3, r3, r2
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	2164      	movs	r1, #100	; 0x64
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	3332      	adds	r3, #50	; 0x32
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <UART_SetConfig+0x4e4>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4422      	add	r2, r4
 800646c:	609a      	str	r2, [r3, #8]
}
 800646e:	bf00      	nop
 8006470:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006474:	46bd      	mov	sp, r7
 8006476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647a:	bf00      	nop
 800647c:	51eb851f 	.word	0x51eb851f

08006480 <__NVIC_SetPriority>:
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800648c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006490:	2b00      	cmp	r3, #0
 8006492:	db0a      	blt.n	80064aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	490c      	ldr	r1, [pc, #48]	; (80064cc <__NVIC_SetPriority+0x4c>)
 800649a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649e:	0112      	lsls	r2, r2, #4
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	440b      	add	r3, r1
 80064a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064a8:	e00a      	b.n	80064c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	4908      	ldr	r1, [pc, #32]	; (80064d0 <__NVIC_SetPriority+0x50>)
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	3b04      	subs	r3, #4
 80064b8:	0112      	lsls	r2, r2, #4
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	440b      	add	r3, r1
 80064be:	761a      	strb	r2, [r3, #24]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	e000e100 	.word	0xe000e100
 80064d0:	e000ed00 	.word	0xe000ed00

080064d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <SysTick_Handler+0x1c>)
 80064da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064dc:	f001 fde6 	bl	80080ac <xTaskGetSchedulerState>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064e6:	f002 fc87 	bl	8008df8 <xPortSysTickHandler>
  }
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010

080064f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064f8:	2100      	movs	r1, #0
 80064fa:	f06f 0004 	mvn.w	r0, #4
 80064fe:	f7ff ffbf 	bl	8006480 <__NVIC_SetPriority>
#endif
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	603b      	str	r3, [r7, #0]
  return(result);
 8006514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800651a:	f06f 0305 	mvn.w	r3, #5
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	e00c      	b.n	800653c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <osKernelInitialize+0x44>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <osKernelInitialize+0x44>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006530:	2300      	movs	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	e002      	b.n	800653c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800653c:	687b      	ldr	r3, [r7, #4]
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000364 	.word	0x20000364

08006550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006556:	f3ef 8305 	mrs	r3, IPSR
 800655a:	603b      	str	r3, [r7, #0]
  return(result);
 800655c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006562:	f06f 0305 	mvn.w	r3, #5
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e010      	b.n	800658c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <osKernelStart+0x48>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d109      	bne.n	8006586 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006572:	f7ff ffbf 	bl	80064f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <osKernelStart+0x48>)
 8006578:	2202      	movs	r2, #2
 800657a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800657c:	f001 f93a 	bl	80077f4 <vTaskStartScheduler>
      stat = osOK;
 8006580:	2300      	movs	r3, #0
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	e002      	b.n	800658c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006586:	f04f 33ff 	mov.w	r3, #4294967295
 800658a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000364 	.word	0x20000364

0800659c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08e      	sub	sp, #56	; 0x38
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ac:	f3ef 8305 	mrs	r3, IPSR
 80065b0:	617b      	str	r3, [r7, #20]
  return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d17e      	bne.n	80066b6 <osThreadNew+0x11a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d07b      	beq.n	80066b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065be:	2380      	movs	r3, #128	; 0x80
 80065c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065c2:	2318      	movs	r3, #24
 80065c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d045      	beq.n	8006662 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <osThreadNew+0x48>
        name = attr->name;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <osThreadNew+0x6e>
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b38      	cmp	r3, #56	; 0x38
 80065fc:	d805      	bhi.n	800660a <osThreadNew+0x6e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <osThreadNew+0x72>
        return (NULL);
 800660a:	2300      	movs	r3, #0
 800660c:	e054      	b.n	80066b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	089b      	lsrs	r3, r3, #2
 800661c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00e      	beq.n	8006644 <osThreadNew+0xa8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2bbb      	cmp	r3, #187	; 0xbb
 800662c:	d90a      	bls.n	8006644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006632:	2b00      	cmp	r3, #0
 8006634:	d006      	beq.n	8006644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <osThreadNew+0xa8>
        mem = 1;
 800663e:	2301      	movs	r3, #1
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	e010      	b.n	8006666 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10c      	bne.n	8006666 <osThreadNew+0xca>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d108      	bne.n	8006666 <osThreadNew+0xca>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <osThreadNew+0xca>
          mem = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e001      	b.n	8006666 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d110      	bne.n	800668e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006674:	9202      	str	r2, [sp, #8]
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 feca 	bl	800741c <xTaskCreateStatic>
 8006688:	4603      	mov	r3, r0
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	e013      	b.n	80066b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d110      	bne.n	80066b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	b29a      	uxth	r2, r3
 8006698:	f107 0310 	add.w	r3, r7, #16
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 ff15 	bl	80074d6 <xTaskCreate>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d001      	beq.n	80066b6 <osThreadNew+0x11a>
            hTask = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066b6:	693b      	ldr	r3, [r7, #16]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c8:	f3ef 8305 	mrs	r3, IPSR
 80066cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <osDelay+0x1c>
    stat = osErrorISR;
 80066d4:	f06f 0305 	mvn.w	r3, #5
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e007      	b.n	80066ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f850 	bl	800778c <vTaskDelay>
    }
  }

  return (stat);
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 f99c 	bl	8008a3c <pvTimerGetTimerID>
 8006704:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <TimerCallback+0x22>
    callb->func (callb->arg);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
  }
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08c      	sub	sp, #48	; 0x30
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	460b      	mov	r3, r1
 800672e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006734:	f3ef 8305 	mrs	r3, IPSR
 8006738:	613b      	str	r3, [r7, #16]
  return(result);
 800673a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800673c:	2b00      	cmp	r3, #0
 800673e:	d163      	bne.n	8006808 <osTimerNew+0xe8>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d060      	beq.n	8006808 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006746:	2008      	movs	r0, #8
 8006748:	f002 fbe6 	bl	8008f18 <pvPortMalloc>
 800674c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d059      	beq.n	8006808 <osTimerNew+0xe8>
      callb->func = func;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e001      	b.n	8006770 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006770:	f04f 33ff 	mov.w	r3, #4294967295
 8006774:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01c      	beq.n	80067ba <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <osTimerNew+0x6e>
          name = attr->name;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <osTimerNew+0x84>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b2b      	cmp	r3, #43	; 0x2b
 800679c:	d902      	bls.n	80067a4 <osTimerNew+0x84>
          mem = 1;
 800679e:	2301      	movs	r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e00c      	b.n	80067be <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d108      	bne.n	80067be <osTimerNew+0x9e>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <osTimerNew+0x9e>
            mem = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e001      	b.n	80067be <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10c      	bne.n	80067de <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <osTimerNew+0xf4>)
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	2101      	movs	r1, #1
 80067d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067d6:	f001 fdb2 	bl	800833e <xTimerCreateStatic>
 80067da:	6238      	str	r0, [r7, #32]
 80067dc:	e00b      	b.n	80067f6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d108      	bne.n	80067f6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <osTimerNew+0xf4>)
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	2101      	movs	r1, #1
 80067ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f0:	f001 fd84 	bl	80082fc <xTimerCreate>
 80067f4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <osTimerNew+0xe8>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <osTimerNew+0xe8>
        vPortFree (callb);
 8006802:	6978      	ldr	r0, [r7, #20]
 8006804:	f002 fc54 	bl	80090b0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006808:	6a3b      	ldr	r3, [r7, #32]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	080066f7 	.word	0x080066f7

08006818 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006826:	f3ef 8305 	mrs	r3, IPSR
 800682a:	60fb      	str	r3, [r7, #12]
  return(result);
 800682c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <osTimerStart+0x22>
    stat = osErrorISR;
 8006832:	f06f 0305 	mvn.w	r3, #5
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e017      	b.n	800686a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006840:	f06f 0303 	mvn.w	r3, #3
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	e010      	b.n	800686a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006848:	2300      	movs	r3, #0
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2300      	movs	r3, #0
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	2104      	movs	r1, #4
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f001 fdec 	bl	8008430 <xTimerGenericCommand>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d102      	bne.n	8006864 <osTimerStart+0x4c>
      stat = osOK;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	e002      	b.n	800686a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006864:	f06f 0302 	mvn.w	r3, #2
 8006868:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800686a:	697b      	ldr	r3, [r7, #20]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <vApplicationGetIdleTaskMemory+0x30>)
 800688a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2280      	movs	r2, #128	; 0x80
 8006890:	601a      	str	r2, [r3, #0]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000368 	.word	0x20000368
 80068a4:	20000424 	.word	0x20000424

080068a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a07      	ldr	r2, [pc, #28]	; (80068d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80068b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <vApplicationGetTimerTaskMemory+0x30>)
 80068be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c6:	601a      	str	r2, [r3, #0]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20000624 	.word	0x20000624
 80068d8:	200006e0 	.word	0x200006e0

080068dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f103 0208 	add.w	r2, r3, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f103 0208 	add.w	r2, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f103 0208 	add.w	r2, r3, #8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d103      	bne.n	800699e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e00c      	b.n	80069b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3308      	adds	r3, #8
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <vListInsert+0x2e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d2f6      	bcs.n	80069a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6892      	ldr	r2, [r2, #8]
 8006a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6852      	ldr	r2, [r2, #4]
 8006a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d103      	bne.n	8006a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	1e5a      	subs	r2, r3, #1
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a6e:	f002 f931 	bl	8008cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a7e:	fb01 f303 	mul.w	r3, r1, r3
 8006a82:	441a      	add	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3310      	adds	r3, #16
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f929 	bl	8007d28 <xTaskRemoveFromEventList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <xQueueGenericReset+0xcc>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e009      	b.n	8006b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3310      	adds	r3, #16
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fef2 	bl	80068dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff feed 	bl	80068dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b02:	f002 f917 	bl	8008d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b06:	2301      	movs	r3, #1
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08e      	sub	sp, #56	; 0x38
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <xQueueGenericCreateStatic+0x52>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <xQueueGenericCreateStatic+0x56>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericCreateStatic+0x58>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueGenericCreateStatic+0x7e>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericCreateStatic+0x82>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericCreateStatic+0x84>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61fb      	str	r3, [r7, #28]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bb2:	2350      	movs	r3, #80	; 0x50
 8006bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b50      	cmp	r3, #80	; 0x50
 8006bba:	d00a      	beq.n	8006bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	61bb      	str	r3, [r7, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f805 	bl	8006c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3730      	adds	r7, #48	; 0x30
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c32:	2101      	movs	r1, #1
 8006c34:	69b8      	ldr	r0, [r7, #24]
 8006c36:	f7ff ff05 	bl	8006a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0x32>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x40>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <xQueueGenericSend+0x44>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <xQueueGenericSend+0x46>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueGenericSend+0x60>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x6e>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0x72>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0x74>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericSend+0x8e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cda:	f001 f9e7 	bl	80080ac <xTaskGetSchedulerState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <xQueueGenericSend+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <xQueueGenericSend+0xa2>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueGenericSend+0xa4>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	61fb      	str	r3, [r7, #28]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0a:	f001 ffe3 	bl	8008cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <xQueueGenericSend+0xd4>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d129      	bne.n	8006d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f000 fa0b 	bl	8007140 <prvCopyDataToQueue>
 8006d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fff5 	bl	8007d28 <xTaskRemoveFromEventList>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d44:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	e00a      	b.n	8006d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d5c:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d6c:	f001 ffe2 	bl	8008d34 <vPortExitCritical>
				return pdPASS;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e063      	b.n	8006e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7a:	f001 ffdb 	bl	8008d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e05c      	b.n	8006e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f82f 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d96:	f001 ffcd 	bl	8008d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9a:	f000 fd9b 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d9e:	f001 ff99 	bl	8008cd4 <vPortEnterCritical>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSend+0x16c>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d103      	bne.n	8006dce <xQueueGenericSend+0x182>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dce:	f001 ffb1 	bl	8008d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd2:	1d3a      	adds	r2, r7, #4
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f81e 	bl	8007e1c <xTaskCheckForTimeOut>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d124      	bne.n	8006e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de8:	f000 faa2 	bl	8007330 <prvIsQueueFull>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d018      	beq.n	8006e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	3310      	adds	r3, #16
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 ff44 	bl	8007c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e02:	f000 fa2d 	bl	8007260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e06:	f000 fd73 	bl	80078f0 <xTaskResumeAll>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f47f af7c 	bne.w	8006d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <xQueueGenericSend+0x1f8>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	e772      	b.n	8006d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e26:	f000 fa1b 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2a:	f000 fd61 	bl	80078f0 <xTaskResumeAll>
 8006e2e:	e76c      	b.n	8006d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 fa15 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e36:	f000 fd5b 	bl	80078f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <xQueueGenericSendFromISR+0x3c>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <xQueueGenericSendFromISR+0x40>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <xQueueGenericSendFromISR+0x42>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d103      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x6a>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <xQueueGenericSendFromISR+0x6e>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueGenericSendFromISR+0x70>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	623b      	str	r3, [r7, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed2:	f001 ffe1 	bl	8008e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fa      	str	r2, [r7, #28]
 8006eec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <xQueueGenericSendFromISR+0xbc>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d12f      	bne.n	8006f64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f1a:	f000 f911 	bl	8007140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d112      	bne.n	8006f4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fef7 	bl	8007d28 <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e007      	b.n	8006f5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f52:	3301      	adds	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f62:	e001      	b.n	8006f68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3740      	adds	r7, #64	; 0x40
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueReceive+0x30>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <xQueueReceive+0x3e>
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x42>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x44>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueReceive+0x5e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fde:	f001 f865 	bl	80080ac <xTaskGetSchedulerState>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <xQueueReceive+0x6e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <xQueueReceive+0x72>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <xQueueReceive+0x74>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueReceive+0x8e>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800700e:	f001 fe61 	bl	8008cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01f      	beq.n	800705e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007022:	f000 f8f7 	bl	8007214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fe74 	bl	8007d28 <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <xQueueReceive+0x1bc>)
 8007048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007056:	f001 fe6d 	bl	8008d34 <vPortExitCritical>
				return pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	e069      	b.n	8007132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007064:	f001 fe66 	bl	8008d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007068:	2300      	movs	r3, #0
 800706a:	e062      	b.n	8007132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007072:	f107 0310 	add.w	r3, r7, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f000 feba 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007080:	f001 fe58 	bl	8008d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007084:	f000 fc26 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007088:	f001 fe24 	bl	8008cd4 <vPortEnterCritical>
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d103      	bne.n	80070a2 <xQueueReceive+0x122>
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0x138>
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f001 fe3c 	bl	8008d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070bc:	1d3a      	adds	r2, r7, #4
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fea9 	bl	8007e1c <xTaskCheckForTimeOut>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 f917 	bl	8007304 <prvIsQueueEmpty>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fdcf 	bl	8007c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	f000 f8b8 	bl	8007260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070f0:	f000 fbfe 	bl	80078f0 <xTaskResumeAll>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d189      	bne.n	800700e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <xQueueReceive+0x1bc>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	e780      	b.n	800700e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 f8a7 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007112:	f000 fbed 	bl	80078f0 <xTaskResumeAll>
 8007116:	e77a      	b.n	800700e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f000 f8a1 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800711e:	f000 fbe7 	bl	80078f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 f8ee 	bl	8007304 <prvIsQueueEmpty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f af6f 	beq.w	800700e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3730      	adds	r7, #48	; 0x30
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d14d      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 ffbc 	bl	80080e8 <xTaskPriorityDisinherit>
 8007170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	e043      	b.n	8007202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d119      	bne.n	80071b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6858      	ldr	r0, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	461a      	mov	r2, r3
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	f002 f9d5 	bl	800953a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	441a      	add	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d32b      	bcc.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	e026      	b.n	8007202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68d8      	ldr	r0, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	461a      	mov	r2, r3
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	f002 f9bb 	bl	800953a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	425b      	negs	r3, r3
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d207      	bcs.n	80071f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	425b      	negs	r3, r3
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d105      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3b01      	subs	r3, #1
 8007200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d018      	beq.n	8007258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d303      	bcc.n	8007248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68d9      	ldr	r1, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	f002 f971 	bl	800953a <memcpy>
	}
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007268:	f001 fd34 	bl	8008cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007274:	e011      	b.n	800729a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d012      	beq.n	80072a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3324      	adds	r3, #36	; 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fd50 	bl	8007d28 <xTaskRemoveFromEventList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800728e:	f000 fe27 	bl	8007ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	3b01      	subs	r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dce9      	bgt.n	8007276 <prvUnlockQueue+0x16>
 80072a2:	e000      	b.n	80072a6 <prvUnlockQueue+0x46>
					break;
 80072a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	22ff      	movs	r2, #255	; 0xff
 80072aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072ae:	f001 fd41 	bl	8008d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072b2:	f001 fd0f 	bl	8008cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072be:	e011      	b.n	80072e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd2b 	bl	8007d28 <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072d8:	f000 fe02 	bl	8007ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	3b01      	subs	r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dce9      	bgt.n	80072c0 <prvUnlockQueue+0x60>
 80072ec:	e000      	b.n	80072f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	22ff      	movs	r2, #255	; 0xff
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072f8:	f001 fd1c 	bl	8008d34 <vPortExitCritical>
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f001 fce2 	bl	8008cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e001      	b.n	8007322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007322:	f001 fd07 	bl	8008d34 <vPortExitCritical>

	return xReturn;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007338:	f001 fccc 	bl	8008cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	429a      	cmp	r2, r3
 8007346:	d102      	bne.n	800734e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e001      	b.n	8007352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007352:	f001 fcef 	bl	8008d34 <vPortExitCritical>

	return xReturn;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e014      	b.n	800739a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007370:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <vQueueAddToRegistry+0x50>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800737c:	490c      	ldr	r1, [pc, #48]	; (80073b0 <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007386:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <vQueueAddToRegistry+0x50>)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007392:	e006      	b.n	80073a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b07      	cmp	r3, #7
 800739e:	d9e7      	bls.n	8007370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000ae0 	.word	0x20000ae0

080073b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073c4:	f001 fc86 	bl	8008cd4 <vPortEnterCritical>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d103      	bne.n	80073de <vQueueWaitForMessageRestricted+0x2a>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d103      	bne.n	80073f4 <vQueueWaitForMessageRestricted+0x40>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073f4:	f001 fc9e 	bl	8008d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3324      	adds	r3, #36	; 0x24
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fc61 	bl	8007cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f7ff ff26 	bl	8007260 <prvUnlockQueue>
	}
 8007414:	bf00      	nop
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af04      	add	r7, sp, #16
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTaskCreateStatic+0x46>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	61fb      	str	r3, [r7, #28]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007462:	23bc      	movs	r3, #188	; 0xbc
 8007464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2bbc      	cmp	r3, #188	; 0xbc
 800746a:	d00a      	beq.n	8007482 <xTaskCreateStatic+0x66>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	61bb      	str	r3, [r7, #24]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007482:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01e      	beq.n	80074c8 <xTaskCreateStatic+0xac>
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007498:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	2202      	movs	r2, #2
 800749e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074a2:	2300      	movs	r3, #0
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	9302      	str	r3, [sp, #8]
 80074aa:	f107 0314 	add.w	r3, r7, #20
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f850 	bl	8007560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074c2:	f000 f8f3 	bl	80076ac <prvAddNewTaskToReadyList>
 80074c6:	e001      	b.n	80074cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b08c      	sub	sp, #48	; 0x30
 80074da:	af04      	add	r7, sp, #16
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	603b      	str	r3, [r7, #0]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fd14 	bl	8008f18 <pvPortMalloc>
 80074f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f8:	20bc      	movs	r0, #188	; 0xbc
 80074fa:	f001 fd0d 	bl	8008f18 <pvPortMalloc>
 80074fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
 800750c:	e005      	b.n	800751a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f001 fdce 	bl	80090b0 <vPortFree>
 8007514:	e001      	b.n	800751a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	2300      	movs	r3, #0
 800752c:	9303      	str	r3, [sp, #12]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f80e 	bl	8007560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007544:	69f8      	ldr	r0, [r7, #28]
 8007546:	f000 f8b1 	bl	80076ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800754a:	2301      	movs	r3, #1
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e002      	b.n	8007556 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007556:	69bb      	ldr	r3, [r7, #24]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	461a      	mov	r2, r3
 8007578:	21a5      	movs	r1, #165	; 0xa5
 800757a:	f001 ffec 	bl	8009556 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007588:	3b01      	subs	r3, #1
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	617b      	str	r3, [r7, #20]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01f      	beq.n	80075fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e012      	b.n	80075ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	7819      	ldrb	r1, [r3, #0]
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	4413      	add	r3, r2
 80075d2:	3334      	adds	r3, #52	; 0x34
 80075d4:	460a      	mov	r2, r1
 80075d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d006      	beq.n	80075f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b0f      	cmp	r3, #15
 80075ee:	d9e9      	bls.n	80075c4 <prvInitialiseNewTask+0x64>
 80075f0:	e000      	b.n	80075f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80075f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075fc:	e003      	b.n	8007606 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	2b37      	cmp	r3, #55	; 0x37
 800760a:	d901      	bls.n	8007610 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800760c:	2337      	movs	r3, #55	; 0x37
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	2200      	movs	r2, #0
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	3304      	adds	r3, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff f978 	bl	800691c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	3318      	adds	r3, #24
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff f973 	bl	800691c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2200      	movs	r2, #0
 8007658:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	3354      	adds	r3, #84	; 0x54
 8007660:	2260      	movs	r2, #96	; 0x60
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f001 ff76 	bl	8009556 <memset>
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <prvInitialiseNewTask+0x140>)
 800766e:	659a      	str	r2, [r3, #88]	; 0x58
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <prvInitialiseNewTask+0x144>)
 8007674:	65da      	str	r2, [r3, #92]	; 0x5c
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	4a0b      	ldr	r2, [pc, #44]	; (80076a8 <prvInitialiseNewTask+0x148>)
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	69b8      	ldr	r0, [r7, #24]
 8007682:	f001 f9fb 	bl	8008a7c <pxPortInitialiseStack>
 8007686:	4602      	mov	r2, r0
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007698:	bf00      	nop
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	0800c078 	.word	0x0800c078
 80076a4:	0800c098 	.word	0x0800c098
 80076a8:	0800c058 	.word	0x0800c058

080076ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fb0e 	bl	8008cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a2c      	ldr	r2, [pc, #176]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c2:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ca:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d110      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076d8:	f000 fc26 	bl	8007f28 <prvInitialiseTaskLists>
 80076dc:	e00d      	b.n	80076fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076de:	4b26      	ldr	r3, [pc, #152]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076e6:	4b23      	ldr	r3, [pc, #140]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d802      	bhi.n	80076fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f4:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <prvAddNewTaskToReadyList+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a18      	ldr	r2, [pc, #96]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <prvAddNewTaskToReadyList+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7ff f8fd 	bl	8006936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fafa 	bl	8008d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d207      	bcs.n	8007766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvAddNewTaskToReadyList+0xdc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000ff4 	.word	0x20000ff4
 8007774:	20000b20 	.word	0x20000b20
 8007778:	20001000 	.word	0x20001000
 800777c:	20001010 	.word	0x20001010
 8007780:	20000ffc 	.word	0x20000ffc
 8007784:	20000b24 	.word	0x20000b24
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <vTaskDelay+0x60>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <vTaskDelay+0x30>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077bc:	f000 f88a 	bl	80078d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fcfe 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077c8:	f000 f892 	bl	80078f0 <xTaskResumeAll>
 80077cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <vTaskDelay+0x64>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	2000101c 	.word	0x2000101c
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007802:	463a      	mov	r2, r7
 8007804:	1d39      	adds	r1, r7, #4
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff f832 	bl	8006874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	9202      	str	r2, [sp, #8]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	2300      	movs	r3, #0
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2300      	movs	r3, #0
 8007820:	460a      	mov	r2, r1
 8007822:	4924      	ldr	r1, [pc, #144]	; (80078b4 <vTaskStartScheduler+0xc0>)
 8007824:	4824      	ldr	r0, [pc, #144]	; (80078b8 <vTaskStartScheduler+0xc4>)
 8007826:	f7ff fdf9 	bl	800741c <xTaskCreateStatic>
 800782a:	4603      	mov	r3, r0
 800782c:	4a23      	ldr	r2, [pc, #140]	; (80078bc <vTaskStartScheduler+0xc8>)
 800782e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007830:	4b22      	ldr	r3, [pc, #136]	; (80078bc <vTaskStartScheduler+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e001      	b.n	8007842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d102      	bne.n	800784e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007848:	f000 fd10 	bl	800826c <xTimerCreateTimerTask>
 800784c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11b      	bne.n	800788c <vTaskStartScheduler+0x98>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007868:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <vTaskStartScheduler+0xcc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3354      	adds	r3, #84	; 0x54
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <vTaskStartScheduler+0xd0>)
 8007870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <vTaskStartScheduler+0xd4>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <vTaskStartScheduler+0xd8>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <vTaskStartScheduler+0xdc>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007886:	f001 f983 	bl	8008b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800788a:	e00e      	b.n	80078aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d10a      	bne.n	80078aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <vTaskStartScheduler+0xb4>
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0800bf84 	.word	0x0800bf84
 80078b8:	08007ef9 	.word	0x08007ef9
 80078bc:	20001018 	.word	0x20001018
 80078c0:	20000b20 	.word	0x20000b20
 80078c4:	20000010 	.word	0x20000010
 80078c8:	20001014 	.word	0x20001014
 80078cc:	20001000 	.word	0x20001000
 80078d0:	20000ff8 	.word	0x20000ff8

080078d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <vTaskSuspendAll+0x18>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a03      	ldr	r2, [pc, #12]	; (80078ec <vTaskSuspendAll+0x18>)
 80078e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	2000101c 	.word	0x2000101c

080078f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078fe:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xTaskResumeAll+0x2c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	603b      	str	r3, [r7, #0]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800791c:	f001 f9da 	bl	8008cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007920:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <xTaskResumeAll+0x118>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a38      	ldr	r2, [pc, #224]	; (8007a08 <xTaskResumeAll+0x118>)
 8007928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <xTaskResumeAll+0x118>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d162      	bne.n	80079f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007932:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskResumeAll+0x11c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05e      	beq.n	80079f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793a:	e02f      	b.n	800799c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793c:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <xTaskResumeAll+0x120>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3318      	adds	r3, #24
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff f851 	bl	80069f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff f84c 	bl	80069f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b2d      	ldr	r3, [pc, #180]	; (8007a14 <xTaskResumeAll+0x124>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d903      	bls.n	800796c <xTaskResumeAll+0x7c>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <xTaskResumeAll+0x124>)
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <xTaskResumeAll+0x128>)
 800797a:	441a      	add	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe ffd7 	bl	8006936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <xTaskResumeAll+0x12c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <xTaskResumeAll+0x130>)
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799c:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <xTaskResumeAll+0x120>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1cb      	bne.n	800793c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079aa:	f000 fb5f 	bl	800806c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <xTaskResumeAll+0x134>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d010      	beq.n	80079dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ba:	f000 f847 	bl	8007a4c <xTaskIncrementTick>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079c4:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <xTaskResumeAll+0x130>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f1      	bne.n	80079ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <xTaskResumeAll+0x134>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xTaskResumeAll+0x130>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <xTaskResumeAll+0x138>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 f99c 	bl	8008d34 <vPortExitCritical>

	return xAlreadyYielded;
 80079fc:	68bb      	ldr	r3, [r7, #8]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	2000101c 	.word	0x2000101c
 8007a0c:	20000ff4 	.word	0x20000ff4
 8007a10:	20000fb4 	.word	0x20000fb4
 8007a14:	20000ffc 	.word	0x20000ffc
 8007a18:	20000b24 	.word	0x20000b24
 8007a1c:	20000b20 	.word	0x20000b20
 8007a20:	20001008 	.word	0x20001008
 8007a24:	20001004 	.word	0x20001004
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <xTaskGetTickCount+0x1c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000ff8 	.word	0x20000ff8

08007a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a56:	4b4f      	ldr	r3, [pc, #316]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 808f 	bne.w	8007b7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a60:	4b4d      	ldr	r3, [pc, #308]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a68:	4a4b      	ldr	r2, [pc, #300]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d120      	bne.n	8007ab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a74:	4b49      	ldr	r3, [pc, #292]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	603b      	str	r3, [r7, #0]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xTaskIncrementTick+0x46>
 8007a94:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b41      	ldr	r3, [pc, #260]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a3f      	ldr	r2, [pc, #252]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4a3f      	ldr	r2, [pc, #252]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b3e      	ldr	r3, [pc, #248]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a3d      	ldr	r2, [pc, #244]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	f000 fadb 	bl	800806c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d349      	bcc.n	8007b54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac0:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
					break;
 8007ad2:	e03f      	b.n	8007b54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d203      	bcs.n	8007af4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aec:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007af2:	e02f      	b.n	8007b54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe ff79 	bl	80069f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ff70 	bl	80069f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <xTaskIncrementTick+0xd8>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b32:	441a      	add	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fe fefb 	bl	8006936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d3b8      	bcc.n	8007ac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b52:	e7b5      	b.n	8007ac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b54:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4915      	ldr	r1, [pc, #84]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d901      	bls.n	8007b70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <xTaskIncrementTick+0x16c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e004      	b.n	8007b88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000101c 	.word	0x2000101c
 8007b98:	20000ff8 	.word	0x20000ff8
 8007b9c:	20000fac 	.word	0x20000fac
 8007ba0:	20000fb0 	.word	0x20000fb0
 8007ba4:	2000100c 	.word	0x2000100c
 8007ba8:	20001014 	.word	0x20001014
 8007bac:	20000ffc 	.word	0x20000ffc
 8007bb0:	20000b24 	.word	0x20000b24
 8007bb4:	20000b20 	.word	0x20000b20
 8007bb8:	20001008 	.word	0x20001008
 8007bbc:	20001004 	.word	0x20001004

08007bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <vTaskSwitchContext+0xb0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd4:	e046      	b.n	8007c64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007bd6:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e010      	b.n	8007c06 <vTaskSwitchContext+0x46>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vTaskSwitchContext+0x3e>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	491d      	ldr	r1, [pc, #116]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0e4      	beq.n	8007be4 <vTaskSwitchContext+0x24>
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c26:	4413      	add	r3, r2
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d104      	bne.n	8007c4a <vTaskSwitchContext+0x8a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3354      	adds	r3, #84	; 0x54
 8007c60:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <vTaskSwitchContext+0xc4>)
 8007c62:	6013      	str	r3, [r2, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	2000101c 	.word	0x2000101c
 8007c74:	20001008 	.word	0x20001008
 8007c78:	20000ffc 	.word	0x20000ffc
 8007c7c:	20000b24 	.word	0x20000b24
 8007c80:	20000b20 	.word	0x20000b20
 8007c84:	20000010 	.word	0x20000010

08007c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <vTaskPlaceOnEventList+0x44>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe fe61 	bl	800697e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 fa80 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20000b20 	.word	0x20000b20

08007cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	617b      	str	r3, [r7, #20]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3318      	adds	r3, #24
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7fe fe18 	bl	8006936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	f000 fa55 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
	}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000b20 	.word	0x20000b20

08007d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3318      	adds	r3, #24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe49 	bl	80069f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <xTaskRemoveFromEventList+0xb0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d11d      	bne.n	8007da2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fe40 	bl	80069f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d903      	bls.n	8007d84 <xTaskRemoveFromEventList+0x5c>
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <xTaskRemoveFromEventList+0xb8>)
 8007d92:	441a      	add	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f7fe fdcb 	bl	8006936 <vListInsertEnd>
 8007da0:	e005      	b.n	8007dae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4619      	mov	r1, r3
 8007da8:	480e      	ldr	r0, [pc, #56]	; (8007de4 <xTaskRemoveFromEventList+0xbc>)
 8007daa:	f7fe fdc4 	bl	8006936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <xTaskRemoveFromEventList+0xc0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d905      	bls.n	8007dc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <xTaskRemoveFromEventList+0xc4>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	e001      	b.n	8007dcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	2000101c 	.word	0x2000101c
 8007ddc:	20000ffc 	.word	0x20000ffc
 8007de0:	20000b24 	.word	0x20000b24
 8007de4:	20000fb4 	.word	0x20000fb4
 8007de8:	20000b20 	.word	0x20000b20
 8007dec:	20001008 	.word	0x20001008

08007df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <vTaskInternalSetTimeOutState+0x24>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <vTaskInternalSetTimeOutState+0x28>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	2000100c 	.word	0x2000100c
 8007e18:	20000ff8 	.word	0x20000ff8

08007e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e5e:	f000 ff39 	bl	8008cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <xTaskCheckForTimeOut+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d102      	bne.n	8007e82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e023      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <xTaskCheckForTimeOut+0xc0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d007      	beq.n	8007e9e <xTaskCheckForTimeOut+0x82>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d302      	bcc.n	8007e9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	e015      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d20b      	bcs.n	8007ec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff9b 	bl	8007df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e004      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eca:	f000 ff33 	bl	8008d34 <vPortExitCritical>

	return xReturn;
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000ff8 	.word	0x20000ff8
 8007edc:	2000100c 	.word	0x2000100c

08007ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <vTaskMissedYield+0x14>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20001008 	.word	0x20001008

08007ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f00:	f000 f852 	bl	8007fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <prvIdleTask+0x28>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d9f9      	bls.n	8007f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <prvIdleTask+0x2c>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f1c:	e7f0      	b.n	8007f00 <prvIdleTask+0x8>
 8007f1e:	bf00      	nop
 8007f20:	20000b24 	.word	0x20000b24
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	e00c      	b.n	8007f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <prvInitialiseTaskLists+0x60>)
 8007f40:	4413      	add	r3, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fcca 	bl	80068dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b37      	cmp	r3, #55	; 0x37
 8007f52:	d9ef      	bls.n	8007f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f54:	480d      	ldr	r0, [pc, #52]	; (8007f8c <prvInitialiseTaskLists+0x64>)
 8007f56:	f7fe fcc1 	bl	80068dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f5a:	480d      	ldr	r0, [pc, #52]	; (8007f90 <prvInitialiseTaskLists+0x68>)
 8007f5c:	f7fe fcbe 	bl	80068dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f60:	480c      	ldr	r0, [pc, #48]	; (8007f94 <prvInitialiseTaskLists+0x6c>)
 8007f62:	f7fe fcbb 	bl	80068dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f66:	480c      	ldr	r0, [pc, #48]	; (8007f98 <prvInitialiseTaskLists+0x70>)
 8007f68:	f7fe fcb8 	bl	80068dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f6c:	480b      	ldr	r0, [pc, #44]	; (8007f9c <prvInitialiseTaskLists+0x74>)
 8007f6e:	f7fe fcb5 	bl	80068dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f72:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <prvInitialiseTaskLists+0x78>)
 8007f74:	4a05      	ldr	r2, [pc, #20]	; (8007f8c <prvInitialiseTaskLists+0x64>)
 8007f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <prvInitialiseTaskLists+0x7c>)
 8007f7a:	4a05      	ldr	r2, [pc, #20]	; (8007f90 <prvInitialiseTaskLists+0x68>)
 8007f7c:	601a      	str	r2, [r3, #0]
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000b24 	.word	0x20000b24
 8007f8c:	20000f84 	.word	0x20000f84
 8007f90:	20000f98 	.word	0x20000f98
 8007f94:	20000fb4 	.word	0x20000fb4
 8007f98:	20000fc8 	.word	0x20000fc8
 8007f9c:	20000fe0 	.word	0x20000fe0
 8007fa0:	20000fac 	.word	0x20000fac
 8007fa4:	20000fb0 	.word	0x20000fb0

08007fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fae:	e019      	b.n	8007fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fb0:	f000 fe90 	bl	8008cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb4:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <prvCheckTasksWaitingTermination+0x50>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fd15 	bl	80069f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <prvCheckTasksWaitingTermination+0x54>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	4a0b      	ldr	r2, [pc, #44]	; (8007ffc <prvCheckTasksWaitingTermination+0x54>)
 8007fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <prvCheckTasksWaitingTermination+0x58>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <prvCheckTasksWaitingTermination+0x58>)
 8007fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fda:	f000 feab 	bl	8008d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f810 	bl	8008004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe4:	4b06      	ldr	r3, [pc, #24]	; (8008000 <prvCheckTasksWaitingTermination+0x58>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e1      	bne.n	8007fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000fc8 	.word	0x20000fc8
 8007ffc:	20000ff4 	.word	0x20000ff4
 8008000:	20000fdc 	.word	0x20000fdc

08008004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3354      	adds	r3, #84	; 0x54
 8008010:	4618      	mov	r0, r3
 8008012:	f001 ffb5 	bl	8009f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800801c:	2b00      	cmp	r3, #0
 800801e:	d108      	bne.n	8008032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f843 	bl	80090b0 <vPortFree>
				vPortFree( pxTCB );
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f840 	bl	80090b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008030:	e018      	b.n	8008064 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008038:	2b01      	cmp	r3, #1
 800803a:	d103      	bne.n	8008044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f837 	bl	80090b0 <vPortFree>
	}
 8008042:	e00f      	b.n	8008064 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800804a:	2b02      	cmp	r3, #2
 800804c:	d00a      	beq.n	8008064 <prvDeleteTCB+0x60>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60fb      	str	r3, [r7, #12]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <prvDeleteTCB+0x5e>
	}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvResetNextTaskUnblockTime+0x38>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <prvResetNextTaskUnblockTime+0x3c>)
 800807e:	f04f 32ff 	mov.w	r2, #4294967295
 8008082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008084:	e008      	b.n	8008098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008086:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <prvResetNextTaskUnblockTime+0x38>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	4a04      	ldr	r2, [pc, #16]	; (80080a8 <prvResetNextTaskUnblockTime+0x3c>)
 8008096:	6013      	str	r3, [r2, #0]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20000fac 	.word	0x20000fac
 80080a8:	20001014 	.word	0x20001014

080080ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <xTaskGetSchedulerState+0x34>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ba:	2301      	movs	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	e008      	b.n	80080d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c0:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <xTaskGetSchedulerState+0x38>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080c8:	2302      	movs	r3, #2
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	e001      	b.n	80080d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080d2:	687b      	ldr	r3, [r7, #4]
	}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	20001000 	.word	0x20001000
 80080e4:	2000101c 	.word	0x2000101c

080080e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d056      	beq.n	80081ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080fe:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <xTaskPriorityDisinherit+0xd0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	429a      	cmp	r2, r3
 8008106:	d00a      	beq.n	800811e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	60bb      	str	r3, [r7, #8]
}
 8008138:	bf00      	nop
 800813a:	e7fe      	b.n	800813a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814e:	429a      	cmp	r2, r3
 8008150:	d02c      	beq.n	80081ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008156:	2b00      	cmp	r3, #0
 8008158:	d128      	bne.n	80081ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	3304      	adds	r3, #4
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fc46 	bl	80069f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <xTaskPriorityDisinherit+0xd4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <xTaskPriorityDisinherit+0xa4>
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <xTaskPriorityDisinherit+0xd4>)
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <xTaskPriorityDisinherit+0xd8>)
 800819a:	441a      	add	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fe fbc7 	bl	8006936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081ac:	697b      	ldr	r3, [r7, #20]
	}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000b20 	.word	0x20000b20
 80081bc:	20000ffc 	.word	0x20000ffc
 80081c0:	20000b24 	.word	0x20000b24

080081c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ce:	4b21      	ldr	r3, [pc, #132]	; (8008254 <prvAddCurrentTaskToDelayedList+0x90>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d4:	4b20      	ldr	r3, [pc, #128]	; (8008258 <prvAddCurrentTaskToDelayedList+0x94>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fc08 	bl	80069f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d10a      	bne.n	80081fe <prvAddCurrentTaskToDelayedList+0x3a>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d007      	beq.n	80081fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ee:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4819      	ldr	r0, [pc, #100]	; (800825c <prvAddCurrentTaskToDelayedList+0x98>)
 80081f8:	f7fe fb9d 	bl	8006936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081fc:	e026      	b.n	800824c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <prvAddCurrentTaskToDelayedList+0x94>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	429a      	cmp	r2, r3
 8008214:	d209      	bcs.n	800822a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <prvAddCurrentTaskToDelayedList+0x94>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fbab 	bl	800697e <vListInsert>
}
 8008228:	e010      	b.n	800824c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822a:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <prvAddCurrentTaskToDelayedList+0x94>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fba1 	bl	800697e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	d202      	bcs.n	800824c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008246:	4a08      	ldr	r2, [pc, #32]	; (8008268 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6013      	str	r3, [r2, #0]
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000ff8 	.word	0x20000ff8
 8008258:	20000b20 	.word	0x20000b20
 800825c:	20000fe0 	.word	0x20000fe0
 8008260:	20000fb0 	.word	0x20000fb0
 8008264:	20000fac 	.word	0x20000fac
 8008268:	20001014 	.word	0x20001014

0800826c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008276:	f000 fba1 	bl	80089bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800827a:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <xTimerCreateTimerTask+0x80>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d021      	beq.n	80082c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800828a:	1d3a      	adds	r2, r7, #4
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fb07 	bl	80068a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	9202      	str	r2, [sp, #8]
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	2337      	movs	r3, #55	; 0x37
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	2300      	movs	r3, #0
 80082aa:	460a      	mov	r2, r1
 80082ac:	4910      	ldr	r1, [pc, #64]	; (80082f0 <xTimerCreateTimerTask+0x84>)
 80082ae:	4811      	ldr	r0, [pc, #68]	; (80082f4 <xTimerCreateTimerTask+0x88>)
 80082b0:	f7ff f8b4 	bl	800741c <xTaskCreateStatic>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <xTimerCreateTimerTask+0x8c>)
 80082b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082ba:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <xTimerCreateTimerTask+0x8c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082c2:	2301      	movs	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	613b      	str	r3, [r7, #16]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082e2:	697b      	ldr	r3, [r7, #20]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20001050 	.word	0x20001050
 80082f0:	0800bf8c 	.word	0x0800bf8c
 80082f4:	08008565 	.word	0x08008565
 80082f8:	20001054 	.word	0x20001054

080082fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800830a:	202c      	movs	r0, #44	; 0x2c
 800830c:	f000 fe04 	bl	8008f18 <pvPortMalloc>
 8008310:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00d      	beq.n	8008334 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f843 	bl	80083ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008334:	697b      	ldr	r3, [r7, #20]
	}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800833e:	b580      	push	{r7, lr}
 8008340:	b08a      	sub	sp, #40	; 0x28
 8008342:	af02      	add	r7, sp, #8
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800834c:	232c      	movs	r3, #44	; 0x2c
 800834e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b2c      	cmp	r3, #44	; 0x2c
 8008354:	d00a      	beq.n	800836c <xTimerCreateStatic+0x2e>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	61bb      	str	r3, [r7, #24]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800836c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xTimerCreateStatic+0x4c>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	617b      	str	r3, [r7, #20]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00d      	beq.n	80083b0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f805 	bl	80083ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80083b0:	69fb      	ldr	r3, [r7, #28]
	}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3720      	adds	r7, #32
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b086      	sub	sp, #24
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	617b      	str	r3, [r7, #20]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01e      	beq.n	8008428 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80083ea:	f000 fae7 	bl	80089bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fa86 	bl	800691c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800841c:	f043 0304 	orr.w	r3, r3, #4
 8008420:	b2da      	uxtb	r2, r3
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008428:	bf00      	nop
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	623b      	str	r3, [r7, #32]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <xTimerGenericCommand+0x98>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02a      	beq.n	80084bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b05      	cmp	r3, #5
 8008476:	dc18      	bgt.n	80084aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008478:	f7ff fe18 	bl	80080ac <xTaskGetSchedulerState>
 800847c:	4603      	mov	r3, r0
 800847e:	2b02      	cmp	r3, #2
 8008480:	d109      	bne.n	8008496 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008482:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <xTimerGenericCommand+0x98>)
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f107 0110 	add.w	r1, r7, #16
 800848a:	2300      	movs	r3, #0
 800848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848e:	f7fe fbdd 	bl	8006c4c <xQueueGenericSend>
 8008492:	6278      	str	r0, [r7, #36]	; 0x24
 8008494:	e012      	b.n	80084bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <xTimerGenericCommand+0x98>)
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	f107 0110 	add.w	r1, r7, #16
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	f7fe fbd3 	bl	8006c4c <xQueueGenericSend>
 80084a6:	6278      	str	r0, [r7, #36]	; 0x24
 80084a8:	e008      	b.n	80084bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084aa:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <xTimerGenericCommand+0x98>)
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f107 0110 	add.w	r1, r7, #16
 80084b2:	2300      	movs	r3, #0
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	f7fe fcc7 	bl	8006e48 <xQueueGenericSendFromISR>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	; 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20001050 	.word	0x20001050

080084cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d6:	4b22      	ldr	r3, [pc, #136]	; (8008560 <prvProcessExpiredTimer+0x94>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fa83 	bl	80069f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d022      	beq.n	800853e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	18d1      	adds	r1, r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	6978      	ldr	r0, [r7, #20]
 8008506:	f000 f8d1 	bl	80086ac <prvInsertTimerInActiveList>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01f      	beq.n	8008550 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008510:	2300      	movs	r3, #0
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	2100      	movs	r1, #0
 800851a:	6978      	ldr	r0, [r7, #20]
 800851c:	f7ff ff88 	bl	8008430 <xTimerGenericCommand>
 8008520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d113      	bne.n	8008550 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008544:	f023 0301 	bic.w	r3, r3, #1
 8008548:	b2da      	uxtb	r2, r3
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	6978      	ldr	r0, [r7, #20]
 8008556:	4798      	blx	r3
}
 8008558:	bf00      	nop
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20001048 	.word	0x20001048

08008564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f857 	bl	8008624 <prvGetNextExpireTime>
 8008576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f803 	bl	8008588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008582:	f000 f8d5 	bl	8008730 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008586:	e7f1      	b.n	800856c <prvTimerTask+0x8>

08008588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008592:	f7ff f99f 	bl	80078d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f866 	bl	800866c <prvSampleTimeNow>
 80085a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d130      	bne.n	800860a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <prvProcessTimerOrBlockTask+0x3c>
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d806      	bhi.n	80085c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085b6:	f7ff f99b 	bl	80078f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ff85 	bl	80084cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085c2:	e024      	b.n	800860e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d008      	beq.n	80085dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085ca:	4b13      	ldr	r3, [pc, #76]	; (8008618 <prvProcessTimerOrBlockTask+0x90>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <prvProcessTimerOrBlockTask+0x50>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <prvProcessTimerOrBlockTask+0x52>
 80085d8:	2300      	movs	r3, #0
 80085da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <prvProcessTimerOrBlockTask+0x94>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7fe fee3 	bl	80073b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085ee:	f7ff f97f 	bl	80078f0 <xTaskResumeAll>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <prvProcessTimerOrBlockTask+0x98>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
}
 8008608:	e001      	b.n	800860e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800860a:	f7ff f971 	bl	80078f0 <xTaskResumeAll>
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	2000104c 	.word	0x2000104c
 800861c:	20001050 	.word	0x20001050
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800862c:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <prvGetNextExpireTime+0x44>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <prvGetNextExpireTime+0x16>
 8008636:	2201      	movs	r2, #1
 8008638:	e000      	b.n	800863c <prvGetNextExpireTime+0x18>
 800863a:	2200      	movs	r2, #0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <prvGetNextExpireTime+0x44>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	e001      	b.n	8008658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20001048 	.word	0x20001048

0800866c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008674:	f7ff f9da 	bl	8007a2c <xTaskGetTickCount>
 8008678:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <prvSampleTimeNow+0x3c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	429a      	cmp	r2, r3
 8008682:	d205      	bcs.n	8008690 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008684:	f000 f936 	bl	80088f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e002      	b.n	8008696 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008696:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <prvSampleTimeNow+0x3c>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800869c:	68fb      	ldr	r3, [r7, #12]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20001058 	.word	0x20001058

080086ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086ba:	2300      	movs	r3, #0
 80086bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d812      	bhi.n	80086f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	1ad2      	subs	r2, r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d302      	bcc.n	80086e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e01b      	b.n	800871e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086e6:	4b10      	ldr	r3, [pc, #64]	; (8008728 <prvInsertTimerInActiveList+0x7c>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7fe f944 	bl	800697e <vListInsert>
 80086f6:	e012      	b.n	800871e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d206      	bcs.n	800870e <prvInsertTimerInActiveList+0x62>
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d302      	bcc.n	800870e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	e007      	b.n	800871e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <prvInsertTimerInActiveList+0x80>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe f930 	bl	800697e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800871e:	697b      	ldr	r3, [r7, #20]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	2000104c 	.word	0x2000104c
 800872c:	20001048 	.word	0x20001048

08008730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008736:	e0ca      	b.n	80088ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da18      	bge.n	8008770 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800873e:	1d3b      	adds	r3, r7, #4
 8008740:	3304      	adds	r3, #4
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	61fb      	str	r3, [r7, #28]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008766:	6850      	ldr	r0, [r2, #4]
 8008768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800876a:	6892      	ldr	r2, [r2, #8]
 800876c:	4611      	mov	r1, r2
 800876e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f2c0 80aa 	blt.w	80088cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	3304      	adds	r3, #4
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe f931 	bl	80069f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800878e:	463b      	mov	r3, r7
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff ff6b 	bl	800866c <prvSampleTimeNow>
 8008796:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b09      	cmp	r3, #9
 800879c:	f200 8097 	bhi.w	80088ce <prvProcessReceivedCommands+0x19e>
 80087a0:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <prvProcessReceivedCommands+0x78>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087d1 	.word	0x080087d1
 80087b0:	080087d1 	.word	0x080087d1
 80087b4:	08008845 	.word	0x08008845
 80087b8:	08008859 	.word	0x08008859
 80087bc:	080088a3 	.word	0x080088a3
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	080087d1 	.word	0x080087d1
 80087c8:	08008845 	.word	0x08008845
 80087cc:	08008859 	.word	0x08008859
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	18d1      	adds	r1, r2, r3
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f0:	f7ff ff5c 	bl	80086ac <prvInsertTimerInActiveList>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d069      	beq.n	80088ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d05e      	beq.n	80088ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	441a      	add	r2, r3
 8008818:	2300      	movs	r3, #0
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2300      	movs	r3, #0
 800881e:	2100      	movs	r1, #0
 8008820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008822:	f7ff fe05 	bl	8008430 <xTimerGenericCommand>
 8008826:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d14f      	bne.n	80088ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	61bb      	str	r3, [r7, #24]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	b2da      	uxtb	r2, r3
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008856:	e03a      	b.n	80088ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	617b      	str	r3, [r7, #20]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	18d1      	adds	r1, r2, r3
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800889c:	f7ff ff06 	bl	80086ac <prvInsertTimerInActiveList>
					break;
 80088a0:	e015      	b.n	80088ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80088b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b2:	f000 fbfd 	bl	80090b0 <vPortFree>
 80088b6:	e00a      	b.n	80088ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088ca:	e000      	b.n	80088ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80088cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <prvProcessReceivedCommands+0x1c0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	1d39      	adds	r1, r7, #4
 80088d4:	2200      	movs	r2, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fb52 	bl	8006f80 <xQueueReceive>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f47f af2a 	bne.w	8008738 <prvProcessReceivedCommands+0x8>
	}
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	3730      	adds	r7, #48	; 0x30
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20001050 	.word	0x20001050

080088f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088fa:	e048      	b.n	800898e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088fc:	4b2d      	ldr	r3, [pc, #180]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008906:	4b2b      	ldr	r3, [pc, #172]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3304      	adds	r3, #4
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe f86b 	bl	80069f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008928:	f003 0304 	and.w	r3, r3, #4
 800892c:	2b00      	cmp	r3, #0
 800892e:	d02e      	beq.n	800898e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4413      	add	r3, r2
 8008938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	429a      	cmp	r2, r3
 8008940:	d90e      	bls.n	8008960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3304      	adds	r3, #4
 8008956:	4619      	mov	r1, r3
 8008958:	4610      	mov	r0, r2
 800895a:	f7fe f810 	bl	800697e <vListInsert>
 800895e:	e016      	b.n	800898e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008960:	2300      	movs	r3, #0
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	2300      	movs	r3, #0
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	2100      	movs	r1, #0
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fd60 	bl	8008430 <xTimerGenericCommand>
 8008970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	603b      	str	r3, [r7, #0]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1b1      	bne.n	80088fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <prvSwitchTimerLists+0xc4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a04      	ldr	r2, [pc, #16]	; (80089b4 <prvSwitchTimerLists+0xc0>)
 80089a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089a6:	4a04      	ldr	r2, [pc, #16]	; (80089b8 <prvSwitchTimerLists+0xc4>)
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	6013      	str	r3, [r2, #0]
}
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20001048 	.word	0x20001048
 80089b8:	2000104c 	.word	0x2000104c

080089bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089c2:	f000 f987 	bl	8008cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089c6:	4b15      	ldr	r3, [pc, #84]	; (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d120      	bne.n	8008a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089ce:	4814      	ldr	r0, [pc, #80]	; (8008a20 <prvCheckForValidListAndQueue+0x64>)
 80089d0:	f7fd ff84 	bl	80068dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089d4:	4813      	ldr	r0, [pc, #76]	; (8008a24 <prvCheckForValidListAndQueue+0x68>)
 80089d6:	f7fd ff81 	bl	80068dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <prvCheckForValidListAndQueue+0x6c>)
 80089dc:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <prvCheckForValidListAndQueue+0x64>)
 80089de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089e0:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <prvCheckForValidListAndQueue+0x70>)
 80089e2:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <prvCheckForValidListAndQueue+0x68>)
 80089e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089e6:	2300      	movs	r3, #0
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <prvCheckForValidListAndQueue+0x74>)
 80089ec:	4a11      	ldr	r2, [pc, #68]	; (8008a34 <prvCheckForValidListAndQueue+0x78>)
 80089ee:	2110      	movs	r1, #16
 80089f0:	200a      	movs	r0, #10
 80089f2:	f7fe f88f 	bl	8006b14 <xQueueGenericCreateStatic>
 80089f6:	4603      	mov	r3, r0
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <prvCheckForValidListAndQueue+0x60>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <prvCheckForValidListAndQueue+0x60>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	490b      	ldr	r1, [pc, #44]	; (8008a38 <prvCheckForValidListAndQueue+0x7c>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fca8 	bl	8007360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a10:	f000 f990 	bl	8008d34 <vPortExitCritical>
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20001050 	.word	0x20001050
 8008a20:	20001020 	.word	0x20001020
 8008a24:	20001034 	.word	0x20001034
 8008a28:	20001048 	.word	0x20001048
 8008a2c:	2000104c 	.word	0x2000104c
 8008a30:	200010fc 	.word	0x200010fc
 8008a34:	2000105c 	.word	0x2000105c
 8008a38:	0800bf94 	.word	0x0800bf94

08008a3c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <pvTimerGetTimerID+0x28>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	60fb      	str	r3, [r7, #12]
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008a64:	f000 f936 	bl	8008cd4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008a6e:	f000 f961 	bl	8008d34 <vPortExitCritical>

	return pvReturn;
 8008a72:	693b      	ldr	r3, [r7, #16]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3b04      	subs	r3, #4
 8008a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0201 	bic.w	r2, r3, #1
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aac:	4a0c      	ldr	r2, [pc, #48]	; (8008ae0 <pxPortInitialiseStack+0x64>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b14      	subs	r3, #20
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3b04      	subs	r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f06f 0202 	mvn.w	r2, #2
 8008aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3b20      	subs	r3, #32
 8008ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	08008ae5 	.word	0x08008ae5

08008ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aee:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <prvTaskExitError+0x54>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d00a      	beq.n	8008b0e <prvTaskExitError+0x2a>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <prvTaskExitError+0x28>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60bb      	str	r3, [r7, #8]
}
 8008b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b22:	bf00      	nop
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0fc      	beq.n	8008b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	2000000c 	.word	0x2000000c
 8008b3c:	00000000 	.word	0x00000000

08008b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <pxCurrentTCBConst2>)
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	6808      	ldr	r0, [r1, #0]
 8008b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	f380 8809 	msr	PSP, r0
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8811 	msr	BASEPRI, r0
 8008b5a:	4770      	bx	lr
 8008b5c:	f3af 8000 	nop.w

08008b60 <pxCurrentTCBConst2>:
 8008b60:	20000b20 	.word	0x20000b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b68:	4808      	ldr	r0, [pc, #32]	; (8008b8c <prvPortStartFirstTask+0x24>)
 8008b6a:	6800      	ldr	r0, [r0, #0]
 8008b6c:	6800      	ldr	r0, [r0, #0]
 8008b6e:	f380 8808 	msr	MSP, r0
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8814 	msr	CONTROL, r0
 8008b7a:	b662      	cpsie	i
 8008b7c:	b661      	cpsie	f
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	df00      	svc	0
 8008b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b8a:	bf00      	nop
 8008b8c:	e000ed08 	.word	0xe000ed08

08008b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b96:	4b46      	ldr	r3, [pc, #280]	; (8008cb0 <xPortStartScheduler+0x120>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a46      	ldr	r2, [pc, #280]	; (8008cb4 <xPortStartScheduler+0x124>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10a      	bne.n	8008bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	613b      	str	r3, [r7, #16]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bb6:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <xPortStartScheduler+0x120>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a3f      	ldr	r2, [pc, #252]	; (8008cb8 <xPortStartScheduler+0x128>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10a      	bne.n	8008bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bd6:	4b39      	ldr	r3, [pc, #228]	; (8008cbc <xPortStartScheduler+0x12c>)
 8008bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	22ff      	movs	r2, #255	; 0xff
 8008be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	4b31      	ldr	r3, [pc, #196]	; (8008cc0 <xPortStartScheduler+0x130>)
 8008bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bfe:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c00:	2207      	movs	r2, #7
 8008c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c04:	e009      	b.n	8008c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c06:	4b2f      	ldr	r3, [pc, #188]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	4a2d      	ldr	r2, [pc, #180]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	d0ef      	beq.n	8008c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c26:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f1c3 0307 	rsb	r3, r3, #7
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d00a      	beq.n	8008c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60bb      	str	r3, [r7, #8]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c48:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <xPortStartScheduler+0x134>)
 8008c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c66:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <xPortStartScheduler+0x138>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <xPortStartScheduler+0x138>)
 8008c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <xPortStartScheduler+0x138>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a14      	ldr	r2, [pc, #80]	; (8008cc8 <xPortStartScheduler+0x138>)
 8008c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c7e:	f000 f8dd 	bl	8008e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c82:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <xPortStartScheduler+0x13c>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c88:	f000 f8fc 	bl	8008e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c8c:	4b10      	ldr	r3, [pc, #64]	; (8008cd0 <xPortStartScheduler+0x140>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0f      	ldr	r2, [pc, #60]	; (8008cd0 <xPortStartScheduler+0x140>)
 8008c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c98:	f7ff ff66 	bl	8008b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c9c:	f7fe ff90 	bl	8007bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8008ca0:	f7ff ff20 	bl	8008ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	e000ed00 	.word	0xe000ed00
 8008cb4:	410fc271 	.word	0x410fc271
 8008cb8:	410fc270 	.word	0x410fc270
 8008cbc:	e000e400 	.word	0xe000e400
 8008cc0:	2000114c 	.word	0x2000114c
 8008cc4:	20001150 	.word	0x20001150
 8008cc8:	e000ed20 	.word	0xe000ed20
 8008ccc:	2000000c 	.word	0x2000000c
 8008cd0:	e000ef34 	.word	0xe000ef34

08008cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	607b      	str	r3, [r7, #4]
}
 8008cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cee:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <vPortEnterCritical+0x58>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4a0d      	ldr	r2, [pc, #52]	; (8008d2c <vPortEnterCritical+0x58>)
 8008cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <vPortEnterCritical+0x58>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d10f      	bne.n	8008d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d00:	4b0b      	ldr	r3, [pc, #44]	; (8008d30 <vPortEnterCritical+0x5c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	603b      	str	r3, [r7, #0]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <vPortEnterCritical+0x4a>
	}
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	2000000c 	.word	0x2000000c
 8008d30:	e000ed04 	.word	0xe000ed04

08008d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d3a:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <vPortExitCritical+0x50>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <vPortExitCritical+0x24>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	607b      	str	r3, [r7, #4]
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <vPortExitCritical+0x50>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <vPortExitCritical+0x50>)
 8008d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d62:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <vPortExitCritical+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <vPortExitCritical+0x42>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	f383 8811 	msr	BASEPRI, r3
}
 8008d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	2000000c 	.word	0x2000000c
	...

08008d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d90:	f3ef 8009 	mrs	r0, PSP
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <pxCurrentTCBConst>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	f01e 0f10 	tst.w	lr, #16
 8008da0:	bf08      	it	eq
 8008da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008db4:	f380 8811 	msr	BASEPRI, r0
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f7fe fefe 	bl	8007bc0 <vTaskSwitchContext>
 8008dc4:	f04f 0000 	mov.w	r0, #0
 8008dc8:	f380 8811 	msr	BASEPRI, r0
 8008dcc:	bc09      	pop	{r0, r3}
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	6808      	ldr	r0, [r1, #0]
 8008dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd6:	f01e 0f10 	tst.w	lr, #16
 8008dda:	bf08      	it	eq
 8008ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008de0:	f380 8809 	msr	PSP, r0
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst>:
 8008df0:	20000b20 	.word	0x20000b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e12:	f7fe fe1b 	bl	8007a4c <xTaskIncrementTick>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <xPortSysTickHandler+0x40>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f383 8811 	msr	BASEPRI, r3
}
 8008e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <vPortSetupTimerInterrupt+0x34>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <vPortSetupTimerInterrupt+0x38>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <vPortSetupTimerInterrupt+0x3c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <vPortSetupTimerInterrupt+0x40>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	099b      	lsrs	r3, r3, #6
 8008e58:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <vPortSetupTimerInterrupt+0x44>)
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e5e:	4b04      	ldr	r3, [pc, #16]	; (8008e70 <vPortSetupTimerInterrupt+0x34>)
 8008e60:	2207      	movs	r2, #7
 8008e62:	601a      	str	r2, [r3, #0]
}
 8008e64:	bf00      	nop
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	e000e010 	.word	0xe000e010
 8008e74:	e000e018 	.word	0xe000e018
 8008e78:	20000000 	.word	0x20000000
 8008e7c:	10624dd3 	.word	0x10624dd3
 8008e80:	e000e014 	.word	0xe000e014

08008e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e94 <vPortEnableVFP+0x10>
 8008e88:	6801      	ldr	r1, [r0, #0]
 8008e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e8e:	6001      	str	r1, [r0, #0]
 8008e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e92:	bf00      	nop
 8008e94:	e000ed88 	.word	0xe000ed88

08008e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e9e:	f3ef 8305 	mrs	r3, IPSR
 8008ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d914      	bls.n	8008ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eaa:	4a17      	ldr	r2, [pc, #92]	; (8008f08 <vPortValidateInterruptPriority+0x70>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008eb4:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <vPortValidateInterruptPriority+0x74>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	7afa      	ldrb	r2, [r7, #11]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d20a      	bcs.n	8008ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <vPortValidateInterruptPriority+0x78>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <vPortValidateInterruptPriority+0x7c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d90a      	bls.n	8008efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	603b      	str	r3, [r7, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <vPortValidateInterruptPriority+0x60>
	}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	e000e3f0 	.word	0xe000e3f0
 8008f0c:	2000114c 	.word	0x2000114c
 8008f10:	e000ed0c 	.word	0xe000ed0c
 8008f14:	20001150 	.word	0x20001150

08008f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f24:	f7fe fcd6 	bl	80078d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f28:	4b5b      	ldr	r3, [pc, #364]	; (8009098 <pvPortMalloc+0x180>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f30:	f000 f920 	bl	8009174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f34:	4b59      	ldr	r3, [pc, #356]	; (800909c <pvPortMalloc+0x184>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f040 8093 	bne.w	8009068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01d      	beq.n	8008f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f48:	2208      	movs	r2, #8
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d014      	beq.n	8008f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f023 0307 	bic.w	r3, r3, #7
 8008f60:	3308      	adds	r3, #8
 8008f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <pvPortMalloc+0x6c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	617b      	str	r3, [r7, #20]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d06e      	beq.n	8009068 <pvPortMalloc+0x150>
 8008f8a:	4b45      	ldr	r3, [pc, #276]	; (80090a0 <pvPortMalloc+0x188>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d869      	bhi.n	8009068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f94:	4b43      	ldr	r3, [pc, #268]	; (80090a4 <pvPortMalloc+0x18c>)
 8008f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f98:	4b42      	ldr	r3, [pc, #264]	; (80090a4 <pvPortMalloc+0x18c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f9e:	e004      	b.n	8008faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d903      	bls.n	8008fbc <pvPortMalloc+0xa4>
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f1      	bne.n	8008fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fbc:	4b36      	ldr	r3, [pc, #216]	; (8009098 <pvPortMalloc+0x180>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d050      	beq.n	8009068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	4413      	add	r3, r2
 8008fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d91f      	bls.n	8009028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <pvPortMalloc+0xf8>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	613b      	str	r3, [r7, #16]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009022:	69b8      	ldr	r0, [r7, #24]
 8009024:	f000 f908 	bl	8009238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009028:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <pvPortMalloc+0x188>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <pvPortMalloc+0x188>)
 8009034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <pvPortMalloc+0x188>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <pvPortMalloc+0x190>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d203      	bcs.n	800904a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009042:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <pvPortMalloc+0x188>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <pvPortMalloc+0x190>)
 8009048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <pvPortMalloc+0x184>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	431a      	orrs	r2, r3
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <pvPortMalloc+0x194>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <pvPortMalloc+0x194>)
 8009066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009068:	f7fe fc42 	bl	80078f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <pvPortMalloc+0x174>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60fb      	str	r3, [r7, #12]
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <pvPortMalloc+0x172>
	return pvReturn;
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3728      	adds	r7, #40	; 0x28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20004d5c 	.word	0x20004d5c
 800909c:	20004d70 	.word	0x20004d70
 80090a0:	20004d60 	.word	0x20004d60
 80090a4:	20004d54 	.word	0x20004d54
 80090a8:	20004d64 	.word	0x20004d64
 80090ac:	20004d68 	.word	0x20004d68

080090b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d04d      	beq.n	800915e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090c2:	2308      	movs	r3, #8
 80090c4:	425b      	negs	r3, r3
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	4b24      	ldr	r3, [pc, #144]	; (8009168 <vPortFree+0xb8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <vPortFree+0x44>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <vPortFree+0x62>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	60bb      	str	r3, [r7, #8]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <vPortFree+0xb8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01e      	beq.n	800915e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11a      	bne.n	800915e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <vPortFree+0xb8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	43db      	mvns	r3, r3
 8009132:	401a      	ands	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009138:	f7fe fbcc 	bl	80078d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortFree+0xbc>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4413      	add	r3, r2
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <vPortFree+0xbc>)
 8009148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800914a:	6938      	ldr	r0, [r7, #16]
 800914c:	f000 f874 	bl	8009238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <vPortFree+0xc0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	4a06      	ldr	r2, [pc, #24]	; (8009170 <vPortFree+0xc0>)
 8009158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800915a:	f7fe fbc9 	bl	80078f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20004d70 	.word	0x20004d70
 800916c:	20004d60 	.word	0x20004d60
 8009170:	20004d6c 	.word	0x20004d6c

08009174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800917a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800917e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009180:	4b27      	ldr	r3, [pc, #156]	; (8009220 <prvHeapInit+0xac>)
 8009182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3307      	adds	r3, #7
 8009192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <prvHeapInit+0xac>)
 80091a4:	4413      	add	r3, r2
 80091a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091ac:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <prvHeapInit+0xb0>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <prvHeapInit+0xb0>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091c0:	2208      	movs	r2, #8
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0307 	bic.w	r3, r3, #7
 80091ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4a15      	ldr	r2, [pc, #84]	; (8009228 <prvHeapInit+0xb4>)
 80091d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <prvHeapInit+0xb4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091de:	4b12      	ldr	r3, [pc, #72]	; (8009228 <prvHeapInit+0xb4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvHeapInit+0xb4>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	4a0a      	ldr	r2, [pc, #40]	; (800922c <prvHeapInit+0xb8>)
 8009202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4a09      	ldr	r2, [pc, #36]	; (8009230 <prvHeapInit+0xbc>)
 800920a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <prvHeapInit+0xc0>)
 800920e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009212:	601a      	str	r2, [r3, #0]
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20001154 	.word	0x20001154
 8009224:	20004d54 	.word	0x20004d54
 8009228:	20004d5c 	.word	0x20004d5c
 800922c:	20004d64 	.word	0x20004d64
 8009230:	20004d60 	.word	0x20004d60
 8009234:	20004d70 	.word	0x20004d70

08009238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009240:	4b28      	ldr	r3, [pc, #160]	; (80092e4 <prvInsertBlockIntoFreeList+0xac>)
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <prvInsertBlockIntoFreeList+0x14>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d8f7      	bhi.n	8009246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	4413      	add	r3, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d108      	bne.n	800927a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	441a      	add	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	441a      	add	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d118      	bne.n	80092c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d00d      	beq.n	80092b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	441a      	add	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e008      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <prvInsertBlockIntoFreeList+0xb0>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e003      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d002      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20004d54 	.word	0x20004d54
 80092e8:	20004d5c 	.word	0x20004d5c

080092ec <abs>:
 80092ec:	2800      	cmp	r0, #0
 80092ee:	bfb8      	it	lt
 80092f0:	4240      	neglt	r0, r0
 80092f2:	4770      	bx	lr

080092f4 <__errno>:
 80092f4:	4b01      	ldr	r3, [pc, #4]	; (80092fc <__errno+0x8>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20000010 	.word	0x20000010

08009300 <std>:
 8009300:	2300      	movs	r3, #0
 8009302:	b510      	push	{r4, lr}
 8009304:	4604      	mov	r4, r0
 8009306:	e9c0 3300 	strd	r3, r3, [r0]
 800930a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800930e:	6083      	str	r3, [r0, #8]
 8009310:	8181      	strh	r1, [r0, #12]
 8009312:	6643      	str	r3, [r0, #100]	; 0x64
 8009314:	81c2      	strh	r2, [r0, #14]
 8009316:	6183      	str	r3, [r0, #24]
 8009318:	4619      	mov	r1, r3
 800931a:	2208      	movs	r2, #8
 800931c:	305c      	adds	r0, #92	; 0x5c
 800931e:	f000 f91a 	bl	8009556 <memset>
 8009322:	4b05      	ldr	r3, [pc, #20]	; (8009338 <std+0x38>)
 8009324:	6263      	str	r3, [r4, #36]	; 0x24
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <std+0x3c>)
 8009328:	62a3      	str	r3, [r4, #40]	; 0x28
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <std+0x40>)
 800932c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <std+0x44>)
 8009330:	6224      	str	r4, [r4, #32]
 8009332:	6323      	str	r3, [r4, #48]	; 0x30
 8009334:	bd10      	pop	{r4, pc}
 8009336:	bf00      	nop
 8009338:	0800a059 	.word	0x0800a059
 800933c:	0800a07b 	.word	0x0800a07b
 8009340:	0800a0b3 	.word	0x0800a0b3
 8009344:	0800a0d7 	.word	0x0800a0d7

08009348 <_cleanup_r>:
 8009348:	4901      	ldr	r1, [pc, #4]	; (8009350 <_cleanup_r+0x8>)
 800934a:	f000 b8af 	b.w	80094ac <_fwalk_reent>
 800934e:	bf00      	nop
 8009350:	0800af29 	.word	0x0800af29

08009354 <__sfmoreglue>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	2268      	movs	r2, #104	; 0x68
 8009358:	1e4d      	subs	r5, r1, #1
 800935a:	4355      	muls	r5, r2
 800935c:	460e      	mov	r6, r1
 800935e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009362:	f000 f921 	bl	80095a8 <_malloc_r>
 8009366:	4604      	mov	r4, r0
 8009368:	b140      	cbz	r0, 800937c <__sfmoreglue+0x28>
 800936a:	2100      	movs	r1, #0
 800936c:	e9c0 1600 	strd	r1, r6, [r0]
 8009370:	300c      	adds	r0, #12
 8009372:	60a0      	str	r0, [r4, #8]
 8009374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009378:	f000 f8ed 	bl	8009556 <memset>
 800937c:	4620      	mov	r0, r4
 800937e:	bd70      	pop	{r4, r5, r6, pc}

08009380 <__sfp_lock_acquire>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__sfp_lock_acquire+0x8>)
 8009382:	f000 b8d8 	b.w	8009536 <__retarget_lock_acquire_recursive>
 8009386:	bf00      	nop
 8009388:	20004d75 	.word	0x20004d75

0800938c <__sfp_lock_release>:
 800938c:	4801      	ldr	r0, [pc, #4]	; (8009394 <__sfp_lock_release+0x8>)
 800938e:	f000 b8d3 	b.w	8009538 <__retarget_lock_release_recursive>
 8009392:	bf00      	nop
 8009394:	20004d75 	.word	0x20004d75

08009398 <__sinit_lock_acquire>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__sinit_lock_acquire+0x8>)
 800939a:	f000 b8cc 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20004d76 	.word	0x20004d76

080093a4 <__sinit_lock_release>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__sinit_lock_release+0x8>)
 80093a6:	f000 b8c7 	b.w	8009538 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20004d76 	.word	0x20004d76

080093b0 <__sinit>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4604      	mov	r4, r0
 80093b4:	f7ff fff0 	bl	8009398 <__sinit_lock_acquire>
 80093b8:	69a3      	ldr	r3, [r4, #24]
 80093ba:	b11b      	cbz	r3, 80093c4 <__sinit+0x14>
 80093bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c0:	f7ff bff0 	b.w	80093a4 <__sinit_lock_release>
 80093c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093c8:	6523      	str	r3, [r4, #80]	; 0x50
 80093ca:	4b13      	ldr	r3, [pc, #76]	; (8009418 <__sinit+0x68>)
 80093cc:	4a13      	ldr	r2, [pc, #76]	; (800941c <__sinit+0x6c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	bf04      	itt	eq
 80093d6:	2301      	moveq	r3, #1
 80093d8:	61a3      	streq	r3, [r4, #24]
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f820 	bl	8009420 <__sfp>
 80093e0:	6060      	str	r0, [r4, #4]
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 f81c 	bl	8009420 <__sfp>
 80093e8:	60a0      	str	r0, [r4, #8]
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f818 	bl	8009420 <__sfp>
 80093f0:	2200      	movs	r2, #0
 80093f2:	60e0      	str	r0, [r4, #12]
 80093f4:	2104      	movs	r1, #4
 80093f6:	6860      	ldr	r0, [r4, #4]
 80093f8:	f7ff ff82 	bl	8009300 <std>
 80093fc:	68a0      	ldr	r0, [r4, #8]
 80093fe:	2201      	movs	r2, #1
 8009400:	2109      	movs	r1, #9
 8009402:	f7ff ff7d 	bl	8009300 <std>
 8009406:	68e0      	ldr	r0, [r4, #12]
 8009408:	2202      	movs	r2, #2
 800940a:	2112      	movs	r1, #18
 800940c:	f7ff ff78 	bl	8009300 <std>
 8009410:	2301      	movs	r3, #1
 8009412:	61a3      	str	r3, [r4, #24]
 8009414:	e7d2      	b.n	80093bc <__sinit+0xc>
 8009416:	bf00      	nop
 8009418:	0800c0b8 	.word	0x0800c0b8
 800941c:	08009349 	.word	0x08009349

08009420 <__sfp>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	4607      	mov	r7, r0
 8009424:	f7ff ffac 	bl	8009380 <__sfp_lock_acquire>
 8009428:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <__sfp+0x84>)
 800942a:	681e      	ldr	r6, [r3, #0]
 800942c:	69b3      	ldr	r3, [r6, #24]
 800942e:	b913      	cbnz	r3, 8009436 <__sfp+0x16>
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff ffbd 	bl	80093b0 <__sinit>
 8009436:	3648      	adds	r6, #72	; 0x48
 8009438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800943c:	3b01      	subs	r3, #1
 800943e:	d503      	bpl.n	8009448 <__sfp+0x28>
 8009440:	6833      	ldr	r3, [r6, #0]
 8009442:	b30b      	cbz	r3, 8009488 <__sfp+0x68>
 8009444:	6836      	ldr	r6, [r6, #0]
 8009446:	e7f7      	b.n	8009438 <__sfp+0x18>
 8009448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800944c:	b9d5      	cbnz	r5, 8009484 <__sfp+0x64>
 800944e:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <__sfp+0x88>)
 8009450:	60e3      	str	r3, [r4, #12]
 8009452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009456:	6665      	str	r5, [r4, #100]	; 0x64
 8009458:	f000 f86c 	bl	8009534 <__retarget_lock_init_recursive>
 800945c:	f7ff ff96 	bl	800938c <__sfp_lock_release>
 8009460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009468:	6025      	str	r5, [r4, #0]
 800946a:	61a5      	str	r5, [r4, #24]
 800946c:	2208      	movs	r2, #8
 800946e:	4629      	mov	r1, r5
 8009470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009474:	f000 f86f 	bl	8009556 <memset>
 8009478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800947c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009480:	4620      	mov	r0, r4
 8009482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009484:	3468      	adds	r4, #104	; 0x68
 8009486:	e7d9      	b.n	800943c <__sfp+0x1c>
 8009488:	2104      	movs	r1, #4
 800948a:	4638      	mov	r0, r7
 800948c:	f7ff ff62 	bl	8009354 <__sfmoreglue>
 8009490:	4604      	mov	r4, r0
 8009492:	6030      	str	r0, [r6, #0]
 8009494:	2800      	cmp	r0, #0
 8009496:	d1d5      	bne.n	8009444 <__sfp+0x24>
 8009498:	f7ff ff78 	bl	800938c <__sfp_lock_release>
 800949c:	230c      	movs	r3, #12
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	e7ee      	b.n	8009480 <__sfp+0x60>
 80094a2:	bf00      	nop
 80094a4:	0800c0b8 	.word	0x0800c0b8
 80094a8:	ffff0001 	.word	0xffff0001

080094ac <_fwalk_reent>:
 80094ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b0:	4606      	mov	r6, r0
 80094b2:	4688      	mov	r8, r1
 80094b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094b8:	2700      	movs	r7, #0
 80094ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094be:	f1b9 0901 	subs.w	r9, r9, #1
 80094c2:	d505      	bpl.n	80094d0 <_fwalk_reent+0x24>
 80094c4:	6824      	ldr	r4, [r4, #0]
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	d1f7      	bne.n	80094ba <_fwalk_reent+0xe>
 80094ca:	4638      	mov	r0, r7
 80094cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d907      	bls.n	80094e6 <_fwalk_reent+0x3a>
 80094d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094da:	3301      	adds	r3, #1
 80094dc:	d003      	beq.n	80094e6 <_fwalk_reent+0x3a>
 80094de:	4629      	mov	r1, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	47c0      	blx	r8
 80094e4:	4307      	orrs	r7, r0
 80094e6:	3568      	adds	r5, #104	; 0x68
 80094e8:	e7e9      	b.n	80094be <_fwalk_reent+0x12>
	...

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4d0d      	ldr	r5, [pc, #52]	; (8009524 <__libc_init_array+0x38>)
 80094f0:	4c0d      	ldr	r4, [pc, #52]	; (8009528 <__libc_init_array+0x3c>)
 80094f2:	1b64      	subs	r4, r4, r5
 80094f4:	10a4      	asrs	r4, r4, #2
 80094f6:	2600      	movs	r6, #0
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	4d0b      	ldr	r5, [pc, #44]	; (800952c <__libc_init_array+0x40>)
 80094fe:	4c0c      	ldr	r4, [pc, #48]	; (8009530 <__libc_init_array+0x44>)
 8009500:	f002 fcac 	bl	800be5c <_init>
 8009504:	1b64      	subs	r4, r4, r5
 8009506:	10a4      	asrs	r4, r4, #2
 8009508:	2600      	movs	r6, #0
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	f855 3b04 	ldr.w	r3, [r5], #4
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	f855 3b04 	ldr.w	r3, [r5], #4
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	0800c43c 	.word	0x0800c43c
 8009528:	0800c43c 	.word	0x0800c43c
 800952c:	0800c43c 	.word	0x0800c43c
 8009530:	0800c440 	.word	0x0800c440

08009534 <__retarget_lock_init_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_acquire_recursive>:
 8009536:	4770      	bx	lr

08009538 <__retarget_lock_release_recursive>:
 8009538:	4770      	bx	lr

0800953a <memcpy>:
 800953a:	440a      	add	r2, r1
 800953c:	4291      	cmp	r1, r2
 800953e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009542:	d100      	bne.n	8009546 <memcpy+0xc>
 8009544:	4770      	bx	lr
 8009546:	b510      	push	{r4, lr}
 8009548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009550:	4291      	cmp	r1, r2
 8009552:	d1f9      	bne.n	8009548 <memcpy+0xe>
 8009554:	bd10      	pop	{r4, pc}

08009556 <memset>:
 8009556:	4402      	add	r2, r0
 8009558:	4603      	mov	r3, r0
 800955a:	4293      	cmp	r3, r2
 800955c:	d100      	bne.n	8009560 <memset+0xa>
 800955e:	4770      	bx	lr
 8009560:	f803 1b01 	strb.w	r1, [r3], #1
 8009564:	e7f9      	b.n	800955a <memset+0x4>
	...

08009568 <sbrk_aligned>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	4e0e      	ldr	r6, [pc, #56]	; (80095a4 <sbrk_aligned+0x3c>)
 800956c:	460c      	mov	r4, r1
 800956e:	6831      	ldr	r1, [r6, #0]
 8009570:	4605      	mov	r5, r0
 8009572:	b911      	cbnz	r1, 800957a <sbrk_aligned+0x12>
 8009574:	f000 fd60 	bl	800a038 <_sbrk_r>
 8009578:	6030      	str	r0, [r6, #0]
 800957a:	4621      	mov	r1, r4
 800957c:	4628      	mov	r0, r5
 800957e:	f000 fd5b 	bl	800a038 <_sbrk_r>
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d00a      	beq.n	800959c <sbrk_aligned+0x34>
 8009586:	1cc4      	adds	r4, r0, #3
 8009588:	f024 0403 	bic.w	r4, r4, #3
 800958c:	42a0      	cmp	r0, r4
 800958e:	d007      	beq.n	80095a0 <sbrk_aligned+0x38>
 8009590:	1a21      	subs	r1, r4, r0
 8009592:	4628      	mov	r0, r5
 8009594:	f000 fd50 	bl	800a038 <_sbrk_r>
 8009598:	3001      	adds	r0, #1
 800959a:	d101      	bne.n	80095a0 <sbrk_aligned+0x38>
 800959c:	f04f 34ff 	mov.w	r4, #4294967295
 80095a0:	4620      	mov	r0, r4
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	20004d7c 	.word	0x20004d7c

080095a8 <_malloc_r>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	1ccd      	adds	r5, r1, #3
 80095ae:	f025 0503 	bic.w	r5, r5, #3
 80095b2:	3508      	adds	r5, #8
 80095b4:	2d0c      	cmp	r5, #12
 80095b6:	bf38      	it	cc
 80095b8:	250c      	movcc	r5, #12
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	4607      	mov	r7, r0
 80095be:	db01      	blt.n	80095c4 <_malloc_r+0x1c>
 80095c0:	42a9      	cmp	r1, r5
 80095c2:	d905      	bls.n	80095d0 <_malloc_r+0x28>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	2600      	movs	r6, #0
 80095ca:	4630      	mov	r0, r6
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	4e2e      	ldr	r6, [pc, #184]	; (800968c <_malloc_r+0xe4>)
 80095d2:	f001 fd03 	bl	800afdc <__malloc_lock>
 80095d6:	6833      	ldr	r3, [r6, #0]
 80095d8:	461c      	mov	r4, r3
 80095da:	bb34      	cbnz	r4, 800962a <_malloc_r+0x82>
 80095dc:	4629      	mov	r1, r5
 80095de:	4638      	mov	r0, r7
 80095e0:	f7ff ffc2 	bl	8009568 <sbrk_aligned>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	4604      	mov	r4, r0
 80095e8:	d14d      	bne.n	8009686 <_malloc_r+0xde>
 80095ea:	6834      	ldr	r4, [r6, #0]
 80095ec:	4626      	mov	r6, r4
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	d140      	bne.n	8009674 <_malloc_r+0xcc>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	4631      	mov	r1, r6
 80095f6:	4638      	mov	r0, r7
 80095f8:	eb04 0803 	add.w	r8, r4, r3
 80095fc:	f000 fd1c 	bl	800a038 <_sbrk_r>
 8009600:	4580      	cmp	r8, r0
 8009602:	d13a      	bne.n	800967a <_malloc_r+0xd2>
 8009604:	6821      	ldr	r1, [r4, #0]
 8009606:	3503      	adds	r5, #3
 8009608:	1a6d      	subs	r5, r5, r1
 800960a:	f025 0503 	bic.w	r5, r5, #3
 800960e:	3508      	adds	r5, #8
 8009610:	2d0c      	cmp	r5, #12
 8009612:	bf38      	it	cc
 8009614:	250c      	movcc	r5, #12
 8009616:	4629      	mov	r1, r5
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff ffa5 	bl	8009568 <sbrk_aligned>
 800961e:	3001      	adds	r0, #1
 8009620:	d02b      	beq.n	800967a <_malloc_r+0xd2>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	442b      	add	r3, r5
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	e00e      	b.n	8009648 <_malloc_r+0xa0>
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	1b52      	subs	r2, r2, r5
 800962e:	d41e      	bmi.n	800966e <_malloc_r+0xc6>
 8009630:	2a0b      	cmp	r2, #11
 8009632:	d916      	bls.n	8009662 <_malloc_r+0xba>
 8009634:	1961      	adds	r1, r4, r5
 8009636:	42a3      	cmp	r3, r4
 8009638:	6025      	str	r5, [r4, #0]
 800963a:	bf18      	it	ne
 800963c:	6059      	strne	r1, [r3, #4]
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	bf08      	it	eq
 8009642:	6031      	streq	r1, [r6, #0]
 8009644:	5162      	str	r2, [r4, r5]
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	4638      	mov	r0, r7
 800964a:	f104 060b 	add.w	r6, r4, #11
 800964e:	f001 fccb 	bl	800afe8 <__malloc_unlock>
 8009652:	f026 0607 	bic.w	r6, r6, #7
 8009656:	1d23      	adds	r3, r4, #4
 8009658:	1af2      	subs	r2, r6, r3
 800965a:	d0b6      	beq.n	80095ca <_malloc_r+0x22>
 800965c:	1b9b      	subs	r3, r3, r6
 800965e:	50a3      	str	r3, [r4, r2]
 8009660:	e7b3      	b.n	80095ca <_malloc_r+0x22>
 8009662:	6862      	ldr	r2, [r4, #4]
 8009664:	42a3      	cmp	r3, r4
 8009666:	bf0c      	ite	eq
 8009668:	6032      	streq	r2, [r6, #0]
 800966a:	605a      	strne	r2, [r3, #4]
 800966c:	e7ec      	b.n	8009648 <_malloc_r+0xa0>
 800966e:	4623      	mov	r3, r4
 8009670:	6864      	ldr	r4, [r4, #4]
 8009672:	e7b2      	b.n	80095da <_malloc_r+0x32>
 8009674:	4634      	mov	r4, r6
 8009676:	6876      	ldr	r6, [r6, #4]
 8009678:	e7b9      	b.n	80095ee <_malloc_r+0x46>
 800967a:	230c      	movs	r3, #12
 800967c:	603b      	str	r3, [r7, #0]
 800967e:	4638      	mov	r0, r7
 8009680:	f001 fcb2 	bl	800afe8 <__malloc_unlock>
 8009684:	e7a1      	b.n	80095ca <_malloc_r+0x22>
 8009686:	6025      	str	r5, [r4, #0]
 8009688:	e7de      	b.n	8009648 <_malloc_r+0xa0>
 800968a:	bf00      	nop
 800968c:	20004d78 	.word	0x20004d78

08009690 <__cvt>:
 8009690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	ec55 4b10 	vmov	r4, r5, d0
 8009698:	2d00      	cmp	r5, #0
 800969a:	460e      	mov	r6, r1
 800969c:	4619      	mov	r1, r3
 800969e:	462b      	mov	r3, r5
 80096a0:	bfbb      	ittet	lt
 80096a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096a6:	461d      	movlt	r5, r3
 80096a8:	2300      	movge	r3, #0
 80096aa:	232d      	movlt	r3, #45	; 0x2d
 80096ac:	700b      	strb	r3, [r1, #0]
 80096ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096b4:	4691      	mov	r9, r2
 80096b6:	f023 0820 	bic.w	r8, r3, #32
 80096ba:	bfbc      	itt	lt
 80096bc:	4622      	movlt	r2, r4
 80096be:	4614      	movlt	r4, r2
 80096c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096c4:	d005      	beq.n	80096d2 <__cvt+0x42>
 80096c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096ca:	d100      	bne.n	80096ce <__cvt+0x3e>
 80096cc:	3601      	adds	r6, #1
 80096ce:	2102      	movs	r1, #2
 80096d0:	e000      	b.n	80096d4 <__cvt+0x44>
 80096d2:	2103      	movs	r1, #3
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	ab02      	add	r3, sp, #8
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	ec45 4b10 	vmov	d0, r4, r5
 80096e0:	4653      	mov	r3, sl
 80096e2:	4632      	mov	r2, r6
 80096e4:	f000 fdac 	bl	800a240 <_dtoa_r>
 80096e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096ec:	4607      	mov	r7, r0
 80096ee:	d102      	bne.n	80096f6 <__cvt+0x66>
 80096f0:	f019 0f01 	tst.w	r9, #1
 80096f4:	d022      	beq.n	800973c <__cvt+0xac>
 80096f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096fa:	eb07 0906 	add.w	r9, r7, r6
 80096fe:	d110      	bne.n	8009722 <__cvt+0x92>
 8009700:	783b      	ldrb	r3, [r7, #0]
 8009702:	2b30      	cmp	r3, #48	; 0x30
 8009704:	d10a      	bne.n	800971c <__cvt+0x8c>
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f7 f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009712:	b918      	cbnz	r0, 800971c <__cvt+0x8c>
 8009714:	f1c6 0601 	rsb	r6, r6, #1
 8009718:	f8ca 6000 	str.w	r6, [sl]
 800971c:	f8da 3000 	ldr.w	r3, [sl]
 8009720:	4499      	add	r9, r3
 8009722:	2200      	movs	r2, #0
 8009724:	2300      	movs	r3, #0
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f7 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800972e:	b108      	cbz	r0, 8009734 <__cvt+0xa4>
 8009730:	f8cd 900c 	str.w	r9, [sp, #12]
 8009734:	2230      	movs	r2, #48	; 0x30
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	454b      	cmp	r3, r9
 800973a:	d307      	bcc.n	800974c <__cvt+0xbc>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009740:	1bdb      	subs	r3, r3, r7
 8009742:	4638      	mov	r0, r7
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	b004      	add	sp, #16
 8009748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974c:	1c59      	adds	r1, r3, #1
 800974e:	9103      	str	r1, [sp, #12]
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	e7f0      	b.n	8009736 <__cvt+0xa6>

08009754 <__exponent>:
 8009754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009756:	4603      	mov	r3, r0
 8009758:	2900      	cmp	r1, #0
 800975a:	bfb8      	it	lt
 800975c:	4249      	neglt	r1, r1
 800975e:	f803 2b02 	strb.w	r2, [r3], #2
 8009762:	bfb4      	ite	lt
 8009764:	222d      	movlt	r2, #45	; 0x2d
 8009766:	222b      	movge	r2, #43	; 0x2b
 8009768:	2909      	cmp	r1, #9
 800976a:	7042      	strb	r2, [r0, #1]
 800976c:	dd2a      	ble.n	80097c4 <__exponent+0x70>
 800976e:	f10d 0407 	add.w	r4, sp, #7
 8009772:	46a4      	mov	ip, r4
 8009774:	270a      	movs	r7, #10
 8009776:	46a6      	mov	lr, r4
 8009778:	460a      	mov	r2, r1
 800977a:	fb91 f6f7 	sdiv	r6, r1, r7
 800977e:	fb07 1516 	mls	r5, r7, r6, r1
 8009782:	3530      	adds	r5, #48	; 0x30
 8009784:	2a63      	cmp	r2, #99	; 0x63
 8009786:	f104 34ff 	add.w	r4, r4, #4294967295
 800978a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800978e:	4631      	mov	r1, r6
 8009790:	dcf1      	bgt.n	8009776 <__exponent+0x22>
 8009792:	3130      	adds	r1, #48	; 0x30
 8009794:	f1ae 0502 	sub.w	r5, lr, #2
 8009798:	f804 1c01 	strb.w	r1, [r4, #-1]
 800979c:	1c44      	adds	r4, r0, #1
 800979e:	4629      	mov	r1, r5
 80097a0:	4561      	cmp	r1, ip
 80097a2:	d30a      	bcc.n	80097ba <__exponent+0x66>
 80097a4:	f10d 0209 	add.w	r2, sp, #9
 80097a8:	eba2 020e 	sub.w	r2, r2, lr
 80097ac:	4565      	cmp	r5, ip
 80097ae:	bf88      	it	hi
 80097b0:	2200      	movhi	r2, #0
 80097b2:	4413      	add	r3, r2
 80097b4:	1a18      	subs	r0, r3, r0
 80097b6:	b003      	add	sp, #12
 80097b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097c2:	e7ed      	b.n	80097a0 <__exponent+0x4c>
 80097c4:	2330      	movs	r3, #48	; 0x30
 80097c6:	3130      	adds	r1, #48	; 0x30
 80097c8:	7083      	strb	r3, [r0, #2]
 80097ca:	70c1      	strb	r1, [r0, #3]
 80097cc:	1d03      	adds	r3, r0, #4
 80097ce:	e7f1      	b.n	80097b4 <__exponent+0x60>

080097d0 <_printf_float>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	ed2d 8b02 	vpush	{d8}
 80097d8:	b08d      	sub	sp, #52	; 0x34
 80097da:	460c      	mov	r4, r1
 80097dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097e0:	4616      	mov	r6, r2
 80097e2:	461f      	mov	r7, r3
 80097e4:	4605      	mov	r5, r0
 80097e6:	f001 fbdb 	bl	800afa0 <_localeconv_r>
 80097ea:	f8d0 a000 	ldr.w	sl, [r0]
 80097ee:	4650      	mov	r0, sl
 80097f0:	f7f6 fcf6 	bl	80001e0 <strlen>
 80097f4:	2300      	movs	r3, #0
 80097f6:	930a      	str	r3, [sp, #40]	; 0x28
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009800:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009804:	3307      	adds	r3, #7
 8009806:	f023 0307 	bic.w	r3, r3, #7
 800980a:	f103 0208 	add.w	r2, r3, #8
 800980e:	f8c8 2000 	str.w	r2, [r8]
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800981a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800981e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	f8cd 8018 	str.w	r8, [sp, #24]
 8009828:	ee08 0a10 	vmov	s16, r0
 800982c:	4b9f      	ldr	r3, [pc, #636]	; (8009aac <_printf_float+0x2dc>)
 800982e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009832:	f04f 32ff 	mov.w	r2, #4294967295
 8009836:	f7f7 f981 	bl	8000b3c <__aeabi_dcmpun>
 800983a:	bb88      	cbnz	r0, 80098a0 <_printf_float+0xd0>
 800983c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009840:	4b9a      	ldr	r3, [pc, #616]	; (8009aac <_printf_float+0x2dc>)
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	f7f7 f95b 	bl	8000b00 <__aeabi_dcmple>
 800984a:	bb48      	cbnz	r0, 80098a0 <_printf_float+0xd0>
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4640      	mov	r0, r8
 8009852:	4649      	mov	r1, r9
 8009854:	f7f7 f94a 	bl	8000aec <__aeabi_dcmplt>
 8009858:	b110      	cbz	r0, 8009860 <_printf_float+0x90>
 800985a:	232d      	movs	r3, #45	; 0x2d
 800985c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009860:	4b93      	ldr	r3, [pc, #588]	; (8009ab0 <_printf_float+0x2e0>)
 8009862:	4894      	ldr	r0, [pc, #592]	; (8009ab4 <_printf_float+0x2e4>)
 8009864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009868:	bf94      	ite	ls
 800986a:	4698      	movls	r8, r3
 800986c:	4680      	movhi	r8, r0
 800986e:	2303      	movs	r3, #3
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	9b05      	ldr	r3, [sp, #20]
 8009874:	f023 0204 	bic.w	r2, r3, #4
 8009878:	6022      	str	r2, [r4, #0]
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	9700      	str	r7, [sp, #0]
 8009880:	4633      	mov	r3, r6
 8009882:	aa0b      	add	r2, sp, #44	; 0x2c
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f9d8 	bl	8009c3c <_printf_common>
 800988c:	3001      	adds	r0, #1
 800988e:	f040 8090 	bne.w	80099b2 <_printf_float+0x1e2>
 8009892:	f04f 30ff 	mov.w	r0, #4294967295
 8009896:	b00d      	add	sp, #52	; 0x34
 8009898:	ecbd 8b02 	vpop	{d8}
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	4642      	mov	r2, r8
 80098a2:	464b      	mov	r3, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	f7f7 f948 	bl	8000b3c <__aeabi_dcmpun>
 80098ac:	b140      	cbz	r0, 80098c0 <_printf_float+0xf0>
 80098ae:	464b      	mov	r3, r9
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bfbc      	itt	lt
 80098b4:	232d      	movlt	r3, #45	; 0x2d
 80098b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098ba:	487f      	ldr	r0, [pc, #508]	; (8009ab8 <_printf_float+0x2e8>)
 80098bc:	4b7f      	ldr	r3, [pc, #508]	; (8009abc <_printf_float+0x2ec>)
 80098be:	e7d1      	b.n	8009864 <_printf_float+0x94>
 80098c0:	6863      	ldr	r3, [r4, #4]
 80098c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098c6:	9206      	str	r2, [sp, #24]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	d13f      	bne.n	800994c <_printf_float+0x17c>
 80098cc:	2306      	movs	r3, #6
 80098ce:	6063      	str	r3, [r4, #4]
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	6861      	ldr	r1, [r4, #4]
 80098d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098d8:	2300      	movs	r3, #0
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	ab0a      	add	r3, sp, #40	; 0x28
 80098de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098e2:	ab09      	add	r3, sp, #36	; 0x24
 80098e4:	ec49 8b10 	vmov	d0, r8, r9
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098f0:	4628      	mov	r0, r5
 80098f2:	f7ff fecd 	bl	8009690 <__cvt>
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098fa:	2b47      	cmp	r3, #71	; 0x47
 80098fc:	4680      	mov	r8, r0
 80098fe:	d108      	bne.n	8009912 <_printf_float+0x142>
 8009900:	1cc8      	adds	r0, r1, #3
 8009902:	db02      	blt.n	800990a <_printf_float+0x13a>
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	4299      	cmp	r1, r3
 8009908:	dd41      	ble.n	800998e <_printf_float+0x1be>
 800990a:	f1ab 0b02 	sub.w	fp, fp, #2
 800990e:	fa5f fb8b 	uxtb.w	fp, fp
 8009912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009916:	d820      	bhi.n	800995a <_printf_float+0x18a>
 8009918:	3901      	subs	r1, #1
 800991a:	465a      	mov	r2, fp
 800991c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009920:	9109      	str	r1, [sp, #36]	; 0x24
 8009922:	f7ff ff17 	bl	8009754 <__exponent>
 8009926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009928:	1813      	adds	r3, r2, r0
 800992a:	2a01      	cmp	r2, #1
 800992c:	4681      	mov	r9, r0
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	dc02      	bgt.n	8009938 <_printf_float+0x168>
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	07d2      	lsls	r2, r2, #31
 8009936:	d501      	bpl.n	800993c <_printf_float+0x16c>
 8009938:	3301      	adds	r3, #1
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009940:	2b00      	cmp	r3, #0
 8009942:	d09c      	beq.n	800987e <_printf_float+0xae>
 8009944:	232d      	movs	r3, #45	; 0x2d
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	e798      	b.n	800987e <_printf_float+0xae>
 800994c:	9a06      	ldr	r2, [sp, #24]
 800994e:	2a47      	cmp	r2, #71	; 0x47
 8009950:	d1be      	bne.n	80098d0 <_printf_float+0x100>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1bc      	bne.n	80098d0 <_printf_float+0x100>
 8009956:	2301      	movs	r3, #1
 8009958:	e7b9      	b.n	80098ce <_printf_float+0xfe>
 800995a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800995e:	d118      	bne.n	8009992 <_printf_float+0x1c2>
 8009960:	2900      	cmp	r1, #0
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	dd0b      	ble.n	800997e <_printf_float+0x1ae>
 8009966:	6121      	str	r1, [r4, #16]
 8009968:	b913      	cbnz	r3, 8009970 <_printf_float+0x1a0>
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	07d0      	lsls	r0, r2, #31
 800996e:	d502      	bpl.n	8009976 <_printf_float+0x1a6>
 8009970:	3301      	adds	r3, #1
 8009972:	440b      	add	r3, r1
 8009974:	6123      	str	r3, [r4, #16]
 8009976:	65a1      	str	r1, [r4, #88]	; 0x58
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	e7de      	b.n	800993c <_printf_float+0x16c>
 800997e:	b913      	cbnz	r3, 8009986 <_printf_float+0x1b6>
 8009980:	6822      	ldr	r2, [r4, #0]
 8009982:	07d2      	lsls	r2, r2, #31
 8009984:	d501      	bpl.n	800998a <_printf_float+0x1ba>
 8009986:	3302      	adds	r3, #2
 8009988:	e7f4      	b.n	8009974 <_printf_float+0x1a4>
 800998a:	2301      	movs	r3, #1
 800998c:	e7f2      	b.n	8009974 <_printf_float+0x1a4>
 800998e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009994:	4299      	cmp	r1, r3
 8009996:	db05      	blt.n	80099a4 <_printf_float+0x1d4>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	6121      	str	r1, [r4, #16]
 800999c:	07d8      	lsls	r0, r3, #31
 800999e:	d5ea      	bpl.n	8009976 <_printf_float+0x1a6>
 80099a0:	1c4b      	adds	r3, r1, #1
 80099a2:	e7e7      	b.n	8009974 <_printf_float+0x1a4>
 80099a4:	2900      	cmp	r1, #0
 80099a6:	bfd4      	ite	le
 80099a8:	f1c1 0202 	rsble	r2, r1, #2
 80099ac:	2201      	movgt	r2, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	e7e0      	b.n	8009974 <_printf_float+0x1a4>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	055a      	lsls	r2, r3, #21
 80099b6:	d407      	bmi.n	80099c8 <_printf_float+0x1f8>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	4642      	mov	r2, r8
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d12c      	bne.n	8009a20 <_printf_float+0x250>
 80099c6:	e764      	b.n	8009892 <_printf_float+0xc2>
 80099c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099cc:	f240 80e0 	bls.w	8009b90 <_printf_float+0x3c0>
 80099d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099d4:	2200      	movs	r2, #0
 80099d6:	2300      	movs	r3, #0
 80099d8:	f7f7 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d034      	beq.n	8009a4a <_printf_float+0x27a>
 80099e0:	4a37      	ldr	r2, [pc, #220]	; (8009ac0 <_printf_float+0x2f0>)
 80099e2:	2301      	movs	r3, #1
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f af51 	beq.w	8009892 <_printf_float+0xc2>
 80099f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f4:	429a      	cmp	r2, r3
 80099f6:	db02      	blt.n	80099fe <_printf_float+0x22e>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	07d8      	lsls	r0, r3, #31
 80099fc:	d510      	bpl.n	8009a20 <_printf_float+0x250>
 80099fe:	ee18 3a10 	vmov	r3, s16
 8009a02:	4652      	mov	r2, sl
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f af41 	beq.w	8009892 <_printf_float+0xc2>
 8009a10:	f04f 0800 	mov.w	r8, #0
 8009a14:	f104 091a 	add.w	r9, r4, #26
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	dc09      	bgt.n	8009a34 <_printf_float+0x264>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	079b      	lsls	r3, r3, #30
 8009a24:	f100 8105 	bmi.w	8009c32 <_printf_float+0x462>
 8009a28:	68e0      	ldr	r0, [r4, #12]
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	4298      	cmp	r0, r3
 8009a2e:	bfb8      	it	lt
 8009a30:	4618      	movlt	r0, r3
 8009a32:	e730      	b.n	8009896 <_printf_float+0xc6>
 8009a34:	2301      	movs	r3, #1
 8009a36:	464a      	mov	r2, r9
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af27 	beq.w	8009892 <_printf_float+0xc2>
 8009a44:	f108 0801 	add.w	r8, r8, #1
 8009a48:	e7e6      	b.n	8009a18 <_printf_float+0x248>
 8009a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc39      	bgt.n	8009ac4 <_printf_float+0x2f4>
 8009a50:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <_printf_float+0x2f0>)
 8009a52:	2301      	movs	r3, #1
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f af19 	beq.w	8009892 <_printf_float+0xc2>
 8009a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d102      	bne.n	8009a6e <_printf_float+0x29e>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07d9      	lsls	r1, r3, #31
 8009a6c:	d5d8      	bpl.n	8009a20 <_printf_float+0x250>
 8009a6e:	ee18 3a10 	vmov	r3, s16
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f af09 	beq.w	8009892 <_printf_float+0xc2>
 8009a80:	f04f 0900 	mov.w	r9, #0
 8009a84:	f104 0a1a 	add.w	sl, r4, #26
 8009a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8a:	425b      	negs	r3, r3
 8009a8c:	454b      	cmp	r3, r9
 8009a8e:	dc01      	bgt.n	8009a94 <_printf_float+0x2c4>
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	e792      	b.n	80099ba <_printf_float+0x1ea>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4652      	mov	r2, sl
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f aef7 	beq.w	8009892 <_printf_float+0xc2>
 8009aa4:	f109 0901 	add.w	r9, r9, #1
 8009aa8:	e7ee      	b.n	8009a88 <_printf_float+0x2b8>
 8009aaa:	bf00      	nop
 8009aac:	7fefffff 	.word	0x7fefffff
 8009ab0:	0800c0bc 	.word	0x0800c0bc
 8009ab4:	0800c0c0 	.word	0x0800c0c0
 8009ab8:	0800c0c8 	.word	0x0800c0c8
 8009abc:	0800c0c4 	.word	0x0800c0c4
 8009ac0:	0800c0cc 	.word	0x0800c0cc
 8009ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	bfa8      	it	ge
 8009acc:	461a      	movge	r2, r3
 8009ace:	2a00      	cmp	r2, #0
 8009ad0:	4691      	mov	r9, r2
 8009ad2:	dc37      	bgt.n	8009b44 <_printf_float+0x374>
 8009ad4:	f04f 0b00 	mov.w	fp, #0
 8009ad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009adc:	f104 021a 	add.w	r2, r4, #26
 8009ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	eba3 0309 	sub.w	r3, r3, r9
 8009ae8:	455b      	cmp	r3, fp
 8009aea:	dc33      	bgt.n	8009b54 <_printf_float+0x384>
 8009aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af0:	429a      	cmp	r2, r3
 8009af2:	db3b      	blt.n	8009b6c <_printf_float+0x39c>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07da      	lsls	r2, r3, #31
 8009af8:	d438      	bmi.n	8009b6c <_printf_float+0x39c>
 8009afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afc:	9a05      	ldr	r2, [sp, #20]
 8009afe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b00:	1a9a      	subs	r2, r3, r2
 8009b02:	eba3 0901 	sub.w	r9, r3, r1
 8009b06:	4591      	cmp	r9, r2
 8009b08:	bfa8      	it	ge
 8009b0a:	4691      	movge	r9, r2
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	dc35      	bgt.n	8009b7e <_printf_float+0x3ae>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b1a:	f104 0a1a 	add.w	sl, r4, #26
 8009b1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	eba3 0309 	sub.w	r3, r3, r9
 8009b28:	4543      	cmp	r3, r8
 8009b2a:	f77f af79 	ble.w	8009a20 <_printf_float+0x250>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4652      	mov	r2, sl
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f aeaa 	beq.w	8009892 <_printf_float+0xc2>
 8009b3e:	f108 0801 	add.w	r8, r8, #1
 8009b42:	e7ec      	b.n	8009b1e <_printf_float+0x34e>
 8009b44:	4613      	mov	r3, r2
 8009b46:	4631      	mov	r1, r6
 8009b48:	4642      	mov	r2, r8
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d1c0      	bne.n	8009ad4 <_printf_float+0x304>
 8009b52:	e69e      	b.n	8009892 <_printf_float+0xc2>
 8009b54:	2301      	movs	r3, #1
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	9205      	str	r2, [sp, #20]
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f ae97 	beq.w	8009892 <_printf_float+0xc2>
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	f10b 0b01 	add.w	fp, fp, #1
 8009b6a:	e7b9      	b.n	8009ae0 <_printf_float+0x310>
 8009b6c:	ee18 3a10 	vmov	r3, s16
 8009b70:	4652      	mov	r2, sl
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d1be      	bne.n	8009afa <_printf_float+0x32a>
 8009b7c:	e689      	b.n	8009892 <_printf_float+0xc2>
 8009b7e:	9a05      	ldr	r2, [sp, #20]
 8009b80:	464b      	mov	r3, r9
 8009b82:	4442      	add	r2, r8
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d1c1      	bne.n	8009b12 <_printf_float+0x342>
 8009b8e:	e680      	b.n	8009892 <_printf_float+0xc2>
 8009b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b92:	2a01      	cmp	r2, #1
 8009b94:	dc01      	bgt.n	8009b9a <_printf_float+0x3ca>
 8009b96:	07db      	lsls	r3, r3, #31
 8009b98:	d538      	bpl.n	8009c0c <_printf_float+0x43c>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	f43f ae74 	beq.w	8009892 <_printf_float+0xc2>
 8009baa:	ee18 3a10 	vmov	r3, s16
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f ae6b 	beq.w	8009892 <_printf_float+0xc2>
 8009bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f7f6 ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bc8:	b9d8      	cbnz	r0, 8009c02 <_printf_float+0x432>
 8009bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bcc:	f108 0201 	add.w	r2, r8, #1
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d10e      	bne.n	8009bfa <_printf_float+0x42a>
 8009bdc:	e659      	b.n	8009892 <_printf_float+0xc2>
 8009bde:	2301      	movs	r3, #1
 8009be0:	4652      	mov	r2, sl
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	f43f ae52 	beq.w	8009892 <_printf_float+0xc2>
 8009bee:	f108 0801 	add.w	r8, r8, #1
 8009bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	4543      	cmp	r3, r8
 8009bf8:	dcf1      	bgt.n	8009bde <_printf_float+0x40e>
 8009bfa:	464b      	mov	r3, r9
 8009bfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c00:	e6dc      	b.n	80099bc <_printf_float+0x1ec>
 8009c02:	f04f 0800 	mov.w	r8, #0
 8009c06:	f104 0a1a 	add.w	sl, r4, #26
 8009c0a:	e7f2      	b.n	8009bf2 <_printf_float+0x422>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4642      	mov	r2, r8
 8009c10:	e7df      	b.n	8009bd2 <_printf_float+0x402>
 8009c12:	2301      	movs	r3, #1
 8009c14:	464a      	mov	r2, r9
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	f43f ae38 	beq.w	8009892 <_printf_float+0xc2>
 8009c22:	f108 0801 	add.w	r8, r8, #1
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c2a:	1a5b      	subs	r3, r3, r1
 8009c2c:	4543      	cmp	r3, r8
 8009c2e:	dcf0      	bgt.n	8009c12 <_printf_float+0x442>
 8009c30:	e6fa      	b.n	8009a28 <_printf_float+0x258>
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	f104 0919 	add.w	r9, r4, #25
 8009c3a:	e7f4      	b.n	8009c26 <_printf_float+0x456>

08009c3c <_printf_common>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	4616      	mov	r6, r2
 8009c42:	4699      	mov	r9, r3
 8009c44:	688a      	ldr	r2, [r1, #8]
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfb8      	it	lt
 8009c50:	4613      	movlt	r3, r2
 8009c52:	6033      	str	r3, [r6, #0]
 8009c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c58:	4607      	mov	r7, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b10a      	cbz	r2, 8009c62 <_printf_common+0x26>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	6033      	str	r3, [r6, #0]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	0699      	lsls	r1, r3, #26
 8009c66:	bf42      	ittt	mi
 8009c68:	6833      	ldrmi	r3, [r6, #0]
 8009c6a:	3302      	addmi	r3, #2
 8009c6c:	6033      	strmi	r3, [r6, #0]
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	f015 0506 	ands.w	r5, r5, #6
 8009c74:	d106      	bne.n	8009c84 <_printf_common+0x48>
 8009c76:	f104 0a19 	add.w	sl, r4, #25
 8009c7a:	68e3      	ldr	r3, [r4, #12]
 8009c7c:	6832      	ldr	r2, [r6, #0]
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	dc26      	bgt.n	8009cd2 <_printf_common+0x96>
 8009c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c88:	1e13      	subs	r3, r2, #0
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	bf18      	it	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	0692      	lsls	r2, r2, #26
 8009c92:	d42b      	bmi.n	8009cec <_printf_common+0xb0>
 8009c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c98:	4649      	mov	r1, r9
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	47c0      	blx	r8
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d01e      	beq.n	8009ce0 <_printf_common+0xa4>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	68e5      	ldr	r5, [r4, #12]
 8009ca6:	6832      	ldr	r2, [r6, #0]
 8009ca8:	f003 0306 	and.w	r3, r3, #6
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	bf08      	it	eq
 8009cb0:	1aad      	subeq	r5, r5, r2
 8009cb2:	68a3      	ldr	r3, [r4, #8]
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	bf0c      	ite	eq
 8009cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cbc:	2500      	movne	r5, #0
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bfc4      	itt	gt
 8009cc2:	1a9b      	subgt	r3, r3, r2
 8009cc4:	18ed      	addgt	r5, r5, r3
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	341a      	adds	r4, #26
 8009cca:	42b5      	cmp	r5, r6
 8009ccc:	d11a      	bne.n	8009d04 <_printf_common+0xc8>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e008      	b.n	8009ce4 <_printf_common+0xa8>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	4638      	mov	r0, r7
 8009cda:	47c0      	blx	r8
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d103      	bne.n	8009ce8 <_printf_common+0xac>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	3501      	adds	r5, #1
 8009cea:	e7c6      	b.n	8009c7a <_printf_common+0x3e>
 8009cec:	18e1      	adds	r1, r4, r3
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	2030      	movs	r0, #48	; 0x30
 8009cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cf6:	4422      	add	r2, r4
 8009cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d00:	3302      	adds	r3, #2
 8009d02:	e7c7      	b.n	8009c94 <_printf_common+0x58>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4622      	mov	r2, r4
 8009d08:	4649      	mov	r1, r9
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	47c0      	blx	r8
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d0e6      	beq.n	8009ce0 <_printf_common+0xa4>
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7d9      	b.n	8009cca <_printf_common+0x8e>
	...

08009d18 <_printf_i>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	7e0f      	ldrb	r7, [r1, #24]
 8009d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d20:	2f78      	cmp	r7, #120	; 0x78
 8009d22:	4691      	mov	r9, r2
 8009d24:	4680      	mov	r8, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	469a      	mov	sl, r3
 8009d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d2e:	d807      	bhi.n	8009d40 <_printf_i+0x28>
 8009d30:	2f62      	cmp	r7, #98	; 0x62
 8009d32:	d80a      	bhi.n	8009d4a <_printf_i+0x32>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	f000 80d8 	beq.w	8009eea <_printf_i+0x1d2>
 8009d3a:	2f58      	cmp	r7, #88	; 0x58
 8009d3c:	f000 80a3 	beq.w	8009e86 <_printf_i+0x16e>
 8009d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d48:	e03a      	b.n	8009dc0 <_printf_i+0xa8>
 8009d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d4e:	2b15      	cmp	r3, #21
 8009d50:	d8f6      	bhi.n	8009d40 <_printf_i+0x28>
 8009d52:	a101      	add	r1, pc, #4	; (adr r1, 8009d58 <_printf_i+0x40>)
 8009d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d58:	08009db1 	.word	0x08009db1
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009d41 	.word	0x08009d41
 8009d64:	08009d41 	.word	0x08009d41
 8009d68:	08009d41 	.word	0x08009d41
 8009d6c:	08009d41 	.word	0x08009d41
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009d41 	.word	0x08009d41
 8009d78:	08009d41 	.word	0x08009d41
 8009d7c:	08009d41 	.word	0x08009d41
 8009d80:	08009d41 	.word	0x08009d41
 8009d84:	08009ed1 	.word	0x08009ed1
 8009d88:	08009df5 	.word	0x08009df5
 8009d8c:	08009eb3 	.word	0x08009eb3
 8009d90:	08009d41 	.word	0x08009d41
 8009d94:	08009d41 	.word	0x08009d41
 8009d98:	08009ef3 	.word	0x08009ef3
 8009d9c:	08009d41 	.word	0x08009d41
 8009da0:	08009df5 	.word	0x08009df5
 8009da4:	08009d41 	.word	0x08009d41
 8009da8:	08009d41 	.word	0x08009d41
 8009dac:	08009ebb 	.word	0x08009ebb
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	602a      	str	r2, [r5, #0]
 8009db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e0a3      	b.n	8009f0c <_printf_i+0x1f4>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	6829      	ldr	r1, [r5, #0]
 8009dc8:	0606      	lsls	r6, r0, #24
 8009dca:	f101 0304 	add.w	r3, r1, #4
 8009dce:	d50a      	bpl.n	8009de6 <_printf_i+0xce>
 8009dd0:	680e      	ldr	r6, [r1, #0]
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	da03      	bge.n	8009de0 <_printf_i+0xc8>
 8009dd8:	232d      	movs	r3, #45	; 0x2d
 8009dda:	4276      	negs	r6, r6
 8009ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de0:	485e      	ldr	r0, [pc, #376]	; (8009f5c <_printf_i+0x244>)
 8009de2:	230a      	movs	r3, #10
 8009de4:	e019      	b.n	8009e1a <_printf_i+0x102>
 8009de6:	680e      	ldr	r6, [r1, #0]
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dee:	bf18      	it	ne
 8009df0:	b236      	sxthne	r6, r6
 8009df2:	e7ef      	b.n	8009dd4 <_printf_i+0xbc>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	1d19      	adds	r1, r3, #4
 8009dfa:	6029      	str	r1, [r5, #0]
 8009dfc:	0601      	lsls	r1, r0, #24
 8009dfe:	d501      	bpl.n	8009e04 <_printf_i+0xec>
 8009e00:	681e      	ldr	r6, [r3, #0]
 8009e02:	e002      	b.n	8009e0a <_printf_i+0xf2>
 8009e04:	0646      	lsls	r6, r0, #25
 8009e06:	d5fb      	bpl.n	8009e00 <_printf_i+0xe8>
 8009e08:	881e      	ldrh	r6, [r3, #0]
 8009e0a:	4854      	ldr	r0, [pc, #336]	; (8009f5c <_printf_i+0x244>)
 8009e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e0e:	bf0c      	ite	eq
 8009e10:	2308      	moveq	r3, #8
 8009e12:	230a      	movne	r3, #10
 8009e14:	2100      	movs	r1, #0
 8009e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e1a:	6865      	ldr	r5, [r4, #4]
 8009e1c:	60a5      	str	r5, [r4, #8]
 8009e1e:	2d00      	cmp	r5, #0
 8009e20:	bfa2      	ittt	ge
 8009e22:	6821      	ldrge	r1, [r4, #0]
 8009e24:	f021 0104 	bicge.w	r1, r1, #4
 8009e28:	6021      	strge	r1, [r4, #0]
 8009e2a:	b90e      	cbnz	r6, 8009e30 <_printf_i+0x118>
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	d04d      	beq.n	8009ecc <_printf_i+0x1b4>
 8009e30:	4615      	mov	r5, r2
 8009e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e36:	fb03 6711 	mls	r7, r3, r1, r6
 8009e3a:	5dc7      	ldrb	r7, [r0, r7]
 8009e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e40:	4637      	mov	r7, r6
 8009e42:	42bb      	cmp	r3, r7
 8009e44:	460e      	mov	r6, r1
 8009e46:	d9f4      	bls.n	8009e32 <_printf_i+0x11a>
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d10b      	bne.n	8009e64 <_printf_i+0x14c>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	07de      	lsls	r6, r3, #31
 8009e50:	d508      	bpl.n	8009e64 <_printf_i+0x14c>
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	6861      	ldr	r1, [r4, #4]
 8009e56:	4299      	cmp	r1, r3
 8009e58:	bfde      	ittt	le
 8009e5a:	2330      	movle	r3, #48	; 0x30
 8009e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e64:	1b52      	subs	r2, r2, r5
 8009e66:	6122      	str	r2, [r4, #16]
 8009e68:	f8cd a000 	str.w	sl, [sp]
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	aa03      	add	r2, sp, #12
 8009e70:	4621      	mov	r1, r4
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7ff fee2 	bl	8009c3c <_printf_common>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d14c      	bne.n	8009f16 <_printf_i+0x1fe>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	b004      	add	sp, #16
 8009e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e86:	4835      	ldr	r0, [pc, #212]	; (8009f5c <_printf_i+0x244>)
 8009e88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e8c:	6829      	ldr	r1, [r5, #0]
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e94:	6029      	str	r1, [r5, #0]
 8009e96:	061d      	lsls	r5, r3, #24
 8009e98:	d514      	bpl.n	8009ec4 <_printf_i+0x1ac>
 8009e9a:	07df      	lsls	r7, r3, #31
 8009e9c:	bf44      	itt	mi
 8009e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009ea2:	6023      	strmi	r3, [r4, #0]
 8009ea4:	b91e      	cbnz	r6, 8009eae <_printf_i+0x196>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f023 0320 	bic.w	r3, r3, #32
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	2310      	movs	r3, #16
 8009eb0:	e7b0      	b.n	8009e14 <_printf_i+0xfc>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	f043 0320 	orr.w	r3, r3, #32
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	2378      	movs	r3, #120	; 0x78
 8009ebc:	4828      	ldr	r0, [pc, #160]	; (8009f60 <_printf_i+0x248>)
 8009ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ec2:	e7e3      	b.n	8009e8c <_printf_i+0x174>
 8009ec4:	0659      	lsls	r1, r3, #25
 8009ec6:	bf48      	it	mi
 8009ec8:	b2b6      	uxthmi	r6, r6
 8009eca:	e7e6      	b.n	8009e9a <_printf_i+0x182>
 8009ecc:	4615      	mov	r5, r2
 8009ece:	e7bb      	b.n	8009e48 <_printf_i+0x130>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	6826      	ldr	r6, [r4, #0]
 8009ed4:	6961      	ldr	r1, [r4, #20]
 8009ed6:	1d18      	adds	r0, r3, #4
 8009ed8:	6028      	str	r0, [r5, #0]
 8009eda:	0635      	lsls	r5, r6, #24
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	d501      	bpl.n	8009ee4 <_printf_i+0x1cc>
 8009ee0:	6019      	str	r1, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <_printf_i+0x1d2>
 8009ee4:	0670      	lsls	r0, r6, #25
 8009ee6:	d5fb      	bpl.n	8009ee0 <_printf_i+0x1c8>
 8009ee8:	8019      	strh	r1, [r3, #0]
 8009eea:	2300      	movs	r3, #0
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	4615      	mov	r5, r2
 8009ef0:	e7ba      	b.n	8009e68 <_printf_i+0x150>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	681d      	ldr	r5, [r3, #0]
 8009efa:	6862      	ldr	r2, [r4, #4]
 8009efc:	2100      	movs	r1, #0
 8009efe:	4628      	mov	r0, r5
 8009f00:	f7f6 f976 	bl	80001f0 <memchr>
 8009f04:	b108      	cbz	r0, 8009f0a <_printf_i+0x1f2>
 8009f06:	1b40      	subs	r0, r0, r5
 8009f08:	6060      	str	r0, [r4, #4]
 8009f0a:	6863      	ldr	r3, [r4, #4]
 8009f0c:	6123      	str	r3, [r4, #16]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f14:	e7a8      	b.n	8009e68 <_printf_i+0x150>
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	47d0      	blx	sl
 8009f20:	3001      	adds	r0, #1
 8009f22:	d0ab      	beq.n	8009e7c <_printf_i+0x164>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	079b      	lsls	r3, r3, #30
 8009f28:	d413      	bmi.n	8009f52 <_printf_i+0x23a>
 8009f2a:	68e0      	ldr	r0, [r4, #12]
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	4298      	cmp	r0, r3
 8009f30:	bfb8      	it	lt
 8009f32:	4618      	movlt	r0, r3
 8009f34:	e7a4      	b.n	8009e80 <_printf_i+0x168>
 8009f36:	2301      	movs	r3, #1
 8009f38:	4632      	mov	r2, r6
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	47d0      	blx	sl
 8009f40:	3001      	adds	r0, #1
 8009f42:	d09b      	beq.n	8009e7c <_printf_i+0x164>
 8009f44:	3501      	adds	r5, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	9903      	ldr	r1, [sp, #12]
 8009f4a:	1a5b      	subs	r3, r3, r1
 8009f4c:	42ab      	cmp	r3, r5
 8009f4e:	dcf2      	bgt.n	8009f36 <_printf_i+0x21e>
 8009f50:	e7eb      	b.n	8009f2a <_printf_i+0x212>
 8009f52:	2500      	movs	r5, #0
 8009f54:	f104 0619 	add.w	r6, r4, #25
 8009f58:	e7f5      	b.n	8009f46 <_printf_i+0x22e>
 8009f5a:	bf00      	nop
 8009f5c:	0800c0ce 	.word	0x0800c0ce
 8009f60:	0800c0df 	.word	0x0800c0df

08009f64 <cleanup_glue>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	460c      	mov	r4, r1
 8009f68:	6809      	ldr	r1, [r1, #0]
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	b109      	cbz	r1, 8009f72 <cleanup_glue+0xe>
 8009f6e:	f7ff fff9 	bl	8009f64 <cleanup_glue>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f7a:	f001 bbd5 	b.w	800b728 <_free_r>
	...

08009f80 <_reclaim_reent>:
 8009f80:	4b2c      	ldr	r3, [pc, #176]	; (800a034 <_reclaim_reent+0xb4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4283      	cmp	r3, r0
 8009f86:	b570      	push	{r4, r5, r6, lr}
 8009f88:	4604      	mov	r4, r0
 8009f8a:	d051      	beq.n	800a030 <_reclaim_reent+0xb0>
 8009f8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f8e:	b143      	cbz	r3, 8009fa2 <_reclaim_reent+0x22>
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d14a      	bne.n	800a02c <_reclaim_reent+0xac>
 8009f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	b111      	cbz	r1, 8009fa2 <_reclaim_reent+0x22>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f001 fbc3 	bl	800b728 <_free_r>
 8009fa2:	6961      	ldr	r1, [r4, #20]
 8009fa4:	b111      	cbz	r1, 8009fac <_reclaim_reent+0x2c>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f001 fbbe 	bl	800b728 <_free_r>
 8009fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009fae:	b111      	cbz	r1, 8009fb6 <_reclaim_reent+0x36>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f001 fbb9 	bl	800b728 <_free_r>
 8009fb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009fb8:	b111      	cbz	r1, 8009fc0 <_reclaim_reent+0x40>
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f001 fbb4 	bl	800b728 <_free_r>
 8009fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009fc2:	b111      	cbz	r1, 8009fca <_reclaim_reent+0x4a>
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f001 fbaf 	bl	800b728 <_free_r>
 8009fca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009fcc:	b111      	cbz	r1, 8009fd4 <_reclaim_reent+0x54>
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f001 fbaa 	bl	800b728 <_free_r>
 8009fd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009fd6:	b111      	cbz	r1, 8009fde <_reclaim_reent+0x5e>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 fba5 	bl	800b728 <_free_r>
 8009fde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009fe0:	b111      	cbz	r1, 8009fe8 <_reclaim_reent+0x68>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f001 fba0 	bl	800b728 <_free_r>
 8009fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fea:	b111      	cbz	r1, 8009ff2 <_reclaim_reent+0x72>
 8009fec:	4620      	mov	r0, r4
 8009fee:	f001 fb9b 	bl	800b728 <_free_r>
 8009ff2:	69a3      	ldr	r3, [r4, #24]
 8009ff4:	b1e3      	cbz	r3, 800a030 <_reclaim_reent+0xb0>
 8009ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4798      	blx	r3
 8009ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ffe:	b1b9      	cbz	r1, 800a030 <_reclaim_reent+0xb0>
 800a000:	4620      	mov	r0, r4
 800a002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a006:	f7ff bfad 	b.w	8009f64 <cleanup_glue>
 800a00a:	5949      	ldr	r1, [r1, r5]
 800a00c:	b941      	cbnz	r1, 800a020 <_reclaim_reent+0xa0>
 800a00e:	3504      	adds	r5, #4
 800a010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a012:	2d80      	cmp	r5, #128	; 0x80
 800a014:	68d9      	ldr	r1, [r3, #12]
 800a016:	d1f8      	bne.n	800a00a <_reclaim_reent+0x8a>
 800a018:	4620      	mov	r0, r4
 800a01a:	f001 fb85 	bl	800b728 <_free_r>
 800a01e:	e7ba      	b.n	8009f96 <_reclaim_reent+0x16>
 800a020:	680e      	ldr	r6, [r1, #0]
 800a022:	4620      	mov	r0, r4
 800a024:	f001 fb80 	bl	800b728 <_free_r>
 800a028:	4631      	mov	r1, r6
 800a02a:	e7ef      	b.n	800a00c <_reclaim_reent+0x8c>
 800a02c:	2500      	movs	r5, #0
 800a02e:	e7ef      	b.n	800a010 <_reclaim_reent+0x90>
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	bf00      	nop
 800a034:	20000010 	.word	0x20000010

0800a038 <_sbrk_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d06      	ldr	r5, [pc, #24]	; (800a054 <_sbrk_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	f7f9 facc 	bl	80035e0 <_sbrk>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_sbrk_r+0x1a>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_sbrk_r+0x1a>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20004d80 	.word	0x20004d80

0800a058 <__sread>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	460c      	mov	r4, r1
 800a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a060:	f001 fbae 	bl	800b7c0 <_read_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	bfab      	itete	ge
 800a068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a06a:	89a3      	ldrhlt	r3, [r4, #12]
 800a06c:	181b      	addge	r3, r3, r0
 800a06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a072:	bfac      	ite	ge
 800a074:	6563      	strge	r3, [r4, #84]	; 0x54
 800a076:	81a3      	strhlt	r3, [r4, #12]
 800a078:	bd10      	pop	{r4, pc}

0800a07a <__swrite>:
 800a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	461f      	mov	r7, r3
 800a080:	898b      	ldrh	r3, [r1, #12]
 800a082:	05db      	lsls	r3, r3, #23
 800a084:	4605      	mov	r5, r0
 800a086:	460c      	mov	r4, r1
 800a088:	4616      	mov	r6, r2
 800a08a:	d505      	bpl.n	800a098 <__swrite+0x1e>
 800a08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a090:	2302      	movs	r3, #2
 800a092:	2200      	movs	r2, #0
 800a094:	f000 ff88 	bl	800afa8 <_lseek_r>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ae:	f000 b817 	b.w	800a0e0 <_write_r>

0800a0b2 <__sseek>:
 800a0b2:	b510      	push	{r4, lr}
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ba:	f000 ff75 	bl	800afa8 <_lseek_r>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	bf15      	itete	ne
 800a0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0ce:	81a3      	strheq	r3, [r4, #12]
 800a0d0:	bf18      	it	ne
 800a0d2:	81a3      	strhne	r3, [r4, #12]
 800a0d4:	bd10      	pop	{r4, pc}

0800a0d6 <__sclose>:
 800a0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0da:	f000 b813 	b.w	800a104 <_close_r>
	...

0800a0e0 <_write_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_write_r+0x20>)
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	4608      	mov	r0, r1
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f7f9 fa25 	bl	800353e <_write>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_write_r+0x1e>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_write_r+0x1e>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	20004d80 	.word	0x20004d80

0800a104 <_close_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_close_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f9 fa31 	bl	8003576 <_close>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_close_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_close_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20004d80 	.word	0x20004d80

0800a124 <quorem>:
 800a124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	6903      	ldr	r3, [r0, #16]
 800a12a:	690c      	ldr	r4, [r1, #16]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	4607      	mov	r7, r0
 800a130:	f2c0 8081 	blt.w	800a236 <quorem+0x112>
 800a134:	3c01      	subs	r4, #1
 800a136:	f101 0814 	add.w	r8, r1, #20
 800a13a:	f100 0514 	add.w	r5, r0, #20
 800a13e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a14c:	3301      	adds	r3, #1
 800a14e:	429a      	cmp	r2, r3
 800a150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a158:	fbb2 f6f3 	udiv	r6, r2, r3
 800a15c:	d331      	bcc.n	800a1c2 <quorem+0x9e>
 800a15e:	f04f 0e00 	mov.w	lr, #0
 800a162:	4640      	mov	r0, r8
 800a164:	46ac      	mov	ip, r5
 800a166:	46f2      	mov	sl, lr
 800a168:	f850 2b04 	ldr.w	r2, [r0], #4
 800a16c:	b293      	uxth	r3, r2
 800a16e:	fb06 e303 	mla	r3, r6, r3, lr
 800a172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a176:	b29b      	uxth	r3, r3
 800a178:	ebaa 0303 	sub.w	r3, sl, r3
 800a17c:	f8dc a000 	ldr.w	sl, [ip]
 800a180:	0c12      	lsrs	r2, r2, #16
 800a182:	fa13 f38a 	uxtah	r3, r3, sl
 800a186:	fb06 e202 	mla	r2, r6, r2, lr
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a192:	b292      	uxth	r2, r2
 800a194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a19c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1a0:	4581      	cmp	r9, r0
 800a1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1a6:	f84c 3b04 	str.w	r3, [ip], #4
 800a1aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1ae:	d2db      	bcs.n	800a168 <quorem+0x44>
 800a1b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1b4:	b92b      	cbnz	r3, 800a1c2 <quorem+0x9e>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	3b04      	subs	r3, #4
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	d32e      	bcc.n	800a21e <quorem+0xfa>
 800a1c0:	613c      	str	r4, [r7, #16]
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	f001 f998 	bl	800b4f8 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	db24      	blt.n	800a216 <quorem+0xf2>
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f04f 0c00 	mov.w	ip, #0
 800a1d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a1dc:	b293      	uxth	r3, r2
 800a1de:	ebac 0303 	sub.w	r3, ip, r3
 800a1e2:	0c12      	lsrs	r2, r2, #16
 800a1e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a1e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f6:	45c1      	cmp	r9, r8
 800a1f8:	f840 3b04 	str.w	r3, [r0], #4
 800a1fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a200:	d2e8      	bcs.n	800a1d4 <quorem+0xb0>
 800a202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a20a:	b922      	cbnz	r2, 800a216 <quorem+0xf2>
 800a20c:	3b04      	subs	r3, #4
 800a20e:	429d      	cmp	r5, r3
 800a210:	461a      	mov	r2, r3
 800a212:	d30a      	bcc.n	800a22a <quorem+0x106>
 800a214:	613c      	str	r4, [r7, #16]
 800a216:	4630      	mov	r0, r6
 800a218:	b003      	add	sp, #12
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	6812      	ldr	r2, [r2, #0]
 800a220:	3b04      	subs	r3, #4
 800a222:	2a00      	cmp	r2, #0
 800a224:	d1cc      	bne.n	800a1c0 <quorem+0x9c>
 800a226:	3c01      	subs	r4, #1
 800a228:	e7c7      	b.n	800a1ba <quorem+0x96>
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	3b04      	subs	r3, #4
 800a22e:	2a00      	cmp	r2, #0
 800a230:	d1f0      	bne.n	800a214 <quorem+0xf0>
 800a232:	3c01      	subs	r4, #1
 800a234:	e7eb      	b.n	800a20e <quorem+0xea>
 800a236:	2000      	movs	r0, #0
 800a238:	e7ee      	b.n	800a218 <quorem+0xf4>
 800a23a:	0000      	movs	r0, r0
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <_dtoa_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b04 	vpush	{d8-d9}
 800a248:	ec57 6b10 	vmov	r6, r7, d0
 800a24c:	b093      	sub	sp, #76	; 0x4c
 800a24e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a254:	9106      	str	r1, [sp, #24]
 800a256:	ee10 aa10 	vmov	sl, s0
 800a25a:	4604      	mov	r4, r0
 800a25c:	9209      	str	r2, [sp, #36]	; 0x24
 800a25e:	930c      	str	r3, [sp, #48]	; 0x30
 800a260:	46bb      	mov	fp, r7
 800a262:	b975      	cbnz	r5, 800a282 <_dtoa_r+0x42>
 800a264:	2010      	movs	r0, #16
 800a266:	f000 feb1 	bl	800afcc <malloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6260      	str	r0, [r4, #36]	; 0x24
 800a26e:	b920      	cbnz	r0, 800a27a <_dtoa_r+0x3a>
 800a270:	4ba7      	ldr	r3, [pc, #668]	; (800a510 <_dtoa_r+0x2d0>)
 800a272:	21ea      	movs	r1, #234	; 0xea
 800a274:	48a7      	ldr	r0, [pc, #668]	; (800a514 <_dtoa_r+0x2d4>)
 800a276:	f001 fab5 	bl	800b7e4 <__assert_func>
 800a27a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a27e:	6005      	str	r5, [r0, #0]
 800a280:	60c5      	str	r5, [r0, #12]
 800a282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a284:	6819      	ldr	r1, [r3, #0]
 800a286:	b151      	cbz	r1, 800a29e <_dtoa_r+0x5e>
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	604a      	str	r2, [r1, #4]
 800a28c:	2301      	movs	r3, #1
 800a28e:	4093      	lsls	r3, r2
 800a290:	608b      	str	r3, [r1, #8]
 800a292:	4620      	mov	r0, r4
 800a294:	f000 feee 	bl	800b074 <_Bfree>
 800a298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	1e3b      	subs	r3, r7, #0
 800a2a0:	bfaa      	itet	ge
 800a2a2:	2300      	movge	r3, #0
 800a2a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2a8:	f8c8 3000 	strge.w	r3, [r8]
 800a2ac:	4b9a      	ldr	r3, [pc, #616]	; (800a518 <_dtoa_r+0x2d8>)
 800a2ae:	bfbc      	itt	lt
 800a2b0:	2201      	movlt	r2, #1
 800a2b2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2b6:	ea33 030b 	bics.w	r3, r3, fp
 800a2ba:	d11b      	bne.n	800a2f4 <_dtoa_r+0xb4>
 800a2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2be:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2c8:	4333      	orrs	r3, r6
 800a2ca:	f000 8592 	beq.w	800adf2 <_dtoa_r+0xbb2>
 800a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d0:	b963      	cbnz	r3, 800a2ec <_dtoa_r+0xac>
 800a2d2:	4b92      	ldr	r3, [pc, #584]	; (800a51c <_dtoa_r+0x2dc>)
 800a2d4:	e022      	b.n	800a31c <_dtoa_r+0xdc>
 800a2d6:	4b92      	ldr	r3, [pc, #584]	; (800a520 <_dtoa_r+0x2e0>)
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	9801      	ldr	r0, [sp, #4]
 800a2e2:	b013      	add	sp, #76	; 0x4c
 800a2e4:	ecbd 8b04 	vpop	{d8-d9}
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	4b8b      	ldr	r3, [pc, #556]	; (800a51c <_dtoa_r+0x2dc>)
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	3303      	adds	r3, #3
 800a2f2:	e7f3      	b.n	800a2dc <_dtoa_r+0x9c>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	f7f6 fbec 	bl	8000ad8 <__aeabi_dcmpeq>
 800a300:	ec4b ab19 	vmov	d9, sl, fp
 800a304:	4680      	mov	r8, r0
 800a306:	b158      	cbz	r0, 800a320 <_dtoa_r+0xe0>
 800a308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a30a:	2301      	movs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 856b 	beq.w	800adec <_dtoa_r+0xbac>
 800a316:	4883      	ldr	r0, [pc, #524]	; (800a524 <_dtoa_r+0x2e4>)
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	1e43      	subs	r3, r0, #1
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	e7df      	b.n	800a2e0 <_dtoa_r+0xa0>
 800a320:	ec4b ab10 	vmov	d0, sl, fp
 800a324:	aa10      	add	r2, sp, #64	; 0x40
 800a326:	a911      	add	r1, sp, #68	; 0x44
 800a328:	4620      	mov	r0, r4
 800a32a:	f001 f98b 	bl	800b644 <__d2b>
 800a32e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a332:	ee08 0a10 	vmov	s16, r0
 800a336:	2d00      	cmp	r5, #0
 800a338:	f000 8084 	beq.w	800a444 <_dtoa_r+0x204>
 800a33c:	ee19 3a90 	vmov	r3, s19
 800a340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a348:	4656      	mov	r6, sl
 800a34a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a356:	4b74      	ldr	r3, [pc, #464]	; (800a528 <_dtoa_r+0x2e8>)
 800a358:	2200      	movs	r2, #0
 800a35a:	4630      	mov	r0, r6
 800a35c:	4639      	mov	r1, r7
 800a35e:	f7f5 ff9b 	bl	8000298 <__aeabi_dsub>
 800a362:	a365      	add	r3, pc, #404	; (adr r3, 800a4f8 <_dtoa_r+0x2b8>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f94e 	bl	8000608 <__aeabi_dmul>
 800a36c:	a364      	add	r3, pc, #400	; (adr r3, 800a500 <_dtoa_r+0x2c0>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ff93 	bl	800029c <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	4628      	mov	r0, r5
 800a37a:	460f      	mov	r7, r1
 800a37c:	f7f6 f8da 	bl	8000534 <__aeabi_i2d>
 800a380:	a361      	add	r3, pc, #388	; (adr r3, 800a508 <_dtoa_r+0x2c8>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f93f 	bl	8000608 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4630      	mov	r0, r6
 800a390:	4639      	mov	r1, r7
 800a392:	f7f5 ff83 	bl	800029c <__adddf3>
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	f7f6 fbe5 	bl	8000b68 <__aeabi_d2iz>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	9000      	str	r0, [sp, #0]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f6 fba0 	bl	8000aec <__aeabi_dcmplt>
 800a3ac:	b150      	cbz	r0, 800a3c4 <_dtoa_r+0x184>
 800a3ae:	9800      	ldr	r0, [sp, #0]
 800a3b0:	f7f6 f8c0 	bl	8000534 <__aeabi_i2d>
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	463b      	mov	r3, r7
 800a3b8:	f7f6 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3bc:	b910      	cbnz	r0, 800a3c4 <_dtoa_r+0x184>
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	9b00      	ldr	r3, [sp, #0]
 800a3c6:	2b16      	cmp	r3, #22
 800a3c8:	d85a      	bhi.n	800a480 <_dtoa_r+0x240>
 800a3ca:	9a00      	ldr	r2, [sp, #0]
 800a3cc:	4b57      	ldr	r3, [pc, #348]	; (800a52c <_dtoa_r+0x2ec>)
 800a3ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	ec51 0b19 	vmov	r0, r1, d9
 800a3da:	f7f6 fb87 	bl	8000aec <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d050      	beq.n	800a484 <_dtoa_r+0x244>
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ee:	1b5d      	subs	r5, r3, r5
 800a3f0:	1e6b      	subs	r3, r5, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	bf45      	ittet	mi
 800a3f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3fa:	9304      	strmi	r3, [sp, #16]
 800a3fc:	2300      	movpl	r3, #0
 800a3fe:	2300      	movmi	r3, #0
 800a400:	bf4c      	ite	mi
 800a402:	9305      	strmi	r3, [sp, #20]
 800a404:	9304      	strpl	r3, [sp, #16]
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db3d      	blt.n	800a488 <_dtoa_r+0x248>
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	9a00      	ldr	r2, [sp, #0]
 800a410:	920a      	str	r2, [sp, #40]	; 0x28
 800a412:	4413      	add	r3, r2
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	2300      	movs	r3, #0
 800a418:	9307      	str	r3, [sp, #28]
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	2b09      	cmp	r3, #9
 800a41e:	f200 8089 	bhi.w	800a534 <_dtoa_r+0x2f4>
 800a422:	2b05      	cmp	r3, #5
 800a424:	bfc4      	itt	gt
 800a426:	3b04      	subgt	r3, #4
 800a428:	9306      	strgt	r3, [sp, #24]
 800a42a:	9b06      	ldr	r3, [sp, #24]
 800a42c:	f1a3 0302 	sub.w	r3, r3, #2
 800a430:	bfcc      	ite	gt
 800a432:	2500      	movgt	r5, #0
 800a434:	2501      	movle	r5, #1
 800a436:	2b03      	cmp	r3, #3
 800a438:	f200 8087 	bhi.w	800a54a <_dtoa_r+0x30a>
 800a43c:	e8df f003 	tbb	[pc, r3]
 800a440:	59383a2d 	.word	0x59383a2d
 800a444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a448:	441d      	add	r5, r3
 800a44a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a44e:	2b20      	cmp	r3, #32
 800a450:	bfc1      	itttt	gt
 800a452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a45a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a45e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a462:	bfda      	itte	le
 800a464:	f1c3 0320 	rsble	r3, r3, #32
 800a468:	fa06 f003 	lslle.w	r0, r6, r3
 800a46c:	4318      	orrgt	r0, r3
 800a46e:	f7f6 f851 	bl	8000514 <__aeabi_ui2d>
 800a472:	2301      	movs	r3, #1
 800a474:	4606      	mov	r6, r0
 800a476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a47a:	3d01      	subs	r5, #1
 800a47c:	930e      	str	r3, [sp, #56]	; 0x38
 800a47e:	e76a      	b.n	800a356 <_dtoa_r+0x116>
 800a480:	2301      	movs	r3, #1
 800a482:	e7b2      	b.n	800a3ea <_dtoa_r+0x1aa>
 800a484:	900b      	str	r0, [sp, #44]	; 0x2c
 800a486:	e7b1      	b.n	800a3ec <_dtoa_r+0x1ac>
 800a488:	9b04      	ldr	r3, [sp, #16]
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	4253      	negs	r3, r2
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	2300      	movs	r3, #0
 800a496:	930a      	str	r3, [sp, #40]	; 0x28
 800a498:	e7bf      	b.n	800a41a <_dtoa_r+0x1da>
 800a49a:	2300      	movs	r3, #0
 800a49c:	9308      	str	r3, [sp, #32]
 800a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dc55      	bgt.n	800a550 <_dtoa_r+0x310>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ae:	e00c      	b.n	800a4ca <_dtoa_r+0x28a>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7f3      	b.n	800a49c <_dtoa_r+0x25c>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	bfb8      	it	lt
 800a4c8:	2301      	movlt	r3, #1
 800a4ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	6042      	str	r2, [r0, #4]
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	f102 0614 	add.w	r6, r2, #20
 800a4d6:	429e      	cmp	r6, r3
 800a4d8:	6841      	ldr	r1, [r0, #4]
 800a4da:	d93d      	bls.n	800a558 <_dtoa_r+0x318>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fd89 	bl	800aff4 <_Balloc>
 800a4e2:	9001      	str	r0, [sp, #4]
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d13b      	bne.n	800a560 <_dtoa_r+0x320>
 800a4e8:	4b11      	ldr	r3, [pc, #68]	; (800a530 <_dtoa_r+0x2f0>)
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4f0:	e6c0      	b.n	800a274 <_dtoa_r+0x34>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e7df      	b.n	800a4b6 <_dtoa_r+0x276>
 800a4f6:	bf00      	nop
 800a4f8:	636f4361 	.word	0x636f4361
 800a4fc:	3fd287a7 	.word	0x3fd287a7
 800a500:	8b60c8b3 	.word	0x8b60c8b3
 800a504:	3fc68a28 	.word	0x3fc68a28
 800a508:	509f79fb 	.word	0x509f79fb
 800a50c:	3fd34413 	.word	0x3fd34413
 800a510:	0800c0fd 	.word	0x0800c0fd
 800a514:	0800c114 	.word	0x0800c114
 800a518:	7ff00000 	.word	0x7ff00000
 800a51c:	0800c0f9 	.word	0x0800c0f9
 800a520:	0800c0f0 	.word	0x0800c0f0
 800a524:	0800c0cd 	.word	0x0800c0cd
 800a528:	3ff80000 	.word	0x3ff80000
 800a52c:	0800c208 	.word	0x0800c208
 800a530:	0800c16f 	.word	0x0800c16f
 800a534:	2501      	movs	r5, #1
 800a536:	2300      	movs	r3, #0
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	9508      	str	r5, [sp, #32]
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a544:	2200      	movs	r2, #0
 800a546:	2312      	movs	r3, #18
 800a548:	e7b0      	b.n	800a4ac <_dtoa_r+0x26c>
 800a54a:	2301      	movs	r3, #1
 800a54c:	9308      	str	r3, [sp, #32]
 800a54e:	e7f5      	b.n	800a53c <_dtoa_r+0x2fc>
 800a550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a556:	e7b8      	b.n	800a4ca <_dtoa_r+0x28a>
 800a558:	3101      	adds	r1, #1
 800a55a:	6041      	str	r1, [r0, #4]
 800a55c:	0052      	lsls	r2, r2, #1
 800a55e:	e7b8      	b.n	800a4d2 <_dtoa_r+0x292>
 800a560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a562:	9a01      	ldr	r2, [sp, #4]
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	2b0e      	cmp	r3, #14
 800a56a:	f200 809d 	bhi.w	800a6a8 <_dtoa_r+0x468>
 800a56e:	2d00      	cmp	r5, #0
 800a570:	f000 809a 	beq.w	800a6a8 <_dtoa_r+0x468>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd32      	ble.n	800a5e0 <_dtoa_r+0x3a0>
 800a57a:	4ab7      	ldr	r2, [pc, #732]	; (800a858 <_dtoa_r+0x618>)
 800a57c:	f003 030f 	and.w	r3, r3, #15
 800a580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a584:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a588:	9b00      	ldr	r3, [sp, #0]
 800a58a:	05d8      	lsls	r0, r3, #23
 800a58c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a590:	d516      	bpl.n	800a5c0 <_dtoa_r+0x380>
 800a592:	4bb2      	ldr	r3, [pc, #712]	; (800a85c <_dtoa_r+0x61c>)
 800a594:	ec51 0b19 	vmov	r0, r1, d9
 800a598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a59c:	f7f6 f95e 	bl	800085c <__aeabi_ddiv>
 800a5a0:	f007 070f 	and.w	r7, r7, #15
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	468b      	mov	fp, r1
 800a5a8:	2503      	movs	r5, #3
 800a5aa:	4eac      	ldr	r6, [pc, #688]	; (800a85c <_dtoa_r+0x61c>)
 800a5ac:	b957      	cbnz	r7, 800a5c4 <_dtoa_r+0x384>
 800a5ae:	4642      	mov	r2, r8
 800a5b0:	464b      	mov	r3, r9
 800a5b2:	4650      	mov	r0, sl
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	f7f6 f951 	bl	800085c <__aeabi_ddiv>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	468b      	mov	fp, r1
 800a5be:	e028      	b.n	800a612 <_dtoa_r+0x3d2>
 800a5c0:	2502      	movs	r5, #2
 800a5c2:	e7f2      	b.n	800a5aa <_dtoa_r+0x36a>
 800a5c4:	07f9      	lsls	r1, r7, #31
 800a5c6:	d508      	bpl.n	800a5da <_dtoa_r+0x39a>
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5d0:	f7f6 f81a 	bl	8000608 <__aeabi_dmul>
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4689      	mov	r9, r1
 800a5da:	107f      	asrs	r7, r7, #1
 800a5dc:	3608      	adds	r6, #8
 800a5de:	e7e5      	b.n	800a5ac <_dtoa_r+0x36c>
 800a5e0:	f000 809b 	beq.w	800a71a <_dtoa_r+0x4da>
 800a5e4:	9b00      	ldr	r3, [sp, #0]
 800a5e6:	4f9d      	ldr	r7, [pc, #628]	; (800a85c <_dtoa_r+0x61c>)
 800a5e8:	425e      	negs	r6, r3
 800a5ea:	4b9b      	ldr	r3, [pc, #620]	; (800a858 <_dtoa_r+0x618>)
 800a5ec:	f006 020f 	and.w	r2, r6, #15
 800a5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	ec51 0b19 	vmov	r0, r1, d9
 800a5fc:	f7f6 f804 	bl	8000608 <__aeabi_dmul>
 800a600:	1136      	asrs	r6, r6, #4
 800a602:	4682      	mov	sl, r0
 800a604:	468b      	mov	fp, r1
 800a606:	2300      	movs	r3, #0
 800a608:	2502      	movs	r5, #2
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d17a      	bne.n	800a704 <_dtoa_r+0x4c4>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1d3      	bne.n	800a5ba <_dtoa_r+0x37a>
 800a612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8082 	beq.w	800a71e <_dtoa_r+0x4de>
 800a61a:	4b91      	ldr	r3, [pc, #580]	; (800a860 <_dtoa_r+0x620>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	4650      	mov	r0, sl
 800a620:	4659      	mov	r1, fp
 800a622:	f7f6 fa63 	bl	8000aec <__aeabi_dcmplt>
 800a626:	2800      	cmp	r0, #0
 800a628:	d079      	beq.n	800a71e <_dtoa_r+0x4de>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d076      	beq.n	800a71e <_dtoa_r+0x4de>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd36      	ble.n	800a6a4 <_dtoa_r+0x464>
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	1e5f      	subs	r7, r3, #1
 800a63e:	2200      	movs	r2, #0
 800a640:	4b88      	ldr	r3, [pc, #544]	; (800a864 <_dtoa_r+0x624>)
 800a642:	f7f5 ffe1 	bl	8000608 <__aeabi_dmul>
 800a646:	9e02      	ldr	r6, [sp, #8]
 800a648:	4682      	mov	sl, r0
 800a64a:	468b      	mov	fp, r1
 800a64c:	3501      	adds	r5, #1
 800a64e:	4628      	mov	r0, r5
 800a650:	f7f5 ff70 	bl	8000534 <__aeabi_i2d>
 800a654:	4652      	mov	r2, sl
 800a656:	465b      	mov	r3, fp
 800a658:	f7f5 ffd6 	bl	8000608 <__aeabi_dmul>
 800a65c:	4b82      	ldr	r3, [pc, #520]	; (800a868 <_dtoa_r+0x628>)
 800a65e:	2200      	movs	r2, #0
 800a660:	f7f5 fe1c 	bl	800029c <__adddf3>
 800a664:	46d0      	mov	r8, sl
 800a666:	46d9      	mov	r9, fp
 800a668:	4682      	mov	sl, r0
 800a66a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a66e:	2e00      	cmp	r6, #0
 800a670:	d158      	bne.n	800a724 <_dtoa_r+0x4e4>
 800a672:	4b7e      	ldr	r3, [pc, #504]	; (800a86c <_dtoa_r+0x62c>)
 800a674:	2200      	movs	r2, #0
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 fe0d 	bl	8000298 <__aeabi_dsub>
 800a67e:	4652      	mov	r2, sl
 800a680:	465b      	mov	r3, fp
 800a682:	4680      	mov	r8, r0
 800a684:	4689      	mov	r9, r1
 800a686:	f7f6 fa4f 	bl	8000b28 <__aeabi_dcmpgt>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f040 8295 	bne.w	800abba <_dtoa_r+0x97a>
 800a690:	4652      	mov	r2, sl
 800a692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a696:	4640      	mov	r0, r8
 800a698:	4649      	mov	r1, r9
 800a69a:	f7f6 fa27 	bl	8000aec <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f040 8289 	bne.w	800abb6 <_dtoa_r+0x976>
 800a6a4:	ec5b ab19 	vmov	sl, fp, d9
 800a6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f2c0 8148 	blt.w	800a940 <_dtoa_r+0x700>
 800a6b0:	9a00      	ldr	r2, [sp, #0]
 800a6b2:	2a0e      	cmp	r2, #14
 800a6b4:	f300 8144 	bgt.w	800a940 <_dtoa_r+0x700>
 800a6b8:	4b67      	ldr	r3, [pc, #412]	; (800a858 <_dtoa_r+0x618>)
 800a6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f280 80d5 	bge.w	800a874 <_dtoa_r+0x634>
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f300 80d1 	bgt.w	800a874 <_dtoa_r+0x634>
 800a6d2:	f040 826f 	bne.w	800abb4 <_dtoa_r+0x974>
 800a6d6:	4b65      	ldr	r3, [pc, #404]	; (800a86c <_dtoa_r+0x62c>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	f7f6 fa15 	bl	8000b14 <__aeabi_dcmpge>
 800a6ea:	9e03      	ldr	r6, [sp, #12]
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 8245 	bne.w	800ab7e <_dtoa_r+0x93e>
 800a6f4:	9d01      	ldr	r5, [sp, #4]
 800a6f6:	2331      	movs	r3, #49	; 0x31
 800a6f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	e240      	b.n	800ab86 <_dtoa_r+0x946>
 800a704:	07f2      	lsls	r2, r6, #31
 800a706:	d505      	bpl.n	800a714 <_dtoa_r+0x4d4>
 800a708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70c:	f7f5 ff7c 	bl	8000608 <__aeabi_dmul>
 800a710:	3501      	adds	r5, #1
 800a712:	2301      	movs	r3, #1
 800a714:	1076      	asrs	r6, r6, #1
 800a716:	3708      	adds	r7, #8
 800a718:	e777      	b.n	800a60a <_dtoa_r+0x3ca>
 800a71a:	2502      	movs	r5, #2
 800a71c:	e779      	b.n	800a612 <_dtoa_r+0x3d2>
 800a71e:	9f00      	ldr	r7, [sp, #0]
 800a720:	9e03      	ldr	r6, [sp, #12]
 800a722:	e794      	b.n	800a64e <_dtoa_r+0x40e>
 800a724:	9901      	ldr	r1, [sp, #4]
 800a726:	4b4c      	ldr	r3, [pc, #304]	; (800a858 <_dtoa_r+0x618>)
 800a728:	4431      	add	r1, r6
 800a72a:	910d      	str	r1, [sp, #52]	; 0x34
 800a72c:	9908      	ldr	r1, [sp, #32]
 800a72e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a736:	2900      	cmp	r1, #0
 800a738:	d043      	beq.n	800a7c2 <_dtoa_r+0x582>
 800a73a:	494d      	ldr	r1, [pc, #308]	; (800a870 <_dtoa_r+0x630>)
 800a73c:	2000      	movs	r0, #0
 800a73e:	f7f6 f88d 	bl	800085c <__aeabi_ddiv>
 800a742:	4652      	mov	r2, sl
 800a744:	465b      	mov	r3, fp
 800a746:	f7f5 fda7 	bl	8000298 <__aeabi_dsub>
 800a74a:	9d01      	ldr	r5, [sp, #4]
 800a74c:	4682      	mov	sl, r0
 800a74e:	468b      	mov	fp, r1
 800a750:	4649      	mov	r1, r9
 800a752:	4640      	mov	r0, r8
 800a754:	f7f6 fa08 	bl	8000b68 <__aeabi_d2iz>
 800a758:	4606      	mov	r6, r0
 800a75a:	f7f5 feeb 	bl	8000534 <__aeabi_i2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fd97 	bl	8000298 <__aeabi_dsub>
 800a76a:	3630      	adds	r6, #48	; 0x30
 800a76c:	f805 6b01 	strb.w	r6, [r5], #1
 800a770:	4652      	mov	r2, sl
 800a772:	465b      	mov	r3, fp
 800a774:	4680      	mov	r8, r0
 800a776:	4689      	mov	r9, r1
 800a778:	f7f6 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d163      	bne.n	800a848 <_dtoa_r+0x608>
 800a780:	4642      	mov	r2, r8
 800a782:	464b      	mov	r3, r9
 800a784:	4936      	ldr	r1, [pc, #216]	; (800a860 <_dtoa_r+0x620>)
 800a786:	2000      	movs	r0, #0
 800a788:	f7f5 fd86 	bl	8000298 <__aeabi_dsub>
 800a78c:	4652      	mov	r2, sl
 800a78e:	465b      	mov	r3, fp
 800a790:	f7f6 f9ac 	bl	8000aec <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	f040 80b5 	bne.w	800a904 <_dtoa_r+0x6c4>
 800a79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a79c:	429d      	cmp	r5, r3
 800a79e:	d081      	beq.n	800a6a4 <_dtoa_r+0x464>
 800a7a0:	4b30      	ldr	r3, [pc, #192]	; (800a864 <_dtoa_r+0x624>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	4659      	mov	r1, fp
 800a7a8:	f7f5 ff2e 	bl	8000608 <__aeabi_dmul>
 800a7ac:	4b2d      	ldr	r3, [pc, #180]	; (800a864 <_dtoa_r+0x624>)
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	468b      	mov	fp, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f7f5 ff26 	bl	8000608 <__aeabi_dmul>
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	e7c6      	b.n	800a750 <_dtoa_r+0x510>
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7f5 ff1f 	bl	8000608 <__aeabi_dmul>
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7cc:	9d01      	ldr	r5, [sp, #4]
 800a7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	468b      	mov	fp, r1
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f7f6 f9c6 	bl	8000b68 <__aeabi_d2iz>
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f7f5 fea9 	bl	8000534 <__aeabi_i2d>
 800a7e2:	3630      	adds	r6, #48	; 0x30
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f5 fd54 	bl	8000298 <__aeabi_dsub>
 800a7f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	4689      	mov	r9, r1
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	d124      	bne.n	800a84c <_dtoa_r+0x60c>
 800a802:	4b1b      	ldr	r3, [pc, #108]	; (800a870 <_dtoa_r+0x630>)
 800a804:	4650      	mov	r0, sl
 800a806:	4659      	mov	r1, fp
 800a808:	f7f5 fd48 	bl	800029c <__adddf3>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f6 f988 	bl	8000b28 <__aeabi_dcmpgt>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d173      	bne.n	800a904 <_dtoa_r+0x6c4>
 800a81c:	4652      	mov	r2, sl
 800a81e:	465b      	mov	r3, fp
 800a820:	4913      	ldr	r1, [pc, #76]	; (800a870 <_dtoa_r+0x630>)
 800a822:	2000      	movs	r0, #0
 800a824:	f7f5 fd38 	bl	8000298 <__aeabi_dsub>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f6 f95c 	bl	8000aec <__aeabi_dcmplt>
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f af35 	beq.w	800a6a4 <_dtoa_r+0x464>
 800a83a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a83c:	1e6b      	subs	r3, r5, #1
 800a83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d0f8      	beq.n	800a83a <_dtoa_r+0x5fa>
 800a848:	9700      	str	r7, [sp, #0]
 800a84a:	e049      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800a84c:	4b05      	ldr	r3, [pc, #20]	; (800a864 <_dtoa_r+0x624>)
 800a84e:	f7f5 fedb 	bl	8000608 <__aeabi_dmul>
 800a852:	4680      	mov	r8, r0
 800a854:	4689      	mov	r9, r1
 800a856:	e7bd      	b.n	800a7d4 <_dtoa_r+0x594>
 800a858:	0800c208 	.word	0x0800c208
 800a85c:	0800c1e0 	.word	0x0800c1e0
 800a860:	3ff00000 	.word	0x3ff00000
 800a864:	40240000 	.word	0x40240000
 800a868:	401c0000 	.word	0x401c0000
 800a86c:	40140000 	.word	0x40140000
 800a870:	3fe00000 	.word	0x3fe00000
 800a874:	9d01      	ldr	r5, [sp, #4]
 800a876:	4656      	mov	r6, sl
 800a878:	465f      	mov	r7, fp
 800a87a:	4642      	mov	r2, r8
 800a87c:	464b      	mov	r3, r9
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 ffeb 	bl	800085c <__aeabi_ddiv>
 800a886:	f7f6 f96f 	bl	8000b68 <__aeabi_d2iz>
 800a88a:	4682      	mov	sl, r0
 800a88c:	f7f5 fe52 	bl	8000534 <__aeabi_i2d>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	f7f5 feb8 	bl	8000608 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8a4:	f7f5 fcf8 	bl	8000298 <__aeabi_dsub>
 800a8a8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ac:	9e01      	ldr	r6, [sp, #4]
 800a8ae:	9f03      	ldr	r7, [sp, #12]
 800a8b0:	1bae      	subs	r6, r5, r6
 800a8b2:	42b7      	cmp	r7, r6
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	d135      	bne.n	800a926 <_dtoa_r+0x6e6>
 800a8ba:	f7f5 fcef 	bl	800029c <__adddf3>
 800a8be:	4642      	mov	r2, r8
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	f7f6 f92f 	bl	8000b28 <__aeabi_dcmpgt>
 800a8ca:	b9d0      	cbnz	r0, 800a902 <_dtoa_r+0x6c2>
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	464b      	mov	r3, r9
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f6 f900 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d8:	b110      	cbz	r0, 800a8e0 <_dtoa_r+0x6a0>
 800a8da:	f01a 0f01 	tst.w	sl, #1
 800a8de:	d110      	bne.n	800a902 <_dtoa_r+0x6c2>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	ee18 1a10 	vmov	r1, s16
 800a8e6:	f000 fbc5 	bl	800b074 <_Bfree>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9800      	ldr	r0, [sp, #0]
 800a8ee:	702b      	strb	r3, [r5, #0]
 800a8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	6018      	str	r0, [r3, #0]
 800a8f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f43f acf1 	beq.w	800a2e0 <_dtoa_r+0xa0>
 800a8fe:	601d      	str	r5, [r3, #0]
 800a900:	e4ee      	b.n	800a2e0 <_dtoa_r+0xa0>
 800a902:	9f00      	ldr	r7, [sp, #0]
 800a904:	462b      	mov	r3, r5
 800a906:	461d      	mov	r5, r3
 800a908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a90c:	2a39      	cmp	r2, #57	; 0x39
 800a90e:	d106      	bne.n	800a91e <_dtoa_r+0x6de>
 800a910:	9a01      	ldr	r2, [sp, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d1f7      	bne.n	800a906 <_dtoa_r+0x6c6>
 800a916:	9901      	ldr	r1, [sp, #4]
 800a918:	2230      	movs	r2, #48	; 0x30
 800a91a:	3701      	adds	r7, #1
 800a91c:	700a      	strb	r2, [r1, #0]
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	3201      	adds	r2, #1
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e790      	b.n	800a848 <_dtoa_r+0x608>
 800a926:	4ba6      	ldr	r3, [pc, #664]	; (800abc0 <_dtoa_r+0x980>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 fe6d 	bl	8000608 <__aeabi_dmul>
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	f7f6 f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d09d      	beq.n	800a87a <_dtoa_r+0x63a>
 800a93e:	e7cf      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800a940:	9a08      	ldr	r2, [sp, #32]
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 80d7 	beq.w	800aaf6 <_dtoa_r+0x8b6>
 800a948:	9a06      	ldr	r2, [sp, #24]
 800a94a:	2a01      	cmp	r2, #1
 800a94c:	f300 80ba 	bgt.w	800aac4 <_dtoa_r+0x884>
 800a950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a952:	2a00      	cmp	r2, #0
 800a954:	f000 80b2 	beq.w	800aabc <_dtoa_r+0x87c>
 800a958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a95c:	9e07      	ldr	r6, [sp, #28]
 800a95e:	9d04      	ldr	r5, [sp, #16]
 800a960:	9a04      	ldr	r2, [sp, #16]
 800a962:	441a      	add	r2, r3
 800a964:	9204      	str	r2, [sp, #16]
 800a966:	9a05      	ldr	r2, [sp, #20]
 800a968:	2101      	movs	r1, #1
 800a96a:	441a      	add	r2, r3
 800a96c:	4620      	mov	r0, r4
 800a96e:	9205      	str	r2, [sp, #20]
 800a970:	f000 fc38 	bl	800b1e4 <__i2b>
 800a974:	4607      	mov	r7, r0
 800a976:	2d00      	cmp	r5, #0
 800a978:	dd0c      	ble.n	800a994 <_dtoa_r+0x754>
 800a97a:	9b05      	ldr	r3, [sp, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd09      	ble.n	800a994 <_dtoa_r+0x754>
 800a980:	42ab      	cmp	r3, r5
 800a982:	9a04      	ldr	r2, [sp, #16]
 800a984:	bfa8      	it	ge
 800a986:	462b      	movge	r3, r5
 800a988:	1ad2      	subs	r2, r2, r3
 800a98a:	9204      	str	r2, [sp, #16]
 800a98c:	9a05      	ldr	r2, [sp, #20]
 800a98e:	1aed      	subs	r5, r5, r3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	9b07      	ldr	r3, [sp, #28]
 800a996:	b31b      	cbz	r3, 800a9e0 <_dtoa_r+0x7a0>
 800a998:	9b08      	ldr	r3, [sp, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80af 	beq.w	800aafe <_dtoa_r+0x8be>
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	dd13      	ble.n	800a9cc <_dtoa_r+0x78c>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4632      	mov	r2, r6
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fcdb 	bl	800b364 <__pow5mult>
 800a9ae:	ee18 2a10 	vmov	r2, s16
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fc2a 	bl	800b210 <__multiply>
 800a9bc:	ee18 1a10 	vmov	r1, s16
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fb56 	bl	800b074 <_Bfree>
 800a9c8:	ee08 8a10 	vmov	s16, r8
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	1b9a      	subs	r2, r3, r6
 800a9d0:	d006      	beq.n	800a9e0 <_dtoa_r+0x7a0>
 800a9d2:	ee18 1a10 	vmov	r1, s16
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fcc4 	bl	800b364 <__pow5mult>
 800a9dc:	ee08 0a10 	vmov	s16, r0
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 fbfe 	bl	800b1e4 <__i2b>
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	f340 8088 	ble.w	800ab02 <_dtoa_r+0x8c2>
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 fcb4 	bl	800b364 <__pow5mult>
 800a9fc:	9b06      	ldr	r3, [sp, #24]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	4606      	mov	r6, r0
 800aa02:	f340 8081 	ble.w	800ab08 <_dtoa_r+0x8c8>
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	6933      	ldr	r3, [r6, #16]
 800aa0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa10:	6918      	ldr	r0, [r3, #16]
 800aa12:	f000 fb97 	bl	800b144 <__hi0bits>
 800aa16:	f1c0 0020 	rsb	r0, r0, #32
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	4418      	add	r0, r3
 800aa1e:	f010 001f 	ands.w	r0, r0, #31
 800aa22:	f000 8092 	beq.w	800ab4a <_dtoa_r+0x90a>
 800aa26:	f1c0 0320 	rsb	r3, r0, #32
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	f340 808a 	ble.w	800ab44 <_dtoa_r+0x904>
 800aa30:	f1c0 001c 	rsb	r0, r0, #28
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4403      	add	r3, r0
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	4403      	add	r3, r0
 800aa3e:	4405      	add	r5, r0
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd07      	ble.n	800aa58 <_dtoa_r+0x818>
 800aa48:	ee18 1a10 	vmov	r1, s16
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fce2 	bl	800b418 <__lshift>
 800aa54:	ee08 0a10 	vmov	s16, r0
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd05      	ble.n	800aa6a <_dtoa_r+0x82a>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	461a      	mov	r2, r3
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fcd8 	bl	800b418 <__lshift>
 800aa68:	4606      	mov	r6, r0
 800aa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d06e      	beq.n	800ab4e <_dtoa_r+0x90e>
 800aa70:	ee18 0a10 	vmov	r0, s16
 800aa74:	4631      	mov	r1, r6
 800aa76:	f000 fd3f 	bl	800b4f8 <__mcmp>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	da67      	bge.n	800ab4e <_dtoa_r+0x90e>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	ee18 1a10 	vmov	r1, s16
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	220a      	movs	r2, #10
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fb13 	bl	800b0b8 <__multadd>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	ee08 0a10 	vmov	s16, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 81b1 	beq.w	800ae00 <_dtoa_r+0xbc0>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	220a      	movs	r2, #10
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fb07 	bl	800b0b8 <__multadd>
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	4607      	mov	r7, r0
 800aab0:	f300 808e 	bgt.w	800abd0 <_dtoa_r+0x990>
 800aab4:	9b06      	ldr	r3, [sp, #24]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	dc51      	bgt.n	800ab5e <_dtoa_r+0x91e>
 800aaba:	e089      	b.n	800abd0 <_dtoa_r+0x990>
 800aabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aabe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aac2:	e74b      	b.n	800a95c <_dtoa_r+0x71c>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1e5e      	subs	r6, r3, #1
 800aac8:	9b07      	ldr	r3, [sp, #28]
 800aaca:	42b3      	cmp	r3, r6
 800aacc:	bfbf      	itttt	lt
 800aace:	9b07      	ldrlt	r3, [sp, #28]
 800aad0:	9607      	strlt	r6, [sp, #28]
 800aad2:	1af2      	sublt	r2, r6, r3
 800aad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aad6:	bfb6      	itet	lt
 800aad8:	189b      	addlt	r3, r3, r2
 800aada:	1b9e      	subge	r6, r3, r6
 800aadc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	bfb8      	it	lt
 800aae2:	2600      	movlt	r6, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bfb7      	itett	lt
 800aae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aaec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aaf0:	1a9d      	sublt	r5, r3, r2
 800aaf2:	2300      	movlt	r3, #0
 800aaf4:	e734      	b.n	800a960 <_dtoa_r+0x720>
 800aaf6:	9e07      	ldr	r6, [sp, #28]
 800aaf8:	9d04      	ldr	r5, [sp, #16]
 800aafa:	9f08      	ldr	r7, [sp, #32]
 800aafc:	e73b      	b.n	800a976 <_dtoa_r+0x736>
 800aafe:	9a07      	ldr	r2, [sp, #28]
 800ab00:	e767      	b.n	800a9d2 <_dtoa_r+0x792>
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	dc18      	bgt.n	800ab3a <_dtoa_r+0x8fa>
 800ab08:	f1ba 0f00 	cmp.w	sl, #0
 800ab0c:	d115      	bne.n	800ab3a <_dtoa_r+0x8fa>
 800ab0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab12:	b993      	cbnz	r3, 800ab3a <_dtoa_r+0x8fa>
 800ab14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab18:	0d1b      	lsrs	r3, r3, #20
 800ab1a:	051b      	lsls	r3, r3, #20
 800ab1c:	b183      	cbz	r3, 800ab40 <_dtoa_r+0x900>
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	3301      	adds	r3, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	3301      	adds	r3, #1
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	f04f 0801 	mov.w	r8, #1
 800ab2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f47f af6a 	bne.w	800aa0a <_dtoa_r+0x7ca>
 800ab36:	2001      	movs	r0, #1
 800ab38:	e76f      	b.n	800aa1a <_dtoa_r+0x7da>
 800ab3a:	f04f 0800 	mov.w	r8, #0
 800ab3e:	e7f6      	b.n	800ab2e <_dtoa_r+0x8ee>
 800ab40:	4698      	mov	r8, r3
 800ab42:	e7f4      	b.n	800ab2e <_dtoa_r+0x8ee>
 800ab44:	f43f af7d 	beq.w	800aa42 <_dtoa_r+0x802>
 800ab48:	4618      	mov	r0, r3
 800ab4a:	301c      	adds	r0, #28
 800ab4c:	e772      	b.n	800aa34 <_dtoa_r+0x7f4>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc37      	bgt.n	800abc4 <_dtoa_r+0x984>
 800ab54:	9b06      	ldr	r3, [sp, #24]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	dd34      	ble.n	800abc4 <_dtoa_r+0x984>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	9302      	str	r3, [sp, #8]
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	b96b      	cbnz	r3, 800ab7e <_dtoa_r+0x93e>
 800ab62:	4631      	mov	r1, r6
 800ab64:	2205      	movs	r2, #5
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 faa6 	bl	800b0b8 <__multadd>
 800ab6c:	4601      	mov	r1, r0
 800ab6e:	4606      	mov	r6, r0
 800ab70:	ee18 0a10 	vmov	r0, s16
 800ab74:	f000 fcc0 	bl	800b4f8 <__mcmp>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	f73f adbb 	bgt.w	800a6f4 <_dtoa_r+0x4b4>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	9d01      	ldr	r5, [sp, #4]
 800ab82:	43db      	mvns	r3, r3
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	f04f 0800 	mov.w	r8, #0
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 fa71 	bl	800b074 <_Bfree>
 800ab92:	2f00      	cmp	r7, #0
 800ab94:	f43f aea4 	beq.w	800a8e0 <_dtoa_r+0x6a0>
 800ab98:	f1b8 0f00 	cmp.w	r8, #0
 800ab9c:	d005      	beq.n	800abaa <_dtoa_r+0x96a>
 800ab9e:	45b8      	cmp	r8, r7
 800aba0:	d003      	beq.n	800abaa <_dtoa_r+0x96a>
 800aba2:	4641      	mov	r1, r8
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fa65 	bl	800b074 <_Bfree>
 800abaa:	4639      	mov	r1, r7
 800abac:	4620      	mov	r0, r4
 800abae:	f000 fa61 	bl	800b074 <_Bfree>
 800abb2:	e695      	b.n	800a8e0 <_dtoa_r+0x6a0>
 800abb4:	2600      	movs	r6, #0
 800abb6:	4637      	mov	r7, r6
 800abb8:	e7e1      	b.n	800ab7e <_dtoa_r+0x93e>
 800abba:	9700      	str	r7, [sp, #0]
 800abbc:	4637      	mov	r7, r6
 800abbe:	e599      	b.n	800a6f4 <_dtoa_r+0x4b4>
 800abc0:	40240000 	.word	0x40240000
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 80ca 	beq.w	800ad60 <_dtoa_r+0xb20>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	dd05      	ble.n	800abe0 <_dtoa_r+0x9a0>
 800abd4:	4639      	mov	r1, r7
 800abd6:	462a      	mov	r2, r5
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fc1d 	bl	800b418 <__lshift>
 800abde:	4607      	mov	r7, r0
 800abe0:	f1b8 0f00 	cmp.w	r8, #0
 800abe4:	d05b      	beq.n	800ac9e <_dtoa_r+0xa5e>
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fa03 	bl	800aff4 <_Balloc>
 800abee:	4605      	mov	r5, r0
 800abf0:	b928      	cbnz	r0, 800abfe <_dtoa_r+0x9be>
 800abf2:	4b87      	ldr	r3, [pc, #540]	; (800ae10 <_dtoa_r+0xbd0>)
 800abf4:	4602      	mov	r2, r0
 800abf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abfa:	f7ff bb3b 	b.w	800a274 <_dtoa_r+0x34>
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	3202      	adds	r2, #2
 800ac02:	0092      	lsls	r2, r2, #2
 800ac04:	f107 010c 	add.w	r1, r7, #12
 800ac08:	300c      	adds	r0, #12
 800ac0a:	f7fe fc96 	bl	800953a <memcpy>
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4629      	mov	r1, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fc00 	bl	800b418 <__lshift>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	f103 0901 	add.w	r9, r3, #1
 800ac1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	f00a 0301 	and.w	r3, sl, #1
 800ac2a:	46b8      	mov	r8, r7
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	4607      	mov	r7, r0
 800ac30:	4631      	mov	r1, r6
 800ac32:	ee18 0a10 	vmov	r0, s16
 800ac36:	f7ff fa75 	bl	800a124 <quorem>
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	9002      	str	r0, [sp, #8]
 800ac3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	f000 fc57 	bl	800b4f8 <__mcmp>
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	9003      	str	r0, [sp, #12]
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fc6d 	bl	800b530 <__mdiff>
 800ac56:	68c2      	ldr	r2, [r0, #12]
 800ac58:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	bb02      	cbnz	r2, 800aca2 <_dtoa_r+0xa62>
 800ac60:	4601      	mov	r1, r0
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	f000 fc47 	bl	800b4f8 <__mcmp>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4620      	mov	r0, r4
 800ac70:	9207      	str	r2, [sp, #28]
 800ac72:	f000 f9ff 	bl	800b074 <_Bfree>
 800ac76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac7a:	ea43 0102 	orr.w	r1, r3, r2
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	430b      	orrs	r3, r1
 800ac82:	464d      	mov	r5, r9
 800ac84:	d10f      	bne.n	800aca6 <_dtoa_r+0xa66>
 800ac86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac8a:	d02a      	beq.n	800ace2 <_dtoa_r+0xaa2>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dd02      	ble.n	800ac98 <_dtoa_r+0xa58>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac98:	f88b a000 	strb.w	sl, [fp]
 800ac9c:	e775      	b.n	800ab8a <_dtoa_r+0x94a>
 800ac9e:	4638      	mov	r0, r7
 800aca0:	e7ba      	b.n	800ac18 <_dtoa_r+0x9d8>
 800aca2:	2201      	movs	r2, #1
 800aca4:	e7e2      	b.n	800ac6c <_dtoa_r+0xa2c>
 800aca6:	9b03      	ldr	r3, [sp, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	db04      	blt.n	800acb6 <_dtoa_r+0xa76>
 800acac:	9906      	ldr	r1, [sp, #24]
 800acae:	430b      	orrs	r3, r1
 800acb0:	9904      	ldr	r1, [sp, #16]
 800acb2:	430b      	orrs	r3, r1
 800acb4:	d122      	bne.n	800acfc <_dtoa_r+0xabc>
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	ddee      	ble.n	800ac98 <_dtoa_r+0xa58>
 800acba:	ee18 1a10 	vmov	r1, s16
 800acbe:	2201      	movs	r2, #1
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fba9 	bl	800b418 <__lshift>
 800acc6:	4631      	mov	r1, r6
 800acc8:	ee08 0a10 	vmov	s16, r0
 800accc:	f000 fc14 	bl	800b4f8 <__mcmp>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	dc03      	bgt.n	800acdc <_dtoa_r+0xa9c>
 800acd4:	d1e0      	bne.n	800ac98 <_dtoa_r+0xa58>
 800acd6:	f01a 0f01 	tst.w	sl, #1
 800acda:	d0dd      	beq.n	800ac98 <_dtoa_r+0xa58>
 800acdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ace0:	d1d7      	bne.n	800ac92 <_dtoa_r+0xa52>
 800ace2:	2339      	movs	r3, #57	; 0x39
 800ace4:	f88b 3000 	strb.w	r3, [fp]
 800ace8:	462b      	mov	r3, r5
 800acea:	461d      	mov	r5, r3
 800acec:	3b01      	subs	r3, #1
 800acee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acf2:	2a39      	cmp	r2, #57	; 0x39
 800acf4:	d071      	beq.n	800adda <_dtoa_r+0xb9a>
 800acf6:	3201      	adds	r2, #1
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	e746      	b.n	800ab8a <_dtoa_r+0x94a>
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	dd07      	ble.n	800ad10 <_dtoa_r+0xad0>
 800ad00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad04:	d0ed      	beq.n	800ace2 <_dtoa_r+0xaa2>
 800ad06:	f10a 0301 	add.w	r3, sl, #1
 800ad0a:	f88b 3000 	strb.w	r3, [fp]
 800ad0e:	e73c      	b.n	800ab8a <_dtoa_r+0x94a>
 800ad10:	9b05      	ldr	r3, [sp, #20]
 800ad12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad16:	4599      	cmp	r9, r3
 800ad18:	d047      	beq.n	800adaa <_dtoa_r+0xb6a>
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f9c8 	bl	800b0b8 <__multadd>
 800ad28:	45b8      	cmp	r8, r7
 800ad2a:	ee08 0a10 	vmov	s16, r0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	f04f 020a 	mov.w	r2, #10
 800ad36:	4641      	mov	r1, r8
 800ad38:	4620      	mov	r0, r4
 800ad3a:	d106      	bne.n	800ad4a <_dtoa_r+0xb0a>
 800ad3c:	f000 f9bc 	bl	800b0b8 <__multadd>
 800ad40:	4680      	mov	r8, r0
 800ad42:	4607      	mov	r7, r0
 800ad44:	f109 0901 	add.w	r9, r9, #1
 800ad48:	e772      	b.n	800ac30 <_dtoa_r+0x9f0>
 800ad4a:	f000 f9b5 	bl	800b0b8 <__multadd>
 800ad4e:	4639      	mov	r1, r7
 800ad50:	4680      	mov	r8, r0
 800ad52:	2300      	movs	r3, #0
 800ad54:	220a      	movs	r2, #10
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f9ae 	bl	800b0b8 <__multadd>
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	e7f1      	b.n	800ad44 <_dtoa_r+0xb04>
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	9302      	str	r3, [sp, #8]
 800ad64:	9d01      	ldr	r5, [sp, #4]
 800ad66:	ee18 0a10 	vmov	r0, s16
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	f7ff f9da 	bl	800a124 <quorem>
 800ad70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	f805 ab01 	strb.w	sl, [r5], #1
 800ad7a:	1aea      	subs	r2, r5, r3
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	dd09      	ble.n	800ad96 <_dtoa_r+0xb56>
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2300      	movs	r3, #0
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f994 	bl	800b0b8 <__multadd>
 800ad90:	ee08 0a10 	vmov	s16, r0
 800ad94:	e7e7      	b.n	800ad66 <_dtoa_r+0xb26>
 800ad96:	9b02      	ldr	r3, [sp, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfc8      	it	gt
 800ad9c:	461d      	movgt	r5, r3
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	bfd8      	it	le
 800ada2:	2501      	movle	r5, #1
 800ada4:	441d      	add	r5, r3
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	ee18 1a10 	vmov	r1, s16
 800adae:	2201      	movs	r2, #1
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fb31 	bl	800b418 <__lshift>
 800adb6:	4631      	mov	r1, r6
 800adb8:	ee08 0a10 	vmov	s16, r0
 800adbc:	f000 fb9c 	bl	800b4f8 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dc91      	bgt.n	800ace8 <_dtoa_r+0xaa8>
 800adc4:	d102      	bne.n	800adcc <_dtoa_r+0xb8c>
 800adc6:	f01a 0f01 	tst.w	sl, #1
 800adca:	d18d      	bne.n	800ace8 <_dtoa_r+0xaa8>
 800adcc:	462b      	mov	r3, r5
 800adce:	461d      	mov	r5, r3
 800add0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add4:	2a30      	cmp	r2, #48	; 0x30
 800add6:	d0fa      	beq.n	800adce <_dtoa_r+0xb8e>
 800add8:	e6d7      	b.n	800ab8a <_dtoa_r+0x94a>
 800adda:	9a01      	ldr	r2, [sp, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d184      	bne.n	800acea <_dtoa_r+0xaaa>
 800ade0:	9b00      	ldr	r3, [sp, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2331      	movs	r3, #49	; 0x31
 800ade8:	7013      	strb	r3, [r2, #0]
 800adea:	e6ce      	b.n	800ab8a <_dtoa_r+0x94a>
 800adec:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <_dtoa_r+0xbd4>)
 800adee:	f7ff ba95 	b.w	800a31c <_dtoa_r+0xdc>
 800adf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f47f aa6e 	bne.w	800a2d6 <_dtoa_r+0x96>
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <_dtoa_r+0xbd8>)
 800adfc:	f7ff ba8e 	b.w	800a31c <_dtoa_r+0xdc>
 800ae00:	9b02      	ldr	r3, [sp, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dcae      	bgt.n	800ad64 <_dtoa_r+0xb24>
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	f73f aea8 	bgt.w	800ab5e <_dtoa_r+0x91e>
 800ae0e:	e7a9      	b.n	800ad64 <_dtoa_r+0xb24>
 800ae10:	0800c16f 	.word	0x0800c16f
 800ae14:	0800c0cc 	.word	0x0800c0cc
 800ae18:	0800c0f0 	.word	0x0800c0f0

0800ae1c <__sflush_r>:
 800ae1c:	898a      	ldrh	r2, [r1, #12]
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	4605      	mov	r5, r0
 800ae24:	0710      	lsls	r0, r2, #28
 800ae26:	460c      	mov	r4, r1
 800ae28:	d458      	bmi.n	800aedc <__sflush_r+0xc0>
 800ae2a:	684b      	ldr	r3, [r1, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dc05      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dc02      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	d0f9      	beq.n	800ae36 <__sflush_r+0x1a>
 800ae42:	2300      	movs	r3, #0
 800ae44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae48:	682f      	ldr	r7, [r5, #0]
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	d032      	beq.n	800aeb4 <__sflush_r+0x98>
 800ae4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	075a      	lsls	r2, r3, #29
 800ae54:	d505      	bpl.n	800ae62 <__sflush_r+0x46>
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	1ac0      	subs	r0, r0, r3
 800ae5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5c:	b10b      	cbz	r3, 800ae62 <__sflush_r+0x46>
 800ae5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	2300      	movs	r3, #0
 800ae64:	4602      	mov	r2, r0
 800ae66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae68:	6a21      	ldr	r1, [r4, #32]
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b0      	blx	r6
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	d106      	bne.n	800ae82 <__sflush_r+0x66>
 800ae74:	6829      	ldr	r1, [r5, #0]
 800ae76:	291d      	cmp	r1, #29
 800ae78:	d82c      	bhi.n	800aed4 <__sflush_r+0xb8>
 800ae7a:	4a2a      	ldr	r2, [pc, #168]	; (800af24 <__sflush_r+0x108>)
 800ae7c:	40ca      	lsrs	r2, r1
 800ae7e:	07d6      	lsls	r6, r2, #31
 800ae80:	d528      	bpl.n	800aed4 <__sflush_r+0xb8>
 800ae82:	2200      	movs	r2, #0
 800ae84:	6062      	str	r2, [r4, #4]
 800ae86:	04d9      	lsls	r1, r3, #19
 800ae88:	6922      	ldr	r2, [r4, #16]
 800ae8a:	6022      	str	r2, [r4, #0]
 800ae8c:	d504      	bpl.n	800ae98 <__sflush_r+0x7c>
 800ae8e:	1c42      	adds	r2, r0, #1
 800ae90:	d101      	bne.n	800ae96 <__sflush_r+0x7a>
 800ae92:	682b      	ldr	r3, [r5, #0]
 800ae94:	b903      	cbnz	r3, 800ae98 <__sflush_r+0x7c>
 800ae96:	6560      	str	r0, [r4, #84]	; 0x54
 800ae98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae9a:	602f      	str	r7, [r5, #0]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d0ca      	beq.n	800ae36 <__sflush_r+0x1a>
 800aea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d002      	beq.n	800aeae <__sflush_r+0x92>
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 fc3d 	bl	800b728 <_free_r>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	6360      	str	r0, [r4, #52]	; 0x34
 800aeb2:	e7c1      	b.n	800ae38 <__sflush_r+0x1c>
 800aeb4:	6a21      	ldr	r1, [r4, #32]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b0      	blx	r6
 800aebc:	1c41      	adds	r1, r0, #1
 800aebe:	d1c7      	bne.n	800ae50 <__sflush_r+0x34>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c4      	beq.n	800ae50 <__sflush_r+0x34>
 800aec6:	2b1d      	cmp	r3, #29
 800aec8:	d001      	beq.n	800aece <__sflush_r+0xb2>
 800aeca:	2b16      	cmp	r3, #22
 800aecc:	d101      	bne.n	800aed2 <__sflush_r+0xb6>
 800aece:	602f      	str	r7, [r5, #0]
 800aed0:	e7b1      	b.n	800ae36 <__sflush_r+0x1a>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	e7ad      	b.n	800ae38 <__sflush_r+0x1c>
 800aedc:	690f      	ldr	r7, [r1, #16]
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d0a9      	beq.n	800ae36 <__sflush_r+0x1a>
 800aee2:	0793      	lsls	r3, r2, #30
 800aee4:	680e      	ldr	r6, [r1, #0]
 800aee6:	bf08      	it	eq
 800aee8:	694b      	ldreq	r3, [r1, #20]
 800aeea:	600f      	str	r7, [r1, #0]
 800aeec:	bf18      	it	ne
 800aeee:	2300      	movne	r3, #0
 800aef0:	eba6 0807 	sub.w	r8, r6, r7
 800aef4:	608b      	str	r3, [r1, #8]
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	dd9c      	ble.n	800ae36 <__sflush_r+0x1a>
 800aefc:	6a21      	ldr	r1, [r4, #32]
 800aefe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af00:	4643      	mov	r3, r8
 800af02:	463a      	mov	r2, r7
 800af04:	4628      	mov	r0, r5
 800af06:	47b0      	blx	r6
 800af08:	2800      	cmp	r0, #0
 800af0a:	dc06      	bgt.n	800af1a <__sflush_r+0xfe>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	e78e      	b.n	800ae38 <__sflush_r+0x1c>
 800af1a:	4407      	add	r7, r0
 800af1c:	eba8 0800 	sub.w	r8, r8, r0
 800af20:	e7e9      	b.n	800aef6 <__sflush_r+0xda>
 800af22:	bf00      	nop
 800af24:	20400001 	.word	0x20400001

0800af28 <_fflush_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	690b      	ldr	r3, [r1, #16]
 800af2c:	4605      	mov	r5, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	b913      	cbnz	r3, 800af38 <_fflush_r+0x10>
 800af32:	2500      	movs	r5, #0
 800af34:	4628      	mov	r0, r5
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	b118      	cbz	r0, 800af42 <_fflush_r+0x1a>
 800af3a:	6983      	ldr	r3, [r0, #24]
 800af3c:	b90b      	cbnz	r3, 800af42 <_fflush_r+0x1a>
 800af3e:	f7fe fa37 	bl	80093b0 <__sinit>
 800af42:	4b14      	ldr	r3, [pc, #80]	; (800af94 <_fflush_r+0x6c>)
 800af44:	429c      	cmp	r4, r3
 800af46:	d11b      	bne.n	800af80 <_fflush_r+0x58>
 800af48:	686c      	ldr	r4, [r5, #4]
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0ef      	beq.n	800af32 <_fflush_r+0xa>
 800af52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af54:	07d0      	lsls	r0, r2, #31
 800af56:	d404      	bmi.n	800af62 <_fflush_r+0x3a>
 800af58:	0599      	lsls	r1, r3, #22
 800af5a:	d402      	bmi.n	800af62 <_fflush_r+0x3a>
 800af5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af5e:	f7fe faea 	bl	8009536 <__retarget_lock_acquire_recursive>
 800af62:	4628      	mov	r0, r5
 800af64:	4621      	mov	r1, r4
 800af66:	f7ff ff59 	bl	800ae1c <__sflush_r>
 800af6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	4605      	mov	r5, r0
 800af70:	d4e0      	bmi.n	800af34 <_fflush_r+0xc>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	059b      	lsls	r3, r3, #22
 800af76:	d4dd      	bmi.n	800af34 <_fflush_r+0xc>
 800af78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af7a:	f7fe fadd 	bl	8009538 <__retarget_lock_release_recursive>
 800af7e:	e7d9      	b.n	800af34 <_fflush_r+0xc>
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <_fflush_r+0x70>)
 800af82:	429c      	cmp	r4, r3
 800af84:	d101      	bne.n	800af8a <_fflush_r+0x62>
 800af86:	68ac      	ldr	r4, [r5, #8]
 800af88:	e7df      	b.n	800af4a <_fflush_r+0x22>
 800af8a:	4b04      	ldr	r3, [pc, #16]	; (800af9c <_fflush_r+0x74>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	bf08      	it	eq
 800af90:	68ec      	ldreq	r4, [r5, #12]
 800af92:	e7da      	b.n	800af4a <_fflush_r+0x22>
 800af94:	0800c078 	.word	0x0800c078
 800af98:	0800c098 	.word	0x0800c098
 800af9c:	0800c058 	.word	0x0800c058

0800afa0 <_localeconv_r>:
 800afa0:	4800      	ldr	r0, [pc, #0]	; (800afa4 <_localeconv_r+0x4>)
 800afa2:	4770      	bx	lr
 800afa4:	20000164 	.word	0x20000164

0800afa8 <_lseek_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d07      	ldr	r5, [pc, #28]	; (800afc8 <_lseek_r+0x20>)
 800afac:	4604      	mov	r4, r0
 800afae:	4608      	mov	r0, r1
 800afb0:	4611      	mov	r1, r2
 800afb2:	2200      	movs	r2, #0
 800afb4:	602a      	str	r2, [r5, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	f7f8 fb04 	bl	80035c4 <_lseek>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_lseek_r+0x1e>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_lseek_r+0x1e>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	20004d80 	.word	0x20004d80

0800afcc <malloc>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <malloc+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f7fe bae9 	b.w	80095a8 <_malloc_r>
 800afd6:	bf00      	nop
 800afd8:	20000010 	.word	0x20000010

0800afdc <__malloc_lock>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__malloc_lock+0x8>)
 800afde:	f7fe baaa 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800afe2:	bf00      	nop
 800afe4:	20004d74 	.word	0x20004d74

0800afe8 <__malloc_unlock>:
 800afe8:	4801      	ldr	r0, [pc, #4]	; (800aff0 <__malloc_unlock+0x8>)
 800afea:	f7fe baa5 	b.w	8009538 <__retarget_lock_release_recursive>
 800afee:	bf00      	nop
 800aff0:	20004d74 	.word	0x20004d74

0800aff4 <_Balloc>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aff8:	4604      	mov	r4, r0
 800affa:	460d      	mov	r5, r1
 800affc:	b976      	cbnz	r6, 800b01c <_Balloc+0x28>
 800affe:	2010      	movs	r0, #16
 800b000:	f7ff ffe4 	bl	800afcc <malloc>
 800b004:	4602      	mov	r2, r0
 800b006:	6260      	str	r0, [r4, #36]	; 0x24
 800b008:	b920      	cbnz	r0, 800b014 <_Balloc+0x20>
 800b00a:	4b18      	ldr	r3, [pc, #96]	; (800b06c <_Balloc+0x78>)
 800b00c:	4818      	ldr	r0, [pc, #96]	; (800b070 <_Balloc+0x7c>)
 800b00e:	2166      	movs	r1, #102	; 0x66
 800b010:	f000 fbe8 	bl	800b7e4 <__assert_func>
 800b014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b018:	6006      	str	r6, [r0, #0]
 800b01a:	60c6      	str	r6, [r0, #12]
 800b01c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b01e:	68f3      	ldr	r3, [r6, #12]
 800b020:	b183      	cbz	r3, 800b044 <_Balloc+0x50>
 800b022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b02a:	b9b8      	cbnz	r0, 800b05c <_Balloc+0x68>
 800b02c:	2101      	movs	r1, #1
 800b02e:	fa01 f605 	lsl.w	r6, r1, r5
 800b032:	1d72      	adds	r2, r6, #5
 800b034:	0092      	lsls	r2, r2, #2
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fb60 	bl	800b6fc <_calloc_r>
 800b03c:	b160      	cbz	r0, 800b058 <_Balloc+0x64>
 800b03e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b042:	e00e      	b.n	800b062 <_Balloc+0x6e>
 800b044:	2221      	movs	r2, #33	; 0x21
 800b046:	2104      	movs	r1, #4
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fb57 	bl	800b6fc <_calloc_r>
 800b04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b050:	60f0      	str	r0, [r6, #12]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e4      	bne.n	800b022 <_Balloc+0x2e>
 800b058:	2000      	movs	r0, #0
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	6802      	ldr	r2, [r0, #0]
 800b05e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b062:	2300      	movs	r3, #0
 800b064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b068:	e7f7      	b.n	800b05a <_Balloc+0x66>
 800b06a:	bf00      	nop
 800b06c:	0800c0fd 	.word	0x0800c0fd
 800b070:	0800c180 	.word	0x0800c180

0800b074 <_Bfree>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b078:	4605      	mov	r5, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	b976      	cbnz	r6, 800b09c <_Bfree+0x28>
 800b07e:	2010      	movs	r0, #16
 800b080:	f7ff ffa4 	bl	800afcc <malloc>
 800b084:	4602      	mov	r2, r0
 800b086:	6268      	str	r0, [r5, #36]	; 0x24
 800b088:	b920      	cbnz	r0, 800b094 <_Bfree+0x20>
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <_Bfree+0x3c>)
 800b08c:	4809      	ldr	r0, [pc, #36]	; (800b0b4 <_Bfree+0x40>)
 800b08e:	218a      	movs	r1, #138	; 0x8a
 800b090:	f000 fba8 	bl	800b7e4 <__assert_func>
 800b094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b098:	6006      	str	r6, [r0, #0]
 800b09a:	60c6      	str	r6, [r0, #12]
 800b09c:	b13c      	cbz	r4, 800b0ae <_Bfree+0x3a>
 800b09e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0a0:	6862      	ldr	r2, [r4, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0a8:	6021      	str	r1, [r4, #0]
 800b0aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	0800c0fd 	.word	0x0800c0fd
 800b0b4:	0800c180 	.word	0x0800c180

0800b0b8 <__multadd>:
 800b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0bc:	690d      	ldr	r5, [r1, #16]
 800b0be:	4607      	mov	r7, r0
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	461e      	mov	r6, r3
 800b0c4:	f101 0c14 	add.w	ip, r1, #20
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ce:	b299      	uxth	r1, r3
 800b0d0:	fb02 6101 	mla	r1, r2, r1, r6
 800b0d4:	0c1e      	lsrs	r6, r3, #16
 800b0d6:	0c0b      	lsrs	r3, r1, #16
 800b0d8:	fb02 3306 	mla	r3, r2, r6, r3
 800b0dc:	b289      	uxth	r1, r1
 800b0de:	3001      	adds	r0, #1
 800b0e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0e4:	4285      	cmp	r5, r0
 800b0e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b0ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0ee:	dcec      	bgt.n	800b0ca <__multadd+0x12>
 800b0f0:	b30e      	cbz	r6, 800b136 <__multadd+0x7e>
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	42ab      	cmp	r3, r5
 800b0f6:	dc19      	bgt.n	800b12c <__multadd+0x74>
 800b0f8:	6861      	ldr	r1, [r4, #4]
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	3101      	adds	r1, #1
 800b0fe:	f7ff ff79 	bl	800aff4 <_Balloc>
 800b102:	4680      	mov	r8, r0
 800b104:	b928      	cbnz	r0, 800b112 <__multadd+0x5a>
 800b106:	4602      	mov	r2, r0
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <__multadd+0x84>)
 800b10a:	480d      	ldr	r0, [pc, #52]	; (800b140 <__multadd+0x88>)
 800b10c:	21b5      	movs	r1, #181	; 0xb5
 800b10e:	f000 fb69 	bl	800b7e4 <__assert_func>
 800b112:	6922      	ldr	r2, [r4, #16]
 800b114:	3202      	adds	r2, #2
 800b116:	f104 010c 	add.w	r1, r4, #12
 800b11a:	0092      	lsls	r2, r2, #2
 800b11c:	300c      	adds	r0, #12
 800b11e:	f7fe fa0c 	bl	800953a <memcpy>
 800b122:	4621      	mov	r1, r4
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff ffa5 	bl	800b074 <_Bfree>
 800b12a:	4644      	mov	r4, r8
 800b12c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b130:	3501      	adds	r5, #1
 800b132:	615e      	str	r6, [r3, #20]
 800b134:	6125      	str	r5, [r4, #16]
 800b136:	4620      	mov	r0, r4
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	0800c16f 	.word	0x0800c16f
 800b140:	0800c180 	.word	0x0800c180

0800b144 <__hi0bits>:
 800b144:	0c03      	lsrs	r3, r0, #16
 800b146:	041b      	lsls	r3, r3, #16
 800b148:	b9d3      	cbnz	r3, 800b180 <__hi0bits+0x3c>
 800b14a:	0400      	lsls	r0, r0, #16
 800b14c:	2310      	movs	r3, #16
 800b14e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b152:	bf04      	itt	eq
 800b154:	0200      	lsleq	r0, r0, #8
 800b156:	3308      	addeq	r3, #8
 800b158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b15c:	bf04      	itt	eq
 800b15e:	0100      	lsleq	r0, r0, #4
 800b160:	3304      	addeq	r3, #4
 800b162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b166:	bf04      	itt	eq
 800b168:	0080      	lsleq	r0, r0, #2
 800b16a:	3302      	addeq	r3, #2
 800b16c:	2800      	cmp	r0, #0
 800b16e:	db05      	blt.n	800b17c <__hi0bits+0x38>
 800b170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b174:	f103 0301 	add.w	r3, r3, #1
 800b178:	bf08      	it	eq
 800b17a:	2320      	moveq	r3, #32
 800b17c:	4618      	mov	r0, r3
 800b17e:	4770      	bx	lr
 800b180:	2300      	movs	r3, #0
 800b182:	e7e4      	b.n	800b14e <__hi0bits+0xa>

0800b184 <__lo0bits>:
 800b184:	6803      	ldr	r3, [r0, #0]
 800b186:	f013 0207 	ands.w	r2, r3, #7
 800b18a:	4601      	mov	r1, r0
 800b18c:	d00b      	beq.n	800b1a6 <__lo0bits+0x22>
 800b18e:	07da      	lsls	r2, r3, #31
 800b190:	d423      	bmi.n	800b1da <__lo0bits+0x56>
 800b192:	0798      	lsls	r0, r3, #30
 800b194:	bf49      	itett	mi
 800b196:	085b      	lsrmi	r3, r3, #1
 800b198:	089b      	lsrpl	r3, r3, #2
 800b19a:	2001      	movmi	r0, #1
 800b19c:	600b      	strmi	r3, [r1, #0]
 800b19e:	bf5c      	itt	pl
 800b1a0:	600b      	strpl	r3, [r1, #0]
 800b1a2:	2002      	movpl	r0, #2
 800b1a4:	4770      	bx	lr
 800b1a6:	b298      	uxth	r0, r3
 800b1a8:	b9a8      	cbnz	r0, 800b1d6 <__lo0bits+0x52>
 800b1aa:	0c1b      	lsrs	r3, r3, #16
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	b90a      	cbnz	r2, 800b1b6 <__lo0bits+0x32>
 800b1b2:	3008      	adds	r0, #8
 800b1b4:	0a1b      	lsrs	r3, r3, #8
 800b1b6:	071a      	lsls	r2, r3, #28
 800b1b8:	bf04      	itt	eq
 800b1ba:	091b      	lsreq	r3, r3, #4
 800b1bc:	3004      	addeq	r0, #4
 800b1be:	079a      	lsls	r2, r3, #30
 800b1c0:	bf04      	itt	eq
 800b1c2:	089b      	lsreq	r3, r3, #2
 800b1c4:	3002      	addeq	r0, #2
 800b1c6:	07da      	lsls	r2, r3, #31
 800b1c8:	d403      	bmi.n	800b1d2 <__lo0bits+0x4e>
 800b1ca:	085b      	lsrs	r3, r3, #1
 800b1cc:	f100 0001 	add.w	r0, r0, #1
 800b1d0:	d005      	beq.n	800b1de <__lo0bits+0x5a>
 800b1d2:	600b      	str	r3, [r1, #0]
 800b1d4:	4770      	bx	lr
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	e7e9      	b.n	800b1ae <__lo0bits+0x2a>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4770      	bx	lr
 800b1de:	2020      	movs	r0, #32
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <__i2b>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	f7ff ff03 	bl	800aff4 <_Balloc>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	b928      	cbnz	r0, 800b1fe <__i2b+0x1a>
 800b1f2:	4b05      	ldr	r3, [pc, #20]	; (800b208 <__i2b+0x24>)
 800b1f4:	4805      	ldr	r0, [pc, #20]	; (800b20c <__i2b+0x28>)
 800b1f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1fa:	f000 faf3 	bl	800b7e4 <__assert_func>
 800b1fe:	2301      	movs	r3, #1
 800b200:	6144      	str	r4, [r0, #20]
 800b202:	6103      	str	r3, [r0, #16]
 800b204:	bd10      	pop	{r4, pc}
 800b206:	bf00      	nop
 800b208:	0800c16f 	.word	0x0800c16f
 800b20c:	0800c180 	.word	0x0800c180

0800b210 <__multiply>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	4691      	mov	r9, r2
 800b216:	690a      	ldr	r2, [r1, #16]
 800b218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	bfb8      	it	lt
 800b220:	460b      	movlt	r3, r1
 800b222:	460c      	mov	r4, r1
 800b224:	bfbc      	itt	lt
 800b226:	464c      	movlt	r4, r9
 800b228:	4699      	movlt	r9, r3
 800b22a:	6927      	ldr	r7, [r4, #16]
 800b22c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b230:	68a3      	ldr	r3, [r4, #8]
 800b232:	6861      	ldr	r1, [r4, #4]
 800b234:	eb07 060a 	add.w	r6, r7, sl
 800b238:	42b3      	cmp	r3, r6
 800b23a:	b085      	sub	sp, #20
 800b23c:	bfb8      	it	lt
 800b23e:	3101      	addlt	r1, #1
 800b240:	f7ff fed8 	bl	800aff4 <_Balloc>
 800b244:	b930      	cbnz	r0, 800b254 <__multiply+0x44>
 800b246:	4602      	mov	r2, r0
 800b248:	4b44      	ldr	r3, [pc, #272]	; (800b35c <__multiply+0x14c>)
 800b24a:	4845      	ldr	r0, [pc, #276]	; (800b360 <__multiply+0x150>)
 800b24c:	f240 115d 	movw	r1, #349	; 0x15d
 800b250:	f000 fac8 	bl	800b7e4 <__assert_func>
 800b254:	f100 0514 	add.w	r5, r0, #20
 800b258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b25c:	462b      	mov	r3, r5
 800b25e:	2200      	movs	r2, #0
 800b260:	4543      	cmp	r3, r8
 800b262:	d321      	bcc.n	800b2a8 <__multiply+0x98>
 800b264:	f104 0314 	add.w	r3, r4, #20
 800b268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b26c:	f109 0314 	add.w	r3, r9, #20
 800b270:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b274:	9202      	str	r2, [sp, #8]
 800b276:	1b3a      	subs	r2, r7, r4
 800b278:	3a15      	subs	r2, #21
 800b27a:	f022 0203 	bic.w	r2, r2, #3
 800b27e:	3204      	adds	r2, #4
 800b280:	f104 0115 	add.w	r1, r4, #21
 800b284:	428f      	cmp	r7, r1
 800b286:	bf38      	it	cc
 800b288:	2204      	movcc	r2, #4
 800b28a:	9201      	str	r2, [sp, #4]
 800b28c:	9a02      	ldr	r2, [sp, #8]
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	429a      	cmp	r2, r3
 800b292:	d80c      	bhi.n	800b2ae <__multiply+0x9e>
 800b294:	2e00      	cmp	r6, #0
 800b296:	dd03      	ble.n	800b2a0 <__multiply+0x90>
 800b298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d05a      	beq.n	800b356 <__multiply+0x146>
 800b2a0:	6106      	str	r6, [r0, #16]
 800b2a2:	b005      	add	sp, #20
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a8:	f843 2b04 	str.w	r2, [r3], #4
 800b2ac:	e7d8      	b.n	800b260 <__multiply+0x50>
 800b2ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2b2:	f1ba 0f00 	cmp.w	sl, #0
 800b2b6:	d024      	beq.n	800b302 <__multiply+0xf2>
 800b2b8:	f104 0e14 	add.w	lr, r4, #20
 800b2bc:	46a9      	mov	r9, r5
 800b2be:	f04f 0c00 	mov.w	ip, #0
 800b2c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2c6:	f8d9 1000 	ldr.w	r1, [r9]
 800b2ca:	fa1f fb82 	uxth.w	fp, r2
 800b2ce:	b289      	uxth	r1, r1
 800b2d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b2dc:	4461      	add	r1, ip
 800b2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2ea:	b289      	uxth	r1, r1
 800b2ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2f0:	4577      	cmp	r7, lr
 800b2f2:	f849 1b04 	str.w	r1, [r9], #4
 800b2f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2fa:	d8e2      	bhi.n	800b2c2 <__multiply+0xb2>
 800b2fc:	9a01      	ldr	r2, [sp, #4]
 800b2fe:	f845 c002 	str.w	ip, [r5, r2]
 800b302:	9a03      	ldr	r2, [sp, #12]
 800b304:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b308:	3304      	adds	r3, #4
 800b30a:	f1b9 0f00 	cmp.w	r9, #0
 800b30e:	d020      	beq.n	800b352 <__multiply+0x142>
 800b310:	6829      	ldr	r1, [r5, #0]
 800b312:	f104 0c14 	add.w	ip, r4, #20
 800b316:	46ae      	mov	lr, r5
 800b318:	f04f 0a00 	mov.w	sl, #0
 800b31c:	f8bc b000 	ldrh.w	fp, [ip]
 800b320:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b324:	fb09 220b 	mla	r2, r9, fp, r2
 800b328:	4492      	add	sl, r2
 800b32a:	b289      	uxth	r1, r1
 800b32c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b330:	f84e 1b04 	str.w	r1, [lr], #4
 800b334:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b338:	f8be 1000 	ldrh.w	r1, [lr]
 800b33c:	0c12      	lsrs	r2, r2, #16
 800b33e:	fb09 1102 	mla	r1, r9, r2, r1
 800b342:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b346:	4567      	cmp	r7, ip
 800b348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b34c:	d8e6      	bhi.n	800b31c <__multiply+0x10c>
 800b34e:	9a01      	ldr	r2, [sp, #4]
 800b350:	50a9      	str	r1, [r5, r2]
 800b352:	3504      	adds	r5, #4
 800b354:	e79a      	b.n	800b28c <__multiply+0x7c>
 800b356:	3e01      	subs	r6, #1
 800b358:	e79c      	b.n	800b294 <__multiply+0x84>
 800b35a:	bf00      	nop
 800b35c:	0800c16f 	.word	0x0800c16f
 800b360:	0800c180 	.word	0x0800c180

0800b364 <__pow5mult>:
 800b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b368:	4615      	mov	r5, r2
 800b36a:	f012 0203 	ands.w	r2, r2, #3
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	d007      	beq.n	800b384 <__pow5mult+0x20>
 800b374:	4c25      	ldr	r4, [pc, #148]	; (800b40c <__pow5mult+0xa8>)
 800b376:	3a01      	subs	r2, #1
 800b378:	2300      	movs	r3, #0
 800b37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b37e:	f7ff fe9b 	bl	800b0b8 <__multadd>
 800b382:	4607      	mov	r7, r0
 800b384:	10ad      	asrs	r5, r5, #2
 800b386:	d03d      	beq.n	800b404 <__pow5mult+0xa0>
 800b388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b38a:	b97c      	cbnz	r4, 800b3ac <__pow5mult+0x48>
 800b38c:	2010      	movs	r0, #16
 800b38e:	f7ff fe1d 	bl	800afcc <malloc>
 800b392:	4602      	mov	r2, r0
 800b394:	6270      	str	r0, [r6, #36]	; 0x24
 800b396:	b928      	cbnz	r0, 800b3a4 <__pow5mult+0x40>
 800b398:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <__pow5mult+0xac>)
 800b39a:	481e      	ldr	r0, [pc, #120]	; (800b414 <__pow5mult+0xb0>)
 800b39c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3a0:	f000 fa20 	bl	800b7e4 <__assert_func>
 800b3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a8:	6004      	str	r4, [r0, #0]
 800b3aa:	60c4      	str	r4, [r0, #12]
 800b3ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3b4:	b94c      	cbnz	r4, 800b3ca <__pow5mult+0x66>
 800b3b6:	f240 2171 	movw	r1, #625	; 0x271
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7ff ff12 	bl	800b1e4 <__i2b>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	f04f 0900 	mov.w	r9, #0
 800b3ce:	07eb      	lsls	r3, r5, #31
 800b3d0:	d50a      	bpl.n	800b3e8 <__pow5mult+0x84>
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff ff1a 	bl	800b210 <__multiply>
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4680      	mov	r8, r0
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff fe47 	bl	800b074 <_Bfree>
 800b3e6:	4647      	mov	r7, r8
 800b3e8:	106d      	asrs	r5, r5, #1
 800b3ea:	d00b      	beq.n	800b404 <__pow5mult+0xa0>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	b938      	cbnz	r0, 800b400 <__pow5mult+0x9c>
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7ff ff0b 	bl	800b210 <__multiply>
 800b3fa:	6020      	str	r0, [r4, #0]
 800b3fc:	f8c0 9000 	str.w	r9, [r0]
 800b400:	4604      	mov	r4, r0
 800b402:	e7e4      	b.n	800b3ce <__pow5mult+0x6a>
 800b404:	4638      	mov	r0, r7
 800b406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40a:	bf00      	nop
 800b40c:	0800c2d0 	.word	0x0800c2d0
 800b410:	0800c0fd 	.word	0x0800c0fd
 800b414:	0800c180 	.word	0x0800c180

0800b418 <__lshift>:
 800b418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	460c      	mov	r4, r1
 800b41e:	6849      	ldr	r1, [r1, #4]
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	4607      	mov	r7, r0
 800b42a:	4691      	mov	r9, r2
 800b42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b430:	f108 0601 	add.w	r6, r8, #1
 800b434:	42b3      	cmp	r3, r6
 800b436:	db0b      	blt.n	800b450 <__lshift+0x38>
 800b438:	4638      	mov	r0, r7
 800b43a:	f7ff fddb 	bl	800aff4 <_Balloc>
 800b43e:	4605      	mov	r5, r0
 800b440:	b948      	cbnz	r0, 800b456 <__lshift+0x3e>
 800b442:	4602      	mov	r2, r0
 800b444:	4b2a      	ldr	r3, [pc, #168]	; (800b4f0 <__lshift+0xd8>)
 800b446:	482b      	ldr	r0, [pc, #172]	; (800b4f4 <__lshift+0xdc>)
 800b448:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b44c:	f000 f9ca 	bl	800b7e4 <__assert_func>
 800b450:	3101      	adds	r1, #1
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	e7ee      	b.n	800b434 <__lshift+0x1c>
 800b456:	2300      	movs	r3, #0
 800b458:	f100 0114 	add.w	r1, r0, #20
 800b45c:	f100 0210 	add.w	r2, r0, #16
 800b460:	4618      	mov	r0, r3
 800b462:	4553      	cmp	r3, sl
 800b464:	db37      	blt.n	800b4d6 <__lshift+0xbe>
 800b466:	6920      	ldr	r0, [r4, #16]
 800b468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b46c:	f104 0314 	add.w	r3, r4, #20
 800b470:	f019 091f 	ands.w	r9, r9, #31
 800b474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b478:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b47c:	d02f      	beq.n	800b4de <__lshift+0xc6>
 800b47e:	f1c9 0e20 	rsb	lr, r9, #32
 800b482:	468a      	mov	sl, r1
 800b484:	f04f 0c00 	mov.w	ip, #0
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	fa02 f209 	lsl.w	r2, r2, r9
 800b48e:	ea42 020c 	orr.w	r2, r2, ip
 800b492:	f84a 2b04 	str.w	r2, [sl], #4
 800b496:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49a:	4298      	cmp	r0, r3
 800b49c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4a0:	d8f2      	bhi.n	800b488 <__lshift+0x70>
 800b4a2:	1b03      	subs	r3, r0, r4
 800b4a4:	3b15      	subs	r3, #21
 800b4a6:	f023 0303 	bic.w	r3, r3, #3
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	f104 0215 	add.w	r2, r4, #21
 800b4b0:	4290      	cmp	r0, r2
 800b4b2:	bf38      	it	cc
 800b4b4:	2304      	movcc	r3, #4
 800b4b6:	f841 c003 	str.w	ip, [r1, r3]
 800b4ba:	f1bc 0f00 	cmp.w	ip, #0
 800b4be:	d001      	beq.n	800b4c4 <__lshift+0xac>
 800b4c0:	f108 0602 	add.w	r6, r8, #2
 800b4c4:	3e01      	subs	r6, #1
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	612e      	str	r6, [r5, #16]
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	f7ff fdd2 	bl	800b074 <_Bfree>
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4da:	3301      	adds	r3, #1
 800b4dc:	e7c1      	b.n	800b462 <__lshift+0x4a>
 800b4de:	3904      	subs	r1, #4
 800b4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	d8f9      	bhi.n	800b4e0 <__lshift+0xc8>
 800b4ec:	e7ea      	b.n	800b4c4 <__lshift+0xac>
 800b4ee:	bf00      	nop
 800b4f0:	0800c16f 	.word	0x0800c16f
 800b4f4:	0800c180 	.word	0x0800c180

0800b4f8 <__mcmp>:
 800b4f8:	b530      	push	{r4, r5, lr}
 800b4fa:	6902      	ldr	r2, [r0, #16]
 800b4fc:	690c      	ldr	r4, [r1, #16]
 800b4fe:	1b12      	subs	r2, r2, r4
 800b500:	d10e      	bne.n	800b520 <__mcmp+0x28>
 800b502:	f100 0314 	add.w	r3, r0, #20
 800b506:	3114      	adds	r1, #20
 800b508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b50c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b518:	42a5      	cmp	r5, r4
 800b51a:	d003      	beq.n	800b524 <__mcmp+0x2c>
 800b51c:	d305      	bcc.n	800b52a <__mcmp+0x32>
 800b51e:	2201      	movs	r2, #1
 800b520:	4610      	mov	r0, r2
 800b522:	bd30      	pop	{r4, r5, pc}
 800b524:	4283      	cmp	r3, r0
 800b526:	d3f3      	bcc.n	800b510 <__mcmp+0x18>
 800b528:	e7fa      	b.n	800b520 <__mcmp+0x28>
 800b52a:	f04f 32ff 	mov.w	r2, #4294967295
 800b52e:	e7f7      	b.n	800b520 <__mcmp+0x28>

0800b530 <__mdiff>:
 800b530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	460c      	mov	r4, r1
 800b536:	4606      	mov	r6, r0
 800b538:	4611      	mov	r1, r2
 800b53a:	4620      	mov	r0, r4
 800b53c:	4690      	mov	r8, r2
 800b53e:	f7ff ffdb 	bl	800b4f8 <__mcmp>
 800b542:	1e05      	subs	r5, r0, #0
 800b544:	d110      	bne.n	800b568 <__mdiff+0x38>
 800b546:	4629      	mov	r1, r5
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff fd53 	bl	800aff4 <_Balloc>
 800b54e:	b930      	cbnz	r0, 800b55e <__mdiff+0x2e>
 800b550:	4b3a      	ldr	r3, [pc, #232]	; (800b63c <__mdiff+0x10c>)
 800b552:	4602      	mov	r2, r0
 800b554:	f240 2132 	movw	r1, #562	; 0x232
 800b558:	4839      	ldr	r0, [pc, #228]	; (800b640 <__mdiff+0x110>)
 800b55a:	f000 f943 	bl	800b7e4 <__assert_func>
 800b55e:	2301      	movs	r3, #1
 800b560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b568:	bfa4      	itt	ge
 800b56a:	4643      	movge	r3, r8
 800b56c:	46a0      	movge	r8, r4
 800b56e:	4630      	mov	r0, r6
 800b570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b574:	bfa6      	itte	ge
 800b576:	461c      	movge	r4, r3
 800b578:	2500      	movge	r5, #0
 800b57a:	2501      	movlt	r5, #1
 800b57c:	f7ff fd3a 	bl	800aff4 <_Balloc>
 800b580:	b920      	cbnz	r0, 800b58c <__mdiff+0x5c>
 800b582:	4b2e      	ldr	r3, [pc, #184]	; (800b63c <__mdiff+0x10c>)
 800b584:	4602      	mov	r2, r0
 800b586:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b58a:	e7e5      	b.n	800b558 <__mdiff+0x28>
 800b58c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b590:	6926      	ldr	r6, [r4, #16]
 800b592:	60c5      	str	r5, [r0, #12]
 800b594:	f104 0914 	add.w	r9, r4, #20
 800b598:	f108 0514 	add.w	r5, r8, #20
 800b59c:	f100 0e14 	add.w	lr, r0, #20
 800b5a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5a8:	f108 0210 	add.w	r2, r8, #16
 800b5ac:	46f2      	mov	sl, lr
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5b8:	fa1f f883 	uxth.w	r8, r3
 800b5bc:	fa11 f18b 	uxtah	r1, r1, fp
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	eba1 0808 	sub.w	r8, r1, r8
 800b5c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5ce:	fa1f f888 	uxth.w	r8, r8
 800b5d2:	1419      	asrs	r1, r3, #16
 800b5d4:	454e      	cmp	r6, r9
 800b5d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5da:	f84a 3b04 	str.w	r3, [sl], #4
 800b5de:	d8e7      	bhi.n	800b5b0 <__mdiff+0x80>
 800b5e0:	1b33      	subs	r3, r6, r4
 800b5e2:	3b15      	subs	r3, #21
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	3415      	adds	r4, #21
 800b5ec:	42a6      	cmp	r6, r4
 800b5ee:	bf38      	it	cc
 800b5f0:	2304      	movcc	r3, #4
 800b5f2:	441d      	add	r5, r3
 800b5f4:	4473      	add	r3, lr
 800b5f6:	469e      	mov	lr, r3
 800b5f8:	462e      	mov	r6, r5
 800b5fa:	4566      	cmp	r6, ip
 800b5fc:	d30e      	bcc.n	800b61c <__mdiff+0xec>
 800b5fe:	f10c 0203 	add.w	r2, ip, #3
 800b602:	1b52      	subs	r2, r2, r5
 800b604:	f022 0203 	bic.w	r2, r2, #3
 800b608:	3d03      	subs	r5, #3
 800b60a:	45ac      	cmp	ip, r5
 800b60c:	bf38      	it	cc
 800b60e:	2200      	movcc	r2, #0
 800b610:	441a      	add	r2, r3
 800b612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b616:	b17b      	cbz	r3, 800b638 <__mdiff+0x108>
 800b618:	6107      	str	r7, [r0, #16]
 800b61a:	e7a3      	b.n	800b564 <__mdiff+0x34>
 800b61c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b620:	fa11 f288 	uxtah	r2, r1, r8
 800b624:	1414      	asrs	r4, r2, #16
 800b626:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b62a:	b292      	uxth	r2, r2
 800b62c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b630:	f84e 2b04 	str.w	r2, [lr], #4
 800b634:	1421      	asrs	r1, r4, #16
 800b636:	e7e0      	b.n	800b5fa <__mdiff+0xca>
 800b638:	3f01      	subs	r7, #1
 800b63a:	e7ea      	b.n	800b612 <__mdiff+0xe2>
 800b63c:	0800c16f 	.word	0x0800c16f
 800b640:	0800c180 	.word	0x0800c180

0800b644 <__d2b>:
 800b644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b648:	4689      	mov	r9, r1
 800b64a:	2101      	movs	r1, #1
 800b64c:	ec57 6b10 	vmov	r6, r7, d0
 800b650:	4690      	mov	r8, r2
 800b652:	f7ff fccf 	bl	800aff4 <_Balloc>
 800b656:	4604      	mov	r4, r0
 800b658:	b930      	cbnz	r0, 800b668 <__d2b+0x24>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <__d2b+0xb0>)
 800b65e:	4826      	ldr	r0, [pc, #152]	; (800b6f8 <__d2b+0xb4>)
 800b660:	f240 310a 	movw	r1, #778	; 0x30a
 800b664:	f000 f8be 	bl	800b7e4 <__assert_func>
 800b668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b66c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b670:	bb35      	cbnz	r5, 800b6c0 <__d2b+0x7c>
 800b672:	2e00      	cmp	r6, #0
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	d028      	beq.n	800b6ca <__d2b+0x86>
 800b678:	4668      	mov	r0, sp
 800b67a:	9600      	str	r6, [sp, #0]
 800b67c:	f7ff fd82 	bl	800b184 <__lo0bits>
 800b680:	9900      	ldr	r1, [sp, #0]
 800b682:	b300      	cbz	r0, 800b6c6 <__d2b+0x82>
 800b684:	9a01      	ldr	r2, [sp, #4]
 800b686:	f1c0 0320 	rsb	r3, r0, #32
 800b68a:	fa02 f303 	lsl.w	r3, r2, r3
 800b68e:	430b      	orrs	r3, r1
 800b690:	40c2      	lsrs	r2, r0
 800b692:	6163      	str	r3, [r4, #20]
 800b694:	9201      	str	r2, [sp, #4]
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	61a3      	str	r3, [r4, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	bf14      	ite	ne
 800b69e:	2202      	movne	r2, #2
 800b6a0:	2201      	moveq	r2, #1
 800b6a2:	6122      	str	r2, [r4, #16]
 800b6a4:	b1d5      	cbz	r5, 800b6dc <__d2b+0x98>
 800b6a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6aa:	4405      	add	r5, r0
 800b6ac:	f8c9 5000 	str.w	r5, [r9]
 800b6b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6b4:	f8c8 0000 	str.w	r0, [r8]
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	b003      	add	sp, #12
 800b6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6c4:	e7d5      	b.n	800b672 <__d2b+0x2e>
 800b6c6:	6161      	str	r1, [r4, #20]
 800b6c8:	e7e5      	b.n	800b696 <__d2b+0x52>
 800b6ca:	a801      	add	r0, sp, #4
 800b6cc:	f7ff fd5a 	bl	800b184 <__lo0bits>
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	6163      	str	r3, [r4, #20]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	6122      	str	r2, [r4, #16]
 800b6d8:	3020      	adds	r0, #32
 800b6da:	e7e3      	b.n	800b6a4 <__d2b+0x60>
 800b6dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6e4:	f8c9 0000 	str.w	r0, [r9]
 800b6e8:	6918      	ldr	r0, [r3, #16]
 800b6ea:	f7ff fd2b 	bl	800b144 <__hi0bits>
 800b6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6f2:	e7df      	b.n	800b6b4 <__d2b+0x70>
 800b6f4:	0800c16f 	.word	0x0800c16f
 800b6f8:	0800c180 	.word	0x0800c180

0800b6fc <_calloc_r>:
 800b6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6fe:	fba1 2402 	umull	r2, r4, r1, r2
 800b702:	b94c      	cbnz	r4, 800b718 <_calloc_r+0x1c>
 800b704:	4611      	mov	r1, r2
 800b706:	9201      	str	r2, [sp, #4]
 800b708:	f7fd ff4e 	bl	80095a8 <_malloc_r>
 800b70c:	9a01      	ldr	r2, [sp, #4]
 800b70e:	4605      	mov	r5, r0
 800b710:	b930      	cbnz	r0, 800b720 <_calloc_r+0x24>
 800b712:	4628      	mov	r0, r5
 800b714:	b003      	add	sp, #12
 800b716:	bd30      	pop	{r4, r5, pc}
 800b718:	220c      	movs	r2, #12
 800b71a:	6002      	str	r2, [r0, #0]
 800b71c:	2500      	movs	r5, #0
 800b71e:	e7f8      	b.n	800b712 <_calloc_r+0x16>
 800b720:	4621      	mov	r1, r4
 800b722:	f7fd ff18 	bl	8009556 <memset>
 800b726:	e7f4      	b.n	800b712 <_calloc_r+0x16>

0800b728 <_free_r>:
 800b728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b72a:	2900      	cmp	r1, #0
 800b72c:	d044      	beq.n	800b7b8 <_free_r+0x90>
 800b72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b732:	9001      	str	r0, [sp, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	f1a1 0404 	sub.w	r4, r1, #4
 800b73a:	bfb8      	it	lt
 800b73c:	18e4      	addlt	r4, r4, r3
 800b73e:	f7ff fc4d 	bl	800afdc <__malloc_lock>
 800b742:	4a1e      	ldr	r2, [pc, #120]	; (800b7bc <_free_r+0x94>)
 800b744:	9801      	ldr	r0, [sp, #4]
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	b933      	cbnz	r3, 800b758 <_free_r+0x30>
 800b74a:	6063      	str	r3, [r4, #4]
 800b74c:	6014      	str	r4, [r2, #0]
 800b74e:	b003      	add	sp, #12
 800b750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b754:	f7ff bc48 	b.w	800afe8 <__malloc_unlock>
 800b758:	42a3      	cmp	r3, r4
 800b75a:	d908      	bls.n	800b76e <_free_r+0x46>
 800b75c:	6825      	ldr	r5, [r4, #0]
 800b75e:	1961      	adds	r1, r4, r5
 800b760:	428b      	cmp	r3, r1
 800b762:	bf01      	itttt	eq
 800b764:	6819      	ldreq	r1, [r3, #0]
 800b766:	685b      	ldreq	r3, [r3, #4]
 800b768:	1949      	addeq	r1, r1, r5
 800b76a:	6021      	streq	r1, [r4, #0]
 800b76c:	e7ed      	b.n	800b74a <_free_r+0x22>
 800b76e:	461a      	mov	r2, r3
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	b10b      	cbz	r3, 800b778 <_free_r+0x50>
 800b774:	42a3      	cmp	r3, r4
 800b776:	d9fa      	bls.n	800b76e <_free_r+0x46>
 800b778:	6811      	ldr	r1, [r2, #0]
 800b77a:	1855      	adds	r5, r2, r1
 800b77c:	42a5      	cmp	r5, r4
 800b77e:	d10b      	bne.n	800b798 <_free_r+0x70>
 800b780:	6824      	ldr	r4, [r4, #0]
 800b782:	4421      	add	r1, r4
 800b784:	1854      	adds	r4, r2, r1
 800b786:	42a3      	cmp	r3, r4
 800b788:	6011      	str	r1, [r2, #0]
 800b78a:	d1e0      	bne.n	800b74e <_free_r+0x26>
 800b78c:	681c      	ldr	r4, [r3, #0]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	6053      	str	r3, [r2, #4]
 800b792:	4421      	add	r1, r4
 800b794:	6011      	str	r1, [r2, #0]
 800b796:	e7da      	b.n	800b74e <_free_r+0x26>
 800b798:	d902      	bls.n	800b7a0 <_free_r+0x78>
 800b79a:	230c      	movs	r3, #12
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	e7d6      	b.n	800b74e <_free_r+0x26>
 800b7a0:	6825      	ldr	r5, [r4, #0]
 800b7a2:	1961      	adds	r1, r4, r5
 800b7a4:	428b      	cmp	r3, r1
 800b7a6:	bf04      	itt	eq
 800b7a8:	6819      	ldreq	r1, [r3, #0]
 800b7aa:	685b      	ldreq	r3, [r3, #4]
 800b7ac:	6063      	str	r3, [r4, #4]
 800b7ae:	bf04      	itt	eq
 800b7b0:	1949      	addeq	r1, r1, r5
 800b7b2:	6021      	streq	r1, [r4, #0]
 800b7b4:	6054      	str	r4, [r2, #4]
 800b7b6:	e7ca      	b.n	800b74e <_free_r+0x26>
 800b7b8:	b003      	add	sp, #12
 800b7ba:	bd30      	pop	{r4, r5, pc}
 800b7bc:	20004d78 	.word	0x20004d78

0800b7c0 <_read_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	; (800b7e0 <_read_r+0x20>)
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	4608      	mov	r0, r1
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	602a      	str	r2, [r5, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f7f7 fe98 	bl	8003504 <_read>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_read_r+0x1e>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_read_r+0x1e>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	20004d80 	.word	0x20004d80

0800b7e4 <__assert_func>:
 800b7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7e6:	4614      	mov	r4, r2
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <__assert_func+0x2c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	68d8      	ldr	r0, [r3, #12]
 800b7f2:	b14c      	cbz	r4, 800b808 <__assert_func+0x24>
 800b7f4:	4b07      	ldr	r3, [pc, #28]	; (800b814 <__assert_func+0x30>)
 800b7f6:	9100      	str	r1, [sp, #0]
 800b7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7fc:	4906      	ldr	r1, [pc, #24]	; (800b818 <__assert_func+0x34>)
 800b7fe:	462b      	mov	r3, r5
 800b800:	f000 f80e 	bl	800b820 <fiprintf>
 800b804:	f000 fa58 	bl	800bcb8 <abort>
 800b808:	4b04      	ldr	r3, [pc, #16]	; (800b81c <__assert_func+0x38>)
 800b80a:	461c      	mov	r4, r3
 800b80c:	e7f3      	b.n	800b7f6 <__assert_func+0x12>
 800b80e:	bf00      	nop
 800b810:	20000010 	.word	0x20000010
 800b814:	0800c2dc 	.word	0x0800c2dc
 800b818:	0800c2e9 	.word	0x0800c2e9
 800b81c:	0800c317 	.word	0x0800c317

0800b820 <fiprintf>:
 800b820:	b40e      	push	{r1, r2, r3}
 800b822:	b503      	push	{r0, r1, lr}
 800b824:	4601      	mov	r1, r0
 800b826:	ab03      	add	r3, sp, #12
 800b828:	4805      	ldr	r0, [pc, #20]	; (800b840 <fiprintf+0x20>)
 800b82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82e:	6800      	ldr	r0, [r0, #0]
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	f000 f843 	bl	800b8bc <_vfiprintf_r>
 800b836:	b002      	add	sp, #8
 800b838:	f85d eb04 	ldr.w	lr, [sp], #4
 800b83c:	b003      	add	sp, #12
 800b83e:	4770      	bx	lr
 800b840:	20000010 	.word	0x20000010

0800b844 <__ascii_mbtowc>:
 800b844:	b082      	sub	sp, #8
 800b846:	b901      	cbnz	r1, 800b84a <__ascii_mbtowc+0x6>
 800b848:	a901      	add	r1, sp, #4
 800b84a:	b142      	cbz	r2, 800b85e <__ascii_mbtowc+0x1a>
 800b84c:	b14b      	cbz	r3, 800b862 <__ascii_mbtowc+0x1e>
 800b84e:	7813      	ldrb	r3, [r2, #0]
 800b850:	600b      	str	r3, [r1, #0]
 800b852:	7812      	ldrb	r2, [r2, #0]
 800b854:	1e10      	subs	r0, r2, #0
 800b856:	bf18      	it	ne
 800b858:	2001      	movne	r0, #1
 800b85a:	b002      	add	sp, #8
 800b85c:	4770      	bx	lr
 800b85e:	4610      	mov	r0, r2
 800b860:	e7fb      	b.n	800b85a <__ascii_mbtowc+0x16>
 800b862:	f06f 0001 	mvn.w	r0, #1
 800b866:	e7f8      	b.n	800b85a <__ascii_mbtowc+0x16>

0800b868 <__sfputc_r>:
 800b868:	6893      	ldr	r3, [r2, #8]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	b410      	push	{r4}
 800b870:	6093      	str	r3, [r2, #8]
 800b872:	da08      	bge.n	800b886 <__sfputc_r+0x1e>
 800b874:	6994      	ldr	r4, [r2, #24]
 800b876:	42a3      	cmp	r3, r4
 800b878:	db01      	blt.n	800b87e <__sfputc_r+0x16>
 800b87a:	290a      	cmp	r1, #10
 800b87c:	d103      	bne.n	800b886 <__sfputc_r+0x1e>
 800b87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b882:	f000 b94b 	b.w	800bb1c <__swbuf_r>
 800b886:	6813      	ldr	r3, [r2, #0]
 800b888:	1c58      	adds	r0, r3, #1
 800b88a:	6010      	str	r0, [r2, #0]
 800b88c:	7019      	strb	r1, [r3, #0]
 800b88e:	4608      	mov	r0, r1
 800b890:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <__sfputs_r>:
 800b896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b898:	4606      	mov	r6, r0
 800b89a:	460f      	mov	r7, r1
 800b89c:	4614      	mov	r4, r2
 800b89e:	18d5      	adds	r5, r2, r3
 800b8a0:	42ac      	cmp	r4, r5
 800b8a2:	d101      	bne.n	800b8a8 <__sfputs_r+0x12>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e007      	b.n	800b8b8 <__sfputs_r+0x22>
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	463a      	mov	r2, r7
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7ff ffda 	bl	800b868 <__sfputc_r>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d1f3      	bne.n	800b8a0 <__sfputs_r+0xa>
 800b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8bc <_vfiprintf_r>:
 800b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	b09d      	sub	sp, #116	; 0x74
 800b8c4:	4614      	mov	r4, r2
 800b8c6:	4698      	mov	r8, r3
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	b118      	cbz	r0, 800b8d4 <_vfiprintf_r+0x18>
 800b8cc:	6983      	ldr	r3, [r0, #24]
 800b8ce:	b90b      	cbnz	r3, 800b8d4 <_vfiprintf_r+0x18>
 800b8d0:	f7fd fd6e 	bl	80093b0 <__sinit>
 800b8d4:	4b89      	ldr	r3, [pc, #548]	; (800bafc <_vfiprintf_r+0x240>)
 800b8d6:	429d      	cmp	r5, r3
 800b8d8:	d11b      	bne.n	800b912 <_vfiprintf_r+0x56>
 800b8da:	6875      	ldr	r5, [r6, #4]
 800b8dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8de:	07d9      	lsls	r1, r3, #31
 800b8e0:	d405      	bmi.n	800b8ee <_vfiprintf_r+0x32>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	059a      	lsls	r2, r3, #22
 800b8e6:	d402      	bmi.n	800b8ee <_vfiprintf_r+0x32>
 800b8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ea:	f7fd fe24 	bl	8009536 <__retarget_lock_acquire_recursive>
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	071b      	lsls	r3, r3, #28
 800b8f2:	d501      	bpl.n	800b8f8 <_vfiprintf_r+0x3c>
 800b8f4:	692b      	ldr	r3, [r5, #16]
 800b8f6:	b9eb      	cbnz	r3, 800b934 <_vfiprintf_r+0x78>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f000 f96e 	bl	800bbdc <__swsetup_r>
 800b900:	b1c0      	cbz	r0, 800b934 <_vfiprintf_r+0x78>
 800b902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b904:	07dc      	lsls	r4, r3, #31
 800b906:	d50e      	bpl.n	800b926 <_vfiprintf_r+0x6a>
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	b01d      	add	sp, #116	; 0x74
 800b90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b912:	4b7b      	ldr	r3, [pc, #492]	; (800bb00 <_vfiprintf_r+0x244>)
 800b914:	429d      	cmp	r5, r3
 800b916:	d101      	bne.n	800b91c <_vfiprintf_r+0x60>
 800b918:	68b5      	ldr	r5, [r6, #8]
 800b91a:	e7df      	b.n	800b8dc <_vfiprintf_r+0x20>
 800b91c:	4b79      	ldr	r3, [pc, #484]	; (800bb04 <_vfiprintf_r+0x248>)
 800b91e:	429d      	cmp	r5, r3
 800b920:	bf08      	it	eq
 800b922:	68f5      	ldreq	r5, [r6, #12]
 800b924:	e7da      	b.n	800b8dc <_vfiprintf_r+0x20>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	0598      	lsls	r0, r3, #22
 800b92a:	d4ed      	bmi.n	800b908 <_vfiprintf_r+0x4c>
 800b92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92e:	f7fd fe03 	bl	8009538 <__retarget_lock_release_recursive>
 800b932:	e7e9      	b.n	800b908 <_vfiprintf_r+0x4c>
 800b934:	2300      	movs	r3, #0
 800b936:	9309      	str	r3, [sp, #36]	; 0x24
 800b938:	2320      	movs	r3, #32
 800b93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b942:	2330      	movs	r3, #48	; 0x30
 800b944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb08 <_vfiprintf_r+0x24c>
 800b948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b94c:	f04f 0901 	mov.w	r9, #1
 800b950:	4623      	mov	r3, r4
 800b952:	469a      	mov	sl, r3
 800b954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b958:	b10a      	cbz	r2, 800b95e <_vfiprintf_r+0xa2>
 800b95a:	2a25      	cmp	r2, #37	; 0x25
 800b95c:	d1f9      	bne.n	800b952 <_vfiprintf_r+0x96>
 800b95e:	ebba 0b04 	subs.w	fp, sl, r4
 800b962:	d00b      	beq.n	800b97c <_vfiprintf_r+0xc0>
 800b964:	465b      	mov	r3, fp
 800b966:	4622      	mov	r2, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff93 	bl	800b896 <__sfputs_r>
 800b970:	3001      	adds	r0, #1
 800b972:	f000 80aa 	beq.w	800baca <_vfiprintf_r+0x20e>
 800b976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b978:	445a      	add	r2, fp
 800b97a:	9209      	str	r2, [sp, #36]	; 0x24
 800b97c:	f89a 3000 	ldrb.w	r3, [sl]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 80a2 	beq.w	800baca <_vfiprintf_r+0x20e>
 800b986:	2300      	movs	r3, #0
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b990:	f10a 0a01 	add.w	sl, sl, #1
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b99c:	931a      	str	r3, [sp, #104]	; 0x68
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2205      	movs	r2, #5
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	4858      	ldr	r0, [pc, #352]	; (800bb08 <_vfiprintf_r+0x24c>)
 800b9a8:	f7f4 fc22 	bl	80001f0 <memchr>
 800b9ac:	9a04      	ldr	r2, [sp, #16]
 800b9ae:	b9d8      	cbnz	r0, 800b9e8 <_vfiprintf_r+0x12c>
 800b9b0:	06d1      	lsls	r1, r2, #27
 800b9b2:	bf44      	itt	mi
 800b9b4:	2320      	movmi	r3, #32
 800b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ba:	0713      	lsls	r3, r2, #28
 800b9bc:	bf44      	itt	mi
 800b9be:	232b      	movmi	r3, #43	; 0x2b
 800b9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ca:	d015      	beq.n	800b9f8 <_vfiprintf_r+0x13c>
 800b9cc:	9a07      	ldr	r2, [sp, #28]
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f04f 0c0a 	mov.w	ip, #10
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9dc:	3b30      	subs	r3, #48	; 0x30
 800b9de:	2b09      	cmp	r3, #9
 800b9e0:	d94e      	bls.n	800ba80 <_vfiprintf_r+0x1c4>
 800b9e2:	b1b0      	cbz	r0, 800ba12 <_vfiprintf_r+0x156>
 800b9e4:	9207      	str	r2, [sp, #28]
 800b9e6:	e014      	b.n	800ba12 <_vfiprintf_r+0x156>
 800b9e8:	eba0 0308 	sub.w	r3, r0, r8
 800b9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	46a2      	mov	sl, r4
 800b9f6:	e7d2      	b.n	800b99e <_vfiprintf_r+0xe2>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	1d19      	adds	r1, r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9103      	str	r1, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bfbb      	ittet	lt
 800ba04:	425b      	neglt	r3, r3
 800ba06:	f042 0202 	orrlt.w	r2, r2, #2
 800ba0a:	9307      	strge	r3, [sp, #28]
 800ba0c:	9307      	strlt	r3, [sp, #28]
 800ba0e:	bfb8      	it	lt
 800ba10:	9204      	strlt	r2, [sp, #16]
 800ba12:	7823      	ldrb	r3, [r4, #0]
 800ba14:	2b2e      	cmp	r3, #46	; 0x2e
 800ba16:	d10c      	bne.n	800ba32 <_vfiprintf_r+0x176>
 800ba18:	7863      	ldrb	r3, [r4, #1]
 800ba1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1c:	d135      	bne.n	800ba8a <_vfiprintf_r+0x1ce>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	1d1a      	adds	r2, r3, #4
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	9203      	str	r2, [sp, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfb8      	it	lt
 800ba2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba2e:	3402      	adds	r4, #2
 800ba30:	9305      	str	r3, [sp, #20]
 800ba32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb18 <_vfiprintf_r+0x25c>
 800ba36:	7821      	ldrb	r1, [r4, #0]
 800ba38:	2203      	movs	r2, #3
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	f7f4 fbd8 	bl	80001f0 <memchr>
 800ba40:	b140      	cbz	r0, 800ba54 <_vfiprintf_r+0x198>
 800ba42:	2340      	movs	r3, #64	; 0x40
 800ba44:	eba0 000a 	sub.w	r0, r0, sl
 800ba48:	fa03 f000 	lsl.w	r0, r3, r0
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	4303      	orrs	r3, r0
 800ba50:	3401      	adds	r4, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba58:	482c      	ldr	r0, [pc, #176]	; (800bb0c <_vfiprintf_r+0x250>)
 800ba5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba5e:	2206      	movs	r2, #6
 800ba60:	f7f4 fbc6 	bl	80001f0 <memchr>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d03f      	beq.n	800bae8 <_vfiprintf_r+0x22c>
 800ba68:	4b29      	ldr	r3, [pc, #164]	; (800bb10 <_vfiprintf_r+0x254>)
 800ba6a:	bb1b      	cbnz	r3, 800bab4 <_vfiprintf_r+0x1f8>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	3307      	adds	r3, #7
 800ba70:	f023 0307 	bic.w	r3, r3, #7
 800ba74:	3308      	adds	r3, #8
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7a:	443b      	add	r3, r7
 800ba7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7e:	e767      	b.n	800b950 <_vfiprintf_r+0x94>
 800ba80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba84:	460c      	mov	r4, r1
 800ba86:	2001      	movs	r0, #1
 800ba88:	e7a5      	b.n	800b9d6 <_vfiprintf_r+0x11a>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	3401      	adds	r4, #1
 800ba8e:	9305      	str	r3, [sp, #20]
 800ba90:	4619      	mov	r1, r3
 800ba92:	f04f 0c0a 	mov.w	ip, #10
 800ba96:	4620      	mov	r0, r4
 800ba98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9c:	3a30      	subs	r2, #48	; 0x30
 800ba9e:	2a09      	cmp	r2, #9
 800baa0:	d903      	bls.n	800baaa <_vfiprintf_r+0x1ee>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0c5      	beq.n	800ba32 <_vfiprintf_r+0x176>
 800baa6:	9105      	str	r1, [sp, #20]
 800baa8:	e7c3      	b.n	800ba32 <_vfiprintf_r+0x176>
 800baaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800baae:	4604      	mov	r4, r0
 800bab0:	2301      	movs	r3, #1
 800bab2:	e7f0      	b.n	800ba96 <_vfiprintf_r+0x1da>
 800bab4:	ab03      	add	r3, sp, #12
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	462a      	mov	r2, r5
 800baba:	4b16      	ldr	r3, [pc, #88]	; (800bb14 <_vfiprintf_r+0x258>)
 800babc:	a904      	add	r1, sp, #16
 800babe:	4630      	mov	r0, r6
 800bac0:	f7fd fe86 	bl	80097d0 <_printf_float>
 800bac4:	4607      	mov	r7, r0
 800bac6:	1c78      	adds	r0, r7, #1
 800bac8:	d1d6      	bne.n	800ba78 <_vfiprintf_r+0x1bc>
 800baca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bacc:	07d9      	lsls	r1, r3, #31
 800bace:	d405      	bmi.n	800badc <_vfiprintf_r+0x220>
 800bad0:	89ab      	ldrh	r3, [r5, #12]
 800bad2:	059a      	lsls	r2, r3, #22
 800bad4:	d402      	bmi.n	800badc <_vfiprintf_r+0x220>
 800bad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad8:	f7fd fd2e 	bl	8009538 <__retarget_lock_release_recursive>
 800badc:	89ab      	ldrh	r3, [r5, #12]
 800bade:	065b      	lsls	r3, r3, #25
 800bae0:	f53f af12 	bmi.w	800b908 <_vfiprintf_r+0x4c>
 800bae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae6:	e711      	b.n	800b90c <_vfiprintf_r+0x50>
 800bae8:	ab03      	add	r3, sp, #12
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	462a      	mov	r2, r5
 800baee:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <_vfiprintf_r+0x258>)
 800baf0:	a904      	add	r1, sp, #16
 800baf2:	4630      	mov	r0, r6
 800baf4:	f7fe f910 	bl	8009d18 <_printf_i>
 800baf8:	e7e4      	b.n	800bac4 <_vfiprintf_r+0x208>
 800bafa:	bf00      	nop
 800bafc:	0800c078 	.word	0x0800c078
 800bb00:	0800c098 	.word	0x0800c098
 800bb04:	0800c058 	.word	0x0800c058
 800bb08:	0800c322 	.word	0x0800c322
 800bb0c:	0800c32c 	.word	0x0800c32c
 800bb10:	080097d1 	.word	0x080097d1
 800bb14:	0800b897 	.word	0x0800b897
 800bb18:	0800c328 	.word	0x0800c328

0800bb1c <__swbuf_r>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	460e      	mov	r6, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	4605      	mov	r5, r0
 800bb24:	b118      	cbz	r0, 800bb2e <__swbuf_r+0x12>
 800bb26:	6983      	ldr	r3, [r0, #24]
 800bb28:	b90b      	cbnz	r3, 800bb2e <__swbuf_r+0x12>
 800bb2a:	f7fd fc41 	bl	80093b0 <__sinit>
 800bb2e:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <__swbuf_r+0x98>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d12b      	bne.n	800bb8c <__swbuf_r+0x70>
 800bb34:	686c      	ldr	r4, [r5, #4]
 800bb36:	69a3      	ldr	r3, [r4, #24]
 800bb38:	60a3      	str	r3, [r4, #8]
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	071a      	lsls	r2, r3, #28
 800bb3e:	d52f      	bpl.n	800bba0 <__swbuf_r+0x84>
 800bb40:	6923      	ldr	r3, [r4, #16]
 800bb42:	b36b      	cbz	r3, 800bba0 <__swbuf_r+0x84>
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	6820      	ldr	r0, [r4, #0]
 800bb48:	1ac0      	subs	r0, r0, r3
 800bb4a:	6963      	ldr	r3, [r4, #20]
 800bb4c:	b2f6      	uxtb	r6, r6
 800bb4e:	4283      	cmp	r3, r0
 800bb50:	4637      	mov	r7, r6
 800bb52:	dc04      	bgt.n	800bb5e <__swbuf_r+0x42>
 800bb54:	4621      	mov	r1, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	f7ff f9e6 	bl	800af28 <_fflush_r>
 800bb5c:	bb30      	cbnz	r0, 800bbac <__swbuf_r+0x90>
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	60a3      	str	r3, [r4, #8]
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6022      	str	r2, [r4, #0]
 800bb6a:	701e      	strb	r6, [r3, #0]
 800bb6c:	6963      	ldr	r3, [r4, #20]
 800bb6e:	3001      	adds	r0, #1
 800bb70:	4283      	cmp	r3, r0
 800bb72:	d004      	beq.n	800bb7e <__swbuf_r+0x62>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	07db      	lsls	r3, r3, #31
 800bb78:	d506      	bpl.n	800bb88 <__swbuf_r+0x6c>
 800bb7a:	2e0a      	cmp	r6, #10
 800bb7c:	d104      	bne.n	800bb88 <__swbuf_r+0x6c>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f7ff f9d1 	bl	800af28 <_fflush_r>
 800bb86:	b988      	cbnz	r0, 800bbac <__swbuf_r+0x90>
 800bb88:	4638      	mov	r0, r7
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <__swbuf_r+0x9c>)
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	d101      	bne.n	800bb96 <__swbuf_r+0x7a>
 800bb92:	68ac      	ldr	r4, [r5, #8]
 800bb94:	e7cf      	b.n	800bb36 <__swbuf_r+0x1a>
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <__swbuf_r+0xa0>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	bf08      	it	eq
 800bb9c:	68ec      	ldreq	r4, [r5, #12]
 800bb9e:	e7ca      	b.n	800bb36 <__swbuf_r+0x1a>
 800bba0:	4621      	mov	r1, r4
 800bba2:	4628      	mov	r0, r5
 800bba4:	f000 f81a 	bl	800bbdc <__swsetup_r>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0cb      	beq.n	800bb44 <__swbuf_r+0x28>
 800bbac:	f04f 37ff 	mov.w	r7, #4294967295
 800bbb0:	e7ea      	b.n	800bb88 <__swbuf_r+0x6c>
 800bbb2:	bf00      	nop
 800bbb4:	0800c078 	.word	0x0800c078
 800bbb8:	0800c098 	.word	0x0800c098
 800bbbc:	0800c058 	.word	0x0800c058

0800bbc0 <__ascii_wctomb>:
 800bbc0:	b149      	cbz	r1, 800bbd6 <__ascii_wctomb+0x16>
 800bbc2:	2aff      	cmp	r2, #255	; 0xff
 800bbc4:	bf85      	ittet	hi
 800bbc6:	238a      	movhi	r3, #138	; 0x8a
 800bbc8:	6003      	strhi	r3, [r0, #0]
 800bbca:	700a      	strbls	r2, [r1, #0]
 800bbcc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbd0:	bf98      	it	ls
 800bbd2:	2001      	movls	r0, #1
 800bbd4:	4770      	bx	lr
 800bbd6:	4608      	mov	r0, r1
 800bbd8:	4770      	bx	lr
	...

0800bbdc <__swsetup_r>:
 800bbdc:	4b32      	ldr	r3, [pc, #200]	; (800bca8 <__swsetup_r+0xcc>)
 800bbde:	b570      	push	{r4, r5, r6, lr}
 800bbe0:	681d      	ldr	r5, [r3, #0]
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	b125      	cbz	r5, 800bbf2 <__swsetup_r+0x16>
 800bbe8:	69ab      	ldr	r3, [r5, #24]
 800bbea:	b913      	cbnz	r3, 800bbf2 <__swsetup_r+0x16>
 800bbec:	4628      	mov	r0, r5
 800bbee:	f7fd fbdf 	bl	80093b0 <__sinit>
 800bbf2:	4b2e      	ldr	r3, [pc, #184]	; (800bcac <__swsetup_r+0xd0>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	d10f      	bne.n	800bc18 <__swsetup_r+0x3c>
 800bbf8:	686c      	ldr	r4, [r5, #4]
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc00:	0719      	lsls	r1, r3, #28
 800bc02:	d42c      	bmi.n	800bc5e <__swsetup_r+0x82>
 800bc04:	06dd      	lsls	r5, r3, #27
 800bc06:	d411      	bmi.n	800bc2c <__swsetup_r+0x50>
 800bc08:	2309      	movs	r3, #9
 800bc0a:	6033      	str	r3, [r6, #0]
 800bc0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295
 800bc16:	e03e      	b.n	800bc96 <__swsetup_r+0xba>
 800bc18:	4b25      	ldr	r3, [pc, #148]	; (800bcb0 <__swsetup_r+0xd4>)
 800bc1a:	429c      	cmp	r4, r3
 800bc1c:	d101      	bne.n	800bc22 <__swsetup_r+0x46>
 800bc1e:	68ac      	ldr	r4, [r5, #8]
 800bc20:	e7eb      	b.n	800bbfa <__swsetup_r+0x1e>
 800bc22:	4b24      	ldr	r3, [pc, #144]	; (800bcb4 <__swsetup_r+0xd8>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	bf08      	it	eq
 800bc28:	68ec      	ldreq	r4, [r5, #12]
 800bc2a:	e7e6      	b.n	800bbfa <__swsetup_r+0x1e>
 800bc2c:	0758      	lsls	r0, r3, #29
 800bc2e:	d512      	bpl.n	800bc56 <__swsetup_r+0x7a>
 800bc30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc32:	b141      	cbz	r1, 800bc46 <__swsetup_r+0x6a>
 800bc34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc38:	4299      	cmp	r1, r3
 800bc3a:	d002      	beq.n	800bc42 <__swsetup_r+0x66>
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff fd73 	bl	800b728 <_free_r>
 800bc42:	2300      	movs	r3, #0
 800bc44:	6363      	str	r3, [r4, #52]	; 0x34
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	6063      	str	r3, [r4, #4]
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f043 0308 	orr.w	r3, r3, #8
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	b94b      	cbnz	r3, 800bc76 <__swsetup_r+0x9a>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc6c:	d003      	beq.n	800bc76 <__swsetup_r+0x9a>
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4630      	mov	r0, r6
 800bc72:	f000 f84d 	bl	800bd10 <__smakebuf_r>
 800bc76:	89a0      	ldrh	r0, [r4, #12]
 800bc78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc7c:	f010 0301 	ands.w	r3, r0, #1
 800bc80:	d00a      	beq.n	800bc98 <__swsetup_r+0xbc>
 800bc82:	2300      	movs	r3, #0
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	6963      	ldr	r3, [r4, #20]
 800bc88:	425b      	negs	r3, r3
 800bc8a:	61a3      	str	r3, [r4, #24]
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	b943      	cbnz	r3, 800bca2 <__swsetup_r+0xc6>
 800bc90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc94:	d1ba      	bne.n	800bc0c <__swsetup_r+0x30>
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	0781      	lsls	r1, r0, #30
 800bc9a:	bf58      	it	pl
 800bc9c:	6963      	ldrpl	r3, [r4, #20]
 800bc9e:	60a3      	str	r3, [r4, #8]
 800bca0:	e7f4      	b.n	800bc8c <__swsetup_r+0xb0>
 800bca2:	2000      	movs	r0, #0
 800bca4:	e7f7      	b.n	800bc96 <__swsetup_r+0xba>
 800bca6:	bf00      	nop
 800bca8:	20000010 	.word	0x20000010
 800bcac:	0800c078 	.word	0x0800c078
 800bcb0:	0800c098 	.word	0x0800c098
 800bcb4:	0800c058 	.word	0x0800c058

0800bcb8 <abort>:
 800bcb8:	b508      	push	{r3, lr}
 800bcba:	2006      	movs	r0, #6
 800bcbc:	f000 f890 	bl	800bde0 <raise>
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	f7f7 fc15 	bl	80034f0 <_exit>

0800bcc6 <__swhatbuf_r>:
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	460e      	mov	r6, r1
 800bcca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	b096      	sub	sp, #88	; 0x58
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	461d      	mov	r5, r3
 800bcd6:	da08      	bge.n	800bcea <__swhatbuf_r+0x24>
 800bcd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	602a      	str	r2, [r5, #0]
 800bce0:	061a      	lsls	r2, r3, #24
 800bce2:	d410      	bmi.n	800bd06 <__swhatbuf_r+0x40>
 800bce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce8:	e00e      	b.n	800bd08 <__swhatbuf_r+0x42>
 800bcea:	466a      	mov	r2, sp
 800bcec:	f000 f894 	bl	800be18 <_fstat_r>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	dbf1      	blt.n	800bcd8 <__swhatbuf_r+0x12>
 800bcf4:	9a01      	ldr	r2, [sp, #4]
 800bcf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcfe:	425a      	negs	r2, r3
 800bd00:	415a      	adcs	r2, r3
 800bd02:	602a      	str	r2, [r5, #0]
 800bd04:	e7ee      	b.n	800bce4 <__swhatbuf_r+0x1e>
 800bd06:	2340      	movs	r3, #64	; 0x40
 800bd08:	2000      	movs	r0, #0
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	b016      	add	sp, #88	; 0x58
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}

0800bd10 <__smakebuf_r>:
 800bd10:	898b      	ldrh	r3, [r1, #12]
 800bd12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd14:	079d      	lsls	r5, r3, #30
 800bd16:	4606      	mov	r6, r0
 800bd18:	460c      	mov	r4, r1
 800bd1a:	d507      	bpl.n	800bd2c <__smakebuf_r+0x1c>
 800bd1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	6123      	str	r3, [r4, #16]
 800bd24:	2301      	movs	r3, #1
 800bd26:	6163      	str	r3, [r4, #20]
 800bd28:	b002      	add	sp, #8
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}
 800bd2c:	ab01      	add	r3, sp, #4
 800bd2e:	466a      	mov	r2, sp
 800bd30:	f7ff ffc9 	bl	800bcc6 <__swhatbuf_r>
 800bd34:	9900      	ldr	r1, [sp, #0]
 800bd36:	4605      	mov	r5, r0
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7fd fc35 	bl	80095a8 <_malloc_r>
 800bd3e:	b948      	cbnz	r0, 800bd54 <__smakebuf_r+0x44>
 800bd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd44:	059a      	lsls	r2, r3, #22
 800bd46:	d4ef      	bmi.n	800bd28 <__smakebuf_r+0x18>
 800bd48:	f023 0303 	bic.w	r3, r3, #3
 800bd4c:	f043 0302 	orr.w	r3, r3, #2
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	e7e3      	b.n	800bd1c <__smakebuf_r+0xc>
 800bd54:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <__smakebuf_r+0x7c>)
 800bd56:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	6020      	str	r0, [r4, #0]
 800bd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	6163      	str	r3, [r4, #20]
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	6120      	str	r0, [r4, #16]
 800bd6a:	b15b      	cbz	r3, 800bd84 <__smakebuf_r+0x74>
 800bd6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd70:	4630      	mov	r0, r6
 800bd72:	f000 f863 	bl	800be3c <_isatty_r>
 800bd76:	b128      	cbz	r0, 800bd84 <__smakebuf_r+0x74>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f023 0303 	bic.w	r3, r3, #3
 800bd7e:	f043 0301 	orr.w	r3, r3, #1
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	89a0      	ldrh	r0, [r4, #12]
 800bd86:	4305      	orrs	r5, r0
 800bd88:	81a5      	strh	r5, [r4, #12]
 800bd8a:	e7cd      	b.n	800bd28 <__smakebuf_r+0x18>
 800bd8c:	08009349 	.word	0x08009349

0800bd90 <_raise_r>:
 800bd90:	291f      	cmp	r1, #31
 800bd92:	b538      	push	{r3, r4, r5, lr}
 800bd94:	4604      	mov	r4, r0
 800bd96:	460d      	mov	r5, r1
 800bd98:	d904      	bls.n	800bda4 <_raise_r+0x14>
 800bd9a:	2316      	movs	r3, #22
 800bd9c:	6003      	str	r3, [r0, #0]
 800bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bda6:	b112      	cbz	r2, 800bdae <_raise_r+0x1e>
 800bda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdac:	b94b      	cbnz	r3, 800bdc2 <_raise_r+0x32>
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f830 	bl	800be14 <_getpid_r>
 800bdb4:	462a      	mov	r2, r5
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	4620      	mov	r0, r4
 800bdba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdbe:	f000 b817 	b.w	800bdf0 <_kill_r>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d00a      	beq.n	800bddc <_raise_r+0x4c>
 800bdc6:	1c59      	adds	r1, r3, #1
 800bdc8:	d103      	bne.n	800bdd2 <_raise_r+0x42>
 800bdca:	2316      	movs	r3, #22
 800bdcc:	6003      	str	r3, [r0, #0]
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e7e7      	b.n	800bda2 <_raise_r+0x12>
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdd8:	4628      	mov	r0, r5
 800bdda:	4798      	blx	r3
 800bddc:	2000      	movs	r0, #0
 800bdde:	e7e0      	b.n	800bda2 <_raise_r+0x12>

0800bde0 <raise>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <raise+0xc>)
 800bde2:	4601      	mov	r1, r0
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f7ff bfd3 	b.w	800bd90 <_raise_r>
 800bdea:	bf00      	nop
 800bdec:	20000010 	.word	0x20000010

0800bdf0 <_kill_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4d07      	ldr	r5, [pc, #28]	; (800be10 <_kill_r+0x20>)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	f7f7 fb67 	bl	80034d0 <_kill>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d102      	bne.n	800be0c <_kill_r+0x1c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b103      	cbz	r3, 800be0c <_kill_r+0x1c>
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	bf00      	nop
 800be10:	20004d80 	.word	0x20004d80

0800be14 <_getpid_r>:
 800be14:	f7f7 bb54 	b.w	80034c0 <_getpid>

0800be18 <_fstat_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d07      	ldr	r5, [pc, #28]	; (800be38 <_fstat_r+0x20>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	4611      	mov	r1, r2
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	f7f7 fbb2 	bl	800358e <_fstat>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d102      	bne.n	800be34 <_fstat_r+0x1c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b103      	cbz	r3, 800be34 <_fstat_r+0x1c>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	20004d80 	.word	0x20004d80

0800be3c <_isatty_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	; (800be58 <_isatty_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f7 fbb1 	bl	80035ae <_isatty>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_isatty_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_isatty_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20004d80 	.word	0x20004d80

0800be5c <_init>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	bf00      	nop
 800be60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be62:	bc08      	pop	{r3}
 800be64:	469e      	mov	lr, r3
 800be66:	4770      	bx	lr

0800be68 <_fini>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

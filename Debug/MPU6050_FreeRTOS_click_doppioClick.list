
MPU6050_FreeRTOS_click_doppioClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bacc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800bc70  0800bc70  0001bc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c18c  0800c18c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c194  0800c194  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c194  0800c194  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c198  0800c198  0001c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  200001e0  0800c37c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d44  0800c37c  00024d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9cf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f74  00000000  00000000  0003ebdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00042b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  000443e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a85b  00000000  00000000  00045ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ced9  00000000  00000000  00060343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ccbe  00000000  00000000  0007d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077f0  00000000  00000000  00119f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc54 	.word	0x0800bc54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bc54 	.word	0x0800bc54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of clickTimer */
  clickTimerHandle = osTimerNew(clickCallback, osTimerOnce, NULL, &clickTimer_attributes);
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_FREERTOS_Init+0x2c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <MX_FREERTOS_Init+0x30>)
 8000f08:	f005 fb06 	bl	8006518 <osTimerNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <MX_FREERTOS_Init+0x34>)
 8000f10:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTask */
  readTaskHandle = osThreadNew(StartReadTask, NULL, &readTask_attributes);
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <MX_FREERTOS_Init+0x38>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_FREERTOS_Init+0x3c>)
 8000f18:	f005 fa3c 	bl	8006394 <osThreadNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <MX_FREERTOS_Init+0x40>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	0800bd34 	.word	0x0800bd34
 8000f2c:	080010ed 	.word	0x080010ed
 8000f30:	20000238 	.word	0x20000238
 8000f34:	0800bd10 	.word	0x0800bd10
 8000f38:	08000f41 	.word	0x08000f41
 8000f3c:	20000234 	.word	0x20000234

08000f40 <StartReadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTask */
void StartReadTask(void *argument)
{
 8000f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f44:	b08b      	sub	sp, #44	; 0x2c
 8000f46:	af02      	add	r7, sp, #8
 8000f48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTask */
	while(MPU6050_Init(&hi2c1,&mpu1,MPU6050_Device_0,MPU6050_Accelerometer_16G,MPU6050_Gyroscope_250s)!=MPU6050_Result_Ok);
 8000f4a:	bf00      	nop
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2303      	movs	r3, #3
 8000f52:	2200      	movs	r2, #0
 8000f54:	495c      	ldr	r1, [pc, #368]	; (80010c8 <StartReadTask+0x188>)
 8000f56:	485d      	ldr	r0, [pc, #372]	; (80010cc <StartReadTask+0x18c>)
 8000f58:	f000 fa41 	bl	80013de <MPU6050_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f4      	bne.n	8000f4c <StartReadTask+0xc>

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f62:	2120      	movs	r1, #32
 8000f64:	485a      	ldr	r0, [pc, #360]	; (80010d0 <StartReadTask+0x190>)
 8000f66:	f002 fddc 	bl	8003b22 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  for(;;)
  {
 8000f6a:	466b      	mov	r3, sp
 8000f6c:	461e      	mov	r6, r3

		  int n=100;
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	61fb      	str	r3, [r7, #28]
		  char value[n];
 8000f72:	69f9      	ldr	r1, [r7, #28]
 8000f74:	1e4b      	subs	r3, r1, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	460a      	mov	r2, r1
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4614      	mov	r4, r2
 8000f7e:	461d      	mov	r5, r3
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	00eb      	lsls	r3, r5, #3
 8000f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f8e:	00e2      	lsls	r2, r4, #3
 8000f90:	460a      	mov	r2, r1
 8000f92:	2300      	movs	r3, #0
 8000f94:	4690      	mov	r8, r2
 8000f96:	4699      	mov	r9, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fa4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fa8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fac:	460b      	mov	r3, r1
 8000fae:	3307      	adds	r3, #7
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	ebad 0d03 	sub.w	sp, sp, r3
 8000fb8:	ab02      	add	r3, sp, #8
 8000fba:	3300      	adds	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
		  MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 8000fbe:	4942      	ldr	r1, [pc, #264]	; (80010c8 <StartReadTask+0x188>)
 8000fc0:	4842      	ldr	r0, [pc, #264]	; (80010cc <StartReadTask+0x18c>)
 8000fc2:	f000 fc00 	bl	80017c6 <MPU6050_ReadGyroscope>
		  MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 8000fc6:	4940      	ldr	r1, [pc, #256]	; (80010c8 <StartReadTask+0x188>)
 8000fc8:	4840      	ldr	r0, [pc, #256]	; (80010cc <StartReadTask+0x18c>)
 8000fca:	f000 fb85 	bl	80016d8 <MPU6050_ReadAccelerometer>

		  //sprintf(value, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",mpu1.gyroscope_X, mpu1.gyroscope_Y, mpu1.gyroscope_Z, mpu1.accelerometer_X, mpu1.accelerometer_Y, mpu1.accelerometer_Z);
		  //HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);

		  /* Click */
		  if ((numClick == 1) && (mpu1.gyroscope_X <= -120 && mpu1.accelerometer_Y < -2)){
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <StartReadTask+0x194>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d119      	bne.n	800100a <StartReadTask+0xca>
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <StartReadTask+0x188>)
 8000fd8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fdc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80010d8 <StartReadTask+0x198>
 8000fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d80f      	bhi.n	800100a <StartReadTask+0xca>
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <StartReadTask+0x188>)
 8000fec:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d505      	bpl.n	800100a <StartReadTask+0xca>
			  numClick += 1;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <StartReadTask+0x194>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <StartReadTask+0x194>)
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e059      	b.n	80010be <StartReadTask+0x17e>
		  } else if(mpu1.gyroscope_X <= -180 && mpu1.accelerometer_Y < -7){
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <StartReadTask+0x188>)
 800100c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001010:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80010dc <StartReadTask+0x19c>
 8001014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d816      	bhi.n	800104c <StartReadTask+0x10c>
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <StartReadTask+0x188>)
 8001020:	edd3 7a07 	vldr	s15, [r3, #28]
 8001024:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d50c      	bpl.n	800104c <StartReadTask+0x10c>
			  /* creation of clickTask */
			  //sprintf(value,"xdotool click 1\n");
			  //HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
			  numClick += 1;
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <StartReadTask+0x194>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <StartReadTask+0x194>)
 800103a:	6013      	str	r3, [r2, #0]
			  osTimerStart(clickTimerHandle, 600);
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <StartReadTask+0x1a0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001044:	4618      	mov	r0, r3
 8001046:	f005 fae3 	bl	8006610 <osTimerStart>
 800104a:	e038      	b.n	80010be <StartReadTask+0x17e>
		  }else if(numClick == 0){
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <StartReadTask+0x194>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d134      	bne.n	80010be <StartReadTask+0x17e>

			  /* Movimento del mouse */
			  int m_x = (-(int)mpu1.accelerometer_X)  * 7;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <StartReadTask+0x188>)
 8001056:	edd3 7a06 	vldr	s15, [r3, #24]
 800105a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105e:	ee17 3a90 	vmov	r3, s15
 8001062:	461a      	mov	r2, r3
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	613b      	str	r3, [r7, #16]
			  int m_y =  -((int) mpu1.accelerometer_Y) * 5;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <StartReadTask+0x188>)
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001074:	ee17 2a90 	vmov	r2, s15
 8001078:	4613      	mov	r3, r2
 800107a:	079b      	lsls	r3, r3, #30
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

			  //sprintf(value,"4,%d,%d\n",m_x,m_y);
			  sprintf(value,"xdotool mousemove_relative -- %d %d\n",m_x,m_y);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4916      	ldr	r1, [pc, #88]	; (80010e4 <StartReadTask+0x1a4>)
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f002 f854 	bl	8003138 <sprintf_>
			  if(abs(m_x) + abs(m_y) >= 14)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001096:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfb8      	it	lt
 80010a0:	425b      	neglt	r3, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	2b0d      	cmp	r3, #13
 80010a6:	dd0a      	ble.n	80010be <StartReadTask+0x17e>
				  HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff f899 	bl	80001e0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <StartReadTask+0x1a8>)
 80010ba:	f004 fd68 	bl	8005b8e <HAL_UART_Transmit>
		  }

    osDelay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f005 f9fa 	bl	80064b8 <osDelay>
 80010c4:	46b5      	mov	sp, r6
  {
 80010c6:	e750      	b.n	8000f6a <StartReadTask+0x2a>
 80010c8:	20000200 	.word	0x20000200
 80010cc:	2000023c 	.word	0x2000023c
 80010d0:	40020000 	.word	0x40020000
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	c2f00000 	.word	0xc2f00000
 80010dc:	c3340000 	.word	0xc3340000
 80010e0:	20000238 	.word	0x20000238
 80010e4:	0800bc88 	.word	0x0800bc88
 80010e8:	200002dc 	.word	0x200002dc

080010ec <clickCallback>:
  /* USER CODE END StartReadTask */
}

/* clickCallback function */
void clickCallback(void *argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN clickCallback */
	char value[100];
	//sprintf(value,"numclick = %d\n",numClick);
	//HAL_UART_Transmit(&huart2, (uint8_t *)value, sizeof(char)*strlen(value), 100);
  /* USER CODE BEGIN OTCallback */
	if(numClick >= 2){
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <clickCallback+0x5c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	dd06      	ble.n	800110a <clickCallback+0x1e>
		  sprintf(value,"xdotool click --repeat 2 1\n");
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4912      	ldr	r1, [pc, #72]	; (800114c <clickCallback+0x60>)
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f818 	bl	8003138 <sprintf_>
 8001108:	e009      	b.n	800111e <clickCallback+0x32>

	}else if(numClick == 1 ){
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <clickCallback+0x5c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d105      	bne.n	800111e <clickCallback+0x32>
		sprintf(value,"xdotool click 1\n");
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <clickCallback+0x64>)
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f80d 	bl	8003138 <sprintf_>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) value, sizeof(char)*strlen(value), HAL_MAX_DELAY);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f85c 	bl	80001e0 <strlen>
 8001128:	4603      	mov	r3, r0
 800112a:	b29a      	uxth	r2, r3
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <clickCallback+0x68>)
 8001136:	f004 fd2a 	bl	8005b8e <HAL_UART_Transmit>
	numClick = 0;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <clickCallback+0x5c>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
  /* USER CODE END clickCallback */
}
 8001140:	bf00      	nop
 8001142:	3770      	adds	r7, #112	; 0x70
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001fc 	.word	0x200001fc
 800114c:	0800bcb0 	.word	0x0800bcb0
 8001150:	0800bccc 	.word	0x0800bccc
 8001154:	200002dc 	.word	0x200002dc

08001158 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_GPIO_Init+0x7c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <MX_GPIO_Init+0x7c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_GPIO_Init+0x7c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_GPIO_Init+0x7c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <MX_GPIO_Init+0x7c>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_GPIO_Init+0x7c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2120      	movs	r1, #32
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <MX_GPIO_Init+0x80>)
 80011ac:	f002 fca0 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011b0:	2320      	movs	r3, #32
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0x80>)
 80011c8:	f002 fb0e 	bl	80037e8 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f002 fc9d 	bl	8003b58 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f8d6 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000023c 	.word	0x2000023c
 8001230:	40005400 	.word	0x40005400
 8001234:	00061a80 	.word	0x00061a80

08001238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12c      	bne.n	80012b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127c:	2312      	movs	r3, #18
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001288:	2304      	movs	r3, #4
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <HAL_I2C_MspInit+0x8c>)
 8001294:	f002 faa8 	bl	80037e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f002 f968 	bl	80035a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f80e 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f7ff ff40 	bl	8001158 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d8:	f7ff ff80 	bl	80011dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80012dc:	f002 f8c4 	bl	8003468 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80012e0:	f005 f80e 	bl	8006300 <osKernelInitialize>
  MX_FREERTOS_Init();
 80012e4:	f7ff fe0a 	bl	8000efc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012e8:	f005 f82e 	bl	8006348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <main+0x24>
	...

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 f825 	bl	800934e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <SystemClock_Config+0xb8>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <SystemClock_Config+0xb8>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <SystemClock_Config+0xb8>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <SystemClock_Config+0xbc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <SystemClock_Config+0xbc>)
 800133e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <SystemClock_Config+0xbc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fcbb 	bl	8004ce0 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001370:	f000 f830 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f003 ff1e 	bl	80051d0 <HAL_RCC_ClockConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800139a:	f000 f81b 	bl	80013d4 <Error_Handler>
  }
}
 800139e:	bf00      	nop
 80013a0:	3750      	adds	r7, #80	; 0x50
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c2:	f002 f90f 	bl	80035e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40014000 	.word	0x40014000

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>

080013de <MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

MPU6050_Result MPU6050_Init(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Device DeviceNumber, MPU6050_Accelerometer AccelerometerSensitivity, MPU6050_Gyroscope GyroscopeSensitivity)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b08a      	sub	sp, #40	; 0x28
 80013e2:	af02      	add	r7, sp, #8
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	4611      	mov	r1, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	460b      	mov	r3, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80013f4:	2375      	movs	r3, #117	; 0x75
 80013f6:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001402:	b2da      	uxtb	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800140e:	7efb      	ldrb	r3, [r7, #27]
 8001410:	b299      	uxth	r1, r3
 8001412:	2305      	movs	r3, #5
 8001414:	2202      	movs	r2, #2
 8001416:	69f8      	ldr	r0, [r7, #28]
 8001418:	f003 f806 	bl	8004428 <HAL_I2C_IsDeviceReady>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MPU6050_Init+0x48>
	{
				return MPU6050_Result_Error;
 8001422:	2301      	movs	r3, #1
 8001424:	e04c      	b.n	80014c0 <MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001426:	7efb      	ldrb	r3, [r7, #27]
 8001428:	b299      	uxth	r1, r3
 800142a:	f107 021a 	add.w	r2, r7, #26
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	69f8      	ldr	r0, [r7, #28]
 8001438:	f002 fcd2 	bl	8003de0 <HAL_I2C_Master_Transmit>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MPU6050_Init+0x68>
		{
			return MPU6050_Result_Error;
 8001442:	2301      	movs	r3, #1
 8001444:	e03c      	b.n	80014c0 <MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001446:	7efb      	ldrb	r3, [r7, #27]
 8001448:	b299      	uxth	r1, r3
 800144a:	f107 0219 	add.w	r2, r7, #25
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	69f8      	ldr	r0, [r7, #28]
 8001458:	f002 fdc0 	bl	8003fdc <HAL_I2C_Master_Receive>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <MPU6050_Init+0x8c>
		{
			return MPU6050_Result_Error;
 8001462:	2301      	movs	r3, #1
 8001464:	e02c      	b.n	80014c0 <MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return MPU6050_Result_DeviceInvalid;
 8001466:	2303      	movs	r3, #3
 8001468:	e02a      	b.n	80014c0 <MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 800146a:	bf00      	nop
 800146c:	7e7b      	ldrb	r3, [r7, #25]
 800146e:	2b68      	cmp	r3, #104	; 0x68
 8001470:	d1f9      	bne.n	8001466 <MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001472:	236b      	movs	r3, #107	; 0x6b
 8001474:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800147a:	7efb      	ldrb	r3, [r7, #27]
 800147c:	b299      	uxth	r1, r3
 800147e:	f107 0214 	add.w	r2, r7, #20
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	69f8      	ldr	r0, [r7, #28]
 800148c:	f002 fca8 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MPU6050_Init+0xbc>
		{
					return MPU6050_Result_Error;
 8001496:	2301      	movs	r3, #1
 8001498:	e012      	b.n	80014c0 <MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 800149a:	2207      	movs	r2, #7
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f812 	bl	80014c8 <MPU6050_SetDataRate>

	/* Config accelerometer */
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f830 	bl	8001510 <MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80014b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014b4:	461a      	mov	r2, r3
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f899 	bl	80015f0 <MPU6050_SetGyroscope>

	/* Return OK */
	return MPU6050_Result_Ok;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <MPU6050_SetDataRate>:

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80014e0:	2319      	movs	r3, #25
 80014e2:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80014e8:	bf00      	nop
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f107 0210 	add.w	r2, r7, #16
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2302      	movs	r3, #2
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f002 fc70 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f1      	bne.n	80014ea <MPU6050_SetDataRate+0x22>

	/* Return OK */
	return MPU6050_Result_Ok;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MPU6050_SetAccelerometer>:

MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001528:	231c      	movs	r3, #28
 800152a:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800152c:	bf00      	nop
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	b299      	uxth	r1, r3
 8001532:	f107 0211 	add.w	r2, r7, #17
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f002 fc4e 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f1      	bne.n	800152e <MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800154a:	bf00      	nop
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	b299      	uxth	r1, r3
 8001550:	f107 0212 	add.w	r2, r7, #18
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f002 fd3d 	bl	8003fdc <HAL_I2C_Master_Receive>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f1      	bne.n	800154c <MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001568:	7cbb      	ldrb	r3, [r7, #18]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	f023 0318 	bic.w	r3, r3, #24
 8001570:	b25a      	sxtb	r2, r3
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	b25b      	sxtb	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b25b      	sxtb	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001580:	bf00      	nop
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	b299      	uxth	r1, r3
 8001586:	f107 0212 	add.w	r2, r7, #18
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f002 fc24 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f1      	bne.n	8001582 <MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d81f      	bhi.n	80015e4 <MPU6050_SetAccelerometer+0xd4>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <MPU6050_SetAccelerometer+0x9c>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015c7 	.word	0x080015c7
 80015b4:	080015d1 	.word	0x080015d1
 80015b8:	080015db 	.word	0x080015db
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80015c2:	609a      	str	r2, [r3, #8]
			break;
 80015c4:	e00f      	b.n	80015e6 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80015cc:	609a      	str	r2, [r3, #8]
			break;
 80015ce:	e00a      	b.n	80015e6 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80015d6:	609a      	str	r2, [r3, #8]
			break;
 80015d8:	e005      	b.n	80015e6 <MPU6050_SetAccelerometer+0xd6>
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80015e0:	609a      	str	r2, [r3, #8]
			break;
 80015e2:	e000      	b.n	80015e6 <MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 80015e4:	bf00      	nop
		}

	/* Return OK */
	return MPU6050_Result_Ok;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <MPU6050_SetGyroscope>:

MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001608:	231b      	movs	r3, #27
 800160a:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800160c:	bf00      	nop
 800160e:	7cfb      	ldrb	r3, [r7, #19]
 8001610:	b299      	uxth	r1, r3
 8001612:	f107 0211 	add.w	r2, r7, #17
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f002 fbde 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f1      	bne.n	800160e <MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800162a:	bf00      	nop
 800162c:	7cfb      	ldrb	r3, [r7, #19]
 800162e:	b299      	uxth	r1, r3
 8001630:	f107 0212 	add.w	r2, r7, #18
 8001634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	6978      	ldr	r0, [r7, #20]
 800163e:	f002 fccd 	bl	8003fdc <HAL_I2C_Master_Receive>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f1      	bne.n	800162c <MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f023 0318 	bic.w	r3, r3, #24
 8001650:	b25a      	sxtb	r2, r3
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001660:	bf00      	nop
 8001662:	7cfb      	ldrb	r3, [r7, #19]
 8001664:	b299      	uxth	r1, r3
 8001666:	f107 0212 	add.w	r2, r7, #18
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f002 fbb4 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f1      	bne.n	8001662 <MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d81b      	bhi.n	80016bc <MPU6050_SetGyroscope+0xcc>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <MPU6050_SetGyroscope+0x9c>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016a5 	.word	0x080016a5
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b5 	.word	0x080016b5
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <MPU6050_SetGyroscope+0xd8>)
 80016a0:	605a      	str	r2, [r3, #4]
				break;
 80016a2:	e00c      	b.n	80016be <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <MPU6050_SetGyroscope+0xdc>)
 80016a8:	605a      	str	r2, [r3, #4]
				break;
 80016aa:	e008      	b.n	80016be <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <MPU6050_SetGyroscope+0xe0>)
 80016b0:	605a      	str	r2, [r3, #4]
				break;
 80016b2:	e004      	b.n	80016be <MPU6050_SetGyroscope+0xce>
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <MPU6050_SetGyroscope+0xe4>)
 80016b8:	605a      	str	r2, [r3, #4]
				break;
 80016ba:	e000      	b.n	80016be <MPU6050_SetGyroscope+0xce>
			default:
				break;
 80016bc:	bf00      	nop
		}
	/* Return OK */
	return MPU6050_Result_Ok;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	3bfa232d 	.word	0x3bfa232d
 80016cc:	3c7a232d 	.word	0x3c7a232d
 80016d0:	3cf9c190 	.word	0x3cf9c190
 80016d4:	3d79c190 	.word	0x3d79c190

080016d8 <MPU6050_ReadAccelerometer>:

MPU6050_Result MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80016e2:	233b      	movs	r3, #59	; 0x3b
 80016e4:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80016f0:	bf00      	nop
 80016f2:	7cfb      	ldrb	r3, [r7, #19]
 80016f4:	b299      	uxth	r1, r3
 80016f6:	f107 020b 	add.w	r2, r7, #11
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f002 fb6c 	bl	8003de0 <HAL_I2C_Master_Transmit>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f1      	bne.n	80016f2 <MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 800170e:	bf00      	nop
 8001710:	7cfb      	ldrb	r3, [r7, #19]
 8001712:	b299      	uxth	r1, r3
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2306      	movs	r3, #6
 8001720:	6978      	ldr	r0, [r7, #20]
 8001722:	f002 fc5b 	bl	8003fdc <HAL_I2C_Master_Receive>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f1      	bne.n	8001710 <MPU6050_ReadAccelerometer+0x38>

	/* Format raw data */
	DataStruct->raw_accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800172c:	7b3b      	ldrb	r3, [r7, #12]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21a      	sxth	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	819a      	strh	r2, [r3, #12]
	DataStruct->raw_accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	81da      	strh	r2, [r3, #14]
	DataStruct->raw_accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8001750:	7c3b      	ldrb	r3, [r7, #16]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b21a      	sxth	r2, r3
 8001756:	7c7b      	ldrb	r3, [r7, #17]
 8001758:	b21b      	sxth	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	b21a      	sxth	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	821a      	strh	r2, [r3, #16]
	/* Save original data */
	DataStruct->accelerometer_X = DataStruct->raw_accelerometer_X * DataStruct -> Acce_Mult;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	edd3 7a02 	vldr	s15, [r3, #8]
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	edc3 7a06 	vstr	s15, [r3, #24]
	DataStruct->accelerometer_Y = DataStruct->raw_accelerometer_Y * DataStruct -> Acce_Mult;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	edd3 7a02 	vldr	s15, [r3, #8]
 8001794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->accelerometer_Z = DataStruct->raw_accelerometer_Z * DataStruct -> Acce_Mult;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	edc3 7a08 	vstr	s15, [r3, #32]
	/* Return OK */
	return MPU6050_Result_Ok;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <MPU6050_ReadGyroscope>:
MPU6050_Result MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b088      	sub	sp, #32
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80017d0:	2343      	movs	r3, #67	; 0x43
 80017d2:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80017de:	bf00      	nop
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	b299      	uxth	r1, r3
 80017e4:	f107 020b 	add.w	r2, r7, #11
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f002 faf5 	bl	8003de0 <HAL_I2C_Master_Transmit>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f1      	bne.n	80017e0 <MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80017fc:	bf00      	nop
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2306      	movs	r3, #6
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f002 fbe4 	bl	8003fdc <HAL_I2C_Master_Receive>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f1      	bne.n	80017fe <MPU6050_ReadGyroscope+0x38>

	/* Format raw data */
	DataStruct->raw_gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21a      	sxth	r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	825a      	strh	r2, [r3, #18]
	DataStruct->raw_gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	b21b      	sxth	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b21a      	sxth	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	829a      	strh	r2, [r3, #20]
	DataStruct->raw_gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 800183e:	7c3b      	ldrb	r3, [r7, #16]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	7c7b      	ldrb	r3, [r7, #17]
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21a      	sxth	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	82da      	strh	r2, [r3, #22]
	/* Save original data */
	DataStruct->gyroscope_X = DataStruct->raw_gyroscope_X * DataStruct -> Gyro_Mult;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	edd3 7a01 	vldr	s15, [r3, #4]
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->gyroscope_Y = DataStruct->raw_gyroscope_Y * DataStruct -> Gyro_Mult;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->gyroscope_Z = DataStruct->raw_gyroscope_Z * DataStruct -> Gyro_Mult;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Return OK */
	return MPU6050_Result_Ok;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d204      	bcs.n	80018d6 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	701a      	strb	r2, [r3, #0]
  }
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e002      	b.n	8001914 <_strnlen_s+0x16>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <_strnlen_s+0x28>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f3      	bne.n	800190e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad3      	subs	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b2f      	cmp	r3, #47	; 0x2f
 8001946:	d904      	bls.n	8001952 <_is_digit+0x1a>
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2b39      	cmp	r3, #57	; 0x39
 800194c:	d801      	bhi.n	8001952 <_is_digit+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <_is_digit+0x1c>
 8001952:	2300      	movs	r3, #0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001972:	e00e      	b.n	8001992 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4618      	mov	r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1c59      	adds	r1, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6011      	str	r1, [r2, #0]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4403      	add	r3, r0
 800198e:	3b30      	subs	r3, #48	; 0x30
 8001990:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffcd 	bl	8001938 <_is_digit>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e7      	bne.n	8001974 <_atoi+0xe>
  }
  return i;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80019ae:	b590      	push	{r4, r7, lr}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d125      	bne.n	8001a16 <_out_rev+0x68>
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d120      	bne.n	8001a16 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	1c53      	adds	r3, r2, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	68fc      	ldr	r4, [r7, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	2020      	movs	r0, #32
 80019e8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3f0      	bcc.n	80019da <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80019f8:	e00d      	b.n	8001a16 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	3b01      	subs	r3, #1
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	4413      	add	r3, r2
 8001a06:	7818      	ldrb	r0, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	1c53      	adds	r3, r2, #1
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	68fc      	ldr	r4, [r7, #12]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	47a0      	blx	r4
  while (len) {
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ee      	bne.n	80019fa <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00e      	beq.n	8001a44 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001a26:	e007      	b.n	8001a38 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	1c53      	adds	r3, r2, #1
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	68fc      	ldr	r4, [r7, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	2020      	movs	r0, #32
 8001a36:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f1      	bhi.n	8001a28 <_out_rev+0x7a>
    }
  }

  return idx;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}

08001a4e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b088      	sub	sp, #32
 8001a52:	af04      	add	r7, sp, #16
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d136      	bne.n	8001ad4 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <_ntoa_format+0x50>
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d013      	beq.n	8001a9e <_ntoa_format+0x50>
 8001a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d104      	bne.n	8001a88 <_ntoa_format+0x3a>
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <_ntoa_format+0x50>
      width--;
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a8e:	e006      	b.n	8001a9e <_ntoa_format+0x50>
      buf[len++] = '0';
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	61fa      	str	r2, [r7, #28]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2230      	movs	r2, #48	; 0x30
 8001a9c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d20a      	bcs.n	8001abc <_ntoa_format+0x6e>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	2b1f      	cmp	r3, #31
 8001aaa:	d9f1      	bls.n	8001a90 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001aac:	e006      	b.n	8001abc <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2230      	movs	r2, #48	; 0x30
 8001aba:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <_ntoa_format+0x86>
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d202      	bcs.n	8001ad4 <_ntoa_format+0x86>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b1f      	cmp	r3, #31
 8001ad2:	d9ec      	bls.n	8001aae <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d058      	beq.n	8001b90 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d116      	bne.n	8001b16 <_ntoa_format+0xc8>
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d013      	beq.n	8001b16 <_ntoa_format+0xc8>
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d003      	beq.n	8001afe <_ntoa_format+0xb0>
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d10b      	bne.n	8001b16 <_ntoa_format+0xc8>
      len--;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <_ntoa_format+0xc8>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d102      	bne.n	8001b16 <_ntoa_format+0xc8>
        len--;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d10f      	bne.n	8001b3c <_ntoa_format+0xee>
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <_ntoa_format+0xee>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	d807      	bhi.n	8001b3c <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	61fa      	str	r2, [r7, #28]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4413      	add	r3, r2
 8001b36:	2278      	movs	r2, #120	; 0x78
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e01f      	b.n	8001b7c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d10f      	bne.n	8001b62 <_ntoa_format+0x114>
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <_ntoa_format+0x114>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b1f      	cmp	r3, #31
 8001b50:	d807      	bhi.n	8001b62 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	61fa      	str	r2, [r7, #28]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2258      	movs	r2, #88	; 0x58
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e00c      	b.n	8001b7c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d109      	bne.n	8001b7c <_ntoa_format+0x12e>
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b1f      	cmp	r3, #31
 8001b6c:	d806      	bhi.n	8001b7c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	61fa      	str	r2, [r7, #28]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4413      	add	r3, r2
 8001b78:	2262      	movs	r2, #98	; 0x62
 8001b7a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b1f      	cmp	r3, #31
 8001b80:	d806      	bhi.n	8001b90 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	61fa      	str	r2, [r7, #28]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2230      	movs	r2, #48	; 0x30
 8001b8e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b1f      	cmp	r3, #31
 8001b94:	d824      	bhi.n	8001be0 <_ntoa_format+0x192>
    if (negative) {
 8001b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <_ntoa_format+0x160>
      buf[len++] = '-';
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	61fa      	str	r2, [r7, #28]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	222d      	movs	r2, #45	; 0x2d
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e018      	b.n	8001be0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	61fa      	str	r2, [r7, #28]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	222b      	movs	r2, #43	; 0x2b
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e00b      	b.n	8001be0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	61fa      	str	r2, [r7, #28]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2220      	movs	r2, #32
 8001bde:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fed9 	bl	80019ae <_out_rev>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b096      	sub	sp, #88	; 0x58
 8001c0a:	af08      	add	r7, sp, #32
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	f023 0310 	bic.w	r3, r3, #16
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <_ntoa_long+0x30>
 8001c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d032      	beq.n	8001c9c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c40:	fb01 f202 	mul.w	r2, r1, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	d804      	bhi.n	8001c5c <_ntoa_long+0x56>
 8001c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c56:	3330      	adds	r3, #48	; 0x30
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	e00d      	b.n	8001c78 <_ntoa_long+0x72>
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_ntoa_long+0x64>
 8001c66:	2241      	movs	r2, #65	; 0x41
 8001c68:	e000      	b.n	8001c6c <_ntoa_long+0x66>
 8001c6a:	2261      	movs	r2, #97	; 0x61
 8001c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c70:	4413      	add	r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3b0a      	subs	r3, #10
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	6379      	str	r1, [r7, #52]	; 0x34
 8001c7e:	3338      	adds	r3, #56	; 0x38
 8001c80:	443b      	add	r3, r7
 8001c82:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <_ntoa_long+0x96>
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	2b1f      	cmp	r3, #31
 8001c9a:	d9cc      	bls.n	8001c36 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	9306      	str	r3, [sp, #24]
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca2:	9305      	str	r3, [sp, #20]
 8001ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca6:	9304      	str	r3, [sp, #16]
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001caa:	9303      	str	r3, [sp, #12]
 8001cac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7ff fec3 	bl	8001a4e <_ntoa_format>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3738      	adds	r7, #56	; 0x38
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b096      	sub	sp, #88	; 0x58
 8001cd6:	af08      	add	r7, sp, #32
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	d103      	bne.n	8001cf4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cee:	f023 0310 	bic.w	r3, r3, #16
 8001cf2:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <_ntoa_long_long+0x34>
 8001cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d02:	4313      	orrs	r3, r2
 8001d04:	d037      	beq.n	8001d76 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001d06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d0e:	f7fe ff73 	bl	8000bf8 <__aeabi_uldivmod>
 8001d12:	4613      	mov	r3, r2
 8001d14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d804      	bhi.n	8001d2a <_ntoa_long_long+0x58>
 8001d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d24:	3330      	adds	r3, #48	; 0x30
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	e00d      	b.n	8001d46 <_ntoa_long_long+0x74>
 8001d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <_ntoa_long_long+0x66>
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	e000      	b.n	8001d3a <_ntoa_long_long+0x68>
 8001d38:	2261      	movs	r2, #97	; 0x61
 8001d3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3b0a      	subs	r3, #10
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	1c59      	adds	r1, r3, #1
 8001d4a:	6379      	str	r1, [r7, #52]	; 0x34
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	443b      	add	r3, r7
 8001d50:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d5c:	f7fe ff4c 	bl	8000bf8 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001d68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	d002      	beq.n	8001d76 <_ntoa_long_long+0xa4>
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2b1f      	cmp	r3, #31
 8001d74:	d9c7      	bls.n	8001d06 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7a:	9206      	str	r2, [sp, #24]
 8001d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d7e:	9205      	str	r2, [sp, #20]
 8001d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d82:	9204      	str	r2, [sp, #16]
 8001d84:	9303      	str	r3, [sp, #12]
 8001d86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fe56 	bl	8001a4e <_ntoa_format>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3738      	adds	r7, #56	; 0x38
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b09d      	sub	sp, #116	; 0x74
 8001db4:	af04      	add	r7, sp, #16
 8001db6:	6178      	str	r0, [r7, #20]
 8001db8:	6139      	str	r1, [r7, #16]
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dda:	f7fe fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10f      	bne.n	8001e04 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de6:	9303      	str	r3, [sp, #12]
 8001de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2303      	movs	r3, #3
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	4ba7      	ldr	r3, [pc, #668]	; (8002090 <_ftoa+0x2e0>)
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff fdd7 	bl	80019ae <_out_rev>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e222      	b.n	800224a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e10:	f7fe fe6c 	bl	8000aec <__aeabi_dcmplt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00f      	beq.n	8001e3a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	2304      	movs	r3, #4
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <_ftoa+0x2e4>)
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	6939      	ldr	r1, [r7, #16]
 8001e30:	6978      	ldr	r0, [r7, #20]
 8001e32:	f7ff fdbc 	bl	80019ae <_out_rev>
 8001e36:	4603      	mov	r3, r0
 8001e38:	e207      	b.n	800224a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3e:	4b96      	ldr	r3, [pc, #600]	; (8002098 <_ftoa+0x2e8>)
 8001e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e44:	f7fe fe70 	bl	8000b28 <__aeabi_dcmpgt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01d      	beq.n	8001e8a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_ftoa+0xac>
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <_ftoa+0x2ec>)
 8001e5a:	e000      	b.n	8001e5e <_ftoa+0xae>
 8001e5c:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <_ftoa+0x2f0>)
 8001e5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e60:	f002 0204 	and.w	r2, r2, #4
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d001      	beq.n	8001e6c <_ftoa+0xbc>
 8001e68:	2204      	movs	r2, #4
 8001e6a:	e000      	b.n	8001e6e <_ftoa+0xbe>
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e70:	9103      	str	r1, [sp, #12]
 8001e72:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001e74:	9102      	str	r1, [sp, #8]
 8001e76:	9201      	str	r2, [sp, #4]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f7ff fd94 	bl	80019ae <_out_rev>
 8001e86:	4603      	mov	r3, r0
 8001e88:	e1df      	b.n	800224a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001e8a:	a37d      	add	r3, pc, #500	; (adr r3, 8002080 <_ftoa+0x2d0>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e94:	f7fe fe48 	bl	8000b28 <__aeabi_dcmpgt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <_ftoa+0x102>
 8001e9e:	a37a      	add	r3, pc, #488	; (adr r3, 8002088 <_ftoa+0x2d8>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ea8:	f7fe fe20 	bl	8000aec <__aeabi_dcmplt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	ed97 0b00 	vldr	d0, [r7]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f000 f9c9 	bl	8002260 <_etoa>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	e1bb      	b.n	800224a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee4:	f7fe fe02 	bl	8000aec <__aeabi_dcmplt>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00e      	beq.n	8001f0c <_ftoa+0x15c>
    negative = true;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f7fe f9ca 	bl	8000298 <__aeabi_dsub>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001f16:	2306      	movs	r3, #6
 8001f18:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001f1a:	e00a      	b.n	8001f32 <_ftoa+0x182>
    buf[len++] = '0';
 8001f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f22:	3360      	adds	r3, #96	; 0x60
 8001f24:	443b      	add	r3, r7
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	2b1f      	cmp	r3, #31
 8001f36:	d802      	bhi.n	8001f3e <_ftoa+0x18e>
 8001f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	d8ee      	bhi.n	8001f1c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001f3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f42:	f7fe fe11 	bl	8000b68 <__aeabi_d2iz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001f4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f4c:	f7fe faf2 	bl	8000534 <__aeabi_i2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f58:	f7fe f99e 	bl	8000298 <__aeabi_dsub>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <_ftoa+0x2f4>)
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb4a 	bl	8000608 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001f7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f80:	f7fe fe1a 	bl	8000bb8 <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001f88:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f8a:	f7fe fac3 	bl	8000514 <__aeabi_ui2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f96:	f7fe f97f 	bl	8000298 <__aeabi_dsub>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <_ftoa+0x2f8>)
 8001fa8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001fac:	f7fe fdbc 	bl	8000b28 <__aeabi_dcmpgt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <_ftoa+0x234>
    ++frac;
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	3301      	adds	r3, #1
 8001fba:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001fbc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001fbe:	f7fe faa9 	bl	8000514 <__aeabi_ui2d>
 8001fc2:	4a38      	ldr	r2, [pc, #224]	; (80020a4 <_ftoa+0x2f4>)
 8001fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fda1 	bl	8000b14 <__aeabi_dcmpge>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01a      	beq.n	800200e <_ftoa+0x25e>
      frac = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fde:	3301      	adds	r3, #1
 8001fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe2:	e014      	b.n	800200e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <_ftoa+0x2f8>)
 8001fea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001fee:	f7fe fd7d 	bl	8000aec <__aeabi_dcmplt>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <_ftoa+0x258>
 8001ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	3301      	adds	r3, #1
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800200e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002010:	2b00      	cmp	r3, #0
 8002012:	d14b      	bne.n	80020ac <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002014:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002016:	f7fe fa8d 	bl	8000534 <__aeabi_i2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002022:	f7fe f939 	bl	8000298 <__aeabi_dsub>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800202e:	2301      	movs	r3, #1
 8002030:	461c      	mov	r4, r3
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <_ftoa+0x2f8>)
 8002038:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800203c:	f7fe fd56 	bl	8000aec <__aeabi_dcmplt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <_ftoa+0x29a>
 8002046:	2300      	movs	r3, #0
 8002048:	461c      	mov	r4, r3
 800204a:	b2e3      	uxtb	r3, r4
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <_ftoa+0x2ba>
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <_ftoa+0x2f8>)
 800205c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002060:	f7fe fd62 	bl	8000b28 <__aeabi_dcmpgt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d064      	beq.n	8002134 <_ftoa+0x384>
 800206a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8081 	beq.w	8002178 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	3301      	adds	r3, #1
 800207a:	657b      	str	r3, [r7, #84]	; 0x54
 800207c:	e07c      	b.n	8002178 <_ftoa+0x3c8>
 800207e:	bf00      	nop
 8002080:	00000000 	.word	0x00000000
 8002084:	41cdcd65 	.word	0x41cdcd65
 8002088:	00000000 	.word	0x00000000
 800208c:	c1cdcd65 	.word	0xc1cdcd65
 8002090:	0800bce0 	.word	0x0800bce0
 8002094:	0800bce4 	.word	0x0800bce4
 8002098:	7fefffff 	.word	0x7fefffff
 800209c:	0800bcec 	.word	0x0800bcec
 80020a0:	0800bcf4 	.word	0x0800bcf4
 80020a4:	0800bd48 	.word	0x0800bd48
 80020a8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80020ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020b0:	e01f      	b.n	80020f2 <_ftoa+0x342>
      --count;
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b4:	3b01      	subs	r3, #1
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80020b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020ba:	4b66      	ldr	r3, [pc, #408]	; (8002254 <_ftoa+0x4a4>)
 80020bc:	fba3 2301 	umull	r2, r3, r3, r1
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	1aca      	subs	r2, r1, r3
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d0:	1c59      	adds	r1, r3, #1
 80020d2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80020d4:	3230      	adds	r2, #48	; 0x30
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	3360      	adds	r3, #96	; 0x60
 80020da:	443b      	add	r3, r7
 80020dc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80020e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e2:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <_ftoa+0x4a4>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	653b      	str	r3, [r7, #80]	; 0x50
 80020ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	d9dc      	bls.n	80020b2 <_ftoa+0x302>
 80020f8:	e009      	b.n	800210e <_ftoa+0x35e>
        break;
 80020fa:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80020fc:	e007      	b.n	800210e <_ftoa+0x35e>
      buf[len++] = '0';
 80020fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002104:	3360      	adds	r3, #96	; 0x60
 8002106:	443b      	add	r3, r7
 8002108:	2230      	movs	r2, #48	; 0x30
 800210a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	2b1f      	cmp	r3, #31
 8002112:	d804      	bhi.n	800211e <_ftoa+0x36e>
 8002114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	64fa      	str	r2, [r7, #76]	; 0x4c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ef      	bne.n	80020fe <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	2b1f      	cmp	r3, #31
 8002122:	d829      	bhi.n	8002178 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	65fa      	str	r2, [r7, #92]	; 0x5c
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	443b      	add	r3, r7
 800212e:	222e      	movs	r2, #46	; 0x2e
 8002130:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002134:	e020      	b.n	8002178 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002136:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <_ftoa+0x4a8>)
 800213a:	fb83 1302 	smull	r1, r3, r3, r2
 800213e:	1099      	asrs	r1, r3, #2
 8002140:	17d3      	asrs	r3, r2, #31
 8002142:	1ac9      	subs	r1, r1, r3
 8002144:	460b      	mov	r3, r1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	1ad1      	subs	r1, r2, r3
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002152:	1c59      	adds	r1, r3, #1
 8002154:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002156:	3230      	adds	r2, #48	; 0x30
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	443b      	add	r3, r7
 800215e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002164:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <_ftoa+0x4a8>)
 8002166:	fb82 1203 	smull	r1, r2, r2, r3
 800216a:	1092      	asrs	r2, r2, #2
 800216c:	17db      	asrs	r3, r3, #31
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217a:	2b1f      	cmp	r3, #31
 800217c:	d9db      	bls.n	8002136 <_ftoa+0x386>
 800217e:	e000      	b.n	8002182 <_ftoa+0x3d2>
      break;
 8002180:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d123      	bne.n	80021d4 <_ftoa+0x424>
 800218c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01e      	beq.n	80021d4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002198:	2b00      	cmp	r3, #0
 800219a:	d014      	beq.n	80021c6 <_ftoa+0x416>
 800219c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <_ftoa+0x3fe>
 80021a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <_ftoa+0x416>
      width--;
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	3b01      	subs	r3, #1
 80021b2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80021b4:	e007      	b.n	80021c6 <_ftoa+0x416>
      buf[len++] = '0';
 80021b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021bc:	3360      	adds	r3, #96	; 0x60
 80021be:	443b      	add	r3, r7
 80021c0:	2230      	movs	r2, #48	; 0x30
 80021c2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80021c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d202      	bcs.n	80021d4 <_ftoa+0x424>
 80021ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d0:	2b1f      	cmp	r3, #31
 80021d2:	d9f0      	bls.n	80021b6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d6:	2b1f      	cmp	r3, #31
 80021d8:	d827      	bhi.n	800222a <_ftoa+0x47a>
    if (negative) {
 80021da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <_ftoa+0x444>
      buf[len++] = '-';
 80021e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	443b      	add	r3, r7
 80021ec:	222d      	movs	r2, #45	; 0x2d
 80021ee:	f803 2c48 	strb.w	r2, [r3, #-72]
 80021f2:	e01a      	b.n	800222a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80021f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80021fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	443b      	add	r3, r7
 8002208:	222b      	movs	r2, #43	; 0x2b
 800220a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800220e:	e00c      	b.n	800222a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <_ftoa+0x47a>
      buf[len++] = ' ';
 800221a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	443b      	add	r3, r7
 8002224:	2220      	movs	r2, #32
 8002226:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800222a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222c:	9303      	str	r3, [sp, #12]
 800222e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002230:	9302      	str	r3, [sp, #8]
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff fbb3 	bl	80019ae <_out_rev>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3764      	adds	r7, #100	; 0x64
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop
 8002254:	cccccccd 	.word	0xcccccccd
 8002258:	66666667 	.word	0x66666667
 800225c:	00000000 	.word	0x00000000

08002260 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002264:	b09f      	sub	sp, #124	; 0x7c
 8002266:	af06      	add	r7, sp, #24
 8002268:	6278      	str	r0, [r7, #36]	; 0x24
 800226a:	6239      	str	r1, [r7, #32]
 800226c:	61fa      	str	r2, [r7, #28]
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002278:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800227c:	f7fe fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d014      	beq.n	80022b0 <_etoa+0x50>
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	4bc1      	ldr	r3, [pc, #772]	; (8002590 <_etoa+0x330>)
 800228c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002290:	f7fe fc4a 	bl	8000b28 <__aeabi_dcmpgt>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <_etoa+0x50>
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80022a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022a6:	f7fe fc21 	bl	8000aec <__aeabi_dcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80022b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	ed97 0b04 	vldr	d0, [r7, #16]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	6a39      	ldr	r1, [r7, #32]
 80022cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ce:	f7ff fd6f 	bl	8001db0 <_ftoa>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e23f      	b.n	8002756 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80022d6:	2301      	movs	r3, #1
 80022d8:	461e      	mov	r6, r3
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e6:	f7fe fc01 	bl	8000aec <__aeabi_dcmplt>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <_etoa+0x94>
 80022f0:	2300      	movs	r3, #0
 80022f2:	461e      	mov	r6, r3
 80022f4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80022f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d009      	beq.n	8002314 <_etoa+0xb4>
    value = -value;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	ed97 7b00 	vldr	d7, [r7]
 8002310:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002320:	2306      	movs	r3, #6
 8002322:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800232a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800232e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	0d0a      	lsrs	r2, r1, #20
 800233c:	2300      	movs	r3, #0
 800233e:	4613      	mov	r3, r2
 8002340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002344:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002348:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800234a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234e:	4690      	mov	r8, r2
 8002350:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002354:	4644      	mov	r4, r8
 8002356:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800235a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800235e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002364:	f7fe f8e6 	bl	8000534 <__aeabi_i2d>
 8002368:	a37d      	add	r3, pc, #500	; (adr r3, 8002560 <_etoa+0x300>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fe f94b 	bl	8000608 <__aeabi_dmul>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	a37b      	add	r3, pc, #492	; (adr r3, 8002568 <_etoa+0x308>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fd ff8c 	bl	800029c <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <_etoa+0x334>)
 8002396:	f7fd ff7f 	bl	8000298 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	a373      	add	r3, pc, #460	; (adr r3, 8002570 <_etoa+0x310>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f92e 	bl	8000608 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff72 	bl	800029c <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fbd2 	bl	8000b68 <__aeabi_d2iz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80023c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023ca:	f7fe f8b3 	bl	8000534 <__aeabi_i2d>
 80023ce:	a36a      	add	r3, pc, #424	; (adr r3, 8002578 <_etoa+0x318>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f918 	bl	8000608 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <_etoa+0x338>)
 80023e6:	f7fd ff59 	bl	800029c <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbb9 	bl	8000b68 <__aeabi_d2iz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80023fa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023fc:	f7fe f89a 	bl	8000534 <__aeabi_i2d>
 8002400:	a35f      	add	r3, pc, #380	; (adr r3, 8002580 <_etoa+0x320>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe f8ff 	bl	8000608 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002414:	f7fe f88e 	bl	8000534 <__aeabi_i2d>
 8002418:	a35b      	add	r3, pc, #364	; (adr r3, 8002588 <_etoa+0x328>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fe f8f3 	bl	8000608 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd ff35 	bl	8000298 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8002436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800243a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800243e:	f7fe f8e3 	bl	8000608 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800244a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002450:	17da      	asrs	r2, r3, #31
 8002452:	469a      	mov	sl, r3
 8002454:	4693      	mov	fp, r2
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002462:	2200      	movs	r2, #0
 8002464:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002468:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800246c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	f7fd ff12 	bl	800029c <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4690      	mov	r8, r2
 800247e:	4699      	mov	r9, r3
 8002480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002484:	f04f 0000 	mov.w	r0, #0
 8002488:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800248c:	f7fd ff04 	bl	8000298 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4692      	mov	sl, r2
 8002496:	469b      	mov	fp, r3
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <_etoa+0x33c>)
 800249e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024a2:	f7fe f9db 	bl	800085c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <_etoa+0x340>)
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024c0:	f7fe f9cc 	bl	800085c <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <_etoa+0x344>)
 80024d2:	f7fd fee3 	bl	800029c <__adddf3>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024de:	f7fe f9bd 	bl	800085c <__aeabi_ddiv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4650      	mov	r0, sl
 80024e8:	4659      	mov	r1, fp
 80024ea:	f7fd fed7 	bl	800029c <__adddf3>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fe f9b1 	bl	800085c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <_etoa+0x348>)
 8002508:	f7fd fec8 	bl	800029c <__adddf3>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fe f878 	bl	8000608 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002524:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002528:	f7fe fae0 	bl	8000aec <__aeabi_dcmplt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <_etoa+0x2ee>
    expval--;
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	3b01      	subs	r3, #1
 8002536:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002538:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <_etoa+0x340>)
 8002542:	f7fe f98b 	bl	800085c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	2b63      	cmp	r3, #99	; 0x63
 8002552:	dc2b      	bgt.n	80025ac <_etoa+0x34c>
 8002554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002556:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800255a:	db27      	blt.n	80025ac <_etoa+0x34c>
 800255c:	2304      	movs	r3, #4
 800255e:	e026      	b.n	80025ae <_etoa+0x34e>
 8002560:	509f79fb 	.word	0x509f79fb
 8002564:	3fd34413 	.word	0x3fd34413
 8002568:	8b60c8b3 	.word	0x8b60c8b3
 800256c:	3fc68a28 	.word	0x3fc68a28
 8002570:	636f4361 	.word	0x636f4361
 8002574:	3fd287a7 	.word	0x3fd287a7
 8002578:	0979a371 	.word	0x0979a371
 800257c:	400a934f 	.word	0x400a934f
 8002580:	bbb55516 	.word	0xbbb55516
 8002584:	40026bb1 	.word	0x40026bb1
 8002588:	fefa39ef 	.word	0xfefa39ef
 800258c:	3fe62e42 	.word	0x3fe62e42
 8002590:	7fefffff 	.word	0x7fefffff
 8002594:	3ff80000 	.word	0x3ff80000
 8002598:	3fe00000 	.word	0x3fe00000
 800259c:	402c0000 	.word	0x402c0000
 80025a0:	40240000 	.word	0x40240000
 80025a4:	40180000 	.word	0x40180000
 80025a8:	3ff00000 	.word	0x3ff00000
 80025ac:	2305      	movs	r3, #5
 80025ae:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80025b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d03d      	beq.n	8002638 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80025bc:	a368      	add	r3, pc, #416	; (adr r3, 8002760 <_etoa+0x500>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025c6:	f7fe faa5 	bl	8000b14 <__aeabi_dcmpge>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d024      	beq.n	800261a <_etoa+0x3ba>
 80025d0:	a365      	add	r3, pc, #404	; (adr r3, 8002768 <_etoa+0x508>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025da:	f7fe fa87 	bl	8000aec <__aeabi_dcmplt>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01a      	beq.n	800261a <_etoa+0x3ba>
      if ((int)prec > expval) {
 80025e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025ea:	429a      	cmp	r2, r3
 80025ec:	da07      	bge.n	80025fe <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80025ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80025f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025fc:	e002      	b.n	8002604 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002618:	e00e      	b.n	8002638 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800261a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <_etoa+0x3d8>
 8002622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <_etoa+0x3d8>
        --prec;
 800262e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002632:	3b01      	subs	r3, #1
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800263e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002644:	429a      	cmp	r2, r3
 8002646:	d904      	bls.n	8002652 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
 8002650:	e001      	b.n	8002656 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <_etoa+0x40c>
 8002662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800266c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <_etoa+0x426>
    value /= conv.F;
 8002672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800267a:	f7fe f8ef 	bl	800085c <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800268a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <_etoa+0x440>
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e003      	b.n	80026a8 <_etoa+0x448>
 80026a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80026a4:	ed87 7b02 	vstr	d7, [r7, #8]
 80026a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b0:	9302      	str	r3, [sp, #8]
 80026b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026c8:	f7ff fb72 	bl	8001db0 <_ftoa>
 80026cc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80026ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03f      	beq.n	8002754 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80026d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <_etoa+0x484>
 80026e0:	2045      	movs	r0, #69	; 0x45
 80026e2:	e000      	b.n	80026e6 <_etoa+0x486>
 80026e4:	2065      	movs	r0, #101	; 0x65
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	1c53      	adds	r3, r2, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bfb8      	it	lt
 80026fa:	425b      	neglt	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002700:	0fdb      	lsrs	r3, r3, #31
 8002702:	b2db      	uxtb	r3, r3
 8002704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002706:	3a01      	subs	r2, #1
 8002708:	2105      	movs	r1, #5
 800270a:	9105      	str	r1, [sp, #20]
 800270c:	9204      	str	r2, [sp, #16]
 800270e:	2200      	movs	r2, #0
 8002710:	9203      	str	r2, [sp, #12]
 8002712:	220a      	movs	r2, #10
 8002714:	9202      	str	r2, [sp, #8]
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	9000      	str	r0, [sp, #0]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002722:	f7ff fa70 	bl	8001c06 <_ntoa_long>
 8002726:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00f      	beq.n	8002754 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002734:	e007      	b.n	8002746 <_etoa+0x4e6>
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	1c53      	adds	r3, r2, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	2020      	movs	r0, #32
 8002744:	47a0      	blx	r4
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002750:	429a      	cmp	r2, r3
 8002752:	d8f0      	bhi.n	8002736 <_etoa+0x4d6>
    }
  }
  return idx;
 8002754:	69fb      	ldr	r3, [r7, #28]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3764      	adds	r7, #100	; 0x64
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002760:	eb1c432d 	.word	0xeb1c432d
 8002764:	3f1a36e2 	.word	0x3f1a36e2
 8002768:	00000000 	.word	0x00000000
 800276c:	412e8480 	.word	0x412e8480

08002770 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002774:	b0a3      	sub	sp, #140	; 0x8c
 8002776:	af0a      	add	r7, sp, #40	; 0x28
 8002778:	6178      	str	r0, [r7, #20]
 800277a:	6139      	str	r1, [r7, #16]
 800277c:	60fa      	str	r2, [r7, #12]
 800277e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 84be 	bne.w	8003108 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800278c:	4ba3      	ldr	r3, [pc, #652]	; (8002a1c <_vsnprintf+0x2ac>)
 800278e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002790:	f000 bcba 	b.w	8003108 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b25      	cmp	r3, #37	; 0x25
 800279a:	d00d      	beq.n	80027b8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	7818      	ldrb	r0, [r3, #0]
 80027a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027a2:	1c53      	adds	r3, r2, #1
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a6:	697c      	ldr	r4, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6939      	ldr	r1, [r7, #16]
 80027ac:	47a0      	blx	r4
      format++;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
      continue;
 80027b4:	f000 bca8 	b.w	8003108 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3b20      	subs	r3, #32
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d857      	bhi.n	800287c <_vsnprintf+0x10c>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <_vsnprintf+0x64>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	08002855 	.word	0x08002855
 80027d8:	0800287d 	.word	0x0800287d
 80027dc:	0800287d 	.word	0x0800287d
 80027e0:	08002869 	.word	0x08002869
 80027e4:	0800287d 	.word	0x0800287d
 80027e8:	0800287d 	.word	0x0800287d
 80027ec:	0800287d 	.word	0x0800287d
 80027f0:	0800287d 	.word	0x0800287d
 80027f4:	0800287d 	.word	0x0800287d
 80027f8:	0800287d 	.word	0x0800287d
 80027fc:	0800287d 	.word	0x0800287d
 8002800:	08002841 	.word	0x08002841
 8002804:	0800287d 	.word	0x0800287d
 8002808:	0800282d 	.word	0x0800282d
 800280c:	0800287d 	.word	0x0800287d
 8002810:	0800287d 	.word	0x0800287d
 8002814:	08002819 	.word	0x08002819
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3301      	adds	r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	2301      	movs	r3, #1
 8002828:	653b      	str	r3, [r7, #80]	; 0x50
 800282a:	e02a      	b.n	8002882 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800282c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3301      	adds	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	2301      	movs	r3, #1
 800283c:	653b      	str	r3, [r7, #80]	; 0x50
 800283e:	e020      	b.n	8002882 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002842:	f043 0304 	orr.w	r3, r3, #4
 8002846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	3301      	adds	r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	653b      	str	r3, [r7, #80]	; 0x50
 8002852:	e016      	b.n	8002882 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	2301      	movs	r3, #1
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
 8002866:	e00c      	b.n	8002882 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	2301      	movs	r3, #1
 8002878:	653b      	str	r3, [r7, #80]	; 0x50
 800287a:	e002      	b.n	8002882 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800287c:	2300      	movs	r3, #0
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
 8002880:	bf00      	nop
      }
    } while (n);
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d19c      	bne.n	80027c2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f851 	bl	8001938 <_is_digit>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <_vsnprintf+0x13a>
      width = _atoi(&format);
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f860 	bl	8001966 <_atoi>
 80028a6:	65b8      	str	r0, [r7, #88]	; 0x58
 80028a8:	e01a      	b.n	80028e0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b2a      	cmp	r3, #42	; 0x2a
 80028b0:	d116      	bne.n	80028e0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80028b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b6:	1d1a      	adds	r2, r3, #4
 80028b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da07      	bge.n	80028d6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80028c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	425b      	negs	r3, r3
 80028d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80028d4:	e001      	b.n	80028da <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b2e      	cmp	r3, #46	; 0x2e
 80028ea:	d127      	bne.n	800293c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80028ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f81a 	bl	8001938 <_is_digit>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f829 	bl	8001966 <_atoi>
 8002914:	6578      	str	r0, [r7, #84]	; 0x54
 8002916:	e011      	b.n	800293c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b2a      	cmp	r3, #42	; 0x2a
 800291e:	d10d      	bne.n	800293c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002934:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	3b68      	subs	r3, #104	; 0x68
 8002942:	2b12      	cmp	r3, #18
 8002944:	d866      	bhi.n	8002a14 <_vsnprintf+0x2a4>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <_vsnprintf+0x1dc>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	080029bf 	.word	0x080029bf
 8002950:	08002a15 	.word	0x08002a15
 8002954:	080029f5 	.word	0x080029f5
 8002958:	08002a15 	.word	0x08002a15
 800295c:	08002999 	.word	0x08002999
 8002960:	08002a15 	.word	0x08002a15
 8002964:	08002a15 	.word	0x08002a15
 8002968:	08002a15 	.word	0x08002a15
 800296c:	08002a15 	.word	0x08002a15
 8002970:	08002a15 	.word	0x08002a15
 8002974:	08002a15 	.word	0x08002a15
 8002978:	08002a15 	.word	0x08002a15
 800297c:	080029e5 	.word	0x080029e5
 8002980:	08002a15 	.word	0x08002a15
 8002984:	08002a15 	.word	0x08002a15
 8002988:	08002a15 	.word	0x08002a15
 800298c:	08002a15 	.word	0x08002a15
 8002990:	08002a15 	.word	0x08002a15
 8002994:	08002a05 	.word	0x08002a05
      case 'l' :
        flags |= FLAGS_LONG;
 8002998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b6c      	cmp	r3, #108	; 0x6c
 80029ac:	d134      	bne.n	8002a18 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80029ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
        }
        break;
 80029bc:	e02c      	b.n	8002a18 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b68      	cmp	r3, #104	; 0x68
 80029d2:	d125      	bne.n	8002a20 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3301      	adds	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80029e2:	e01d      	b.n	8002a20 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
        break;
 80029f2:	e016      	b.n	8002a22 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80029f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
        break;
 8002a02:	e00e      	b.n	8002a22 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
        break;
 8002a12:	e006      	b.n	8002a22 <_vsnprintf+0x2b2>
      default :
        break;
 8002a14:	bf00      	nop
 8002a16:	e004      	b.n	8002a22 <_vsnprintf+0x2b2>
        break;
 8002a18:	bf00      	nop
 8002a1a:	e002      	b.n	8002a22 <_vsnprintf+0x2b2>
 8002a1c:	080018e3 	.word	0x080018e3
        break;
 8002a20:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3b25      	subs	r3, #37	; 0x25
 8002a28:	2b53      	cmp	r3, #83	; 0x53
 8002a2a:	f200 8360 	bhi.w	80030ee <_vsnprintf+0x97e>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <_vsnprintf+0x2c4>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	080030d7 	.word	0x080030d7
 8002a38:	080030ef 	.word	0x080030ef
 8002a3c:	080030ef 	.word	0x080030ef
 8002a40:	080030ef 	.word	0x080030ef
 8002a44:	080030ef 	.word	0x080030ef
 8002a48:	080030ef 	.word	0x080030ef
 8002a4c:	080030ef 	.word	0x080030ef
 8002a50:	080030ef 	.word	0x080030ef
 8002a54:	080030ef 	.word	0x080030ef
 8002a58:	080030ef 	.word	0x080030ef
 8002a5c:	080030ef 	.word	0x080030ef
 8002a60:	080030ef 	.word	0x080030ef
 8002a64:	080030ef 	.word	0x080030ef
 8002a68:	080030ef 	.word	0x080030ef
 8002a6c:	080030ef 	.word	0x080030ef
 8002a70:	080030ef 	.word	0x080030ef
 8002a74:	080030ef 	.word	0x080030ef
 8002a78:	080030ef 	.word	0x080030ef
 8002a7c:	080030ef 	.word	0x080030ef
 8002a80:	080030ef 	.word	0x080030ef
 8002a84:	080030ef 	.word	0x080030ef
 8002a88:	080030ef 	.word	0x080030ef
 8002a8c:	080030ef 	.word	0x080030ef
 8002a90:	080030ef 	.word	0x080030ef
 8002a94:	080030ef 	.word	0x080030ef
 8002a98:	080030ef 	.word	0x080030ef
 8002a9c:	080030ef 	.word	0x080030ef
 8002aa0:	080030ef 	.word	0x080030ef
 8002aa4:	080030ef 	.word	0x080030ef
 8002aa8:	080030ef 	.word	0x080030ef
 8002aac:	080030ef 	.word	0x080030ef
 8002ab0:	080030ef 	.word	0x080030ef
 8002ab4:	08002e8b 	.word	0x08002e8b
 8002ab8:	08002e3b 	.word	0x08002e3b
 8002abc:	08002e8b 	.word	0x08002e8b
 8002ac0:	080030ef 	.word	0x080030ef
 8002ac4:	080030ef 	.word	0x080030ef
 8002ac8:	080030ef 	.word	0x080030ef
 8002acc:	080030ef 	.word	0x080030ef
 8002ad0:	080030ef 	.word	0x080030ef
 8002ad4:	080030ef 	.word	0x080030ef
 8002ad8:	080030ef 	.word	0x080030ef
 8002adc:	080030ef 	.word	0x080030ef
 8002ae0:	080030ef 	.word	0x080030ef
 8002ae4:	080030ef 	.word	0x080030ef
 8002ae8:	080030ef 	.word	0x080030ef
 8002aec:	080030ef 	.word	0x080030ef
 8002af0:	080030ef 	.word	0x080030ef
 8002af4:	080030ef 	.word	0x080030ef
 8002af8:	080030ef 	.word	0x080030ef
 8002afc:	080030ef 	.word	0x080030ef
 8002b00:	08002b85 	.word	0x08002b85
 8002b04:	080030ef 	.word	0x080030ef
 8002b08:	080030ef 	.word	0x080030ef
 8002b0c:	080030ef 	.word	0x080030ef
 8002b10:	080030ef 	.word	0x080030ef
 8002b14:	080030ef 	.word	0x080030ef
 8002b18:	080030ef 	.word	0x080030ef
 8002b1c:	080030ef 	.word	0x080030ef
 8002b20:	080030ef 	.word	0x080030ef
 8002b24:	080030ef 	.word	0x080030ef
 8002b28:	08002b85 	.word	0x08002b85
 8002b2c:	08002efb 	.word	0x08002efb
 8002b30:	08002b85 	.word	0x08002b85
 8002b34:	08002e8b 	.word	0x08002e8b
 8002b38:	08002e3b 	.word	0x08002e3b
 8002b3c:	08002e8b 	.word	0x08002e8b
 8002b40:	080030ef 	.word	0x080030ef
 8002b44:	08002b85 	.word	0x08002b85
 8002b48:	080030ef 	.word	0x080030ef
 8002b4c:	080030ef 	.word	0x080030ef
 8002b50:	080030ef 	.word	0x080030ef
 8002b54:	080030ef 	.word	0x080030ef
 8002b58:	080030ef 	.word	0x080030ef
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	0800303b 	.word	0x0800303b
 8002b64:	080030ef 	.word	0x080030ef
 8002b68:	080030ef 	.word	0x080030ef
 8002b6c:	08002f73 	.word	0x08002f73
 8002b70:	080030ef 	.word	0x080030ef
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	080030ef 	.word	0x080030ef
 8002b7c:	080030ef 	.word	0x080030ef
 8002b80:	08002b85 	.word	0x08002b85
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b78      	cmp	r3, #120	; 0x78
 8002b8a:	d003      	beq.n	8002b94 <_vsnprintf+0x424>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b58      	cmp	r3, #88	; 0x58
 8002b92:	d102      	bne.n	8002b9a <_vsnprintf+0x42a>
          base = 16U;
 8002b94:	2310      	movs	r3, #16
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b98:	e013      	b.n	8002bc2 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b6f      	cmp	r3, #111	; 0x6f
 8002ba0:	d102      	bne.n	8002ba8 <_vsnprintf+0x438>
          base =  8U;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba6:	e00c      	b.n	8002bc2 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b62      	cmp	r3, #98	; 0x62
 8002bae:	d102      	bne.n	8002bb6 <_vsnprintf+0x446>
          base =  2U;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb4:	e005      	b.n	8002bc2 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbc:	f023 0310 	bic.w	r3, r3, #16
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b58      	cmp	r3, #88	; 0x58
 8002bc8:	d103      	bne.n	8002bd2 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b69      	cmp	r3, #105	; 0x69
 8002bd8:	d007      	beq.n	8002bea <_vsnprintf+0x47a>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d003      	beq.n	8002bea <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be4:	f023 030c 	bic.w	r3, r3, #12
 8002be8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b69      	cmp	r3, #105	; 0x69
 8002c02:	d004      	beq.n	8002c0e <_vsnprintf+0x49e>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	f040 8098 	bne.w	8002d3e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d031      	beq.n	8002c7c <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	f103 0208 	add.w	r2, r3, #8
 8002c26:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	da06      	bge.n	8002c48 <_vsnprintf+0x4d8>
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f1d2 0800 	rsbs	r8, r2, #0
 8002c40:	eb61 0903 	sbc.w	r9, r1, r3
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	69f9      	ldr	r1, [r7, #28]
 8002c4a:	0fc9      	lsrs	r1, r1, #31
 8002c4c:	b2c9      	uxtb	r1, r1
 8002c4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c50:	2400      	movs	r4, #0
 8002c52:	4682      	mov	sl, r0
 8002c54:	46a3      	mov	fp, r4
 8002c56:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c58:	9008      	str	r0, [sp, #32]
 8002c5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c5c:	9007      	str	r0, [sp, #28]
 8002c5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c60:	9006      	str	r0, [sp, #24]
 8002c62:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002c66:	9102      	str	r1, [sp, #8]
 8002c68:	e9cd 2300 	strd	r2, r3, [sp]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c70:	6939      	ldr	r1, [r7, #16]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff f82d 	bl	8001cd2 <_ntoa_long_long>
 8002c78:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002c7a:	e0da      	b.n	8002e32 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d020      	beq.n	8002cc8 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfb8      	it	lt
 8002c9a:	425b      	neglt	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	0fdb      	lsrs	r3, r3, #31
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ca6:	9205      	str	r2, [sp, #20]
 8002ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002caa:	9204      	str	r2, [sp, #16]
 8002cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cae:	9203      	str	r2, [sp, #12]
 8002cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cb2:	9202      	str	r2, [sp, #8]
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	9100      	str	r1, [sp, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cbc:	6939      	ldr	r1, [r7, #16]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7fe ffa1 	bl	8001c06 <_ntoa_long>
 8002cc4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002cc6:	e0b4      	b.n	8002e32 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <_vsnprintf+0x572>
 8002cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e012      	b.n	8002d08 <_vsnprintf+0x598>
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <_vsnprintf+0x58c>
 8002cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf0:	1d1a      	adds	r2, r3, #4
 8002cf2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	e005      	b.n	8002d08 <_vsnprintf+0x598>
 8002cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d00:	1d1a      	adds	r2, r3, #4
 8002d02:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bfb8      	it	lt
 8002d10:	425b      	neglt	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	0fdb      	lsrs	r3, r3, #31
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d1c:	9205      	str	r2, [sp, #20]
 8002d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d20:	9204      	str	r2, [sp, #16]
 8002d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d24:	9203      	str	r2, [sp, #12]
 8002d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d28:	9202      	str	r2, [sp, #8]
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	6978      	ldr	r0, [r7, #20]
 8002d36:	f7fe ff66 	bl	8001c06 <_ntoa_long>
 8002d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002d3c:	e079      	b.n	8002e32 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d022      	beq.n	8002d8e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	f023 0307 	bic.w	r3, r3, #7
 8002d52:	f103 0208 	add.w	r2, r3, #8
 8002d56:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d60:	2000      	movs	r0, #0
 8002d62:	460d      	mov	r5, r1
 8002d64:	4606      	mov	r6, r0
 8002d66:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002d68:	9108      	str	r1, [sp, #32]
 8002d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d6c:	9107      	str	r1, [sp, #28]
 8002d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d70:	9106      	str	r1, [sp, #24]
 8002d72:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002d76:	2100      	movs	r1, #0
 8002d78:	9102      	str	r1, [sp, #8]
 8002d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d82:	6939      	ldr	r1, [r7, #16]
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f7fe ffa4 	bl	8001cd2 <_ntoa_long_long>
 8002d8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d8c:	e051      	b.n	8002e32 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d018      	beq.n	8002dca <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002da6:	9205      	str	r2, [sp, #20]
 8002da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002daa:	9204      	str	r2, [sp, #16]
 8002dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dae:	9203      	str	r2, [sp, #12]
 8002db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db2:	9202      	str	r2, [sp, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	9201      	str	r2, [sp, #4]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbe:	6939      	ldr	r1, [r7, #16]
 8002dc0:	6978      	ldr	r0, [r7, #20]
 8002dc2:	f7fe ff20 	bl	8001c06 <_ntoa_long>
 8002dc6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002dc8:	e033      	b.n	8002e32 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <_vsnprintf+0x674>
 8002dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd8:	1d1a      	adds	r2, r3, #4
 8002dda:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e012      	b.n	8002e0a <_vsnprintf+0x69a>
 8002de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <_vsnprintf+0x68e>
 8002dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	e005      	b.n	8002e0a <_vsnprintf+0x69a>
 8002dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0e:	9305      	str	r3, [sp, #20]
 8002e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e12:	9304      	str	r3, [sp, #16]
 8002e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e16:	9303      	str	r3, [sp, #12]
 8002e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1a:	9302      	str	r3, [sp, #8]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7fe feeb 	bl	8001c06 <_ntoa_long>
 8002e30:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
        break;
 8002e38:	e166      	b.n	8003108 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b46      	cmp	r3, #70	; 0x46
 8002e40:	d103      	bne.n	8002e4a <_vsnprintf+0x6da>
 8002e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e4e:	3307      	adds	r3, #7
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	f103 0208 	add.w	r2, r3, #8
 8002e58:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e5c:	ed93 7b00 	vldr	d7, [r3]
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e70:	eef0 0a67 	vmov.f32	s1, s15
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7fe ff98 	bl	8001db0 <_ftoa>
 8002e80:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
        break;
 8002e88:	e13e      	b.n	8003108 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b67      	cmp	r3, #103	; 0x67
 8002e90:	d003      	beq.n	8002e9a <_vsnprintf+0x72a>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b47      	cmp	r3, #71	; 0x47
 8002e98:	d103      	bne.n	8002ea2 <_vsnprintf+0x732>
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b45      	cmp	r3, #69	; 0x45
 8002ea8:	d003      	beq.n	8002eb2 <_vsnprintf+0x742>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b47      	cmp	r3, #71	; 0x47
 8002eb0:	d103      	bne.n	8002eba <_vsnprintf+0x74a>
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ebe:	3307      	adds	r3, #7
 8002ec0:	f023 0307 	bic.w	r3, r3, #7
 8002ec4:	f103 0208 	add.w	r2, r3, #8
 8002ec8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ecc:	ed93 7b00 	vldr	d7, [r3]
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee0:	eef0 0a67 	vmov.f32	s1, s15
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee8:	6939      	ldr	r1, [r7, #16]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff f9b8 	bl	8002260 <_etoa>
 8002ef0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
        break;
 8002ef8:	e106      	b.n	8003108 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002efa:	2301      	movs	r3, #1
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10e      	bne.n	8002f26 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002f08:	e007      	b.n	8002f1a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f0c:	1c53      	adds	r3, r2, #1
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	697c      	ldr	r4, [r7, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6939      	ldr	r1, [r7, #16]
 8002f16:	2020      	movs	r0, #32
 8002f18:	47a0      	blx	r4
          while (l++ < width) {
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8002f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d8f1      	bhi.n	8002f0a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b2d8      	uxtb	r0, r3
 8002f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f36:	1c53      	adds	r3, r2, #1
 8002f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3a:	697c      	ldr	r4, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6939      	ldr	r1, [r7, #16]
 8002f40:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <_vsnprintf+0x7fa>
          while (l++ < width) {
 8002f4c:	e007      	b.n	8002f5e <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8002f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f50:	1c53      	adds	r3, r2, #1
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f54:	697c      	ldr	r4, [r7, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6939      	ldr	r1, [r7, #16]
 8002f5a:	2020      	movs	r0, #32
 8002f5c:	47a0      	blx	r4
          while (l++ < width) {
 8002f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	647a      	str	r2, [r7, #68]	; 0x44
 8002f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d8f1      	bhi.n	8002f4e <_vsnprintf+0x7de>
          }
        }
        format++;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
        break;
 8002f70:	e0ca      	b.n	8003108 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <_vsnprintf+0x81a>
 8002f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f88:	e001      	b.n	8002f8e <_vsnprintf+0x81e>
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f92:	f7fe fcb4 	bl	80018fe <_strnlen_s>
 8002f96:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8002fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	bf28      	it	cs
 8002faa:	4613      	movcs	r3, r2
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8002fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11a      	bne.n	8002fee <_vsnprintf+0x87e>
          while (l++ < width) {
 8002fb8:	e007      	b.n	8002fca <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8002fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbc:	1c53      	adds	r3, r2, #1
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	697c      	ldr	r4, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	2020      	movs	r0, #32
 8002fc8:	47a0      	blx	r4
          while (l++ < width) {
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d8f1      	bhi.n	8002fba <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002fd6:	e00a      	b.n	8002fee <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fde:	7818      	ldrb	r0, [r3, #0]
 8002fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe2:	1c53      	adds	r3, r2, #1
 8002fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe6:	697c      	ldr	r4, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6939      	ldr	r1, [r7, #16]
 8002fec:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <_vsnprintf+0x89a>
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0eb      	beq.n	8002fd8 <_vsnprintf+0x868>
 8003000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003002:	1e5a      	subs	r2, r3, #1
 8003004:	657a      	str	r2, [r7, #84]	; 0x54
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e6      	bne.n	8002fd8 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8003014:	e007      	b.n	8003026 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8003016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003018:	1c53      	adds	r3, r2, #1
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	697c      	ldr	r4, [r7, #20]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6939      	ldr	r1, [r7, #16]
 8003022:	2020      	movs	r0, #32
 8003024:	47a0      	blx	r4
          while (l++ < width) {
 8003026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800302c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302e:	429a      	cmp	r2, r3
 8003030:	d8f1      	bhi.n	8003016 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3301      	adds	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
        break;
 8003038:	e066      	b.n	8003108 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800303a:	2308      	movs	r3, #8
 800303c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800304c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003058:	1d1a      	adds	r2, r3, #4
 800305a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	603a      	str	r2, [r7, #0]
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306a:	9308      	str	r3, [sp, #32]
 800306c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306e:	9307      	str	r3, [sp, #28]
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	9306      	str	r3, [sp, #24]
 8003074:	f04f 0210 	mov.w	r2, #16
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003080:	2300      	movs	r3, #0
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003088:	e9cd 3400 	strd	r3, r4, [sp]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003090:	6939      	ldr	r1, [r7, #16]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7fe fe1d 	bl	8001cd2 <_ntoa_long_long>
 8003098:	64f8      	str	r0, [r7, #76]	; 0x4c
 800309a:	e018      	b.n	80030ce <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800309c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	2310      	movs	r3, #16
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c4:	6939      	ldr	r1, [r7, #16]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7fe fd9d 	bl	8001c06 <_ntoa_long>
 80030cc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
        break;
 80030d4:	e018      	b.n	8003108 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80030d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d8:	1c53      	adds	r3, r2, #1
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030dc:	697c      	ldr	r4, [r7, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6939      	ldr	r1, [r7, #16]
 80030e2:	2025      	movs	r0, #37	; 0x25
 80030e4:	47a0      	blx	r4
        format++;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
        break;
 80030ec:	e00c      	b.n	8003108 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	7818      	ldrb	r0, [r3, #0]
 80030f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f4:	1c53      	adds	r3, r2, #1
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f8:	697c      	ldr	r4, [r7, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	47a0      	blx	r4
        format++;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3301      	adds	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
        break;
 8003106:	bf00      	nop
  while (*format)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f47f ab41 	bne.w	8002794 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <_vsnprintf+0x9b0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	e000      	b.n	8003122 <_vsnprintf+0x9b2>
 8003120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003122:	697c      	ldr	r4, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6939      	ldr	r1, [r7, #16]
 8003128:	2000      	movs	r0, #0
 800312a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800312e:	4618      	mov	r0, r3
 8003130:	3764      	adds	r7, #100	; 0x64
 8003132:	46bd      	mov	sp, r7
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003138 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003138:	b40e      	push	{r1, r2, r3}
 800313a:	b580      	push	{r7, lr}
 800313c:	b087      	sub	sp, #28
 800313e:	af02      	add	r7, sp, #8
 8003140:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <sprintf_+0x34>)
 8003156:	f7ff fb0b 	bl	8002770 <_vsnprintf>
 800315a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800315c:	68fb      	ldr	r3, [r7, #12]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003168:	b003      	add	sp, #12
 800316a:	4770      	bx	lr
 800316c:	080018b5 	.word	0x080018b5

08003170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_MspInit+0x54>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <HAL_MspInit+0x54>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_MspInit+0x54>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_MspInit+0x54>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_MspInit+0x54>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_MspInit+0x54>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	210f      	movs	r1, #15
 80031b2:	f06f 0001 	mvn.w	r0, #1
 80031b6:	f000 faed 	bl	8003794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80031d8:	2200      	movs	r2, #0
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	2018      	movs	r0, #24
 80031de:	f000 fad9 	bl	8003794 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80031e2:	2018      	movs	r0, #24
 80031e4:	f000 faf2 	bl	80037cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_InitTick+0xa0>)
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_InitTick+0xa0>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6453      	str	r3, [r2, #68]	; 0x44
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_InitTick+0xa0>)
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003204:	f107 0210 	add.w	r2, r7, #16
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f002 f9be 	bl	8005590 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003214:	f002 f9a8 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8003218:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_InitTick+0xa4>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0c9b      	lsrs	r3, r3, #18
 8003224:	3b01      	subs	r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_InitTick+0xa8>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_InitTick+0xac>)
 800322c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_InitTick+0xa8>)
 8003230:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003234:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <HAL_InitTick+0xa8>)
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_InitTick+0xa8>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_InitTick+0xa8>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8003248:	4809      	ldr	r0, [pc, #36]	; (8003270 <HAL_InitTick+0xa8>)
 800324a:	f002 f9d3 	bl	80055f4 <HAL_TIM_Base_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8003254:	4806      	ldr	r0, [pc, #24]	; (8003270 <HAL_InitTick+0xa8>)
 8003256:	f002 fa27 	bl	80056a8 <HAL_TIM_Base_Start_IT>
 800325a:	4603      	mov	r3, r0
 800325c:	e000      	b.n	8003260 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	3730      	adds	r7, #48	; 0x30
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	431bde83 	.word	0x431bde83
 8003270:	20000290 	.word	0x20000290
 8003274:	40014000 	.word	0x40014000

08003278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800327c:	e7fe      	b.n	800327c <NMI_Handler+0x4>

0800327e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003282:	e7fe      	b.n	8003282 <HardFault_Handler+0x4>

08003284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <MemManage_Handler+0x4>

0800328a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <BusFault_Handler+0x4>

08003290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <UsageFault_Handler+0x4>

08003296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80032aa:	f002 fa5f 	bl	800576c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000290 	.word	0x20000290

080032b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	return 1;
 80032bc:	2301      	movs	r3, #1
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_kill>:

int _kill(int pid, int sig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032d2:	f005 ff0b 	bl	80090ec <__errno>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2216      	movs	r2, #22
 80032da:	601a      	str	r2, [r3, #0]
	return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_exit>:

void _exit (int status)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffe7 	bl	80032c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032fa:	e7fe      	b.n	80032fa <_exit+0x12>

080032fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e00a      	b.n	8003324 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800330e:	f3af 8000 	nop.w
 8003312:	4601      	mov	r1, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	b2ca      	uxtb	r2, r1
 800331c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	dbf0      	blt.n	800330e <_read+0x12>
	}

return len;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e009      	b.n	800335c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	60ba      	str	r2, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	dbf1      	blt.n	8003348 <_write+0x12>
	}
	return len;
 8003364:	687b      	ldr	r3, [r7, #4]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_close>:

int _close(int file)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	return -1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003396:	605a      	str	r2, [r3, #4]
	return 0;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_isatty>:

int _isatty(int file)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	return 1;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	return 0;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <_sbrk+0x5c>)
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <_sbrk+0x60>)
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <_sbrk+0x64>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <_sbrk+0x64>)
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <_sbrk+0x68>)
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	d207      	bcs.n	8003418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003408:	f005 fe70 	bl	80090ec <__errno>
 800340c:	4603      	mov	r3, r0
 800340e:	220c      	movs	r2, #12
 8003410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	e009      	b.n	800342c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <_sbrk+0x64>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <_sbrk+0x64>)
 8003428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20018000 	.word	0x20018000
 8003438:	00000400 	.word	0x00000400
 800343c:	200002d8 	.word	0x200002d8
 8003440:	20004d48 	.word	0x20004d48

08003444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <SystemInit+0x20>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <SystemInit+0x20>)
 8003450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_USART2_UART_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 80034a0:	f002 fb28 	bl	8005af4 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034aa:	f7fd ff93 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200002dc 	.word	0x200002dc
 80034b8:	40004400 	.word	0x40004400

080034bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_UART_MspInit+0x84>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d12b      	bne.n	8003536 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_UART_MspInit+0x88>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_UART_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_UART_MspInit+0x88>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_UART_MspInit+0x88>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003516:	230c      	movs	r3, #12
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003526:	2307      	movs	r3, #7
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <HAL_UART_MspInit+0x8c>)
 8003532:	f000 f959 	bl	80037e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40004400 	.word	0x40004400
 8003544:	40023800 	.word	0x40023800
 8003548:	40020000 	.word	0x40020000

0800354c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800354c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003552:	490e      	ldr	r1, [pc, #56]	; (800358c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003568:	4c0b      	ldr	r4, [pc, #44]	; (8003598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003576:	f7ff ff65 	bl	8003444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357a:	f005 feb3 	bl	80092e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357e:	f7fd fea3 	bl	80012c8 <main>
  bx  lr    
 8003582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800358c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003590:	0800c19c 	.word	0x0800c19c
  ldr r2, =_sbss
 8003594:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003598:	20004d44 	.word	0x20004d44

0800359c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800359c:	e7fe      	b.n	800359c <ADC_IRQHandler>
	...

080035a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_Init+0x40>)
 80035aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_Init+0x40>)
 80035b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_Init+0x40>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_Init+0x40>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c8:	2003      	movs	r0, #3
 80035ca:	f000 f8d8 	bl	800377e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ce:	200f      	movs	r0, #15
 80035d0:	f7ff fdfa 	bl	80031c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d4:	f7ff fdcc 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x20>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x24>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_IncTick+0x24>)
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000008 	.word	0x20000008
 8003608:	20000320 	.word	0x20000320

0800360c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return uwTick;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_GetTick+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000320 	.word	0x20000320

08003624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800364c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__NVIC_GetPriorityGrouping+0x18>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 0307 	and.w	r3, r3, #7
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db0b      	blt.n	80036b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <__NVIC_EnableIRQ+0x38>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2001      	movs	r0, #1
 80036aa:	fa00 f202 	lsl.w	r2, r0, r2
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db0a      	blt.n	80036ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	490c      	ldr	r1, [pc, #48]	; (8003710 <__NVIC_SetPriority+0x4c>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	440b      	add	r3, r1
 80036e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ec:	e00a      	b.n	8003704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4908      	ldr	r1, [pc, #32]	; (8003714 <__NVIC_SetPriority+0x50>)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3b04      	subs	r3, #4
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	440b      	add	r3, r1
 8003702:	761a      	strb	r2, [r3, #24]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000e100 	.word	0xe000e100
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f1c3 0307 	rsb	r3, r3, #7
 8003732:	2b04      	cmp	r3, #4
 8003734:	bf28      	it	cs
 8003736:	2304      	movcs	r3, #4
 8003738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3304      	adds	r3, #4
 800373e:	2b06      	cmp	r3, #6
 8003740:	d902      	bls.n	8003748 <NVIC_EncodePriority+0x30>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3b03      	subs	r3, #3
 8003746:	e000      	b.n	800374a <NVIC_EncodePriority+0x32>
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	f04f 32ff 	mov.w	r2, #4294967295
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	401a      	ands	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003760:	f04f 31ff 	mov.w	r1, #4294967295
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	43d9      	mvns	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	4313      	orrs	r3, r2
         );
}
 8003772:	4618      	mov	r0, r3
 8003774:	3724      	adds	r7, #36	; 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ff4c 	bl	8003624 <__NVIC_SetPriorityGrouping>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a6:	f7ff ff61 	bl	800366c <__NVIC_GetPriorityGrouping>
 80037aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	6978      	ldr	r0, [r7, #20]
 80037b2:	f7ff ffb1 	bl	8003718 <NVIC_EncodePriority>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ff80 	bl	80036c4 <__NVIC_SetPriority>
}
 80037c4:	bf00      	nop
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff54 	bl	8003688 <__NVIC_EnableIRQ>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e159      	b.n	8003ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8148 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_GPIO_Init+0x2ec>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <HAL_GPIO_Init+0x2f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x202>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	; (8003adc <HAL_GPIO_Init+0x2f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x1fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <HAL_GPIO_Init+0x2f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x1fa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a46      	ldr	r2, [pc, #280]	; (8003ae4 <HAL_GPIO_Init+0x2fc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x1f6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a45      	ldr	r2, [pc, #276]	; (8003ae8 <HAL_GPIO_Init+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x1f2>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039da:	2307      	movs	r3, #7
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x2ec>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a24      	ldr	r2, [pc, #144]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f aea2 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b00:	787b      	ldrb	r3, [r7, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b0c:	e003      	b.n	8003b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	041a      	lsls	r2, r3, #16
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	400b      	ands	r3, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e12b      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fb5a 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f001 fcc0 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a81      	ldr	r2, [pc, #516]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d807      	bhi.n	8003bdc <HAL_I2C_Init+0x84>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a80      	ldr	r2, [pc, #512]	; (8003dd0 <HAL_I2C_Init+0x278>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e006      	b.n	8003bea <HAL_I2C_Init+0x92>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a7d      	ldr	r2, [pc, #500]	; (8003dd4 <HAL_I2C_Init+0x27c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0e7      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a78      	ldr	r2, [pc, #480]	; (8003dd8 <HAL_I2C_Init+0x280>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d802      	bhi.n	8003c2c <HAL_I2C_Init+0xd4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	e009      	b.n	8003c40 <HAL_I2C_Init+0xe8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	4a69      	ldr	r2, [pc, #420]	; (8003ddc <HAL_I2C_Init+0x284>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	3301      	adds	r3, #1
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	495c      	ldr	r1, [pc, #368]	; (8003dcc <HAL_I2C_Init+0x274>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d819      	bhi.n	8003c94 <HAL_I2C_Init+0x13c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e59      	subs	r1, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c74:	400b      	ands	r3, r1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_I2C_Init+0x138>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1e59      	subs	r1, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	e051      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c90:	2304      	movs	r3, #4
 8003c92:	e04f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d111      	bne.n	8003cc0 <HAL_I2C_Init+0x168>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	440b      	add	r3, r1
 8003caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e012      	b.n	8003ce6 <HAL_I2C_Init+0x18e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Init+0x196>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e022      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <HAL_I2C_Init+0x1bc>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e58      	subs	r0, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6809      	ldr	r1, [r1, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6911      	ldr	r1, [r2, #16]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	4311      	orrs	r1, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	000186a0 	.word	0x000186a0
 8003dd0:	001e847f 	.word	0x001e847f
 8003dd4:	003d08ff 	.word	0x003d08ff
 8003dd8:	431bde83 	.word	0x431bde83
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	461a      	mov	r2, r3
 8003dec:	460b      	mov	r3, r1
 8003dee:	817b      	strh	r3, [r7, #10]
 8003df0:	4613      	mov	r3, r2
 8003df2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff fc0a 	bl	800360c <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80e0 	bne.w	8003fc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2319      	movs	r3, #25
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4970      	ldr	r1, [pc, #448]	; (8003fd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fd86 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0d3      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2C_Master_Transmit+0x50>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0cc      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d007      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2210      	movs	r2, #16
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a50      	ldr	r2, [pc, #320]	; (8003fd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fbf0 	bl	8004684 <I2C_MasterRequestWrite>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e08d      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec4:	e066      	b.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fe00 	bl	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06b      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d017      	beq.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	6a39      	ldr	r1, [r7, #32]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fdf0 	bl	8004b52 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d107      	bne.n	8003f90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01a      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d194      	bne.n	8003ec6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000

08003fdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	817b      	strh	r3, [r7, #10]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7ff fb0c 	bl	800360c <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f040 820b 	bne.w	800441a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2319      	movs	r3, #25
 800400a:	2201      	movs	r2, #1
 800400c:	497c      	ldr	r1, [pc, #496]	; (8004200 <HAL_I2C_Master_Receive+0x224>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fc88 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	e1fe      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_I2C_Master_Receive+0x50>
 8004028:	2302      	movs	r3, #2
 800402a:	e1f7      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d007      	beq.n	8004052 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004060:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2222      	movs	r2, #34	; 0x22
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2210      	movs	r2, #16
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a5c      	ldr	r2, [pc, #368]	; (8004204 <HAL_I2C_Master_Receive+0x228>)
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fb74 	bl	8004788 <I2C_MasterRequestRead>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1b8      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e18c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e16c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	e14c      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004180:	e138      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	2b03      	cmp	r3, #3
 8004188:	f200 80f1 	bhi.w	800436e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b01      	cmp	r3, #1
 8004192:	d123      	bne.n	80041dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fd1b 	bl	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e139      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041da:	e10b      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d14e      	bne.n	8004282 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	4906      	ldr	r1, [pc, #24]	; (8004208 <HAL_I2C_Master_Receive+0x22c>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fb98 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e10e      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
 80041fe:	bf00      	nop
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000
 8004208:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004280:	e0b8      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	4966      	ldr	r1, [pc, #408]	; (8004424 <HAL_I2C_Master_Receive+0x448>)
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fb49 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0bf      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	494f      	ldr	r1, [pc, #316]	; (8004424 <HAL_I2C_Master_Receive+0x448>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fb1b 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e091      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800436c:	e042      	b.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fc2e 	bl	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e04c      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d118      	bne.n	80043f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f aec2 	bne.w	8004182 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010004 	.word	0x00010004

08004428 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004438:	f7ff f8e8 	bl	800360c <HAL_GetTick>
 800443c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b20      	cmp	r3, #32
 800444c:	f040 8111 	bne.w	8004672 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2319      	movs	r3, #25
 8004456:	2201      	movs	r2, #1
 8004458:	4988      	ldr	r1, [pc, #544]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa62 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
 8004468:	e104      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_I2C_IsDeviceReady+0x50>
 8004474:	2302      	movs	r3, #2
 8004476:	e0fd      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d007      	beq.n	800449e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2224      	movs	r2, #36	; 0x24
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a70      	ldr	r2, [pc, #448]	; (8004680 <HAL_I2C_IsDeviceReady+0x258>)
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2200      	movs	r2, #0
 80044da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fa20 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f8:	d103      	bne.n	8004502 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0b6      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004514:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004516:	f7ff f879 	bl	800360c <HAL_GetTick>
 800451a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800454a:	e025      	b.n	8004598 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7ff f85e 	bl	800360c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <HAL_I2C_IsDeviceReady+0x13a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22a0      	movs	r2, #160	; 0xa0
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2ba0      	cmp	r3, #160	; 0xa0
 80045a2:	d005      	beq.n	80045b0 <HAL_I2C_IsDeviceReady+0x188>
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_I2C_IsDeviceReady+0x188>
 80045aa:	7dbb      	ldrb	r3, [r7, #22]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0cd      	beq.n	800454c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d129      	bne.n	800461a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2319      	movs	r3, #25
 80045f2:	2201      	movs	r2, #1
 80045f4:	4921      	ldr	r1, [pc, #132]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f994 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e036      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e02c      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004632:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2319      	movs	r3, #25
 800463a:	2201      	movs	r2, #1
 800463c:	490f      	ldr	r1, [pc, #60]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f970 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e012      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3301      	adds	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	f4ff af32 	bcc.w	80044c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00100002 	.word	0x00100002
 8004680:	ffff0000 	.word	0xffff0000

08004684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	460b      	mov	r3, r1
 8004692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d006      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d003      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ac:	d108      	bne.n	80046c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e00b      	b.n	80046d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	2b12      	cmp	r3, #18
 80046c6:	d107      	bne.n	80046d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f91d 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d103      	bne.n	8004708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e035      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004714:	d108      	bne.n	8004728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	e01b      	b.n	8004760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	11db      	asrs	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f063 030f 	orn	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <I2C_MasterRequestWrite+0xfc>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f943 	bl	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e010      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4907      	ldr	r1, [pc, #28]	; (8004784 <I2C_MasterRequestWrite+0x100>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f933 	bl	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	00010008 	.word	0x00010008
 8004784:	00010002 	.word	0x00010002

08004788 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d006      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d003      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047c0:	d108      	bne.n	80047d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e00b      	b.n	80047ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b11      	cmp	r3, #17
 80047da:	d107      	bne.n	80047ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f893 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d103      	bne.n	800481c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e079      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004828:	d108      	bne.n	800483c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]
 800483a:	e05f      	b.n	80048fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800483c:	897b      	ldrh	r3, [r7, #10]
 800483e:	11db      	asrs	r3, r3, #7
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0306 	and.w	r3, r3, #6
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f063 030f 	orn	r3, r3, #15
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4930      	ldr	r1, [pc, #192]	; (800491c <I2C_MasterRequestRead+0x194>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f8b9 	bl	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e054      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4929      	ldr	r1, [pc, #164]	; (8004920 <I2C_MasterRequestRead+0x198>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8a9 	bl	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e044      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f831 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d103      	bne.n	80048e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e017      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	11db      	asrs	r3, r3, #7
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f063 030e 	orn	r3, r3, #14
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4907      	ldr	r1, [pc, #28]	; (8004920 <I2C_MasterRequestRead+0x198>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f865 	bl	80049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	00010008 	.word	0x00010008
 8004920:	00010002 	.word	0x00010002

08004924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004934:	e025      	b.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d021      	beq.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe fe65 	bl	800360c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d116      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e023      	b.n	80049ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10d      	bne.n	80049a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	43da      	mvns	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	e00c      	b.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d0b6      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049e0:	e051      	b.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	d123      	bne.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e046      	b.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d021      	beq.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fe fde3 	bl	800360c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d116      	bne.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e020      	b.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10c      	bne.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e00b      	b.n	8004ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	43da      	mvns	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d18d      	bne.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004adc:	e02d      	b.n	8004b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f8ce 	bl	8004c80 <I2C_IsAcknowledgeFailed>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e02d      	b.n	8004b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d021      	beq.n	8004b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fe fd89 	bl	800360c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d116      	bne.n	8004b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e007      	b.n	8004b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d1ca      	bne.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b5e:	e02d      	b.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f88d 	bl	8004c80 <I2C_IsAcknowledgeFailed>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e02d      	b.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d021      	beq.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fe fd48 	bl	800360c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d1ca      	bne.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be0:	e042      	b.n	8004c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d119      	bne.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0210 	mvn.w	r2, #16
 8004bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e029      	b.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c24:	f7fe fcf2 	bl	800360c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e007      	b.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d1b5      	bne.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c96:	d11b      	bne.n	8004cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f043 0204 	orr.w	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e267      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d075      	beq.n	8004dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cfe:	4b88      	ldr	r3, [pc, #544]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d0a:	4b85      	ldr	r3, [pc, #532]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d112      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d16:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4b7e      	ldr	r3, [pc, #504]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05b      	beq.n	8004de8 <HAL_RCC_OscConfig+0x108>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d157      	bne.n	8004de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e242      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_OscConfig+0x74>
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x98>
 8004d5e:	4b70      	ldr	r3, [pc, #448]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6f      	ldr	r2, [pc, #444]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6c      	ldr	r2, [pc, #432]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d78:	4b69      	ldr	r3, [pc, #420]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a68      	ldr	r2, [pc, #416]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a65      	ldr	r2, [pc, #404]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fe fc38 	bl	800360c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fe fc34 	bl	800360c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e207      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5b      	ldr	r3, [pc, #364]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xc0>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe fc24 	bl	800360c <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fc20 	bl	800360c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1f3      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xe8>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004df6:	4b4a      	ldr	r3, [pc, #296]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e02:	4b47      	ldr	r3, [pc, #284]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0e:	4b44      	ldr	r3, [pc, #272]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1c7      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3b      	ldr	r3, [pc, #236]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4937      	ldr	r1, [pc, #220]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fe fbd9 	bl	800360c <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fbd5 	bl	800360c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1a8      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4925      	ldr	r1, [pc, #148]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe fbb8 	bl	800360c <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fe fbb4 	bl	800360c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e187      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d036      	beq.n	8004f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe fb98 	bl	800360c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe fb94 	bl	800360c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e167      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x200>
 8004efe:	e01b      	b.n	8004f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fe fb81 	bl	800360c <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fe fb7d 	bl	800360c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d907      	bls.n	8004f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e150      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	42470000 	.word	0x42470000
 8004f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	4b88      	ldr	r3, [pc, #544]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ea      	bne.n	8004f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8097 	beq.w	8005074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	4b81      	ldr	r3, [pc, #516]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a7c      	ldr	r2, [pc, #496]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b7a      	ldr	r3, [pc, #488]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b77      	ldr	r3, [pc, #476]	; (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b74      	ldr	r3, [pc, #464]	; (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	; (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fe fb3d 	bl	800360c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fe fb39 	bl	800360c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e10c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <HAL_RCC_OscConfig+0x474>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x2ea>
 8004fbc:	4b64      	ldr	r3, [pc, #400]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a63      	ldr	r2, [pc, #396]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x30c>
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a5e      	ldr	r2, [pc, #376]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fde:	4b5c      	ldr	r3, [pc, #368]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fec:	4b58      	ldr	r3, [pc, #352]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a57      	ldr	r2, [pc, #348]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	4b55      	ldr	r3, [pc, #340]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a54      	ldr	r2, [pc, #336]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fe fafe 	bl	800360c <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fe fafa 	bl	800360c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0cb      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	4b49      	ldr	r3, [pc, #292]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ee      	beq.n	8005014 <HAL_RCC_OscConfig+0x334>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fe fae8 	bl	800360c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fe fae4 	bl	800360c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0b5      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ee      	bne.n	8005040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	4a38      	ldr	r2, [pc, #224]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a1 	beq.w	80051c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b08      	cmp	r3, #8
 8005088:	d05c      	beq.n	8005144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d141      	bne.n	8005116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fe fab8 	bl	800360c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fe fab4 	bl	800360c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e087      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	491b      	ldr	r1, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_RCC_OscConfig+0x478>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fa8d 	bl	800360c <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fe fa89 	bl	800360c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e05c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005108:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x416>
 8005114:	e054      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x478>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe fa76 	bl	800360c <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005124:	f7fe fa72 	bl	800360c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e045      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCC_OscConfig+0x470>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x444>
 8005142:	e03d      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e038      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	40007000 	.word	0x40007000
 8005158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <HAL_RCC_OscConfig+0x4ec>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d028      	beq.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d121      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11a      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cc      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d90c      	bls.n	800520c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b65      	ldr	r3, [pc, #404]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b63      	ldr	r3, [pc, #396]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0b8      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005224:	4b59      	ldr	r3, [pc, #356]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a58      	ldr	r2, [pc, #352]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800522e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800523c:	4b53      	ldr	r3, [pc, #332]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a52      	ldr	r2, [pc, #328]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b50      	ldr	r3, [pc, #320]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	494d      	ldr	r1, [pc, #308]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d044      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b47      	ldr	r3, [pc, #284]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d119      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d003      	beq.n	800528e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	4b3f      	ldr	r3, [pc, #252]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529e:	4b3b      	ldr	r3, [pc, #236]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e067      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ae:	4b37      	ldr	r3, [pc, #220]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f023 0203 	bic.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4934      	ldr	r1, [pc, #208]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c0:	f7fe f9a4 	bl	800360c <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	e00a      	b.n	80052de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	f7fe f9a0 	bl	800360c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e04f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	4b2b      	ldr	r3, [pc, #172]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 020c 	and.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1eb      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f0:	4b25      	ldr	r3, [pc, #148]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d20c      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b22      	ldr	r3, [pc, #136]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e032      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4916      	ldr	r1, [pc, #88]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	490e      	ldr	r1, [pc, #56]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005356:	f000 f821 	bl	800539c <HAL_RCC_GetSysClockFreq>
 800535a:	4602      	mov	r2, r0
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	490a      	ldr	r1, [pc, #40]	; (8005390 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	5ccb      	ldrb	r3, [r1, r3]
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fd ff26 	bl	80031c8 <HAL_InitTick>

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023c00 	.word	0x40023c00
 800538c:	40023800 	.word	0x40023800
 8005390:	0800bd98 	.word	0x0800bd98
 8005394:	20000000 	.word	0x20000000
 8005398:	20000004 	.word	0x20000004

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b090      	sub	sp, #64	; 0x40
 80053a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ac:	2300      	movs	r3, #0
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d00d      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x40>
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	f200 80a1 	bhi.w	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ce:	e09b      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80053d4:	e09b      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d6:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053da:	e098      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b4f      	ldr	r3, [pc, #316]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e6:	4b4d      	ldr	r3, [pc, #308]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	2200      	movs	r2, #0
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	627a      	str	r2, [r7, #36]	; 0x24
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005404:	2100      	movs	r1, #0
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005408:	fb03 f201 	mul.w	r2, r3, r1
 800540c:	2300      	movs	r3, #0
 800540e:	fb00 f303 	mul.w	r3, r0, r3
 8005412:	4413      	add	r3, r2
 8005414:	4a43      	ldr	r2, [pc, #268]	; (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005416:	fba0 1202 	umull	r1, r2, r0, r2
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541c:	460a      	mov	r2, r1
 800541e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005422:	4413      	add	r3, r2
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	2200      	movs	r2, #0
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005436:	f7fb fbdf 	bl	8000bf8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4613      	mov	r3, r2
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	e053      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	4b35      	ldr	r3, [pc, #212]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	2200      	movs	r2, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	617a      	str	r2, [r7, #20]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005456:	f04f 0b00 	mov.w	fp, #0
 800545a:	4652      	mov	r2, sl
 800545c:	465b      	mov	r3, fp
 800545e:	f04f 0000 	mov.w	r0, #0
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	0159      	lsls	r1, r3, #5
 8005468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546c:	0150      	lsls	r0, r2, #5
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	ebb2 080a 	subs.w	r8, r2, sl
 8005476:	eb63 090b 	sbc.w	r9, r3, fp
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800548a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800548e:	ebb2 0408 	subs.w	r4, r2, r8
 8005492:	eb63 0509 	sbc.w	r5, r3, r9
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	00eb      	lsls	r3, r5, #3
 80054a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a4:	00e2      	lsls	r2, r4, #3
 80054a6:	4614      	mov	r4, r2
 80054a8:	461d      	mov	r5, r3
 80054aa:	eb14 030a 	adds.w	r3, r4, sl
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	eb45 030b 	adc.w	r3, r5, fp
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c2:	4629      	mov	r1, r5
 80054c4:	028b      	lsls	r3, r1, #10
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054cc:	4621      	mov	r1, r4
 80054ce:	028a      	lsls	r2, r1, #10
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	2200      	movs	r2, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e0:	f7fb fb8a 	bl	8000bf8 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	3301      	adds	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005506:	e002      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800550c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005510:	4618      	mov	r0, r3
 8005512:	3740      	adds	r7, #64	; 0x40
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800
 8005520:	00f42400 	.word	0x00f42400
 8005524:	017d7840 	.word	0x017d7840

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <HAL_RCC_GetHCLKFreq+0x14>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000000 	.word	0x20000000

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005544:	f7ff fff0 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	0800bda8 	.word	0x0800bda8

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffdc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	0800bda8 	.word	0x0800bda8

08005590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	220f      	movs	r2, #15
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0203 	and.w	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <HAL_RCC_GetClockConfig+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40023800 	.word	0x40023800
 80055f0:	40023c00 	.word	0x40023c00

080055f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e041      	b.n	800568a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f839 	bl	8005692 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 f9ca 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e044      	b.n	800574a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_TIM_Base_Start_IT+0xb0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	; (800575c <HAL_TIM_Base_Start_IT+0xb4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a19      	ldr	r2, [pc, #100]	; (8005760 <HAL_TIM_Base_Start_IT+0xb8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a17      	ldr	r2, [pc, #92]	; (8005764 <HAL_TIM_Base_Start_IT+0xbc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x6c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <HAL_TIM_Base_Start_IT+0xc0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d010      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	e007      	b.n	8005748 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000

0800576c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b02      	cmp	r3, #2
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0202 	mvn.w	r2, #2
 8005798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8ee 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8e0 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8f1 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d122      	bne.n	800581c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0204 	mvn.w	r2, #4
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8c4 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8b6 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8c7 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b08      	cmp	r3, #8
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b08      	cmp	r3, #8
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0208 	mvn.w	r2, #8
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2204      	movs	r2, #4
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f89a 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f88c 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f89d 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b10      	cmp	r3, #16
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b10      	cmp	r3, #16
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0210 	mvn.w	r2, #16
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2208      	movs	r2, #8
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f870 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f862 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f873 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10e      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d107      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0201 	mvn.w	r2, #1
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb fd60 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d10e      	bne.n	800591c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d107      	bne.n	800591c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8e2 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d107      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f838 	bl	80059b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d10e      	bne.n	8005974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b20      	cmp	r3, #32
 8005962:	d107      	bne.n	8005974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0220 	mvn.w	r2, #32
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8ac 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a34      	ldr	r2, [pc, #208]	; (8005ab0 <TIM_Base_SetConfig+0xe4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ea:	d00b      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a31      	ldr	r2, [pc, #196]	; (8005ab4 <TIM_Base_SetConfig+0xe8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a30      	ldr	r2, [pc, #192]	; (8005ab8 <TIM_Base_SetConfig+0xec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	; (8005abc <TIM_Base_SetConfig+0xf0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d108      	bne.n	8005a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <TIM_Base_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <TIM_Base_SetConfig+0xe8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <TIM_Base_SetConfig+0xec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a20      	ldr	r2, [pc, #128]	; (8005abc <TIM_Base_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <TIM_Base_SetConfig+0xf4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <TIM_Base_SetConfig+0xf8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <TIM_Base_SetConfig+0xfc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <TIM_Base_SetConfig+0xe4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e03f      	b.n	8005b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fd fcce 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f929 	bl	8005d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b08a      	sub	sp, #40	; 0x28
 8005b92:	af02      	add	r7, sp, #8
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d17c      	bne.n	8005ca8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_UART_Transmit+0x2c>
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e075      	b.n	8005caa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Transmit+0x3e>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e06e      	b.n	8005caa <HAL_UART_Transmit+0x11c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2221      	movs	r2, #33	; 0x21
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be2:	f7fd fd13 	bl	800360c <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d108      	bne.n	8005c10 <HAL_UART_Transmit+0x82>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	e003      	b.n	8005c18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c20:	e02a      	b.n	8005c78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f840 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e036      	b.n	8005caa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	3302      	adds	r3, #2
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	e007      	b.n	8005c6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1cf      	bne.n	8005c22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2140      	movs	r1, #64	; 0x40
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f810 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e006      	b.n	8005caa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b090      	sub	sp, #64	; 0x40
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc2:	e050      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d04c      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd2:	f7fd fc9b 	bl	800360c <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d241      	bcs.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d02:	637a      	str	r2, [r7, #52]	; 0x34
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	613b      	str	r3, [r7, #16]
   return(result);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3314      	adds	r3, #20
 8005d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d36:	623a      	str	r2, [r7, #32]
 8005d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	6a3a      	ldr	r2, [r7, #32]
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00f      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	bf0c      	ite	eq
 8005d76:	2301      	moveq	r3, #1
 8005d78:	2300      	movne	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d09f      	beq.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3740      	adds	r7, #64	; 0x40
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0c0      	sub	sp, #256	; 0x100
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	68d9      	ldr	r1, [r3, #12]
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	ea40 0301 	orr.w	r3, r0, r1
 8005db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de8:	f021 010c 	bic.w	r1, r1, #12
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	ea40 0301 	orr.w	r3, r0, r1
 8005e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	; (800605c <UART_SetConfig+0x2cc>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d005      	beq.n	8005e30 <UART_SetConfig+0xa0>
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	; (8006060 <UART_SetConfig+0x2d0>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d104      	bne.n	8005e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7ff fb9a 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8005e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e38:	e003      	b.n	8005e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7ff fb81 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	f040 810c 	bne.w	8006068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e72:	4621      	mov	r1, r4
 8005e74:	eb12 0801 	adds.w	r8, r2, r1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	eb43 0901 	adc.w	r9, r3, r1
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e92:	4690      	mov	r8, r2
 8005e94:	4699      	mov	r9, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	eb18 0303 	adds.w	r3, r8, r3
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb49 0303 	adc.w	r3, r9, r3
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	18db      	adds	r3, r3, r3
 8005ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	eb42 0303 	adc.w	r3, r2, r3
 8005eca:	657b      	str	r3, [r7, #84]	; 0x54
 8005ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ed4:	f7fa fe90 	bl	8000bf8 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b61      	ldr	r3, [pc, #388]	; (8006064 <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011c      	lsls	r4, r3, #4
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	1891      	adds	r1, r2, r2
 8005efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f00:	415b      	adcs	r3, r3
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f08:	4641      	mov	r1, r8
 8005f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb43 0b01 	adc.w	fp, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f28:	4692      	mov	sl, r2
 8005f2a:	469b      	mov	fp, r3
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f36:	464b      	mov	r3, r9
 8005f38:	eb4b 0303 	adc.w	r3, fp, r3
 8005f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f54:	460b      	mov	r3, r1
 8005f56:	18db      	adds	r3, r3, r3
 8005f58:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f6a:	f7fa fe45 	bl	8000bf8 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	2264      	movs	r2, #100	; 0x64
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	1acb      	subs	r3, r1, r3
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f8a:	4b36      	ldr	r3, [pc, #216]	; (8006064 <UART_SetConfig+0x2d4>)
 8005f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f98:	441c      	add	r4, r3
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	1891      	adds	r1, r2, r2
 8005fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fb4:	415b      	adcs	r3, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	1851      	adds	r1, r2, r1
 8005fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	00cb      	lsls	r3, r1, #3
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fde:	4651      	mov	r1, sl
 8005fe0:	00ca      	lsls	r2, r1, #3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800600c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006026:	f7fa fde7 	bl	8000bf8 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <UART_SetConfig+0x2d4>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	; 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3332      	adds	r3, #50	; 0x32
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <UART_SetConfig+0x2d4>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f003 0207 	and.w	r2, r3, #7
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4422      	add	r2, r4
 8006056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006058:	e105      	b.n	8006266 <UART_SetConfig+0x4d6>
 800605a:	bf00      	nop
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	1891      	adds	r1, r2, r2
 8006080:	6239      	str	r1, [r7, #32]
 8006082:	415b      	adcs	r3, r3
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800608a:	4641      	mov	r1, r8
 800608c:	1854      	adds	r4, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb43 0501 	adc.w	r5, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	00eb      	lsls	r3, r5, #3
 800609e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a2:	00e2      	lsls	r2, r4, #3
 80060a4:	4614      	mov	r4, r2
 80060a6:	461d      	mov	r5, r3
 80060a8:	4643      	mov	r3, r8
 80060aa:	18e3      	adds	r3, r4, r3
 80060ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060b0:	464b      	mov	r3, r9
 80060b2:	eb45 0303 	adc.w	r3, r5, r3
 80060b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060d6:	4629      	mov	r1, r5
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e0:	4621      	mov	r1, r4
 80060e2:	008a      	lsls	r2, r1, #2
 80060e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060e8:	f7fa fd86 	bl	8000bf8 <__aeabi_uldivmod>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4b60      	ldr	r3, [pc, #384]	; (8006274 <UART_SetConfig+0x4e4>)
 80060f2:	fba3 2302 	umull	r2, r3, r3, r2
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	011c      	lsls	r4, r3, #4
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	1891      	adds	r1, r2, r2
 8006112:	61b9      	str	r1, [r7, #24]
 8006114:	415b      	adcs	r3, r3
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611c:	4641      	mov	r1, r8
 800611e:	1851      	adds	r1, r2, r1
 8006120:	6139      	str	r1, [r7, #16]
 8006122:	4649      	mov	r1, r9
 8006124:	414b      	adcs	r3, r1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006134:	4659      	mov	r1, fp
 8006136:	00cb      	lsls	r3, r1, #3
 8006138:	4651      	mov	r1, sl
 800613a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613e:	4651      	mov	r1, sl
 8006140:	00ca      	lsls	r2, r1, #3
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	4603      	mov	r3, r0
 8006148:	4642      	mov	r2, r8
 800614a:	189b      	adds	r3, r3, r2
 800614c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	67bb      	str	r3, [r7, #120]	; 0x78
 8006166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006174:	4649      	mov	r1, r9
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	4641      	mov	r1, r8
 800617a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617e:	4641      	mov	r1, r8
 8006180:	008a      	lsls	r2, r1, #2
 8006182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006186:	f7fa fd37 	bl	8000bf8 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <UART_SetConfig+0x4e4>)
 8006190:	fba3 1302 	umull	r1, r3, r3, r2
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	2164      	movs	r1, #100	; 0x64
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	3332      	adds	r3, #50	; 0x32
 80061a2:	4a34      	ldr	r2, [pc, #208]	; (8006274 <UART_SetConfig+0x4e4>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ae:	441c      	add	r4, r3
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b4:	2200      	movs	r2, #0
 80061b6:	673b      	str	r3, [r7, #112]	; 0x70
 80061b8:	677a      	str	r2, [r7, #116]	; 0x74
 80061ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061be:	4642      	mov	r2, r8
 80061c0:	464b      	mov	r3, r9
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	415b      	adcs	r3, r3
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ce:	4641      	mov	r1, r8
 80061d0:	1851      	adds	r1, r2, r1
 80061d2:	6039      	str	r1, [r7, #0]
 80061d4:	4649      	mov	r1, r9
 80061d6:	414b      	adcs	r3, r1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e6:	4659      	mov	r1, fp
 80061e8:	00cb      	lsls	r3, r1, #3
 80061ea:	4651      	mov	r1, sl
 80061ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f0:	4651      	mov	r1, sl
 80061f2:	00ca      	lsls	r2, r1, #3
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	4642      	mov	r2, r8
 80061fc:	189b      	adds	r3, r3, r2
 80061fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006200:	464b      	mov	r3, r9
 8006202:	460a      	mov	r2, r1
 8006204:	eb42 0303 	adc.w	r3, r2, r3
 8006208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	663b      	str	r3, [r7, #96]	; 0x60
 8006214:	667a      	str	r2, [r7, #100]	; 0x64
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006222:	4649      	mov	r1, r9
 8006224:	008b      	lsls	r3, r1, #2
 8006226:	4641      	mov	r1, r8
 8006228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622c:	4641      	mov	r1, r8
 800622e:	008a      	lsls	r2, r1, #2
 8006230:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006234:	f7fa fce0 	bl	8000bf8 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <UART_SetConfig+0x4e4>)
 800623e:	fba3 1302 	umull	r1, r3, r3, r2
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	2164      	movs	r1, #100	; 0x64
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	3332      	adds	r3, #50	; 0x32
 8006250:	4a08      	ldr	r2, [pc, #32]	; (8006274 <UART_SetConfig+0x4e4>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	f003 020f 	and.w	r2, r3, #15
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4422      	add	r2, r4
 8006264:	609a      	str	r2, [r3, #8]
}
 8006266:	bf00      	nop
 8006268:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	51eb851f 	.word	0x51eb851f

08006278 <__NVIC_SetPriority>:
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db0a      	blt.n	80062a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	490c      	ldr	r1, [pc, #48]	; (80062c4 <__NVIC_SetPriority+0x4c>)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	0112      	lsls	r2, r2, #4
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	440b      	add	r3, r1
 800629c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062a0:	e00a      	b.n	80062b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	4908      	ldr	r1, [pc, #32]	; (80062c8 <__NVIC_SetPriority+0x50>)
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	3b04      	subs	r3, #4
 80062b0:	0112      	lsls	r2, r2, #4
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	440b      	add	r3, r1
 80062b6:	761a      	strb	r2, [r3, #24]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	e000e100 	.word	0xe000e100
 80062c8:	e000ed00 	.word	0xe000ed00

080062cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <SysTick_Handler+0x1c>)
 80062d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062d4:	f001 fde6 	bl	8007ea4 <xTaskGetSchedulerState>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062de:	f002 fc8b 	bl	8008bf8 <xPortSysTickHandler>
  }
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	e000e010 	.word	0xe000e010

080062ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062f0:	2100      	movs	r1, #0
 80062f2:	f06f 0004 	mvn.w	r0, #4
 80062f6:	f7ff ffbf 	bl	8006278 <__NVIC_SetPriority>
#endif
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006306:	f3ef 8305 	mrs	r3, IPSR
 800630a:	603b      	str	r3, [r7, #0]
  return(result);
 800630c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006312:	f06f 0305 	mvn.w	r3, #5
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e00c      	b.n	8006334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <osKernelInitialize+0x44>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <osKernelInitialize+0x44>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006328:	2300      	movs	r3, #0
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	e002      	b.n	8006334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800632e:	f04f 33ff 	mov.w	r3, #4294967295
 8006332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006334:	687b      	ldr	r3, [r7, #4]
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000324 	.word	0x20000324

08006348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	603b      	str	r3, [r7, #0]
  return(result);
 8006354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <osKernelStart+0x1a>
    stat = osErrorISR;
 800635a:	f06f 0305 	mvn.w	r3, #5
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e010      	b.n	8006384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <osKernelStart+0x48>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d109      	bne.n	800637e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800636a:	f7ff ffbf 	bl	80062ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800636e:	4b08      	ldr	r3, [pc, #32]	; (8006390 <osKernelStart+0x48>)
 8006370:	2202      	movs	r2, #2
 8006372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006374:	f001 f93a 	bl	80075ec <vTaskStartScheduler>
      stat = osOK;
 8006378:	2300      	movs	r3, #0
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e002      	b.n	8006384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
 8006382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006384:	687b      	ldr	r3, [r7, #4]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000324 	.word	0x20000324

08006394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b08e      	sub	sp, #56	; 0x38
 8006398:	af04      	add	r7, sp, #16
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	617b      	str	r3, [r7, #20]
  return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d17e      	bne.n	80064ae <osThreadNew+0x11a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d07b      	beq.n	80064ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063ba:	2318      	movs	r3, #24
 80063bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d045      	beq.n	800645a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <osThreadNew+0x48>
        name = attr->name;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <osThreadNew+0x6e>
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b38      	cmp	r3, #56	; 0x38
 80063f4:	d805      	bhi.n	8006402 <osThreadNew+0x6e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <osThreadNew+0x72>
        return (NULL);
 8006402:	2300      	movs	r3, #0
 8006404:	e054      	b.n	80064b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <osThreadNew+0xa8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2bbb      	cmp	r3, #187	; 0xbb
 8006424:	d90a      	bls.n	800643c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <osThreadNew+0xa8>
        mem = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e010      	b.n	800645e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <osThreadNew+0xca>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <osThreadNew+0xca>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <osThreadNew+0xca>
          mem = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e001      	b.n	800645e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d110      	bne.n	8006486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 feca 	bl	8007214 <xTaskCreateStatic>
 8006480:	4603      	mov	r3, r0
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e013      	b.n	80064ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d110      	bne.n	80064ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	b29a      	uxth	r2, r3
 8006490:	f107 0310 	add.w	r3, r7, #16
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 ff15 	bl	80072ce <xTaskCreate>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <osThreadNew+0x11a>
            hTask = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064ae:	693b      	ldr	r3, [r7, #16]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3728      	adds	r7, #40	; 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c0:	f3ef 8305 	mrs	r3, IPSR
 80064c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <osDelay+0x1c>
    stat = osErrorISR;
 80064cc:	f06f 0305 	mvn.w	r3, #5
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e007      	b.n	80064e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f850 	bl	8007584 <vTaskDelay>
    }
  }

  return (stat);
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f002 f99c 	bl	8008834 <pvTimerGetTimerID>
 80064fc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
  }
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	; 0x30
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	460b      	mov	r3, r1
 8006526:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652c:	f3ef 8305 	mrs	r3, IPSR
 8006530:	613b      	str	r3, [r7, #16]
  return(result);
 8006532:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006534:	2b00      	cmp	r3, #0
 8006536:	d163      	bne.n	8006600 <osTimerNew+0xe8>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d060      	beq.n	8006600 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800653e:	2008      	movs	r0, #8
 8006540:	f002 fbea 	bl	8008d18 <pvPortMalloc>
 8006544:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d059      	beq.n	8006600 <osTimerNew+0xe8>
      callb->func = func;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <osTimerNew+0x4c>
        reload = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	e001      	b.n	8006568 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01c      	beq.n	80065b2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <osTimerNew+0x6e>
          name = attr->name;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d006      	beq.n	800659c <osTimerNew+0x84>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b2b      	cmp	r3, #43	; 0x2b
 8006594:	d902      	bls.n	800659c <osTimerNew+0x84>
          mem = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	e00c      	b.n	80065b6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <osTimerNew+0x9e>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <osTimerNew+0x9e>
            mem = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e001      	b.n	80065b6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d10c      	bne.n	80065d6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <osTimerNew+0xf4>)
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	2101      	movs	r1, #1
 80065cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ce:	f001 fdb2 	bl	8008136 <xTimerCreateStatic>
 80065d2:	6238      	str	r0, [r7, #32]
 80065d4:	e00b      	b.n	80065ee <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d108      	bne.n	80065ee <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <osTimerNew+0xf4>)
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	2101      	movs	r1, #1
 80065e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065e8:	f001 fd84 	bl	80080f4 <xTimerCreate>
 80065ec:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <osTimerNew+0xe8>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <osTimerNew+0xe8>
        vPortFree (callb);
 80065fa:	6978      	ldr	r0, [r7, #20]
 80065fc:	f002 fc58 	bl	8008eb0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006600:	6a3b      	ldr	r3, [r7, #32]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3728      	adds	r7, #40	; 0x28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	080064ef 	.word	0x080064ef

08006610 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661e:	f3ef 8305 	mrs	r3, IPSR
 8006622:	60fb      	str	r3, [r7, #12]
  return(result);
 8006624:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <osTimerStart+0x22>
    stat = osErrorISR;
 800662a:	f06f 0305 	mvn.w	r3, #5
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e017      	b.n	8006662 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006638:	f06f 0303 	mvn.w	r3, #3
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e010      	b.n	8006662 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	2104      	movs	r1, #4
 800664a:	6938      	ldr	r0, [r7, #16]
 800664c:	f001 fdec 	bl	8008228 <xTimerGenericCommand>
 8006650:	4603      	mov	r3, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d102      	bne.n	800665c <osTimerStart+0x4c>
      stat = osOK;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e002      	b.n	8006662 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800665c:	f06f 0302 	mvn.w	r3, #2
 8006660:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006662:	697b      	ldr	r3, [r7, #20]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a07      	ldr	r2, [pc, #28]	; (8006698 <vApplicationGetIdleTaskMemory+0x2c>)
 800667c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4a06      	ldr	r2, [pc, #24]	; (800669c <vApplicationGetIdleTaskMemory+0x30>)
 8006682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	601a      	str	r2, [r3, #0]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000328 	.word	0x20000328
 800669c:	200003e4 	.word	0x200003e4

080066a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <vApplicationGetTimerTaskMemory+0x2c>)
 80066b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <vApplicationGetTimerTaskMemory+0x30>)
 80066b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066be:	601a      	str	r2, [r3, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200005e4 	.word	0x200005e4
 80066d0:	200006a0 	.word	0x200006a0

080066d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f103 0208 	add.w	r2, r3, #8
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 0208 	add.w	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f103 0208 	add.w	r2, r3, #8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d103      	bne.n	8006796 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e00c      	b.n	80067b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3308      	adds	r3, #8
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e002      	b.n	80067a4 <vListInsert+0x2e>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d2f6      	bcs.n	800679e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6892      	ldr	r2, [r2, #8]
 80067fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d103      	bne.n	800681c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006866:	f002 f935 	bl	8008ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	441a      	add	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	3b01      	subs	r3, #1
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d114      	bne.n	80068e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01a      	beq.n	80068fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3310      	adds	r3, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f929 	bl	8007b20 <xTaskRemoveFromEventList>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <xQueueGenericReset+0xcc>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	e009      	b.n	80068fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3310      	adds	r3, #16
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fef2 	bl	80066d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff feed 	bl	80066d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068fa:	f002 f91b 	bl	8008b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068fe:	2301      	movs	r3, #1
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <xQueueGenericCreateStatic+0x52>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <xQueueGenericCreateStatic+0x56>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericCreateStatic+0x58>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	623b      	str	r3, [r7, #32]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <xQueueGenericCreateStatic+0x7e>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <xQueueGenericCreateStatic+0x82>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <xQueueGenericCreateStatic+0x84>
 800698e:	2300      	movs	r3, #0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	61fb      	str	r3, [r7, #28]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069aa:	2350      	movs	r3, #80	; 0x50
 80069ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b50      	cmp	r3, #80	; 0x50
 80069b2:	d00a      	beq.n	80069ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61bb      	str	r3, [r7, #24]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f805 	bl	80069fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3730      	adds	r7, #48	; 0x30
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	69b8      	ldr	r0, [r7, #24]
 8006a2e:	f7ff ff05 	bl	800683c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	78fa      	ldrb	r2, [r7, #3]
 8006a36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08e      	sub	sp, #56	; 0x38
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueGenericSend+0x32>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <xQueueGenericSend+0x40>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <xQueueGenericSend+0x44>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <xQueueGenericSend+0x46>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xQueueGenericSend+0x60>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d103      	bne.n	8006ab2 <xQueueGenericSend+0x6e>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <xQueueGenericSend+0x72>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <xQueueGenericSend+0x74>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	623b      	str	r3, [r7, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ad2:	f001 f9e7 	bl	8007ea4 <xTaskGetSchedulerState>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <xQueueGenericSend+0x9e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSend+0xa2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSend+0xa4>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueGenericSend+0xbe>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	61fb      	str	r3, [r7, #28]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b02:	f001 ffe7 	bl	8008ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <xQueueGenericSend+0xd4>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d129      	bne.n	8006b6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1e:	f000 fa0b 	bl	8006f38 <prvCopyDataToQueue>
 8006b22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fff5 	bl	8007b20 <xTaskRemoveFromEventList>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	e00a      	b.n	8006b64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b54:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b64:	f001 ffe6 	bl	8008b34 <vPortExitCritical>
				return pdPASS;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e063      	b.n	8006c34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b72:	f001 ffdf 	bl	8008b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e05c      	b.n	8006c34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 f82f 	bl	8007be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b8e:	f001 ffd1 	bl	8008b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b92:	f000 fd9b 	bl	80076cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b96:	f001 ff9d 	bl	8008ad4 <vPortEnterCritical>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba0:	b25b      	sxtb	r3, r3
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d103      	bne.n	8006bb0 <xQueueGenericSend+0x16c>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d103      	bne.n	8006bc6 <xQueueGenericSend+0x182>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc6:	f001 ffb5 	bl	8008b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bca:	1d3a      	adds	r2, r7, #4
 8006bcc:	f107 0314 	add.w	r3, r7, #20
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f81e 	bl	8007c14 <xTaskCheckForTimeOut>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d124      	bne.n	8006c28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be0:	f000 faa2 	bl	8007128 <prvIsQueueFull>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	3310      	adds	r3, #16
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ff44 	bl	8007a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fa2d 	bl	8007058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bfe:	f000 fd73 	bl	80076e8 <xTaskResumeAll>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f47f af7c 	bne.w	8006b02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xQueueGenericSend+0x1f8>)
 8006c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	e772      	b.n	8006b02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1e:	f000 fa1b 	bl	8007058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c22:	f000 fd61 	bl	80076e8 <xTaskResumeAll>
 8006c26:	e76c      	b.n	8006b02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c2a:	f000 fa15 	bl	8007058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c2e:	f000 fd5b 	bl	80076e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3738      	adds	r7, #56	; 0x38
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b090      	sub	sp, #64	; 0x40
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d103      	bne.n	8006c7c <xQueueGenericSendFromISR+0x3c>
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <xQueueGenericSendFromISR+0x40>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <xQueueGenericSendFromISR+0x42>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d103      	bne.n	8006caa <xQueueGenericSendFromISR+0x6a>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <xQueueGenericSendFromISR+0x6e>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueGenericSendFromISR+0x70>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	623b      	str	r3, [r7, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cca:	f001 ffe5 	bl	8008c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cce:	f3ef 8211 	mrs	r2, BASEPRI
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	61fa      	str	r2, [r7, #28]
 8006ce4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d302      	bcc.n	8006cfc <xQueueGenericSendFromISR+0xbc>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d12f      	bne.n	8006d5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d12:	f000 f911 	bl	8006f38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d112      	bne.n	8006d46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d016      	beq.n	8006d56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	3324      	adds	r3, #36	; 0x24
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fef7 	bl	8007b20 <xTaskRemoveFromEventList>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e007      	b.n	8006d56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	b25a      	sxtb	r2, r3
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d56:	2301      	movs	r3, #1
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d5a:	e001      	b.n	8006d60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3740      	adds	r7, #64	; 0x40
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <xQueueReceive+0x30>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	623b      	str	r3, [r7, #32]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <xQueueReceive+0x3e>
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <xQueueReceive+0x42>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <xQueueReceive+0x44>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueReceive+0x5e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61fb      	str	r3, [r7, #28]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dd6:	f001 f865 	bl	8007ea4 <xTaskGetSchedulerState>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <xQueueReceive+0x6e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <xQueueReceive+0x72>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <xQueueReceive+0x74>
 8006dea:	2300      	movs	r3, #0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueReceive+0x8e>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	61bb      	str	r3, [r7, #24]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e06:	f001 fe65 	bl	8008ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01f      	beq.n	8006e56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1a:	f000 f8f7 	bl	800700c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00f      	beq.n	8006e4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	3310      	adds	r3, #16
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fe74 	bl	8007b20 <xTaskRemoveFromEventList>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e3e:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <xQueueReceive+0x1bc>)
 8006e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e4e:	f001 fe71 	bl	8008b34 <vPortExitCritical>
				return pdPASS;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e069      	b.n	8006f2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e5c:	f001 fe6a 	bl	8008b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e062      	b.n	8006f2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e6a:	f107 0310 	add.w	r3, r7, #16
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 feba 	bl	8007be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e78:	f001 fe5c 	bl	8008b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e7c:	f000 fc26 	bl	80076cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e80:	f001 fe28 	bl	8008ad4 <vPortEnterCritical>
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d103      	bne.n	8006e9a <xQueueReceive+0x122>
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea6:	d103      	bne.n	8006eb0 <xQueueReceive+0x138>
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb0:	f001 fe40 	bl	8008b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eb4:	1d3a      	adds	r2, r7, #4
 8006eb6:	f107 0310 	add.w	r3, r7, #16
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fea9 	bl	8007c14 <xTaskCheckForTimeOut>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d123      	bne.n	8006f10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	f000 f917 	bl	80070fc <prvIsQueueEmpty>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d017      	beq.n	8006f04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fdcf 	bl	8007a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee4:	f000 f8b8 	bl	8007058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ee8:	f000 fbfe 	bl	80076e8 <xTaskResumeAll>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d189      	bne.n	8006e06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ef2:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <xQueueReceive+0x1bc>)
 8006ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	e780      	b.n	8006e06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f06:	f000 f8a7 	bl	8007058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f0a:	f000 fbed 	bl	80076e8 <xTaskResumeAll>
 8006f0e:	e77a      	b.n	8006e06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f12:	f000 f8a1 	bl	8007058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f16:	f000 fbe7 	bl	80076e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f1c:	f000 f8ee 	bl	80070fc <prvIsQueueEmpty>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f43f af6f 	beq.w	8006e06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3730      	adds	r7, #48	; 0x30
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14d      	bne.n	8006ffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 ffbc 	bl	8007ee0 <xTaskPriorityDisinherit>
 8006f68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	609a      	str	r2, [r3, #8]
 8006f70:	e043      	b.n	8006ffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d119      	bne.n	8006fac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6858      	ldr	r0, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	461a      	mov	r2, r3
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	f002 f9d5 	bl	8009332 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d32b      	bcc.n	8006ffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	e026      	b.n	8006ffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68d8      	ldr	r0, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	f002 f9bb 	bl	8009332 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	441a      	add	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d207      	bcs.n	8006fe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	425b      	negs	r3, r3
 8006fe2:	441a      	add	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d105      	bne.n	8006ffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	441a      	add	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	d303      	bcc.n	8007040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68d9      	ldr	r1, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	461a      	mov	r2, r3
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f002 f971 	bl	8009332 <memcpy>
	}
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007060:	f001 fd38 	bl	8008ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800706a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800706c:	e011      	b.n	8007092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d012      	beq.n	800709c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3324      	adds	r3, #36	; 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fd50 	bl	8007b20 <xTaskRemoveFromEventList>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007086:	f000 fe27 	bl	8007cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	3b01      	subs	r3, #1
 800708e:	b2db      	uxtb	r3, r3
 8007090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	dce9      	bgt.n	800706e <prvUnlockQueue+0x16>
 800709a:	e000      	b.n	800709e <prvUnlockQueue+0x46>
					break;
 800709c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070a6:	f001 fd45 	bl	8008b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070aa:	f001 fd13 	bl	8008ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b6:	e011      	b.n	80070dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d012      	beq.n	80070e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3310      	adds	r3, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fd2b 	bl	8007b20 <xTaskRemoveFromEventList>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070d0:	f000 fe02 	bl	8007cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dce9      	bgt.n	80070b8 <prvUnlockQueue+0x60>
 80070e4:	e000      	b.n	80070e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	22ff      	movs	r2, #255	; 0xff
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070f0:	f001 fd20 	bl	8008b34 <vPortExitCritical>
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007104:	f001 fce6 	bl	8008ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007110:	2301      	movs	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e001      	b.n	800711a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800711a:	f001 fd0b 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007130:	f001 fcd0 	bl	8008ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	429a      	cmp	r2, r3
 800713e:	d102      	bne.n	8007146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e001      	b.n	800714a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f001 fcf3 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e014      	b.n	8007192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007168:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <vQueueAddToRegistry+0x50>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007174:	490c      	ldr	r1, [pc, #48]	; (80071a8 <vQueueAddToRegistry+0x50>)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <vQueueAddToRegistry+0x50>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800718a:	e006      	b.n	800719a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b07      	cmp	r3, #7
 8007196:	d9e7      	bls.n	8007168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000aa0 	.word	0x20000aa0

080071ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071bc:	f001 fc8a 	bl	8008ad4 <vPortEnterCritical>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d103      	bne.n	80071d6 <vQueueWaitForMessageRestricted+0x2a>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d103      	bne.n	80071ec <vQueueWaitForMessageRestricted+0x40>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ec:	f001 fca2 	bl	8008b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3324      	adds	r3, #36	; 0x24
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fc61 	bl	8007ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007206:	6978      	ldr	r0, [r7, #20]
 8007208:	f7ff ff26 	bl	8007058 <prvUnlockQueue>
	}
 800720c:	bf00      	nop
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08e      	sub	sp, #56	; 0x38
 8007218:	af04      	add	r7, sp, #16
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCreateStatic+0x46>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	61fb      	str	r3, [r7, #28]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800725a:	23bc      	movs	r3, #188	; 0xbc
 800725c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2bbc      	cmp	r3, #188	; 0xbc
 8007262:	d00a      	beq.n	800727a <xTaskCreateStatic+0x66>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	61bb      	str	r3, [r7, #24]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800727a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01e      	beq.n	80072c0 <xTaskCreateStatic+0xac>
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2202      	movs	r2, #2
 8007296:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800729a:	2300      	movs	r3, #0
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	f107 0314 	add.w	r3, r7, #20
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f850 	bl	8007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ba:	f000 f8f3 	bl	80074a4 <prvAddNewTaskToReadyList>
 80072be:	e001      	b.n	80072c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b08c      	sub	sp, #48	; 0x30
 80072d2:	af04      	add	r7, sp, #16
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fd18 	bl	8008d18 <pvPortMalloc>
 80072e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072f0:	20bc      	movs	r0, #188	; 0xbc
 80072f2:	f001 fd11 	bl	8008d18 <pvPortMalloc>
 80072f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
 8007304:	e005      	b.n	8007312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f001 fdd2 	bl	8008eb0 <vPortFree>
 800730c:	e001      	b.n	8007312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007320:	88fa      	ldrh	r2, [r7, #6]
 8007322:	2300      	movs	r3, #0
 8007324:	9303      	str	r3, [sp, #12]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f80e 	bl	8007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800733c:	69f8      	ldr	r0, [r7, #28]
 800733e:	f000 f8b1 	bl	80074a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e002      	b.n	800734e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007348:	f04f 33ff 	mov.w	r3, #4294967295
 800734c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800734e:	69bb      	ldr	r3, [r7, #24]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	461a      	mov	r2, r3
 8007370:	21a5      	movs	r1, #165	; 0xa5
 8007372:	f001 ffec 	bl	800934e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007380:	3b01      	subs	r3, #1
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	617b      	str	r3, [r7, #20]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	e012      	b.n	80073e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	7819      	ldrb	r1, [r3, #0]
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	3334      	adds	r3, #52	; 0x34
 80073cc:	460a      	mov	r2, r1
 80073ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d006      	beq.n	80073ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b0f      	cmp	r3, #15
 80073e6:	d9e9      	bls.n	80073bc <prvInitialiseNewTask+0x64>
 80073e8:	e000      	b.n	80073ec <prvInitialiseNewTask+0x94>
			{
				break;
 80073ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073f4:	e003      	b.n	80073fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	2b37      	cmp	r3, #55	; 0x37
 8007402:	d901      	bls.n	8007408 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007404:	2337      	movs	r3, #55	; 0x37
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007412:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	2200      	movs	r2, #0
 8007418:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff f978 	bl	8006714 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	3318      	adds	r3, #24
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff f973 	bl	8006714 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007432:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2200      	movs	r2, #0
 8007450:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	3354      	adds	r3, #84	; 0x54
 8007458:	2260      	movs	r2, #96	; 0x60
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f001 ff76 	bl	800934e <memset>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <prvInitialiseNewTask+0x140>)
 8007466:	659a      	str	r2, [r3, #88]	; 0x58
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	4a0c      	ldr	r2, [pc, #48]	; (800749c <prvInitialiseNewTask+0x144>)
 800746c:	65da      	str	r2, [r3, #92]	; 0x5c
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	4a0b      	ldr	r2, [pc, #44]	; (80074a0 <prvInitialiseNewTask+0x148>)
 8007472:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	69b8      	ldr	r0, [r7, #24]
 800747a:	f001 f9fb 	bl	8008874 <pxPortInitialiseStack>
 800747e:	4602      	mov	r2, r0
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007490:	bf00      	nop
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	0800bdd0 	.word	0x0800bdd0
 800749c:	0800bdf0 	.word	0x0800bdf0
 80074a0:	0800bdb0 	.word	0x0800bdb0

080074a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074ac:	f001 fb12 	bl	8008ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <prvAddNewTaskToReadyList+0xc4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <prvAddNewTaskToReadyList+0xc4>)
 80074b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ba:	4b2c      	ldr	r3, [pc, #176]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <prvAddNewTaskToReadyList+0xc4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d110      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074d0:	f000 fc26 	bl	8007d20 <prvInitialiseTaskLists>
 80074d4:	e00d      	b.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074d6:	4b26      	ldr	r3, [pc, #152]	; (8007570 <prvAddNewTaskToReadyList+0xcc>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074de:	4b23      	ldr	r3, [pc, #140]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d802      	bhi.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074ec:	4a1f      	ldr	r2, [pc, #124]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074f2:	4b20      	ldr	r3, [pc, #128]	; (8007574 <prvAddNewTaskToReadyList+0xd0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <prvAddNewTaskToReadyList+0xd0>)
 80074fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <prvAddNewTaskToReadyList+0xd0>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <prvAddNewTaskToReadyList+0xd4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d903      	bls.n	8007518 <prvAddNewTaskToReadyList+0x74>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	4a18      	ldr	r2, [pc, #96]	; (8007578 <prvAddNewTaskToReadyList+0xd4>)
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <prvAddNewTaskToReadyList+0xd8>)
 8007526:	441a      	add	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7ff f8fd 	bl	800672e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007534:	f001 fafe 	bl	8008b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <prvAddNewTaskToReadyList+0xcc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00e      	beq.n	800755e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	429a      	cmp	r2, r3
 800754c:	d207      	bcs.n	800755e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <prvAddNewTaskToReadyList+0xdc>)
 8007550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000fb4 	.word	0x20000fb4
 800756c:	20000ae0 	.word	0x20000ae0
 8007570:	20000fc0 	.word	0x20000fc0
 8007574:	20000fd0 	.word	0x20000fd0
 8007578:	20000fbc 	.word	0x20000fbc
 800757c:	20000ae4 	.word	0x20000ae4
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d017      	beq.n	80075c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <vTaskDelay+0x60>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <vTaskDelay+0x30>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	60bb      	str	r3, [r7, #8]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075b4:	f000 f88a 	bl	80076cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fcfe 	bl	8007fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075c0:	f000 f892 	bl	80076e8 <xTaskResumeAll>
 80075c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d107      	bne.n	80075dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <vTaskDelay+0x64>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000fdc 	.word	0x20000fdc
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075fa:	463a      	mov	r2, r7
 80075fc:	1d39      	adds	r1, r7, #4
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff f832 	bl	800666c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	9202      	str	r2, [sp, #8]
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	2300      	movs	r3, #0
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	460a      	mov	r2, r1
 800761a:	4924      	ldr	r1, [pc, #144]	; (80076ac <vTaskStartScheduler+0xc0>)
 800761c:	4824      	ldr	r0, [pc, #144]	; (80076b0 <vTaskStartScheduler+0xc4>)
 800761e:	f7ff fdf9 	bl	8007214 <xTaskCreateStatic>
 8007622:	4603      	mov	r3, r0
 8007624:	4a23      	ldr	r2, [pc, #140]	; (80076b4 <vTaskStartScheduler+0xc8>)
 8007626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007628:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <vTaskStartScheduler+0xc8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e001      	b.n	800763a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d102      	bne.n	8007646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007640:	f000 fd10 	bl	8008064 <xTimerCreateTimerTask>
 8007644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d11b      	bne.n	8007684 <vTaskStartScheduler+0x98>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <vTaskStartScheduler+0xcc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3354      	adds	r3, #84	; 0x54
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <vTaskStartScheduler+0xd0>)
 8007668:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <vTaskStartScheduler+0xd4>)
 800766c:	f04f 32ff 	mov.w	r2, #4294967295
 8007670:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007672:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <vTaskStartScheduler+0xd8>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007678:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <vTaskStartScheduler+0xdc>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800767e:	f001 f987 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007682:	e00e      	b.n	80076a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d10a      	bne.n	80076a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	60fb      	str	r3, [r7, #12]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <vTaskStartScheduler+0xb4>
}
 80076a2:	bf00      	nop
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	0800bcf8 	.word	0x0800bcf8
 80076b0:	08007cf1 	.word	0x08007cf1
 80076b4:	20000fd8 	.word	0x20000fd8
 80076b8:	20000ae0 	.word	0x20000ae0
 80076bc:	20000010 	.word	0x20000010
 80076c0:	20000fd4 	.word	0x20000fd4
 80076c4:	20000fc0 	.word	0x20000fc0
 80076c8:	20000fb8 	.word	0x20000fb8

080076cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <vTaskSuspendAll+0x18>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	4a03      	ldr	r2, [pc, #12]	; (80076e4 <vTaskSuspendAll+0x18>)
 80076d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076da:	bf00      	nop
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000fdc 	.word	0x20000fdc

080076e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076f6:	4b42      	ldr	r3, [pc, #264]	; (8007800 <xTaskResumeAll+0x118>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <xTaskResumeAll+0x2c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	603b      	str	r3, [r7, #0]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007714:	f001 f9de 	bl	8008ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007718:	4b39      	ldr	r3, [pc, #228]	; (8007800 <xTaskResumeAll+0x118>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3b01      	subs	r3, #1
 800771e:	4a38      	ldr	r2, [pc, #224]	; (8007800 <xTaskResumeAll+0x118>)
 8007720:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007722:	4b37      	ldr	r3, [pc, #220]	; (8007800 <xTaskResumeAll+0x118>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d162      	bne.n	80077f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800772a:	4b36      	ldr	r3, [pc, #216]	; (8007804 <xTaskResumeAll+0x11c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d05e      	beq.n	80077f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007732:	e02f      	b.n	8007794 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007734:	4b34      	ldr	r3, [pc, #208]	; (8007808 <xTaskResumeAll+0x120>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3318      	adds	r3, #24
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f851 	bl	80067e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff f84c 	bl	80067e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4b2d      	ldr	r3, [pc, #180]	; (800780c <xTaskResumeAll+0x124>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d903      	bls.n	8007764 <xTaskResumeAll+0x7c>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a2a      	ldr	r2, [pc, #168]	; (800780c <xTaskResumeAll+0x124>)
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4a27      	ldr	r2, [pc, #156]	; (8007810 <xTaskResumeAll+0x128>)
 8007772:	441a      	add	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fe ffd7 	bl	800672e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4b23      	ldr	r3, [pc, #140]	; (8007814 <xTaskResumeAll+0x12c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800778e:	4b22      	ldr	r3, [pc, #136]	; (8007818 <xTaskResumeAll+0x130>)
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007794:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <xTaskResumeAll+0x120>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1cb      	bne.n	8007734 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077a2:	f000 fb5f 	bl	8007e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077a6:	4b1d      	ldr	r3, [pc, #116]	; (800781c <xTaskResumeAll+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077b2:	f000 f847 	bl	8007844 <xTaskIncrementTick>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077bc:	4b16      	ldr	r3, [pc, #88]	; (8007818 <xTaskResumeAll+0x130>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f1      	bne.n	80077b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <xTaskResumeAll+0x134>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <xTaskResumeAll+0x130>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <xTaskResumeAll+0x138>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077f0:	f001 f9a0 	bl	8008b34 <vPortExitCritical>

	return xAlreadyYielded;
 80077f4:	68bb      	ldr	r3, [r7, #8]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000fdc 	.word	0x20000fdc
 8007804:	20000fb4 	.word	0x20000fb4
 8007808:	20000f74 	.word	0x20000f74
 800780c:	20000fbc 	.word	0x20000fbc
 8007810:	20000ae4 	.word	0x20000ae4
 8007814:	20000ae0 	.word	0x20000ae0
 8007818:	20000fc8 	.word	0x20000fc8
 800781c:	20000fc4 	.word	0x20000fc4
 8007820:	e000ed04 	.word	0xe000ed04

08007824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <xTaskGetTickCount+0x1c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007830:	687b      	ldr	r3, [r7, #4]
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000fb8 	.word	0x20000fb8

08007844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800784e:	4b4f      	ldr	r3, [pc, #316]	; (800798c <xTaskIncrementTick+0x148>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f040 808f 	bne.w	8007976 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007858:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <xTaskIncrementTick+0x14c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007860:	4a4b      	ldr	r2, [pc, #300]	; (8007990 <xTaskIncrementTick+0x14c>)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d120      	bne.n	80078ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800786c:	4b49      	ldr	r3, [pc, #292]	; (8007994 <xTaskIncrementTick+0x150>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <xTaskIncrementTick+0x48>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	603b      	str	r3, [r7, #0]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <xTaskIncrementTick+0x46>
 800788c:	4b41      	ldr	r3, [pc, #260]	; (8007994 <xTaskIncrementTick+0x150>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <xTaskIncrementTick+0x154>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a3f      	ldr	r2, [pc, #252]	; (8007994 <xTaskIncrementTick+0x150>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <xTaskIncrementTick+0x154>)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	4b3e      	ldr	r3, [pc, #248]	; (800799c <xTaskIncrementTick+0x158>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	4a3d      	ldr	r2, [pc, #244]	; (800799c <xTaskIncrementTick+0x158>)
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	f000 fadb 	bl	8007e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078ae:	4b3c      	ldr	r3, [pc, #240]	; (80079a0 <xTaskIncrementTick+0x15c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d349      	bcc.n	800794c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b8:	4b36      	ldr	r3, [pc, #216]	; (8007994 <xTaskIncrementTick+0x150>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c2:	4b37      	ldr	r3, [pc, #220]	; (80079a0 <xTaskIncrementTick+0x15c>)
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	601a      	str	r2, [r3, #0]
					break;
 80078ca:	e03f      	b.n	800794c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078cc:	4b31      	ldr	r3, [pc, #196]	; (8007994 <xTaskIncrementTick+0x150>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d203      	bcs.n	80078ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078e4:	4a2e      	ldr	r2, [pc, #184]	; (80079a0 <xTaskIncrementTick+0x15c>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078ea:	e02f      	b.n	800794c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe ff79 	bl	80067e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	3318      	adds	r3, #24
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe ff70 	bl	80067e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <xTaskIncrementTick+0x160>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <xTaskIncrementTick+0xd8>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <xTaskIncrementTick+0x160>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <xTaskIncrementTick+0x164>)
 800792a:	441a      	add	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fefb 	bl	800672e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <xTaskIncrementTick+0x168>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	429a      	cmp	r2, r3
 8007944:	d3b8      	bcc.n	80078b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800794a:	e7b5      	b.n	80078b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800794c:	4b17      	ldr	r3, [pc, #92]	; (80079ac <xTaskIncrementTick+0x168>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4915      	ldr	r1, [pc, #84]	; (80079a8 <xTaskIncrementTick+0x164>)
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d901      	bls.n	8007968 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007968:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <xTaskIncrementTick+0x16c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e004      	b.n	8007980 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <xTaskIncrementTick+0x170>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <xTaskIncrementTick+0x170>)
 800797e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007980:	697b      	ldr	r3, [r7, #20]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000fdc 	.word	0x20000fdc
 8007990:	20000fb8 	.word	0x20000fb8
 8007994:	20000f6c 	.word	0x20000f6c
 8007998:	20000f70 	.word	0x20000f70
 800799c:	20000fcc 	.word	0x20000fcc
 80079a0:	20000fd4 	.word	0x20000fd4
 80079a4:	20000fbc 	.word	0x20000fbc
 80079a8:	20000ae4 	.word	0x20000ae4
 80079ac:	20000ae0 	.word	0x20000ae0
 80079b0:	20000fc8 	.word	0x20000fc8
 80079b4:	20000fc4 	.word	0x20000fc4

080079b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079be:	4b2a      	ldr	r3, [pc, #168]	; (8007a68 <vTaskSwitchContext+0xb0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079c6:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <vTaskSwitchContext+0xb4>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079cc:	e046      	b.n	8007a5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <vTaskSwitchContext+0xb4>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d4:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <vTaskSwitchContext+0xb8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e010      	b.n	80079fe <vTaskSwitchContext+0x46>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vTaskSwitchContext+0x3e>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	491d      	ldr	r1, [pc, #116]	; (8007a74 <vTaskSwitchContext+0xbc>)
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0e4      	beq.n	80079dc <vTaskSwitchContext+0x24>
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <vTaskSwitchContext+0xbc>)
 8007a1e:	4413      	add	r3, r2
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	605a      	str	r2, [r3, #4]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3308      	adds	r3, #8
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d104      	bne.n	8007a42 <vTaskSwitchContext+0x8a>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4a0b      	ldr	r2, [pc, #44]	; (8007a78 <vTaskSwitchContext+0xc0>)
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <vTaskSwitchContext+0xb8>)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <vTaskSwitchContext+0xc0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3354      	adds	r3, #84	; 0x54
 8007a58:	4a08      	ldr	r2, [pc, #32]	; (8007a7c <vTaskSwitchContext+0xc4>)
 8007a5a:	6013      	str	r3, [r2, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	20000fdc 	.word	0x20000fdc
 8007a6c:	20000fc8 	.word	0x20000fc8
 8007a70:	20000fbc 	.word	0x20000fbc
 8007a74:	20000ae4 	.word	0x20000ae4
 8007a78:	20000ae0 	.word	0x20000ae0
 8007a7c:	20000010 	.word	0x20000010

08007a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60fb      	str	r3, [r7, #12]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <vTaskPlaceOnEventList+0x44>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3318      	adds	r3, #24
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fe fe61 	bl	8006776 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6838      	ldr	r0, [r7, #0]
 8007ab8:	f000 fa80 	bl	8007fbc <prvAddCurrentTaskToDelayedList>
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000ae0 	.word	0x20000ae0

08007ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	617b      	str	r3, [r7, #20]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <vTaskPlaceOnEventListRestricted+0x54>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3318      	adds	r3, #24
 8007af6:	4619      	mov	r1, r3
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7fe fe18 	bl	800672e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b04:	f04f 33ff 	mov.w	r3, #4294967295
 8007b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68b8      	ldr	r0, [r7, #8]
 8007b0e:	f000 fa55 	bl	8007fbc <prvAddCurrentTaskToDelayedList>
	}
 8007b12:	bf00      	nop
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000ae0 	.word	0x20000ae0

08007b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3318      	adds	r3, #24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe fe49 	bl	80067e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b56:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <xTaskRemoveFromEventList+0xb0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11d      	bne.n	8007b9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe40 	bl	80067e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <xTaskRemoveFromEventList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d903      	bls.n	8007b7c <xTaskRemoveFromEventList+0x5c>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <xTaskRemoveFromEventList+0xb4>)
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a13      	ldr	r2, [pc, #76]	; (8007bd8 <xTaskRemoveFromEventList+0xb8>)
 8007b8a:	441a      	add	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe fdcb 	bl	800672e <vListInsertEnd>
 8007b98:	e005      	b.n	8007ba6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	480e      	ldr	r0, [pc, #56]	; (8007bdc <xTaskRemoveFromEventList+0xbc>)
 8007ba2:	f7fe fdc4 	bl	800672e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <xTaskRemoveFromEventList+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d905      	bls.n	8007bc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <xTaskRemoveFromEventList+0xc4>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e001      	b.n	8007bc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bc4:	697b      	ldr	r3, [r7, #20]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000fdc 	.word	0x20000fdc
 8007bd4:	20000fbc 	.word	0x20000fbc
 8007bd8:	20000ae4 	.word	0x20000ae4
 8007bdc:	20000f74 	.word	0x20000f74
 8007be0:	20000ae0 	.word	0x20000ae0
 8007be4:	20000fc8 	.word	0x20000fc8

08007be8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <vTaskInternalSetTimeOutState+0x24>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <vTaskInternalSetTimeOutState+0x28>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	605a      	str	r2, [r3, #4]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000fcc 	.word	0x20000fcc
 8007c10:	20000fb8 	.word	0x20000fb8

08007c14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c56:	f000 ff3d 	bl	8008ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	; (8007cd0 <xTaskCheckForTimeOut+0xbc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d102      	bne.n	8007c7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	e023      	b.n	8007cc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <xTaskCheckForTimeOut+0xc0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d007      	beq.n	8007c96 <xTaskCheckForTimeOut+0x82>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c90:	2301      	movs	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	e015      	b.n	8007cc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d20b      	bcs.n	8007cb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff ff9b 	bl	8007be8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	e004      	b.n	8007cc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cc2:	f000 ff37 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000fb8 	.word	0x20000fb8
 8007cd4:	20000fcc 	.word	0x20000fcc

08007cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cdc:	4b03      	ldr	r3, [pc, #12]	; (8007cec <vTaskMissedYield+0x14>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000fc8 	.word	0x20000fc8

08007cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cf8:	f000 f852 	bl	8007da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <prvIdleTask+0x28>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d9f9      	bls.n	8007cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <prvIdleTask+0x2c>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d14:	e7f0      	b.n	8007cf8 <prvIdleTask+0x8>
 8007d16:	bf00      	nop
 8007d18:	20000ae4 	.word	0x20000ae4
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d26:	2300      	movs	r3, #0
 8007d28:	607b      	str	r3, [r7, #4]
 8007d2a:	e00c      	b.n	8007d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <prvInitialiseTaskLists+0x60>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fcca 	bl	80066d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3301      	adds	r3, #1
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b37      	cmp	r3, #55	; 0x37
 8007d4a:	d9ef      	bls.n	8007d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d4c:	480d      	ldr	r0, [pc, #52]	; (8007d84 <prvInitialiseTaskLists+0x64>)
 8007d4e:	f7fe fcc1 	bl	80066d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <prvInitialiseTaskLists+0x68>)
 8007d54:	f7fe fcbe 	bl	80066d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d58:	480c      	ldr	r0, [pc, #48]	; (8007d8c <prvInitialiseTaskLists+0x6c>)
 8007d5a:	f7fe fcbb 	bl	80066d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d5e:	480c      	ldr	r0, [pc, #48]	; (8007d90 <prvInitialiseTaskLists+0x70>)
 8007d60:	f7fe fcb8 	bl	80066d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d64:	480b      	ldr	r0, [pc, #44]	; (8007d94 <prvInitialiseTaskLists+0x74>)
 8007d66:	f7fe fcb5 	bl	80066d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <prvInitialiseTaskLists+0x78>)
 8007d6c:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <prvInitialiseTaskLists+0x64>)
 8007d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <prvInitialiseTaskLists+0x7c>)
 8007d72:	4a05      	ldr	r2, [pc, #20]	; (8007d88 <prvInitialiseTaskLists+0x68>)
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000ae4 	.word	0x20000ae4
 8007d84:	20000f44 	.word	0x20000f44
 8007d88:	20000f58 	.word	0x20000f58
 8007d8c:	20000f74 	.word	0x20000f74
 8007d90:	20000f88 	.word	0x20000f88
 8007d94:	20000fa0 	.word	0x20000fa0
 8007d98:	20000f6c 	.word	0x20000f6c
 8007d9c:	20000f70 	.word	0x20000f70

08007da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da6:	e019      	b.n	8007ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007da8:	f000 fe94 	bl	8008ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <prvCheckTasksWaitingTermination+0x50>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fd15 	bl	80067e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <prvCheckTasksWaitingTermination+0x54>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	4a0b      	ldr	r2, [pc, #44]	; (8007df4 <prvCheckTasksWaitingTermination+0x54>)
 8007dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dd2:	f000 feaf 	bl	8008b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f810 	bl	8007dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <prvCheckTasksWaitingTermination+0x58>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e1      	bne.n	8007da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000f88 	.word	0x20000f88
 8007df4:	20000fb4 	.word	0x20000fb4
 8007df8:	20000f9c 	.word	0x20000f9c

08007dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3354      	adds	r3, #84	; 0x54
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 ffb5 	bl	8009d78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 f847 	bl	8008eb0 <vPortFree>
				vPortFree( pxTCB );
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 f844 	bl	8008eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e28:	e018      	b.n	8007e5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d103      	bne.n	8007e3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f83b 	bl	8008eb0 <vPortFree>
	}
 8007e3a:	e00f      	b.n	8007e5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d00a      	beq.n	8007e5c <prvDeleteTCB+0x60>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <prvDeleteTCB+0x5e>
	}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7c:	e008      	b.n	8007e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000f6c 	.word	0x20000f6c
 8007ea0:	20000fd4 	.word	0x20000fd4

08007ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <xTaskGetSchedulerState+0x34>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	e008      	b.n	8007eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb8:	4b08      	ldr	r3, [pc, #32]	; (8007edc <xTaskGetSchedulerState+0x38>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	607b      	str	r3, [r7, #4]
 8007ec4:	e001      	b.n	8007eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eca:	687b      	ldr	r3, [r7, #4]
	}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	20000fc0 	.word	0x20000fc0
 8007edc:	20000fdc 	.word	0x20000fdc

08007ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d056      	beq.n	8007fa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <xTaskPriorityDisinherit+0xd0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d00a      	beq.n	8007f16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60bb      	str	r3, [r7, #8]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	1e5a      	subs	r2, r3, #1
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d02c      	beq.n	8007fa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d128      	bne.n	8007fa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc46 	bl	80067e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <xTaskPriorityDisinherit+0xd4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d903      	bls.n	8007f84 <xTaskPriorityDisinherit+0xa4>
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <xTaskPriorityDisinherit+0xd4>)
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4a09      	ldr	r2, [pc, #36]	; (8007fb8 <xTaskPriorityDisinherit+0xd8>)
 8007f92:	441a      	add	r2, r3
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe fbc7 	bl	800672e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fa4:	697b      	ldr	r3, [r7, #20]
	}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000ae0 	.word	0x20000ae0
 8007fb4:	20000fbc 	.word	0x20000fbc
 8007fb8:	20000ae4 	.word	0x20000ae4

08007fbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fc6:	4b21      	ldr	r3, [pc, #132]	; (800804c <prvAddCurrentTaskToDelayedList+0x90>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fcc:	4b20      	ldr	r3, [pc, #128]	; (8008050 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fc08 	bl	80067e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fde:	d10a      	bne.n	8007ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fe6:	4b1a      	ldr	r3, [pc, #104]	; (8008050 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4819      	ldr	r0, [pc, #100]	; (8008054 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ff0:	f7fe fb9d 	bl	800672e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ff4:	e026      	b.n	8008044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <prvAddCurrentTaskToDelayedList+0x94>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	429a      	cmp	r2, r3
 800800c:	d209      	bcs.n	8008022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <prvAddCurrentTaskToDelayedList+0x94>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f7fe fbab 	bl	8006776 <vListInsert>
}
 8008020:	e010      	b.n	8008044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <prvAddCurrentTaskToDelayedList+0x94>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3304      	adds	r3, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f7fe fba1 	bl	8006776 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	d202      	bcs.n	8008044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800803e:	4a08      	ldr	r2, [pc, #32]	; (8008060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6013      	str	r3, [r2, #0]
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20000fb8 	.word	0x20000fb8
 8008050:	20000ae0 	.word	0x20000ae0
 8008054:	20000fa0 	.word	0x20000fa0
 8008058:	20000f70 	.word	0x20000f70
 800805c:	20000f6c 	.word	0x20000f6c
 8008060:	20000fd4 	.word	0x20000fd4

08008064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800806e:	f000 fba1 	bl	80087b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <xTimerCreateTimerTask+0x80>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d021      	beq.n	80080be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008082:	1d3a      	adds	r2, r7, #4
 8008084:	f107 0108 	add.w	r1, r7, #8
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fb07 	bl	80066a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	9202      	str	r2, [sp, #8]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	2337      	movs	r3, #55	; 0x37
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	2300      	movs	r3, #0
 80080a2:	460a      	mov	r2, r1
 80080a4:	4910      	ldr	r1, [pc, #64]	; (80080e8 <xTimerCreateTimerTask+0x84>)
 80080a6:	4811      	ldr	r0, [pc, #68]	; (80080ec <xTimerCreateTimerTask+0x88>)
 80080a8:	f7ff f8b4 	bl	8007214 <xTaskCreateStatic>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4a10      	ldr	r2, [pc, #64]	; (80080f0 <xTimerCreateTimerTask+0x8c>)
 80080b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <xTimerCreateTimerTask+0x8c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	613b      	str	r3, [r7, #16]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080da:	697b      	ldr	r3, [r7, #20]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20001010 	.word	0x20001010
 80080e8:	0800bd00 	.word	0x0800bd00
 80080ec:	0800835d 	.word	0x0800835d
 80080f0:	20001014 	.word	0x20001014

080080f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008102:	202c      	movs	r0, #44	; 0x2c
 8008104:	f000 fe08 	bl	8008d18 <pvPortMalloc>
 8008108:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00d      	beq.n	800812c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 f843 	bl	80081b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800812c:	697b      	ldr	r3, [r7, #20]
	}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008136:	b580      	push	{r7, lr}
 8008138:	b08a      	sub	sp, #40	; 0x28
 800813a:	af02      	add	r7, sp, #8
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008144:	232c      	movs	r3, #44	; 0x2c
 8008146:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b2c      	cmp	r3, #44	; 0x2c
 800814c:	d00a      	beq.n	8008164 <xTimerCreateStatic+0x2e>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61bb      	str	r3, [r7, #24]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008164:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xTimerCreateStatic+0x4c>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	617b      	str	r3, [r7, #20]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00d      	beq.n	80081a8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f805 	bl	80081b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80081a8:	69fb      	ldr	r3, [r7, #28]
	}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	617b      	str	r3, [r7, #20]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01e      	beq.n	8008220 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80081e2:	f000 fae7 	bl	80087b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	6a3a      	ldr	r2, [r7, #32]
 80081fc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	3304      	adds	r3, #4
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe fa86 	bl	8006714 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d008      	beq.n	8008220 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008214:	f043 0304 	orr.w	r3, r3, #4
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008220:	bf00      	nop
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008236:	2300      	movs	r3, #0
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008256:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <xTimerGenericCommand+0x98>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d02a      	beq.n	80082b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b05      	cmp	r3, #5
 800826e:	dc18      	bgt.n	80082a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008270:	f7ff fe18 	bl	8007ea4 <xTaskGetSchedulerState>
 8008274:	4603      	mov	r3, r0
 8008276:	2b02      	cmp	r3, #2
 8008278:	d109      	bne.n	800828e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <xTimerGenericCommand+0x98>)
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f107 0110 	add.w	r1, r7, #16
 8008282:	2300      	movs	r3, #0
 8008284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008286:	f7fe fbdd 	bl	8006a44 <xQueueGenericSend>
 800828a:	6278      	str	r0, [r7, #36]	; 0x24
 800828c:	e012      	b.n	80082b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <xTimerGenericCommand+0x98>)
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f107 0110 	add.w	r1, r7, #16
 8008296:	2300      	movs	r3, #0
 8008298:	2200      	movs	r2, #0
 800829a:	f7fe fbd3 	bl	8006a44 <xQueueGenericSend>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24
 80082a0:	e008      	b.n	80082b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <xTimerGenericCommand+0x98>)
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f107 0110 	add.w	r1, r7, #16
 80082aa:	2300      	movs	r3, #0
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f7fe fcc7 	bl	8006c40 <xQueueGenericSendFromISR>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3728      	adds	r7, #40	; 0x28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20001010 	.word	0x20001010

080082c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <prvProcessExpiredTimer+0x94>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fa83 	bl	80067e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d022      	beq.n	8008336 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	18d1      	adds	r1, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	6978      	ldr	r0, [r7, #20]
 80082fe:	f000 f8d1 	bl	80084a4 <prvInsertTimerInActiveList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01f      	beq.n	8008348 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	2100      	movs	r1, #0
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f7ff ff88 	bl	8008228 <xTimerGenericCommand>
 8008318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d113      	bne.n	8008348 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	4798      	blx	r3
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20001008 	.word	0x20001008

0800835c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	4618      	mov	r0, r3
 800836a:	f000 f857 	bl	800841c <prvGetNextExpireTime>
 800836e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4619      	mov	r1, r3
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 f803 	bl	8008380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800837a:	f000 f8d5 	bl	8008528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800837e:	e7f1      	b.n	8008364 <prvTimerTask+0x8>

08008380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800838a:	f7ff f99f 	bl	80076cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800838e:	f107 0308 	add.w	r3, r7, #8
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f866 	bl	8008464 <prvSampleTimeNow>
 8008398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d130      	bne.n	8008402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <prvProcessTimerOrBlockTask+0x3c>
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d806      	bhi.n	80083bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ae:	f7ff f99b 	bl	80076e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff ff85 	bl	80082c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083ba:	e024      	b.n	8008406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083c2:	4b13      	ldr	r3, [pc, #76]	; (8008410 <prvProcessTimerOrBlockTask+0x90>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <prvProcessTimerOrBlockTask+0x50>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <prvProcessTimerOrBlockTask+0x52>
 80083d0:	2300      	movs	r3, #0
 80083d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <prvProcessTimerOrBlockTask+0x94>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7fe fee3 	bl	80071ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083e6:	f7ff f97f 	bl	80076e8 <xTaskResumeAll>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <prvProcessTimerOrBlockTask+0x98>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
}
 8008400:	e001      	b.n	8008406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008402:	f7ff f971 	bl	80076e8 <xTaskResumeAll>
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	2000100c 	.word	0x2000100c
 8008414:	20001010 	.word	0x20001010
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <prvGetNextExpireTime+0x44>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <prvGetNextExpireTime+0x16>
 800842e:	2201      	movs	r2, #1
 8008430:	e000      	b.n	8008434 <prvGetNextExpireTime+0x18>
 8008432:	2200      	movs	r2, #0
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvGetNextExpireTime+0x44>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e001      	b.n	8008450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20001008 	.word	0x20001008

08008464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800846c:	f7ff f9da 	bl	8007824 <xTaskGetTickCount>
 8008470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <prvSampleTimeNow+0x3c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	429a      	cmp	r2, r3
 800847a:	d205      	bcs.n	8008488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800847c:	f000 f936 	bl	80086ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800848e:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <prvSampleTimeNow+0x3c>)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20001018 	.word	0x20001018

080084a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d812      	bhi.n	80084f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e01b      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <prvInsertTimerInActiveList+0x7c>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe f944 	bl	8006776 <vListInsert>
 80084ee:	e012      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d206      	bcs.n	8008506 <prvInsertTimerInActiveList+0x62>
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e007      	b.n	8008516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <prvInsertTimerInActiveList+0x80>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3304      	adds	r3, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7fe f930 	bl	8006776 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008516:	697b      	ldr	r3, [r7, #20]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	2000100c 	.word	0x2000100c
 8008524:	20001008 	.word	0x20001008

08008528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	; 0x38
 800852c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800852e:	e0ca      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	da18      	bge.n	8008568 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008536:	1d3b      	adds	r3, r7, #4
 8008538:	3304      	adds	r3, #4
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	61fb      	str	r3, [r7, #28]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855e:	6850      	ldr	r0, [r2, #4]
 8008560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008562:	6892      	ldr	r2, [r2, #8]
 8008564:	4611      	mov	r1, r2
 8008566:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f2c0 80aa 	blt.w	80086c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe f931 	bl	80067e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008586:	463b      	mov	r3, r7
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff ff6b 	bl	8008464 <prvSampleTimeNow>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b09      	cmp	r3, #9
 8008594:	f200 8097 	bhi.w	80086c6 <prvProcessReceivedCommands+0x19e>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <prvProcessReceivedCommands+0x78>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085c9 	.word	0x080085c9
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085c9 	.word	0x080085c9
 80085ac:	0800863d 	.word	0x0800863d
 80085b0:	08008651 	.word	0x08008651
 80085b4:	0800869b 	.word	0x0800869b
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085c9 	.word	0x080085c9
 80085c0:	0800863d 	.word	0x0800863d
 80085c4:	08008651 	.word	0x08008651
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	18d1      	adds	r1, r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e8:	f7ff ff5c 	bl	80084a4 <prvInsertTimerInActiveList>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d069      	beq.n	80086c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d05e      	beq.n	80086c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	441a      	add	r2, r3
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	2100      	movs	r1, #0
 8008618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800861a:	f7ff fe05 	bl	8008228 <xTimerGenericCommand>
 800861e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14f      	bne.n	80086c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	61bb      	str	r3, [r7, #24]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800864e:	e03a      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	617b      	str	r3, [r7, #20]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	18d1      	adds	r1, r2, r3
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008694:	f7ff ff06 	bl	80084a4 <prvInsertTimerInActiveList>
					break;
 8008698:	e015      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80086a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086aa:	f000 fc01 	bl	8008eb0 <vPortFree>
 80086ae:	e00a      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b6:	f023 0301 	bic.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086c2:	e000      	b.n	80086c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80086c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <prvProcessReceivedCommands+0x1c0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1d39      	adds	r1, r7, #4
 80086cc:	2200      	movs	r2, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fb52 	bl	8006d78 <xQueueReceive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f af2a 	bne.w	8008530 <prvProcessReceivedCommands+0x8>
	}
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3730      	adds	r7, #48	; 0x30
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20001010 	.word	0x20001010

080086ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086f2:	e048      	b.n	8008786 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086f4:	4b2d      	ldr	r3, [pc, #180]	; (80087ac <prvSwitchTimerLists+0xc0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe f86b 	bl	80067e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d02e      	beq.n	8008786 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d90e      	bls.n	8008758 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3304      	adds	r3, #4
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f7fe f810 	bl	8006776 <vListInsert>
 8008756:	e016      	b.n	8008786 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008758:	2300      	movs	r3, #0
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	2100      	movs	r1, #0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fd60 	bl	8008228 <xTimerGenericCommand>
 8008768:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	603b      	str	r3, [r7, #0]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1b1      	bne.n	80086f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <prvSwitchTimerLists+0xc0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <prvSwitchTimerLists+0xc4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a04      	ldr	r2, [pc, #16]	; (80087ac <prvSwitchTimerLists+0xc0>)
 800879c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800879e:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <prvSwitchTimerLists+0xc4>)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	6013      	str	r3, [r2, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20001008 	.word	0x20001008
 80087b0:	2000100c 	.word	0x2000100c

080087b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087ba:	f000 f98b 	bl	8008ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087be:	4b15      	ldr	r3, [pc, #84]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d120      	bne.n	8008808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087c6:	4814      	ldr	r0, [pc, #80]	; (8008818 <prvCheckForValidListAndQueue+0x64>)
 80087c8:	f7fd ff84 	bl	80066d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087cc:	4813      	ldr	r0, [pc, #76]	; (800881c <prvCheckForValidListAndQueue+0x68>)
 80087ce:	f7fd ff81 	bl	80066d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <prvCheckForValidListAndQueue+0x6c>)
 80087d4:	4a10      	ldr	r2, [pc, #64]	; (8008818 <prvCheckForValidListAndQueue+0x64>)
 80087d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087d8:	4b12      	ldr	r3, [pc, #72]	; (8008824 <prvCheckForValidListAndQueue+0x70>)
 80087da:	4a10      	ldr	r2, [pc, #64]	; (800881c <prvCheckForValidListAndQueue+0x68>)
 80087dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087de:	2300      	movs	r3, #0
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4b11      	ldr	r3, [pc, #68]	; (8008828 <prvCheckForValidListAndQueue+0x74>)
 80087e4:	4a11      	ldr	r2, [pc, #68]	; (800882c <prvCheckForValidListAndQueue+0x78>)
 80087e6:	2110      	movs	r1, #16
 80087e8:	200a      	movs	r0, #10
 80087ea:	f7fe f88f 	bl	800690c <xQueueGenericCreateStatic>
 80087ee:	4603      	mov	r3, r0
 80087f0:	4a08      	ldr	r2, [pc, #32]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <prvCheckForValidListAndQueue+0x60>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	490b      	ldr	r1, [pc, #44]	; (8008830 <prvCheckForValidListAndQueue+0x7c>)
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fca8 	bl	8007158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008808:	f000 f994 	bl	8008b34 <vPortExitCritical>
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001010 	.word	0x20001010
 8008818:	20000fe0 	.word	0x20000fe0
 800881c:	20000ff4 	.word	0x20000ff4
 8008820:	20001008 	.word	0x20001008
 8008824:	2000100c 	.word	0x2000100c
 8008828:	200010bc 	.word	0x200010bc
 800882c:	2000101c 	.word	0x2000101c
 8008830:	0800bd08 	.word	0x0800bd08

08008834 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <pvTimerGetTimerID+0x28>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800885c:	f000 f93a 	bl	8008ad4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008866:	f000 f965 	bl	8008b34 <vPortExitCritical>

	return pvReturn;
 800886a:	693b      	ldr	r3, [r7, #16]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3b04      	subs	r3, #4
 8008884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800888c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3b04      	subs	r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088a4:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <pxPortInitialiseStack+0x64>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3b14      	subs	r3, #20
 80088ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3b04      	subs	r3, #4
 80088ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f06f 0202 	mvn.w	r2, #2
 80088c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3b20      	subs	r3, #32
 80088c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	080088dd 	.word	0x080088dd

080088dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088e6:	4b12      	ldr	r3, [pc, #72]	; (8008930 <prvTaskExitError+0x54>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d00a      	beq.n	8008906 <prvTaskExitError+0x2a>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <prvTaskExitError+0x28>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60bb      	str	r3, [r7, #8]
}
 8008918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800891a:	bf00      	nop
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0fc      	beq.n	800891c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	2000000c 	.word	0x2000000c
	...

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	20000ae0 	.word	0x20000ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	; (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008996:	4b46      	ldr	r3, [pc, #280]	; (8008ab0 <xPortStartScheduler+0x120>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a46      	ldr	r2, [pc, #280]	; (8008ab4 <xPortStartScheduler+0x124>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10a      	bne.n	80089b6 <xPortStartScheduler+0x26>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089b6:	4b3e      	ldr	r3, [pc, #248]	; (8008ab0 <xPortStartScheduler+0x120>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a3f      	ldr	r2, [pc, #252]	; (8008ab8 <xPortStartScheduler+0x128>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10a      	bne.n	80089d6 <xPortStartScheduler+0x46>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089d6:	4b39      	ldr	r3, [pc, #228]	; (8008abc <xPortStartScheduler+0x12c>)
 80089d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	4b31      	ldr	r3, [pc, #196]	; (8008ac0 <xPortStartScheduler+0x130>)
 80089fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089fe:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a00:	2207      	movs	r2, #7
 8008a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a04:	e009      	b.n	8008a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a06:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4a2d      	ldr	r2, [pc, #180]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d0ef      	beq.n	8008a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a26:	4b27      	ldr	r3, [pc, #156]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1c3 0307 	rsb	r3, r3, #7
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d00a      	beq.n	8008a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	60bb      	str	r3, [r7, #8]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a48:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a7e:	f000 f8dd 	bl	8008c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <xPortStartScheduler+0x13c>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a88:	f000 f8fc 	bl	8008c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <xPortStartScheduler+0x140>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a0f      	ldr	r2, [pc, #60]	; (8008ad0 <xPortStartScheduler+0x140>)
 8008a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a98:	f7ff ff66 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a9c:	f7fe ff8c 	bl	80079b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008aa0:	f7ff ff1c 	bl	80088dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	e000ed00 	.word	0xe000ed00
 8008ab4:	410fc271 	.word	0x410fc271
 8008ab8:	410fc270 	.word	0x410fc270
 8008abc:	e000e400 	.word	0xe000e400
 8008ac0:	2000110c 	.word	0x2000110c
 8008ac4:	20001110 	.word	0x20001110
 8008ac8:	e000ed20 	.word	0xe000ed20
 8008acc:	2000000c 	.word	0x2000000c
 8008ad0:	e000ef34 	.word	0xe000ef34

08008ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
}
 8008aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <vPortEnterCritical+0x58>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <vPortEnterCritical+0x58>)
 8008af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008af8:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <vPortEnterCritical+0x58>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d10f      	bne.n	8008b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <vPortEnterCritical+0x5c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	603b      	str	r3, [r7, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vPortEnterCritical+0x4a>
	}
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	2000000c 	.word	0x2000000c
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <vPortExitCritical+0x50>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <vPortExitCritical+0x24>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	607b      	str	r3, [r7, #4]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <vPortExitCritical+0x50>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <vPortExitCritical+0x50>)
 8008b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <vPortExitCritical+0x42>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f383 8811 	msr	BASEPRI, r3
}
 8008b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	2000000c 	.word	0x2000000c
	...

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f01e 0f10 	tst.w	lr, #16
 8008ba0:	bf08      	it	eq
 8008ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	6010      	str	r0, [r2, #0]
 8008bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bb4:	f380 8811 	msr	BASEPRI, r0
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f7fe fefa 	bl	80079b8 <vTaskSwitchContext>
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f380 8811 	msr	BASEPRI, r0
 8008bcc:	bc09      	pop	{r0, r3}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	f01e 0f10 	tst.w	lr, #16
 8008bda:	bf08      	it	eq
 8008bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008be0:	f380 8809 	msr	PSP, r0
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	20000ae0 	.word	0x20000ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f7fe fe17 	bl	8007844 <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <xPortSysTickHandler+0x40>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <vPortSetupTimerInterrupt+0x38>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <vPortSetupTimerInterrupt+0x40>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	4a09      	ldr	r2, [pc, #36]	; (8008c80 <vPortSetupTimerInterrupt+0x44>)
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e010 	.word	0xe000e010
 8008c74:	e000e018 	.word	0xe000e018
 8008c78:	20000000 	.word	0x20000000
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	e000e014 	.word	0xe000e014

08008c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c94 <vPortEnableVFP+0x10>
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c8e:	6001      	str	r1, [r0, #0]
 8008c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed88 	.word	0xe000ed88

08008c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c9e:	f3ef 8305 	mrs	r3, IPSR
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d914      	bls.n	8008cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <vPortValidateInterruptPriority+0x70>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <vPortValidateInterruptPriority+0x74>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	7afa      	ldrb	r2, [r7, #11]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d20a      	bcs.n	8008cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <vPortValidateInterruptPriority+0x78>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <vPortValidateInterruptPriority+0x7c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d90a      	bls.n	8008cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	603b      	str	r3, [r7, #0]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <vPortValidateInterruptPriority+0x60>
	}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	e000e3f0 	.word	0xe000e3f0
 8008d0c:	2000110c 	.word	0x2000110c
 8008d10:	e000ed0c 	.word	0xe000ed0c
 8008d14:	20001110 	.word	0x20001110

08008d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08a      	sub	sp, #40	; 0x28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d24:	f7fe fcd2 	bl	80076cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d28:	4b5b      	ldr	r3, [pc, #364]	; (8008e98 <pvPortMalloc+0x180>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d30:	f000 f920 	bl	8008f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d34:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <pvPortMalloc+0x184>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 8093 	bne.w	8008e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01d      	beq.n	8008d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d48:	2208      	movs	r2, #8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d014      	beq.n	8008d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f023 0307 	bic.w	r3, r3, #7
 8008d60:	3308      	adds	r3, #8
 8008d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <pvPortMalloc+0x6c>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	617b      	str	r3, [r7, #20]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d06e      	beq.n	8008e68 <pvPortMalloc+0x150>
 8008d8a:	4b45      	ldr	r3, [pc, #276]	; (8008ea0 <pvPortMalloc+0x188>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d869      	bhi.n	8008e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d94:	4b43      	ldr	r3, [pc, #268]	; (8008ea4 <pvPortMalloc+0x18c>)
 8008d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d98:	4b42      	ldr	r3, [pc, #264]	; (8008ea4 <pvPortMalloc+0x18c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d9e:	e004      	b.n	8008daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d903      	bls.n	8008dbc <pvPortMalloc+0xa4>
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f1      	bne.n	8008da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dbc:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <pvPortMalloc+0x180>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d050      	beq.n	8008e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2208      	movs	r2, #8
 8008dcc:	4413      	add	r3, r2
 8008dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	2308      	movs	r3, #8
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d91f      	bls.n	8008e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <pvPortMalloc+0xf8>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	613b      	str	r3, [r7, #16]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	1ad2      	subs	r2, r2, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e22:	69b8      	ldr	r0, [r7, #24]
 8008e24:	f000 f908 	bl	8009038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e28:	4b1d      	ldr	r3, [pc, #116]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	4a1b      	ldr	r2, [pc, #108]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e36:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <pvPortMalloc+0x190>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d203      	bcs.n	8008e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e42:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <pvPortMalloc+0x190>)
 8008e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <pvPortMalloc+0x184>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e5e:	4b13      	ldr	r3, [pc, #76]	; (8008eac <pvPortMalloc+0x194>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	4a11      	ldr	r2, [pc, #68]	; (8008eac <pvPortMalloc+0x194>)
 8008e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e68:	f7fe fc3e 	bl	80076e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <pvPortMalloc+0x174>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60fb      	str	r3, [r7, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <pvPortMalloc+0x172>
	return pvReturn;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20004d1c 	.word	0x20004d1c
 8008e9c:	20004d30 	.word	0x20004d30
 8008ea0:	20004d20 	.word	0x20004d20
 8008ea4:	20004d14 	.word	0x20004d14
 8008ea8:	20004d24 	.word	0x20004d24
 8008eac:	20004d28 	.word	0x20004d28

08008eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04d      	beq.n	8008f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <vPortFree+0xb8>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <vPortFree+0x44>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	60fb      	str	r3, [r7, #12]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <vPortFree+0x62>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60bb      	str	r3, [r7, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <vPortFree+0xb8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11a      	bne.n	8008f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <vPortFree+0xb8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	401a      	ands	r2, r3
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f38:	f7fe fbc8 	bl	80076cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <vPortFree+0xbc>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4413      	add	r3, r2
 8008f46:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <vPortFree+0xbc>)
 8008f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f4a:	6938      	ldr	r0, [r7, #16]
 8008f4c:	f000 f874 	bl	8009038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <vPortFree+0xc0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a06      	ldr	r2, [pc, #24]	; (8008f70 <vPortFree+0xc0>)
 8008f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f5a:	f7fe fbc5 	bl	80076e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20004d30 	.word	0x20004d30
 8008f6c:	20004d20 	.word	0x20004d20
 8008f70:	20004d2c 	.word	0x20004d2c

08008f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f80:	4b27      	ldr	r3, [pc, #156]	; (8009020 <prvHeapInit+0xac>)
 8008f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00c      	beq.n	8008fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3307      	adds	r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0307 	bic.w	r3, r3, #7
 8008f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	4a1f      	ldr	r2, [pc, #124]	; (8009020 <prvHeapInit+0xac>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fac:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <prvHeapInit+0xb0>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <prvHeapInit+0xb0>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1a9b      	subs	r3, r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0307 	bic.w	r3, r3, #7
 8008fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a15      	ldr	r2, [pc, #84]	; (8009028 <prvHeapInit+0xb4>)
 8008fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <prvHeapInit+0xb4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fde:	4b12      	ldr	r3, [pc, #72]	; (8009028 <prvHeapInit+0xb4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <prvHeapInit+0xb4>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a0a      	ldr	r2, [pc, #40]	; (800902c <prvHeapInit+0xb8>)
 8009002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4a09      	ldr	r2, [pc, #36]	; (8009030 <prvHeapInit+0xbc>)
 800900a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800900c:	4b09      	ldr	r3, [pc, #36]	; (8009034 <prvHeapInit+0xc0>)
 800900e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009012:	601a      	str	r2, [r3, #0]
}
 8009014:	bf00      	nop
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	20001114 	.word	0x20001114
 8009024:	20004d14 	.word	0x20004d14
 8009028:	20004d1c 	.word	0x20004d1c
 800902c:	20004d24 	.word	0x20004d24
 8009030:	20004d20 	.word	0x20004d20
 8009034:	20004d30 	.word	0x20004d30

08009038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009040:	4b28      	ldr	r3, [pc, #160]	; (80090e4 <prvInsertBlockIntoFreeList+0xac>)
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e002      	b.n	800904c <prvInsertBlockIntoFreeList+0x14>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	429a      	cmp	r2, r3
 8009054:	d8f7      	bhi.n	8009046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d108      	bne.n	800907a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	441a      	add	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d118      	bne.n	80090c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d00d      	beq.n	80090b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	441a      	add	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	e008      	b.n	80090c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090b6:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <prvInsertBlockIntoFreeList+0xb0>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e003      	b.n	80090c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d002      	beq.n	80090d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20004d14 	.word	0x20004d14
 80090e8:	20004d1c 	.word	0x20004d1c

080090ec <__errno>:
 80090ec:	4b01      	ldr	r3, [pc, #4]	; (80090f4 <__errno+0x8>)
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000010 	.word	0x20000010

080090f8 <std>:
 80090f8:	2300      	movs	r3, #0
 80090fa:	b510      	push	{r4, lr}
 80090fc:	4604      	mov	r4, r0
 80090fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009106:	6083      	str	r3, [r0, #8]
 8009108:	8181      	strh	r1, [r0, #12]
 800910a:	6643      	str	r3, [r0, #100]	; 0x64
 800910c:	81c2      	strh	r2, [r0, #14]
 800910e:	6183      	str	r3, [r0, #24]
 8009110:	4619      	mov	r1, r3
 8009112:	2208      	movs	r2, #8
 8009114:	305c      	adds	r0, #92	; 0x5c
 8009116:	f000 f91a 	bl	800934e <memset>
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x38>)
 800911c:	6263      	str	r3, [r4, #36]	; 0x24
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x3c>)
 8009120:	62a3      	str	r3, [r4, #40]	; 0x28
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x40>)
 8009124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x44>)
 8009128:	6224      	str	r4, [r4, #32]
 800912a:	6323      	str	r3, [r4, #48]	; 0x30
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	08009e51 	.word	0x08009e51
 8009134:	08009e73 	.word	0x08009e73
 8009138:	08009eab 	.word	0x08009eab
 800913c:	08009ecf 	.word	0x08009ecf

08009140 <_cleanup_r>:
 8009140:	4901      	ldr	r1, [pc, #4]	; (8009148 <_cleanup_r+0x8>)
 8009142:	f000 b8af 	b.w	80092a4 <_fwalk_reent>
 8009146:	bf00      	nop
 8009148:	0800ad21 	.word	0x0800ad21

0800914c <__sfmoreglue>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	2268      	movs	r2, #104	; 0x68
 8009150:	1e4d      	subs	r5, r1, #1
 8009152:	4355      	muls	r5, r2
 8009154:	460e      	mov	r6, r1
 8009156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800915a:	f000 f921 	bl	80093a0 <_malloc_r>
 800915e:	4604      	mov	r4, r0
 8009160:	b140      	cbz	r0, 8009174 <__sfmoreglue+0x28>
 8009162:	2100      	movs	r1, #0
 8009164:	e9c0 1600 	strd	r1, r6, [r0]
 8009168:	300c      	adds	r0, #12
 800916a:	60a0      	str	r0, [r4, #8]
 800916c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009170:	f000 f8ed 	bl	800934e <memset>
 8009174:	4620      	mov	r0, r4
 8009176:	bd70      	pop	{r4, r5, r6, pc}

08009178 <__sfp_lock_acquire>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sfp_lock_acquire+0x8>)
 800917a:	f000 b8d8 	b.w	800932e <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	20004d35 	.word	0x20004d35

08009184 <__sfp_lock_release>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sfp_lock_release+0x8>)
 8009186:	f000 b8d3 	b.w	8009330 <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	20004d35 	.word	0x20004d35

08009190 <__sinit_lock_acquire>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sinit_lock_acquire+0x8>)
 8009192:	f000 b8cc 	b.w	800932e <__retarget_lock_acquire_recursive>
 8009196:	bf00      	nop
 8009198:	20004d36 	.word	0x20004d36

0800919c <__sinit_lock_release>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__sinit_lock_release+0x8>)
 800919e:	f000 b8c7 	b.w	8009330 <__retarget_lock_release_recursive>
 80091a2:	bf00      	nop
 80091a4:	20004d36 	.word	0x20004d36

080091a8 <__sinit>:
 80091a8:	b510      	push	{r4, lr}
 80091aa:	4604      	mov	r4, r0
 80091ac:	f7ff fff0 	bl	8009190 <__sinit_lock_acquire>
 80091b0:	69a3      	ldr	r3, [r4, #24]
 80091b2:	b11b      	cbz	r3, 80091bc <__sinit+0x14>
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	f7ff bff0 	b.w	800919c <__sinit_lock_release>
 80091bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c0:	6523      	str	r3, [r4, #80]	; 0x50
 80091c2:	4b13      	ldr	r3, [pc, #76]	; (8009210 <__sinit+0x68>)
 80091c4:	4a13      	ldr	r2, [pc, #76]	; (8009214 <__sinit+0x6c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	bf04      	itt	eq
 80091ce:	2301      	moveq	r3, #1
 80091d0:	61a3      	streq	r3, [r4, #24]
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 f820 	bl	8009218 <__sfp>
 80091d8:	6060      	str	r0, [r4, #4]
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f81c 	bl	8009218 <__sfp>
 80091e0:	60a0      	str	r0, [r4, #8]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f818 	bl	8009218 <__sfp>
 80091e8:	2200      	movs	r2, #0
 80091ea:	60e0      	str	r0, [r4, #12]
 80091ec:	2104      	movs	r1, #4
 80091ee:	6860      	ldr	r0, [r4, #4]
 80091f0:	f7ff ff82 	bl	80090f8 <std>
 80091f4:	68a0      	ldr	r0, [r4, #8]
 80091f6:	2201      	movs	r2, #1
 80091f8:	2109      	movs	r1, #9
 80091fa:	f7ff ff7d 	bl	80090f8 <std>
 80091fe:	68e0      	ldr	r0, [r4, #12]
 8009200:	2202      	movs	r2, #2
 8009202:	2112      	movs	r1, #18
 8009204:	f7ff ff78 	bl	80090f8 <std>
 8009208:	2301      	movs	r3, #1
 800920a:	61a3      	str	r3, [r4, #24]
 800920c:	e7d2      	b.n	80091b4 <__sinit+0xc>
 800920e:	bf00      	nop
 8009210:	0800be10 	.word	0x0800be10
 8009214:	08009141 	.word	0x08009141

08009218 <__sfp>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	4607      	mov	r7, r0
 800921c:	f7ff ffac 	bl	8009178 <__sfp_lock_acquire>
 8009220:	4b1e      	ldr	r3, [pc, #120]	; (800929c <__sfp+0x84>)
 8009222:	681e      	ldr	r6, [r3, #0]
 8009224:	69b3      	ldr	r3, [r6, #24]
 8009226:	b913      	cbnz	r3, 800922e <__sfp+0x16>
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff ffbd 	bl	80091a8 <__sinit>
 800922e:	3648      	adds	r6, #72	; 0x48
 8009230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009234:	3b01      	subs	r3, #1
 8009236:	d503      	bpl.n	8009240 <__sfp+0x28>
 8009238:	6833      	ldr	r3, [r6, #0]
 800923a:	b30b      	cbz	r3, 8009280 <__sfp+0x68>
 800923c:	6836      	ldr	r6, [r6, #0]
 800923e:	e7f7      	b.n	8009230 <__sfp+0x18>
 8009240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009244:	b9d5      	cbnz	r5, 800927c <__sfp+0x64>
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <__sfp+0x88>)
 8009248:	60e3      	str	r3, [r4, #12]
 800924a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800924e:	6665      	str	r5, [r4, #100]	; 0x64
 8009250:	f000 f86c 	bl	800932c <__retarget_lock_init_recursive>
 8009254:	f7ff ff96 	bl	8009184 <__sfp_lock_release>
 8009258:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800925c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009260:	6025      	str	r5, [r4, #0]
 8009262:	61a5      	str	r5, [r4, #24]
 8009264:	2208      	movs	r2, #8
 8009266:	4629      	mov	r1, r5
 8009268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800926c:	f000 f86f 	bl	800934e <memset>
 8009270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009278:	4620      	mov	r0, r4
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	3468      	adds	r4, #104	; 0x68
 800927e:	e7d9      	b.n	8009234 <__sfp+0x1c>
 8009280:	2104      	movs	r1, #4
 8009282:	4638      	mov	r0, r7
 8009284:	f7ff ff62 	bl	800914c <__sfmoreglue>
 8009288:	4604      	mov	r4, r0
 800928a:	6030      	str	r0, [r6, #0]
 800928c:	2800      	cmp	r0, #0
 800928e:	d1d5      	bne.n	800923c <__sfp+0x24>
 8009290:	f7ff ff78 	bl	8009184 <__sfp_lock_release>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	e7ee      	b.n	8009278 <__sfp+0x60>
 800929a:	bf00      	nop
 800929c:	0800be10 	.word	0x0800be10
 80092a0:	ffff0001 	.word	0xffff0001

080092a4 <_fwalk_reent>:
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4606      	mov	r6, r0
 80092aa:	4688      	mov	r8, r1
 80092ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b0:	2700      	movs	r7, #0
 80092b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092b6:	f1b9 0901 	subs.w	r9, r9, #1
 80092ba:	d505      	bpl.n	80092c8 <_fwalk_reent+0x24>
 80092bc:	6824      	ldr	r4, [r4, #0]
 80092be:	2c00      	cmp	r4, #0
 80092c0:	d1f7      	bne.n	80092b2 <_fwalk_reent+0xe>
 80092c2:	4638      	mov	r0, r7
 80092c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c8:	89ab      	ldrh	r3, [r5, #12]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d907      	bls.n	80092de <_fwalk_reent+0x3a>
 80092ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d2:	3301      	adds	r3, #1
 80092d4:	d003      	beq.n	80092de <_fwalk_reent+0x3a>
 80092d6:	4629      	mov	r1, r5
 80092d8:	4630      	mov	r0, r6
 80092da:	47c0      	blx	r8
 80092dc:	4307      	orrs	r7, r0
 80092de:	3568      	adds	r5, #104	; 0x68
 80092e0:	e7e9      	b.n	80092b6 <_fwalk_reent+0x12>
	...

080092e4 <__libc_init_array>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	4d0d      	ldr	r5, [pc, #52]	; (800931c <__libc_init_array+0x38>)
 80092e8:	4c0d      	ldr	r4, [pc, #52]	; (8009320 <__libc_init_array+0x3c>)
 80092ea:	1b64      	subs	r4, r4, r5
 80092ec:	10a4      	asrs	r4, r4, #2
 80092ee:	2600      	movs	r6, #0
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	d109      	bne.n	8009308 <__libc_init_array+0x24>
 80092f4:	4d0b      	ldr	r5, [pc, #44]	; (8009324 <__libc_init_array+0x40>)
 80092f6:	4c0c      	ldr	r4, [pc, #48]	; (8009328 <__libc_init_array+0x44>)
 80092f8:	f002 fcac 	bl	800bc54 <_init>
 80092fc:	1b64      	subs	r4, r4, r5
 80092fe:	10a4      	asrs	r4, r4, #2
 8009300:	2600      	movs	r6, #0
 8009302:	42a6      	cmp	r6, r4
 8009304:	d105      	bne.n	8009312 <__libc_init_array+0x2e>
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	f855 3b04 	ldr.w	r3, [r5], #4
 800930c:	4798      	blx	r3
 800930e:	3601      	adds	r6, #1
 8009310:	e7ee      	b.n	80092f0 <__libc_init_array+0xc>
 8009312:	f855 3b04 	ldr.w	r3, [r5], #4
 8009316:	4798      	blx	r3
 8009318:	3601      	adds	r6, #1
 800931a:	e7f2      	b.n	8009302 <__libc_init_array+0x1e>
 800931c:	0800c194 	.word	0x0800c194
 8009320:	0800c194 	.word	0x0800c194
 8009324:	0800c194 	.word	0x0800c194
 8009328:	0800c198 	.word	0x0800c198

0800932c <__retarget_lock_init_recursive>:
 800932c:	4770      	bx	lr

0800932e <__retarget_lock_acquire_recursive>:
 800932e:	4770      	bx	lr

08009330 <__retarget_lock_release_recursive>:
 8009330:	4770      	bx	lr

08009332 <memcpy>:
 8009332:	440a      	add	r2, r1
 8009334:	4291      	cmp	r1, r2
 8009336:	f100 33ff 	add.w	r3, r0, #4294967295
 800933a:	d100      	bne.n	800933e <memcpy+0xc>
 800933c:	4770      	bx	lr
 800933e:	b510      	push	{r4, lr}
 8009340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009348:	4291      	cmp	r1, r2
 800934a:	d1f9      	bne.n	8009340 <memcpy+0xe>
 800934c:	bd10      	pop	{r4, pc}

0800934e <memset>:
 800934e:	4402      	add	r2, r0
 8009350:	4603      	mov	r3, r0
 8009352:	4293      	cmp	r3, r2
 8009354:	d100      	bne.n	8009358 <memset+0xa>
 8009356:	4770      	bx	lr
 8009358:	f803 1b01 	strb.w	r1, [r3], #1
 800935c:	e7f9      	b.n	8009352 <memset+0x4>
	...

08009360 <sbrk_aligned>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4e0e      	ldr	r6, [pc, #56]	; (800939c <sbrk_aligned+0x3c>)
 8009364:	460c      	mov	r4, r1
 8009366:	6831      	ldr	r1, [r6, #0]
 8009368:	4605      	mov	r5, r0
 800936a:	b911      	cbnz	r1, 8009372 <sbrk_aligned+0x12>
 800936c:	f000 fd60 	bl	8009e30 <_sbrk_r>
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	4628      	mov	r0, r5
 8009376:	f000 fd5b 	bl	8009e30 <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d00a      	beq.n	8009394 <sbrk_aligned+0x34>
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d007      	beq.n	8009398 <sbrk_aligned+0x38>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fd50 	bl	8009e30 <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d101      	bne.n	8009398 <sbrk_aligned+0x38>
 8009394:	f04f 34ff 	mov.w	r4, #4294967295
 8009398:	4620      	mov	r0, r4
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	20004d3c 	.word	0x20004d3c

080093a0 <_malloc_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	1ccd      	adds	r5, r1, #3
 80093a6:	f025 0503 	bic.w	r5, r5, #3
 80093aa:	3508      	adds	r5, #8
 80093ac:	2d0c      	cmp	r5, #12
 80093ae:	bf38      	it	cc
 80093b0:	250c      	movcc	r5, #12
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	4607      	mov	r7, r0
 80093b6:	db01      	blt.n	80093bc <_malloc_r+0x1c>
 80093b8:	42a9      	cmp	r1, r5
 80093ba:	d905      	bls.n	80093c8 <_malloc_r+0x28>
 80093bc:	230c      	movs	r3, #12
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	2600      	movs	r6, #0
 80093c2:	4630      	mov	r0, r6
 80093c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c8:	4e2e      	ldr	r6, [pc, #184]	; (8009484 <_malloc_r+0xe4>)
 80093ca:	f001 fd03 	bl	800add4 <__malloc_lock>
 80093ce:	6833      	ldr	r3, [r6, #0]
 80093d0:	461c      	mov	r4, r3
 80093d2:	bb34      	cbnz	r4, 8009422 <_malloc_r+0x82>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7ff ffc2 	bl	8009360 <sbrk_aligned>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	4604      	mov	r4, r0
 80093e0:	d14d      	bne.n	800947e <_malloc_r+0xde>
 80093e2:	6834      	ldr	r4, [r6, #0]
 80093e4:	4626      	mov	r6, r4
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d140      	bne.n	800946c <_malloc_r+0xcc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	4631      	mov	r1, r6
 80093ee:	4638      	mov	r0, r7
 80093f0:	eb04 0803 	add.w	r8, r4, r3
 80093f4:	f000 fd1c 	bl	8009e30 <_sbrk_r>
 80093f8:	4580      	cmp	r8, r0
 80093fa:	d13a      	bne.n	8009472 <_malloc_r+0xd2>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	3503      	adds	r5, #3
 8009400:	1a6d      	subs	r5, r5, r1
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa5 	bl	8009360 <sbrk_aligned>
 8009416:	3001      	adds	r0, #1
 8009418:	d02b      	beq.n	8009472 <_malloc_r+0xd2>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	442b      	add	r3, r5
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	e00e      	b.n	8009440 <_malloc_r+0xa0>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	1b52      	subs	r2, r2, r5
 8009426:	d41e      	bmi.n	8009466 <_malloc_r+0xc6>
 8009428:	2a0b      	cmp	r2, #11
 800942a:	d916      	bls.n	800945a <_malloc_r+0xba>
 800942c:	1961      	adds	r1, r4, r5
 800942e:	42a3      	cmp	r3, r4
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	bf18      	it	ne
 8009434:	6059      	strne	r1, [r3, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	bf08      	it	eq
 800943a:	6031      	streq	r1, [r6, #0]
 800943c:	5162      	str	r2, [r4, r5]
 800943e:	604b      	str	r3, [r1, #4]
 8009440:	4638      	mov	r0, r7
 8009442:	f104 060b 	add.w	r6, r4, #11
 8009446:	f001 fccb 	bl	800ade0 <__malloc_unlock>
 800944a:	f026 0607 	bic.w	r6, r6, #7
 800944e:	1d23      	adds	r3, r4, #4
 8009450:	1af2      	subs	r2, r6, r3
 8009452:	d0b6      	beq.n	80093c2 <_malloc_r+0x22>
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	e7b3      	b.n	80093c2 <_malloc_r+0x22>
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	42a3      	cmp	r3, r4
 800945e:	bf0c      	ite	eq
 8009460:	6032      	streq	r2, [r6, #0]
 8009462:	605a      	strne	r2, [r3, #4]
 8009464:	e7ec      	b.n	8009440 <_malloc_r+0xa0>
 8009466:	4623      	mov	r3, r4
 8009468:	6864      	ldr	r4, [r4, #4]
 800946a:	e7b2      	b.n	80093d2 <_malloc_r+0x32>
 800946c:	4634      	mov	r4, r6
 800946e:	6876      	ldr	r6, [r6, #4]
 8009470:	e7b9      	b.n	80093e6 <_malloc_r+0x46>
 8009472:	230c      	movs	r3, #12
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4638      	mov	r0, r7
 8009478:	f001 fcb2 	bl	800ade0 <__malloc_unlock>
 800947c:	e7a1      	b.n	80093c2 <_malloc_r+0x22>
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	e7de      	b.n	8009440 <_malloc_r+0xa0>
 8009482:	bf00      	nop
 8009484:	20004d38 	.word	0x20004d38

08009488 <__cvt>:
 8009488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	ec55 4b10 	vmov	r4, r5, d0
 8009490:	2d00      	cmp	r5, #0
 8009492:	460e      	mov	r6, r1
 8009494:	4619      	mov	r1, r3
 8009496:	462b      	mov	r3, r5
 8009498:	bfbb      	ittet	lt
 800949a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800949e:	461d      	movlt	r5, r3
 80094a0:	2300      	movge	r3, #0
 80094a2:	232d      	movlt	r3, #45	; 0x2d
 80094a4:	700b      	strb	r3, [r1, #0]
 80094a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094ac:	4691      	mov	r9, r2
 80094ae:	f023 0820 	bic.w	r8, r3, #32
 80094b2:	bfbc      	itt	lt
 80094b4:	4622      	movlt	r2, r4
 80094b6:	4614      	movlt	r4, r2
 80094b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094bc:	d005      	beq.n	80094ca <__cvt+0x42>
 80094be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094c2:	d100      	bne.n	80094c6 <__cvt+0x3e>
 80094c4:	3601      	adds	r6, #1
 80094c6:	2102      	movs	r1, #2
 80094c8:	e000      	b.n	80094cc <__cvt+0x44>
 80094ca:	2103      	movs	r1, #3
 80094cc:	ab03      	add	r3, sp, #12
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	ab02      	add	r3, sp, #8
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	ec45 4b10 	vmov	d0, r4, r5
 80094d8:	4653      	mov	r3, sl
 80094da:	4632      	mov	r2, r6
 80094dc:	f000 fdac 	bl	800a038 <_dtoa_r>
 80094e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094e4:	4607      	mov	r7, r0
 80094e6:	d102      	bne.n	80094ee <__cvt+0x66>
 80094e8:	f019 0f01 	tst.w	r9, #1
 80094ec:	d022      	beq.n	8009534 <__cvt+0xac>
 80094ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094f2:	eb07 0906 	add.w	r9, r7, r6
 80094f6:	d110      	bne.n	800951a <__cvt+0x92>
 80094f8:	783b      	ldrb	r3, [r7, #0]
 80094fa:	2b30      	cmp	r3, #48	; 0x30
 80094fc:	d10a      	bne.n	8009514 <__cvt+0x8c>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f7 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800950a:	b918      	cbnz	r0, 8009514 <__cvt+0x8c>
 800950c:	f1c6 0601 	rsb	r6, r6, #1
 8009510:	f8ca 6000 	str.w	r6, [sl]
 8009514:	f8da 3000 	ldr.w	r3, [sl]
 8009518:	4499      	add	r9, r3
 800951a:	2200      	movs	r2, #0
 800951c:	2300      	movs	r3, #0
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009526:	b108      	cbz	r0, 800952c <__cvt+0xa4>
 8009528:	f8cd 900c 	str.w	r9, [sp, #12]
 800952c:	2230      	movs	r2, #48	; 0x30
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	454b      	cmp	r3, r9
 8009532:	d307      	bcc.n	8009544 <__cvt+0xbc>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009538:	1bdb      	subs	r3, r3, r7
 800953a:	4638      	mov	r0, r7
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	b004      	add	sp, #16
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	1c59      	adds	r1, r3, #1
 8009546:	9103      	str	r1, [sp, #12]
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e7f0      	b.n	800952e <__cvt+0xa6>

0800954c <__exponent>:
 800954c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954e:	4603      	mov	r3, r0
 8009550:	2900      	cmp	r1, #0
 8009552:	bfb8      	it	lt
 8009554:	4249      	neglt	r1, r1
 8009556:	f803 2b02 	strb.w	r2, [r3], #2
 800955a:	bfb4      	ite	lt
 800955c:	222d      	movlt	r2, #45	; 0x2d
 800955e:	222b      	movge	r2, #43	; 0x2b
 8009560:	2909      	cmp	r1, #9
 8009562:	7042      	strb	r2, [r0, #1]
 8009564:	dd2a      	ble.n	80095bc <__exponent+0x70>
 8009566:	f10d 0407 	add.w	r4, sp, #7
 800956a:	46a4      	mov	ip, r4
 800956c:	270a      	movs	r7, #10
 800956e:	46a6      	mov	lr, r4
 8009570:	460a      	mov	r2, r1
 8009572:	fb91 f6f7 	sdiv	r6, r1, r7
 8009576:	fb07 1516 	mls	r5, r7, r6, r1
 800957a:	3530      	adds	r5, #48	; 0x30
 800957c:	2a63      	cmp	r2, #99	; 0x63
 800957e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009586:	4631      	mov	r1, r6
 8009588:	dcf1      	bgt.n	800956e <__exponent+0x22>
 800958a:	3130      	adds	r1, #48	; 0x30
 800958c:	f1ae 0502 	sub.w	r5, lr, #2
 8009590:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009594:	1c44      	adds	r4, r0, #1
 8009596:	4629      	mov	r1, r5
 8009598:	4561      	cmp	r1, ip
 800959a:	d30a      	bcc.n	80095b2 <__exponent+0x66>
 800959c:	f10d 0209 	add.w	r2, sp, #9
 80095a0:	eba2 020e 	sub.w	r2, r2, lr
 80095a4:	4565      	cmp	r5, ip
 80095a6:	bf88      	it	hi
 80095a8:	2200      	movhi	r2, #0
 80095aa:	4413      	add	r3, r2
 80095ac:	1a18      	subs	r0, r3, r0
 80095ae:	b003      	add	sp, #12
 80095b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095ba:	e7ed      	b.n	8009598 <__exponent+0x4c>
 80095bc:	2330      	movs	r3, #48	; 0x30
 80095be:	3130      	adds	r1, #48	; 0x30
 80095c0:	7083      	strb	r3, [r0, #2]
 80095c2:	70c1      	strb	r1, [r0, #3]
 80095c4:	1d03      	adds	r3, r0, #4
 80095c6:	e7f1      	b.n	80095ac <__exponent+0x60>

080095c8 <_printf_float>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	ed2d 8b02 	vpush	{d8}
 80095d0:	b08d      	sub	sp, #52	; 0x34
 80095d2:	460c      	mov	r4, r1
 80095d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095d8:	4616      	mov	r6, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	4605      	mov	r5, r0
 80095de:	f001 fbdb 	bl	800ad98 <_localeconv_r>
 80095e2:	f8d0 a000 	ldr.w	sl, [r0]
 80095e6:	4650      	mov	r0, sl
 80095e8:	f7f6 fdfa 	bl	80001e0 <strlen>
 80095ec:	2300      	movs	r3, #0
 80095ee:	930a      	str	r3, [sp, #40]	; 0x28
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	9305      	str	r3, [sp, #20]
 80095f4:	f8d8 3000 	ldr.w	r3, [r8]
 80095f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095fc:	3307      	adds	r3, #7
 80095fe:	f023 0307 	bic.w	r3, r3, #7
 8009602:	f103 0208 	add.w	r2, r3, #8
 8009606:	f8c8 2000 	str.w	r2, [r8]
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009612:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800961a:	9307      	str	r3, [sp, #28]
 800961c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009620:	ee08 0a10 	vmov	s16, r0
 8009624:	4b9f      	ldr	r3, [pc, #636]	; (80098a4 <_printf_float+0x2dc>)
 8009626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	f7f7 fa85 	bl	8000b3c <__aeabi_dcmpun>
 8009632:	bb88      	cbnz	r0, 8009698 <_printf_float+0xd0>
 8009634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009638:	4b9a      	ldr	r3, [pc, #616]	; (80098a4 <_printf_float+0x2dc>)
 800963a:	f04f 32ff 	mov.w	r2, #4294967295
 800963e:	f7f7 fa5f 	bl	8000b00 <__aeabi_dcmple>
 8009642:	bb48      	cbnz	r0, 8009698 <_printf_float+0xd0>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4640      	mov	r0, r8
 800964a:	4649      	mov	r1, r9
 800964c:	f7f7 fa4e 	bl	8000aec <__aeabi_dcmplt>
 8009650:	b110      	cbz	r0, 8009658 <_printf_float+0x90>
 8009652:	232d      	movs	r3, #45	; 0x2d
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009658:	4b93      	ldr	r3, [pc, #588]	; (80098a8 <_printf_float+0x2e0>)
 800965a:	4894      	ldr	r0, [pc, #592]	; (80098ac <_printf_float+0x2e4>)
 800965c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009660:	bf94      	ite	ls
 8009662:	4698      	movls	r8, r3
 8009664:	4680      	movhi	r8, r0
 8009666:	2303      	movs	r3, #3
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	9b05      	ldr	r3, [sp, #20]
 800966c:	f023 0204 	bic.w	r2, r3, #4
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	f04f 0900 	mov.w	r9, #0
 8009676:	9700      	str	r7, [sp, #0]
 8009678:	4633      	mov	r3, r6
 800967a:	aa0b      	add	r2, sp, #44	; 0x2c
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f9d8 	bl	8009a34 <_printf_common>
 8009684:	3001      	adds	r0, #1
 8009686:	f040 8090 	bne.w	80097aa <_printf_float+0x1e2>
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	b00d      	add	sp, #52	; 0x34
 8009690:	ecbd 8b02 	vpop	{d8}
 8009694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009698:	4642      	mov	r2, r8
 800969a:	464b      	mov	r3, r9
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7f7 fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80096a4:	b140      	cbz	r0, 80096b8 <_printf_float+0xf0>
 80096a6:	464b      	mov	r3, r9
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfbc      	itt	lt
 80096ac:	232d      	movlt	r3, #45	; 0x2d
 80096ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096b2:	487f      	ldr	r0, [pc, #508]	; (80098b0 <_printf_float+0x2e8>)
 80096b4:	4b7f      	ldr	r3, [pc, #508]	; (80098b4 <_printf_float+0x2ec>)
 80096b6:	e7d1      	b.n	800965c <_printf_float+0x94>
 80096b8:	6863      	ldr	r3, [r4, #4]
 80096ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096be:	9206      	str	r2, [sp, #24]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	d13f      	bne.n	8009744 <_printf_float+0x17c>
 80096c4:	2306      	movs	r3, #6
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	6861      	ldr	r1, [r4, #4]
 80096cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096d0:	2300      	movs	r3, #0
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	ab0a      	add	r3, sp, #40	; 0x28
 80096d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096da:	ab09      	add	r3, sp, #36	; 0x24
 80096dc:	ec49 8b10 	vmov	d0, r8, r9
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff fecd 	bl	8009488 <__cvt>
 80096ee:	9b06      	ldr	r3, [sp, #24]
 80096f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f2:	2b47      	cmp	r3, #71	; 0x47
 80096f4:	4680      	mov	r8, r0
 80096f6:	d108      	bne.n	800970a <_printf_float+0x142>
 80096f8:	1cc8      	adds	r0, r1, #3
 80096fa:	db02      	blt.n	8009702 <_printf_float+0x13a>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	4299      	cmp	r1, r3
 8009700:	dd41      	ble.n	8009786 <_printf_float+0x1be>
 8009702:	f1ab 0b02 	sub.w	fp, fp, #2
 8009706:	fa5f fb8b 	uxtb.w	fp, fp
 800970a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800970e:	d820      	bhi.n	8009752 <_printf_float+0x18a>
 8009710:	3901      	subs	r1, #1
 8009712:	465a      	mov	r2, fp
 8009714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009718:	9109      	str	r1, [sp, #36]	; 0x24
 800971a:	f7ff ff17 	bl	800954c <__exponent>
 800971e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009720:	1813      	adds	r3, r2, r0
 8009722:	2a01      	cmp	r2, #1
 8009724:	4681      	mov	r9, r0
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	dc02      	bgt.n	8009730 <_printf_float+0x168>
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	07d2      	lsls	r2, r2, #31
 800972e:	d501      	bpl.n	8009734 <_printf_float+0x16c>
 8009730:	3301      	adds	r3, #1
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009738:	2b00      	cmp	r3, #0
 800973a:	d09c      	beq.n	8009676 <_printf_float+0xae>
 800973c:	232d      	movs	r3, #45	; 0x2d
 800973e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009742:	e798      	b.n	8009676 <_printf_float+0xae>
 8009744:	9a06      	ldr	r2, [sp, #24]
 8009746:	2a47      	cmp	r2, #71	; 0x47
 8009748:	d1be      	bne.n	80096c8 <_printf_float+0x100>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1bc      	bne.n	80096c8 <_printf_float+0x100>
 800974e:	2301      	movs	r3, #1
 8009750:	e7b9      	b.n	80096c6 <_printf_float+0xfe>
 8009752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009756:	d118      	bne.n	800978a <_printf_float+0x1c2>
 8009758:	2900      	cmp	r1, #0
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	dd0b      	ble.n	8009776 <_printf_float+0x1ae>
 800975e:	6121      	str	r1, [r4, #16]
 8009760:	b913      	cbnz	r3, 8009768 <_printf_float+0x1a0>
 8009762:	6822      	ldr	r2, [r4, #0]
 8009764:	07d0      	lsls	r0, r2, #31
 8009766:	d502      	bpl.n	800976e <_printf_float+0x1a6>
 8009768:	3301      	adds	r3, #1
 800976a:	440b      	add	r3, r1
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009770:	f04f 0900 	mov.w	r9, #0
 8009774:	e7de      	b.n	8009734 <_printf_float+0x16c>
 8009776:	b913      	cbnz	r3, 800977e <_printf_float+0x1b6>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	07d2      	lsls	r2, r2, #31
 800977c:	d501      	bpl.n	8009782 <_printf_float+0x1ba>
 800977e:	3302      	adds	r3, #2
 8009780:	e7f4      	b.n	800976c <_printf_float+0x1a4>
 8009782:	2301      	movs	r3, #1
 8009784:	e7f2      	b.n	800976c <_printf_float+0x1a4>
 8009786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978c:	4299      	cmp	r1, r3
 800978e:	db05      	blt.n	800979c <_printf_float+0x1d4>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	6121      	str	r1, [r4, #16]
 8009794:	07d8      	lsls	r0, r3, #31
 8009796:	d5ea      	bpl.n	800976e <_printf_float+0x1a6>
 8009798:	1c4b      	adds	r3, r1, #1
 800979a:	e7e7      	b.n	800976c <_printf_float+0x1a4>
 800979c:	2900      	cmp	r1, #0
 800979e:	bfd4      	ite	le
 80097a0:	f1c1 0202 	rsble	r2, r1, #2
 80097a4:	2201      	movgt	r2, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	e7e0      	b.n	800976c <_printf_float+0x1a4>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	055a      	lsls	r2, r3, #21
 80097ae:	d407      	bmi.n	80097c0 <_printf_float+0x1f8>
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	4642      	mov	r2, r8
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	d12c      	bne.n	8009818 <_printf_float+0x250>
 80097be:	e764      	b.n	800968a <_printf_float+0xc2>
 80097c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097c4:	f240 80e0 	bls.w	8009988 <_printf_float+0x3c0>
 80097c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	f7f7 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d034      	beq.n	8009842 <_printf_float+0x27a>
 80097d8:	4a37      	ldr	r2, [pc, #220]	; (80098b8 <_printf_float+0x2f0>)
 80097da:	2301      	movs	r3, #1
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	f43f af51 	beq.w	800968a <_printf_float+0xc2>
 80097e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ec:	429a      	cmp	r2, r3
 80097ee:	db02      	blt.n	80097f6 <_printf_float+0x22e>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	07d8      	lsls	r0, r3, #31
 80097f4:	d510      	bpl.n	8009818 <_printf_float+0x250>
 80097f6:	ee18 3a10 	vmov	r3, s16
 80097fa:	4652      	mov	r2, sl
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f af41 	beq.w	800968a <_printf_float+0xc2>
 8009808:	f04f 0800 	mov.w	r8, #0
 800980c:	f104 091a 	add.w	r9, r4, #26
 8009810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	4543      	cmp	r3, r8
 8009816:	dc09      	bgt.n	800982c <_printf_float+0x264>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	079b      	lsls	r3, r3, #30
 800981c:	f100 8105 	bmi.w	8009a2a <_printf_float+0x462>
 8009820:	68e0      	ldr	r0, [r4, #12]
 8009822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009824:	4298      	cmp	r0, r3
 8009826:	bfb8      	it	lt
 8009828:	4618      	movlt	r0, r3
 800982a:	e730      	b.n	800968e <_printf_float+0xc6>
 800982c:	2301      	movs	r3, #1
 800982e:	464a      	mov	r2, r9
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f af27 	beq.w	800968a <_printf_float+0xc2>
 800983c:	f108 0801 	add.w	r8, r8, #1
 8009840:	e7e6      	b.n	8009810 <_printf_float+0x248>
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	dc39      	bgt.n	80098bc <_printf_float+0x2f4>
 8009848:	4a1b      	ldr	r2, [pc, #108]	; (80098b8 <_printf_float+0x2f0>)
 800984a:	2301      	movs	r3, #1
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	f43f af19 	beq.w	800968a <_printf_float+0xc2>
 8009858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800985c:	4313      	orrs	r3, r2
 800985e:	d102      	bne.n	8009866 <_printf_float+0x29e>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	07d9      	lsls	r1, r3, #31
 8009864:	d5d8      	bpl.n	8009818 <_printf_float+0x250>
 8009866:	ee18 3a10 	vmov	r3, s16
 800986a:	4652      	mov	r2, sl
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af09 	beq.w	800968a <_printf_float+0xc2>
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	f104 0a1a 	add.w	sl, r4, #26
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	425b      	negs	r3, r3
 8009884:	454b      	cmp	r3, r9
 8009886:	dc01      	bgt.n	800988c <_printf_float+0x2c4>
 8009888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988a:	e792      	b.n	80097b2 <_printf_float+0x1ea>
 800988c:	2301      	movs	r3, #1
 800988e:	4652      	mov	r2, sl
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f aef7 	beq.w	800968a <_printf_float+0xc2>
 800989c:	f109 0901 	add.w	r9, r9, #1
 80098a0:	e7ee      	b.n	8009880 <_printf_float+0x2b8>
 80098a2:	bf00      	nop
 80098a4:	7fefffff 	.word	0x7fefffff
 80098a8:	0800be14 	.word	0x0800be14
 80098ac:	0800be18 	.word	0x0800be18
 80098b0:	0800be20 	.word	0x0800be20
 80098b4:	0800be1c 	.word	0x0800be1c
 80098b8:	0800be24 	.word	0x0800be24
 80098bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bfa8      	it	ge
 80098c4:	461a      	movge	r2, r3
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	4691      	mov	r9, r2
 80098ca:	dc37      	bgt.n	800993c <_printf_float+0x374>
 80098cc:	f04f 0b00 	mov.w	fp, #0
 80098d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098d4:	f104 021a 	add.w	r2, r4, #26
 80098d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098da:	9305      	str	r3, [sp, #20]
 80098dc:	eba3 0309 	sub.w	r3, r3, r9
 80098e0:	455b      	cmp	r3, fp
 80098e2:	dc33      	bgt.n	800994c <_printf_float+0x384>
 80098e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098e8:	429a      	cmp	r2, r3
 80098ea:	db3b      	blt.n	8009964 <_printf_float+0x39c>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	07da      	lsls	r2, r3, #31
 80098f0:	d438      	bmi.n	8009964 <_printf_float+0x39c>
 80098f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f4:	9a05      	ldr	r2, [sp, #20]
 80098f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098f8:	1a9a      	subs	r2, r3, r2
 80098fa:	eba3 0901 	sub.w	r9, r3, r1
 80098fe:	4591      	cmp	r9, r2
 8009900:	bfa8      	it	ge
 8009902:	4691      	movge	r9, r2
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	dc35      	bgt.n	8009976 <_printf_float+0x3ae>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009912:	f104 0a1a 	add.w	sl, r4, #26
 8009916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	eba3 0309 	sub.w	r3, r3, r9
 8009920:	4543      	cmp	r3, r8
 8009922:	f77f af79 	ble.w	8009818 <_printf_float+0x250>
 8009926:	2301      	movs	r3, #1
 8009928:	4652      	mov	r2, sl
 800992a:	4631      	mov	r1, r6
 800992c:	4628      	mov	r0, r5
 800992e:	47b8      	blx	r7
 8009930:	3001      	adds	r0, #1
 8009932:	f43f aeaa 	beq.w	800968a <_printf_float+0xc2>
 8009936:	f108 0801 	add.w	r8, r8, #1
 800993a:	e7ec      	b.n	8009916 <_printf_float+0x34e>
 800993c:	4613      	mov	r3, r2
 800993e:	4631      	mov	r1, r6
 8009940:	4642      	mov	r2, r8
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	d1c0      	bne.n	80098cc <_printf_float+0x304>
 800994a:	e69e      	b.n	800968a <_printf_float+0xc2>
 800994c:	2301      	movs	r3, #1
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	9205      	str	r2, [sp, #20]
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f ae97 	beq.w	800968a <_printf_float+0xc2>
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	f10b 0b01 	add.w	fp, fp, #1
 8009962:	e7b9      	b.n	80098d8 <_printf_float+0x310>
 8009964:	ee18 3a10 	vmov	r3, s16
 8009968:	4652      	mov	r2, sl
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d1be      	bne.n	80098f2 <_printf_float+0x32a>
 8009974:	e689      	b.n	800968a <_printf_float+0xc2>
 8009976:	9a05      	ldr	r2, [sp, #20]
 8009978:	464b      	mov	r3, r9
 800997a:	4442      	add	r2, r8
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d1c1      	bne.n	800990a <_printf_float+0x342>
 8009986:	e680      	b.n	800968a <_printf_float+0xc2>
 8009988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800998a:	2a01      	cmp	r2, #1
 800998c:	dc01      	bgt.n	8009992 <_printf_float+0x3ca>
 800998e:	07db      	lsls	r3, r3, #31
 8009990:	d538      	bpl.n	8009a04 <_printf_float+0x43c>
 8009992:	2301      	movs	r3, #1
 8009994:	4642      	mov	r2, r8
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	f43f ae74 	beq.w	800968a <_printf_float+0xc2>
 80099a2:	ee18 3a10 	vmov	r3, s16
 80099a6:	4652      	mov	r2, sl
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f ae6b 	beq.w	800968a <_printf_float+0xc2>
 80099b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	f7f7 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80099c0:	b9d8      	cbnz	r0, 80099fa <_printf_float+0x432>
 80099c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c4:	f108 0201 	add.w	r2, r8, #1
 80099c8:	3b01      	subs	r3, #1
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	47b8      	blx	r7
 80099d0:	3001      	adds	r0, #1
 80099d2:	d10e      	bne.n	80099f2 <_printf_float+0x42a>
 80099d4:	e659      	b.n	800968a <_printf_float+0xc2>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4652      	mov	r2, sl
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f ae52 	beq.w	800968a <_printf_float+0xc2>
 80099e6:	f108 0801 	add.w	r8, r8, #1
 80099ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ec:	3b01      	subs	r3, #1
 80099ee:	4543      	cmp	r3, r8
 80099f0:	dcf1      	bgt.n	80099d6 <_printf_float+0x40e>
 80099f2:	464b      	mov	r3, r9
 80099f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099f8:	e6dc      	b.n	80097b4 <_printf_float+0x1ec>
 80099fa:	f04f 0800 	mov.w	r8, #0
 80099fe:	f104 0a1a 	add.w	sl, r4, #26
 8009a02:	e7f2      	b.n	80099ea <_printf_float+0x422>
 8009a04:	2301      	movs	r3, #1
 8009a06:	4642      	mov	r2, r8
 8009a08:	e7df      	b.n	80099ca <_printf_float+0x402>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	464a      	mov	r2, r9
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	f43f ae38 	beq.w	800968a <_printf_float+0xc2>
 8009a1a:	f108 0801 	add.w	r8, r8, #1
 8009a1e:	68e3      	ldr	r3, [r4, #12]
 8009a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a22:	1a5b      	subs	r3, r3, r1
 8009a24:	4543      	cmp	r3, r8
 8009a26:	dcf0      	bgt.n	8009a0a <_printf_float+0x442>
 8009a28:	e6fa      	b.n	8009820 <_printf_float+0x258>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	f104 0919 	add.w	r9, r4, #25
 8009a32:	e7f4      	b.n	8009a1e <_printf_float+0x456>

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a80:	1e13      	subs	r3, r2, #0
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	68e5      	ldr	r5, [r4, #12]
 8009a9e:	6832      	ldr	r2, [r6, #0]
 8009aa0:	f003 0306 	and.w	r3, r3, #6
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c0      	blx	r8
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	; 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	7e0f      	ldrb	r7, [r1, #24]
 8009b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b18:	2f78      	cmp	r7, #120	; 0x78
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	469a      	mov	sl, r3
 8009b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	; 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d8 	beq.w	8009ce2 <_printf_i+0x1d2>
 8009b32:	2f58      	cmp	r7, #88	; 0x58
 8009b34:	f000 80a3 	beq.w	8009c7e <_printf_i+0x16e>
 8009b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a101      	add	r1, pc, #4	; (adr r1, 8009b50 <_printf_i+0x40>)
 8009b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009cab 	.word	0x08009cab
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009ceb 	.word	0x08009ceb
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009cb3 	.word	0x08009cb3
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a3      	b.n	8009d04 <_printf_i+0x1f4>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	0606      	lsls	r6, r0, #24
 8009bc2:	f101 0304 	add.w	r3, r1, #4
 8009bc6:	d50a      	bpl.n	8009bde <_printf_i+0xce>
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	da03      	bge.n	8009bd8 <_printf_i+0xc8>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	4276      	negs	r6, r6
 8009bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd8:	485e      	ldr	r0, [pc, #376]	; (8009d54 <_printf_i+0x244>)
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e019      	b.n	8009c12 <_printf_i+0x102>
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be6:	bf18      	it	ne
 8009be8:	b236      	sxthne	r6, r6
 8009bea:	e7ef      	b.n	8009bcc <_printf_i+0xbc>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	6029      	str	r1, [r5, #0]
 8009bf4:	0601      	lsls	r1, r0, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xec>
 8009bf8:	681e      	ldr	r6, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0xf2>
 8009bfc:	0646      	lsls	r6, r0, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xe8>
 8009c00:	881e      	ldrh	r6, [r3, #0]
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_printf_i+0x244>)
 8009c04:	2f6f      	cmp	r7, #111	; 0x6f
 8009c06:	bf0c      	ite	eq
 8009c08:	2308      	moveq	r3, #8
 8009c0a:	230a      	movne	r3, #10
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c12:	6865      	ldr	r5, [r4, #4]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90e      	cbnz	r6, 8009c28 <_printf_i+0x118>
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	d04d      	beq.n	8009cc4 <_printf_i+0x1b4>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c38:	4637      	mov	r7, r6
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x11a>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x14c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07de      	lsls	r6, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x14c>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	; 0x30
 8009c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c5c:	1b52      	subs	r2, r2, r5
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee2 	bl	8009a34 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14c      	bne.n	8009d0e <_printf_i+0x1fe>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	4835      	ldr	r0, [pc, #212]	; (8009d54 <_printf_i+0x244>)
 8009c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c8c:	6029      	str	r1, [r5, #0]
 8009c8e:	061d      	lsls	r5, r3, #24
 8009c90:	d514      	bpl.n	8009cbc <_printf_i+0x1ac>
 8009c92:	07df      	lsls	r7, r3, #31
 8009c94:	bf44      	itt	mi
 8009c96:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9a:	6023      	strmi	r3, [r4, #0]
 8009c9c:	b91e      	cbnz	r6, 8009ca6 <_printf_i+0x196>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f023 0320 	bic.w	r3, r3, #32
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	e7b0      	b.n	8009c0c <_printf_i+0xfc>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f043 0320 	orr.w	r3, r3, #32
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	4828      	ldr	r0, [pc, #160]	; (8009d58 <_printf_i+0x248>)
 8009cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cba:	e7e3      	b.n	8009c84 <_printf_i+0x174>
 8009cbc:	0659      	lsls	r1, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2b6      	uxthmi	r6, r6
 8009cc2:	e7e6      	b.n	8009c92 <_printf_i+0x182>
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	e7bb      	b.n	8009c40 <_printf_i+0x130>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6826      	ldr	r6, [r4, #0]
 8009ccc:	6961      	ldr	r1, [r4, #20]
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	6028      	str	r0, [r5, #0]
 8009cd2:	0635      	lsls	r5, r6, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1cc>
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1d2>
 8009cdc:	0670      	lsls	r0, r6, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1c8>
 8009ce0:	8019      	strh	r1, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e7ba      	b.n	8009c60 <_printf_i+0x150>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fa7a 	bl	80001f0 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1f2>
 8009cfe:	1b40      	subs	r0, r0, r5
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0c:	e7a8      	b.n	8009c60 <_printf_i+0x150>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ab      	beq.n	8009c74 <_printf_i+0x164>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x23a>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a4      	b.n	8009c78 <_printf_i+0x168>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09b      	beq.n	8009c74 <_printf_i+0x164>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x21e>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x212>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x22e>
 8009d52:	bf00      	nop
 8009d54:	0800be26 	.word	0x0800be26
 8009d58:	0800be37 	.word	0x0800be37

08009d5c <cleanup_glue>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	460c      	mov	r4, r1
 8009d60:	6809      	ldr	r1, [r1, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	b109      	cbz	r1, 8009d6a <cleanup_glue+0xe>
 8009d66:	f7ff fff9 	bl	8009d5c <cleanup_glue>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d72:	f001 bbd5 	b.w	800b520 <_free_r>
	...

08009d78 <_reclaim_reent>:
 8009d78:	4b2c      	ldr	r3, [pc, #176]	; (8009e2c <_reclaim_reent+0xb4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4283      	cmp	r3, r0
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	d051      	beq.n	8009e28 <_reclaim_reent+0xb0>
 8009d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d86:	b143      	cbz	r3, 8009d9a <_reclaim_reent+0x22>
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d14a      	bne.n	8009e24 <_reclaim_reent+0xac>
 8009d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	b111      	cbz	r1, 8009d9a <_reclaim_reent+0x22>
 8009d94:	4620      	mov	r0, r4
 8009d96:	f001 fbc3 	bl	800b520 <_free_r>
 8009d9a:	6961      	ldr	r1, [r4, #20]
 8009d9c:	b111      	cbz	r1, 8009da4 <_reclaim_reent+0x2c>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f001 fbbe 	bl	800b520 <_free_r>
 8009da4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009da6:	b111      	cbz	r1, 8009dae <_reclaim_reent+0x36>
 8009da8:	4620      	mov	r0, r4
 8009daa:	f001 fbb9 	bl	800b520 <_free_r>
 8009dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009db0:	b111      	cbz	r1, 8009db8 <_reclaim_reent+0x40>
 8009db2:	4620      	mov	r0, r4
 8009db4:	f001 fbb4 	bl	800b520 <_free_r>
 8009db8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009dba:	b111      	cbz	r1, 8009dc2 <_reclaim_reent+0x4a>
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f001 fbaf 	bl	800b520 <_free_r>
 8009dc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009dc4:	b111      	cbz	r1, 8009dcc <_reclaim_reent+0x54>
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f001 fbaa 	bl	800b520 <_free_r>
 8009dcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009dce:	b111      	cbz	r1, 8009dd6 <_reclaim_reent+0x5e>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f001 fba5 	bl	800b520 <_free_r>
 8009dd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009dd8:	b111      	cbz	r1, 8009de0 <_reclaim_reent+0x68>
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f001 fba0 	bl	800b520 <_free_r>
 8009de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de2:	b111      	cbz	r1, 8009dea <_reclaim_reent+0x72>
 8009de4:	4620      	mov	r0, r4
 8009de6:	f001 fb9b 	bl	800b520 <_free_r>
 8009dea:	69a3      	ldr	r3, [r4, #24]
 8009dec:	b1e3      	cbz	r3, 8009e28 <_reclaim_reent+0xb0>
 8009dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009df0:	4620      	mov	r0, r4
 8009df2:	4798      	blx	r3
 8009df4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009df6:	b1b9      	cbz	r1, 8009e28 <_reclaim_reent+0xb0>
 8009df8:	4620      	mov	r0, r4
 8009dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dfe:	f7ff bfad 	b.w	8009d5c <cleanup_glue>
 8009e02:	5949      	ldr	r1, [r1, r5]
 8009e04:	b941      	cbnz	r1, 8009e18 <_reclaim_reent+0xa0>
 8009e06:	3504      	adds	r5, #4
 8009e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e0a:	2d80      	cmp	r5, #128	; 0x80
 8009e0c:	68d9      	ldr	r1, [r3, #12]
 8009e0e:	d1f8      	bne.n	8009e02 <_reclaim_reent+0x8a>
 8009e10:	4620      	mov	r0, r4
 8009e12:	f001 fb85 	bl	800b520 <_free_r>
 8009e16:	e7ba      	b.n	8009d8e <_reclaim_reent+0x16>
 8009e18:	680e      	ldr	r6, [r1, #0]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f001 fb80 	bl	800b520 <_free_r>
 8009e20:	4631      	mov	r1, r6
 8009e22:	e7ef      	b.n	8009e04 <_reclaim_reent+0x8c>
 8009e24:	2500      	movs	r5, #0
 8009e26:	e7ef      	b.n	8009e08 <_reclaim_reent+0x90>
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000010 	.word	0x20000010

08009e30 <_sbrk_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_sbrk_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f9 facc 	bl	80033d8 <_sbrk>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_sbrk_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_sbrk_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20004d40 	.word	0x20004d40

08009e50 <__sread>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	f001 fbae 	bl	800b5b8 <_read_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	bfab      	itete	ge
 8009e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e62:	89a3      	ldrhlt	r3, [r4, #12]
 8009e64:	181b      	addge	r3, r3, r0
 8009e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6a:	bfac      	ite	ge
 8009e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e6e:	81a3      	strhlt	r3, [r4, #12]
 8009e70:	bd10      	pop	{r4, pc}

08009e72 <__swrite>:
 8009e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	461f      	mov	r7, r3
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	05db      	lsls	r3, r3, #23
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4616      	mov	r6, r2
 8009e82:	d505      	bpl.n	8009e90 <__swrite+0x1e>
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f000 ff88 	bl	800ada0 <_lseek_r>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	f000 b817 	b.w	8009ed8 <_write_r>

08009eaa <__sseek>:
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb2:	f000 ff75 	bl	800ada0 <_lseek_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	bf15      	itete	ne
 8009ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ec6:	81a3      	strheq	r3, [r4, #12]
 8009ec8:	bf18      	it	ne
 8009eca:	81a3      	strhne	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__sclose>:
 8009ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed2:	f000 b813 	b.w	8009efc <_close_r>
	...

08009ed8 <_write_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_write_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f9 fa25 	bl	8003336 <_write>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_write_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_write_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20004d40 	.word	0x20004d40

08009efc <_close_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_close_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f9 fa31 	bl	800336e <_close>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_close_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_close_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20004d40 	.word	0x20004d40

08009f1c <quorem>:
 8009f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	6903      	ldr	r3, [r0, #16]
 8009f22:	690c      	ldr	r4, [r1, #16]
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	4607      	mov	r7, r0
 8009f28:	f2c0 8081 	blt.w	800a02e <quorem+0x112>
 8009f2c:	3c01      	subs	r4, #1
 8009f2e:	f101 0814 	add.w	r8, r1, #20
 8009f32:	f100 0514 	add.w	r5, r0, #20
 8009f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f44:	3301      	adds	r3, #1
 8009f46:	429a      	cmp	r2, r3
 8009f48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f50:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f54:	d331      	bcc.n	8009fba <quorem+0x9e>
 8009f56:	f04f 0e00 	mov.w	lr, #0
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	46ac      	mov	ip, r5
 8009f5e:	46f2      	mov	sl, lr
 8009f60:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f64:	b293      	uxth	r3, r2
 8009f66:	fb06 e303 	mla	r3, r6, r3, lr
 8009f6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	ebaa 0303 	sub.w	r3, sl, r3
 8009f74:	f8dc a000 	ldr.w	sl, [ip]
 8009f78:	0c12      	lsrs	r2, r2, #16
 8009f7a:	fa13 f38a 	uxtah	r3, r3, sl
 8009f7e:	fb06 e202 	mla	r2, r6, r2, lr
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	9b00      	ldr	r3, [sp, #0]
 8009f86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f8a:	b292      	uxth	r2, r2
 8009f8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f94:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f98:	4581      	cmp	r9, r0
 8009f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9e:	f84c 3b04 	str.w	r3, [ip], #4
 8009fa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fa6:	d2db      	bcs.n	8009f60 <quorem+0x44>
 8009fa8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fac:	b92b      	cbnz	r3, 8009fba <quorem+0x9e>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	d32e      	bcc.n	800a016 <quorem+0xfa>
 8009fb8:	613c      	str	r4, [r7, #16]
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f001 f998 	bl	800b2f0 <__mcmp>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	db24      	blt.n	800a00e <quorem+0xf2>
 8009fc4:	3601      	adds	r6, #1
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f04f 0c00 	mov.w	ip, #0
 8009fcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fd0:	f8d0 e000 	ldr.w	lr, [r0]
 8009fd4:	b293      	uxth	r3, r2
 8009fd6:	ebac 0303 	sub.w	r3, ip, r3
 8009fda:	0c12      	lsrs	r2, r2, #16
 8009fdc:	fa13 f38e 	uxtah	r3, r3, lr
 8009fe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fee:	45c1      	cmp	r9, r8
 8009ff0:	f840 3b04 	str.w	r3, [r0], #4
 8009ff4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ff8:	d2e8      	bcs.n	8009fcc <quorem+0xb0>
 8009ffa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a002:	b922      	cbnz	r2, 800a00e <quorem+0xf2>
 800a004:	3b04      	subs	r3, #4
 800a006:	429d      	cmp	r5, r3
 800a008:	461a      	mov	r2, r3
 800a00a:	d30a      	bcc.n	800a022 <quorem+0x106>
 800a00c:	613c      	str	r4, [r7, #16]
 800a00e:	4630      	mov	r0, r6
 800a010:	b003      	add	sp, #12
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	3b04      	subs	r3, #4
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d1cc      	bne.n	8009fb8 <quorem+0x9c>
 800a01e:	3c01      	subs	r4, #1
 800a020:	e7c7      	b.n	8009fb2 <quorem+0x96>
 800a022:	6812      	ldr	r2, [r2, #0]
 800a024:	3b04      	subs	r3, #4
 800a026:	2a00      	cmp	r2, #0
 800a028:	d1f0      	bne.n	800a00c <quorem+0xf0>
 800a02a:	3c01      	subs	r4, #1
 800a02c:	e7eb      	b.n	800a006 <quorem+0xea>
 800a02e:	2000      	movs	r0, #0
 800a030:	e7ee      	b.n	800a010 <quorem+0xf4>
 800a032:	0000      	movs	r0, r0
 800a034:	0000      	movs	r0, r0
	...

0800a038 <_dtoa_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b04 	vpush	{d8-d9}
 800a040:	ec57 6b10 	vmov	r6, r7, d0
 800a044:	b093      	sub	sp, #76	; 0x4c
 800a046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a04c:	9106      	str	r1, [sp, #24]
 800a04e:	ee10 aa10 	vmov	sl, s0
 800a052:	4604      	mov	r4, r0
 800a054:	9209      	str	r2, [sp, #36]	; 0x24
 800a056:	930c      	str	r3, [sp, #48]	; 0x30
 800a058:	46bb      	mov	fp, r7
 800a05a:	b975      	cbnz	r5, 800a07a <_dtoa_r+0x42>
 800a05c:	2010      	movs	r0, #16
 800a05e:	f000 feb1 	bl	800adc4 <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	6260      	str	r0, [r4, #36]	; 0x24
 800a066:	b920      	cbnz	r0, 800a072 <_dtoa_r+0x3a>
 800a068:	4ba7      	ldr	r3, [pc, #668]	; (800a308 <_dtoa_r+0x2d0>)
 800a06a:	21ea      	movs	r1, #234	; 0xea
 800a06c:	48a7      	ldr	r0, [pc, #668]	; (800a30c <_dtoa_r+0x2d4>)
 800a06e:	f001 fab5 	bl	800b5dc <__assert_func>
 800a072:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a076:	6005      	str	r5, [r0, #0]
 800a078:	60c5      	str	r5, [r0, #12]
 800a07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	b151      	cbz	r1, 800a096 <_dtoa_r+0x5e>
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	604a      	str	r2, [r1, #4]
 800a084:	2301      	movs	r3, #1
 800a086:	4093      	lsls	r3, r2
 800a088:	608b      	str	r3, [r1, #8]
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 feee 	bl	800ae6c <_Bfree>
 800a090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	1e3b      	subs	r3, r7, #0
 800a098:	bfaa      	itet	ge
 800a09a:	2300      	movge	r3, #0
 800a09c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0a0:	f8c8 3000 	strge.w	r3, [r8]
 800a0a4:	4b9a      	ldr	r3, [pc, #616]	; (800a310 <_dtoa_r+0x2d8>)
 800a0a6:	bfbc      	itt	lt
 800a0a8:	2201      	movlt	r2, #1
 800a0aa:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ae:	ea33 030b 	bics.w	r3, r3, fp
 800a0b2:	d11b      	bne.n	800a0ec <_dtoa_r+0xb4>
 800a0b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c0:	4333      	orrs	r3, r6
 800a0c2:	f000 8592 	beq.w	800abea <_dtoa_r+0xbb2>
 800a0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c8:	b963      	cbnz	r3, 800a0e4 <_dtoa_r+0xac>
 800a0ca:	4b92      	ldr	r3, [pc, #584]	; (800a314 <_dtoa_r+0x2dc>)
 800a0cc:	e022      	b.n	800a114 <_dtoa_r+0xdc>
 800a0ce:	4b92      	ldr	r3, [pc, #584]	; (800a318 <_dtoa_r+0x2e0>)
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	9801      	ldr	r0, [sp, #4]
 800a0da:	b013      	add	sp, #76	; 0x4c
 800a0dc:	ecbd 8b04 	vpop	{d8-d9}
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	4b8b      	ldr	r3, [pc, #556]	; (800a314 <_dtoa_r+0x2dc>)
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	3303      	adds	r3, #3
 800a0ea:	e7f3      	b.n	800a0d4 <_dtoa_r+0x9c>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	f7f6 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0f8:	ec4b ab19 	vmov	d9, sl, fp
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	b158      	cbz	r0, 800a118 <_dtoa_r+0xe0>
 800a100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a102:	2301      	movs	r3, #1
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 856b 	beq.w	800abe4 <_dtoa_r+0xbac>
 800a10e:	4883      	ldr	r0, [pc, #524]	; (800a31c <_dtoa_r+0x2e4>)
 800a110:	6018      	str	r0, [r3, #0]
 800a112:	1e43      	subs	r3, r0, #1
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	e7df      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a118:	ec4b ab10 	vmov	d0, sl, fp
 800a11c:	aa10      	add	r2, sp, #64	; 0x40
 800a11e:	a911      	add	r1, sp, #68	; 0x44
 800a120:	4620      	mov	r0, r4
 800a122:	f001 f98b 	bl	800b43c <__d2b>
 800a126:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a12a:	ee08 0a10 	vmov	s16, r0
 800a12e:	2d00      	cmp	r5, #0
 800a130:	f000 8084 	beq.w	800a23c <_dtoa_r+0x204>
 800a134:	ee19 3a90 	vmov	r3, s19
 800a138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a13c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a140:	4656      	mov	r6, sl
 800a142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a14a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a14e:	4b74      	ldr	r3, [pc, #464]	; (800a320 <_dtoa_r+0x2e8>)
 800a150:	2200      	movs	r2, #0
 800a152:	4630      	mov	r0, r6
 800a154:	4639      	mov	r1, r7
 800a156:	f7f6 f89f 	bl	8000298 <__aeabi_dsub>
 800a15a:	a365      	add	r3, pc, #404	; (adr r3, 800a2f0 <_dtoa_r+0x2b8>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 fa52 	bl	8000608 <__aeabi_dmul>
 800a164:	a364      	add	r3, pc, #400	; (adr r3, 800a2f8 <_dtoa_r+0x2c0>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 f897 	bl	800029c <__adddf3>
 800a16e:	4606      	mov	r6, r0
 800a170:	4628      	mov	r0, r5
 800a172:	460f      	mov	r7, r1
 800a174:	f7f6 f9de 	bl	8000534 <__aeabi_i2d>
 800a178:	a361      	add	r3, pc, #388	; (adr r3, 800a300 <_dtoa_r+0x2c8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fa43 	bl	8000608 <__aeabi_dmul>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 f887 	bl	800029c <__adddf3>
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	f7f6 fce9 	bl	8000b68 <__aeabi_d2iz>
 800a196:	2200      	movs	r2, #0
 800a198:	9000      	str	r0, [sp, #0]
 800a19a:	2300      	movs	r3, #0
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fca4 	bl	8000aec <__aeabi_dcmplt>
 800a1a4:	b150      	cbz	r0, 800a1bc <_dtoa_r+0x184>
 800a1a6:	9800      	ldr	r0, [sp, #0]
 800a1a8:	f7f6 f9c4 	bl	8000534 <__aeabi_i2d>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	f7f6 fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1b4:	b910      	cbnz	r0, 800a1bc <_dtoa_r+0x184>
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	2b16      	cmp	r3, #22
 800a1c0:	d85a      	bhi.n	800a278 <_dtoa_r+0x240>
 800a1c2:	9a00      	ldr	r2, [sp, #0]
 800a1c4:	4b57      	ldr	r3, [pc, #348]	; (800a324 <_dtoa_r+0x2ec>)
 800a1c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	ec51 0b19 	vmov	r0, r1, d9
 800a1d2:	f7f6 fc8b 	bl	8000aec <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d050      	beq.n	800a27c <_dtoa_r+0x244>
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1e6:	1b5d      	subs	r5, r3, r5
 800a1e8:	1e6b      	subs	r3, r5, #1
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	bf45      	ittet	mi
 800a1ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1f2:	9304      	strmi	r3, [sp, #16]
 800a1f4:	2300      	movpl	r3, #0
 800a1f6:	2300      	movmi	r3, #0
 800a1f8:	bf4c      	ite	mi
 800a1fa:	9305      	strmi	r3, [sp, #20]
 800a1fc:	9304      	strpl	r3, [sp, #16]
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	db3d      	blt.n	800a280 <_dtoa_r+0x248>
 800a204:	9b05      	ldr	r3, [sp, #20]
 800a206:	9a00      	ldr	r2, [sp, #0]
 800a208:	920a      	str	r2, [sp, #40]	; 0x28
 800a20a:	4413      	add	r3, r2
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	2300      	movs	r3, #0
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	2b09      	cmp	r3, #9
 800a216:	f200 8089 	bhi.w	800a32c <_dtoa_r+0x2f4>
 800a21a:	2b05      	cmp	r3, #5
 800a21c:	bfc4      	itt	gt
 800a21e:	3b04      	subgt	r3, #4
 800a220:	9306      	strgt	r3, [sp, #24]
 800a222:	9b06      	ldr	r3, [sp, #24]
 800a224:	f1a3 0302 	sub.w	r3, r3, #2
 800a228:	bfcc      	ite	gt
 800a22a:	2500      	movgt	r5, #0
 800a22c:	2501      	movle	r5, #1
 800a22e:	2b03      	cmp	r3, #3
 800a230:	f200 8087 	bhi.w	800a342 <_dtoa_r+0x30a>
 800a234:	e8df f003 	tbb	[pc, r3]
 800a238:	59383a2d 	.word	0x59383a2d
 800a23c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a240:	441d      	add	r5, r3
 800a242:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a246:	2b20      	cmp	r3, #32
 800a248:	bfc1      	itttt	gt
 800a24a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a24e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a252:	fa0b f303 	lslgt.w	r3, fp, r3
 800a256:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a25a:	bfda      	itte	le
 800a25c:	f1c3 0320 	rsble	r3, r3, #32
 800a260:	fa06 f003 	lslle.w	r0, r6, r3
 800a264:	4318      	orrgt	r0, r3
 800a266:	f7f6 f955 	bl	8000514 <__aeabi_ui2d>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4606      	mov	r6, r0
 800a26e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a272:	3d01      	subs	r5, #1
 800a274:	930e      	str	r3, [sp, #56]	; 0x38
 800a276:	e76a      	b.n	800a14e <_dtoa_r+0x116>
 800a278:	2301      	movs	r3, #1
 800a27a:	e7b2      	b.n	800a1e2 <_dtoa_r+0x1aa>
 800a27c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a27e:	e7b1      	b.n	800a1e4 <_dtoa_r+0x1ac>
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	9a00      	ldr	r2, [sp, #0]
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	4253      	negs	r3, r2
 800a28a:	9307      	str	r3, [sp, #28]
 800a28c:	2300      	movs	r3, #0
 800a28e:	930a      	str	r3, [sp, #40]	; 0x28
 800a290:	e7bf      	b.n	800a212 <_dtoa_r+0x1da>
 800a292:	2300      	movs	r3, #0
 800a294:	9308      	str	r3, [sp, #32]
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	dc55      	bgt.n	800a348 <_dtoa_r+0x310>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a6:	e00c      	b.n	800a2c2 <_dtoa_r+0x28a>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e7f3      	b.n	800a294 <_dtoa_r+0x25c>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b0:	9308      	str	r3, [sp, #32]
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	9302      	str	r3, [sp, #8]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	bfb8      	it	lt
 800a2c0:	2301      	movlt	r3, #1
 800a2c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	6042      	str	r2, [r0, #4]
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	f102 0614 	add.w	r6, r2, #20
 800a2ce:	429e      	cmp	r6, r3
 800a2d0:	6841      	ldr	r1, [r0, #4]
 800a2d2:	d93d      	bls.n	800a350 <_dtoa_r+0x318>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fd89 	bl	800adec <_Balloc>
 800a2da:	9001      	str	r0, [sp, #4]
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d13b      	bne.n	800a358 <_dtoa_r+0x320>
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <_dtoa_r+0x2f0>)
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2e8:	e6c0      	b.n	800a06c <_dtoa_r+0x34>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e7df      	b.n	800a2ae <_dtoa_r+0x276>
 800a2ee:	bf00      	nop
 800a2f0:	636f4361 	.word	0x636f4361
 800a2f4:	3fd287a7 	.word	0x3fd287a7
 800a2f8:	8b60c8b3 	.word	0x8b60c8b3
 800a2fc:	3fc68a28 	.word	0x3fc68a28
 800a300:	509f79fb 	.word	0x509f79fb
 800a304:	3fd34413 	.word	0x3fd34413
 800a308:	0800be55 	.word	0x0800be55
 800a30c:	0800be6c 	.word	0x0800be6c
 800a310:	7ff00000 	.word	0x7ff00000
 800a314:	0800be51 	.word	0x0800be51
 800a318:	0800be48 	.word	0x0800be48
 800a31c:	0800be25 	.word	0x0800be25
 800a320:	3ff80000 	.word	0x3ff80000
 800a324:	0800bf60 	.word	0x0800bf60
 800a328:	0800bec7 	.word	0x0800bec7
 800a32c:	2501      	movs	r5, #1
 800a32e:	2300      	movs	r3, #0
 800a330:	9306      	str	r3, [sp, #24]
 800a332:	9508      	str	r5, [sp, #32]
 800a334:	f04f 33ff 	mov.w	r3, #4294967295
 800a338:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a33c:	2200      	movs	r2, #0
 800a33e:	2312      	movs	r3, #18
 800a340:	e7b0      	b.n	800a2a4 <_dtoa_r+0x26c>
 800a342:	2301      	movs	r3, #1
 800a344:	9308      	str	r3, [sp, #32]
 800a346:	e7f5      	b.n	800a334 <_dtoa_r+0x2fc>
 800a348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a34e:	e7b8      	b.n	800a2c2 <_dtoa_r+0x28a>
 800a350:	3101      	adds	r1, #1
 800a352:	6041      	str	r1, [r0, #4]
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	e7b8      	b.n	800a2ca <_dtoa_r+0x292>
 800a358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a35a:	9a01      	ldr	r2, [sp, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	2b0e      	cmp	r3, #14
 800a362:	f200 809d 	bhi.w	800a4a0 <_dtoa_r+0x468>
 800a366:	2d00      	cmp	r5, #0
 800a368:	f000 809a 	beq.w	800a4a0 <_dtoa_r+0x468>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd32      	ble.n	800a3d8 <_dtoa_r+0x3a0>
 800a372:	4ab7      	ldr	r2, [pc, #732]	; (800a650 <_dtoa_r+0x618>)
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a37c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	05d8      	lsls	r0, r3, #23
 800a384:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a388:	d516      	bpl.n	800a3b8 <_dtoa_r+0x380>
 800a38a:	4bb2      	ldr	r3, [pc, #712]	; (800a654 <_dtoa_r+0x61c>)
 800a38c:	ec51 0b19 	vmov	r0, r1, d9
 800a390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a394:	f7f6 fa62 	bl	800085c <__aeabi_ddiv>
 800a398:	f007 070f 	and.w	r7, r7, #15
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	2503      	movs	r5, #3
 800a3a2:	4eac      	ldr	r6, [pc, #688]	; (800a654 <_dtoa_r+0x61c>)
 800a3a4:	b957      	cbnz	r7, 800a3bc <_dtoa_r+0x384>
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	f7f6 fa55 	bl	800085c <__aeabi_ddiv>
 800a3b2:	4682      	mov	sl, r0
 800a3b4:	468b      	mov	fp, r1
 800a3b6:	e028      	b.n	800a40a <_dtoa_r+0x3d2>
 800a3b8:	2502      	movs	r5, #2
 800a3ba:	e7f2      	b.n	800a3a2 <_dtoa_r+0x36a>
 800a3bc:	07f9      	lsls	r1, r7, #31
 800a3be:	d508      	bpl.n	800a3d2 <_dtoa_r+0x39a>
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3c8:	f7f6 f91e 	bl	8000608 <__aeabi_dmul>
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	4689      	mov	r9, r1
 800a3d2:	107f      	asrs	r7, r7, #1
 800a3d4:	3608      	adds	r6, #8
 800a3d6:	e7e5      	b.n	800a3a4 <_dtoa_r+0x36c>
 800a3d8:	f000 809b 	beq.w	800a512 <_dtoa_r+0x4da>
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	4f9d      	ldr	r7, [pc, #628]	; (800a654 <_dtoa_r+0x61c>)
 800a3e0:	425e      	negs	r6, r3
 800a3e2:	4b9b      	ldr	r3, [pc, #620]	; (800a650 <_dtoa_r+0x618>)
 800a3e4:	f006 020f 	and.w	r2, r6, #15
 800a3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	ec51 0b19 	vmov	r0, r1, d9
 800a3f4:	f7f6 f908 	bl	8000608 <__aeabi_dmul>
 800a3f8:	1136      	asrs	r6, r6, #4
 800a3fa:	4682      	mov	sl, r0
 800a3fc:	468b      	mov	fp, r1
 800a3fe:	2300      	movs	r3, #0
 800a400:	2502      	movs	r5, #2
 800a402:	2e00      	cmp	r6, #0
 800a404:	d17a      	bne.n	800a4fc <_dtoa_r+0x4c4>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d3      	bne.n	800a3b2 <_dtoa_r+0x37a>
 800a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8082 	beq.w	800a516 <_dtoa_r+0x4de>
 800a412:	4b91      	ldr	r3, [pc, #580]	; (800a658 <_dtoa_r+0x620>)
 800a414:	2200      	movs	r2, #0
 800a416:	4650      	mov	r0, sl
 800a418:	4659      	mov	r1, fp
 800a41a:	f7f6 fb67 	bl	8000aec <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d079      	beq.n	800a516 <_dtoa_r+0x4de>
 800a422:	9b03      	ldr	r3, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d076      	beq.n	800a516 <_dtoa_r+0x4de>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd36      	ble.n	800a49c <_dtoa_r+0x464>
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	1e5f      	subs	r7, r3, #1
 800a436:	2200      	movs	r2, #0
 800a438:	4b88      	ldr	r3, [pc, #544]	; (800a65c <_dtoa_r+0x624>)
 800a43a:	f7f6 f8e5 	bl	8000608 <__aeabi_dmul>
 800a43e:	9e02      	ldr	r6, [sp, #8]
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	3501      	adds	r5, #1
 800a446:	4628      	mov	r0, r5
 800a448:	f7f6 f874 	bl	8000534 <__aeabi_i2d>
 800a44c:	4652      	mov	r2, sl
 800a44e:	465b      	mov	r3, fp
 800a450:	f7f6 f8da 	bl	8000608 <__aeabi_dmul>
 800a454:	4b82      	ldr	r3, [pc, #520]	; (800a660 <_dtoa_r+0x628>)
 800a456:	2200      	movs	r2, #0
 800a458:	f7f5 ff20 	bl	800029c <__adddf3>
 800a45c:	46d0      	mov	r8, sl
 800a45e:	46d9      	mov	r9, fp
 800a460:	4682      	mov	sl, r0
 800a462:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a466:	2e00      	cmp	r6, #0
 800a468:	d158      	bne.n	800a51c <_dtoa_r+0x4e4>
 800a46a:	4b7e      	ldr	r3, [pc, #504]	; (800a664 <_dtoa_r+0x62c>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f5 ff11 	bl	8000298 <__aeabi_dsub>
 800a476:	4652      	mov	r2, sl
 800a478:	465b      	mov	r3, fp
 800a47a:	4680      	mov	r8, r0
 800a47c:	4689      	mov	r9, r1
 800a47e:	f7f6 fb53 	bl	8000b28 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	f040 8295 	bne.w	800a9b2 <_dtoa_r+0x97a>
 800a488:	4652      	mov	r2, sl
 800a48a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	f7f6 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8289 	bne.w	800a9ae <_dtoa_r+0x976>
 800a49c:	ec5b ab19 	vmov	sl, fp, d9
 800a4a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f2c0 8148 	blt.w	800a738 <_dtoa_r+0x700>
 800a4a8:	9a00      	ldr	r2, [sp, #0]
 800a4aa:	2a0e      	cmp	r2, #14
 800a4ac:	f300 8144 	bgt.w	800a738 <_dtoa_r+0x700>
 800a4b0:	4b67      	ldr	r3, [pc, #412]	; (800a650 <_dtoa_r+0x618>)
 800a4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f280 80d5 	bge.w	800a66c <_dtoa_r+0x634>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f300 80d1 	bgt.w	800a66c <_dtoa_r+0x634>
 800a4ca:	f040 826f 	bne.w	800a9ac <_dtoa_r+0x974>
 800a4ce:	4b65      	ldr	r3, [pc, #404]	; (800a664 <_dtoa_r+0x62c>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f6 f897 	bl	8000608 <__aeabi_dmul>
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	f7f6 fb19 	bl	8000b14 <__aeabi_dcmpge>
 800a4e2:	9e03      	ldr	r6, [sp, #12]
 800a4e4:	4637      	mov	r7, r6
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f040 8245 	bne.w	800a976 <_dtoa_r+0x93e>
 800a4ec:	9d01      	ldr	r5, [sp, #4]
 800a4ee:	2331      	movs	r3, #49	; 0x31
 800a4f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	e240      	b.n	800a97e <_dtoa_r+0x946>
 800a4fc:	07f2      	lsls	r2, r6, #31
 800a4fe:	d505      	bpl.n	800a50c <_dtoa_r+0x4d4>
 800a500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	3501      	adds	r5, #1
 800a50a:	2301      	movs	r3, #1
 800a50c:	1076      	asrs	r6, r6, #1
 800a50e:	3708      	adds	r7, #8
 800a510:	e777      	b.n	800a402 <_dtoa_r+0x3ca>
 800a512:	2502      	movs	r5, #2
 800a514:	e779      	b.n	800a40a <_dtoa_r+0x3d2>
 800a516:	9f00      	ldr	r7, [sp, #0]
 800a518:	9e03      	ldr	r6, [sp, #12]
 800a51a:	e794      	b.n	800a446 <_dtoa_r+0x40e>
 800a51c:	9901      	ldr	r1, [sp, #4]
 800a51e:	4b4c      	ldr	r3, [pc, #304]	; (800a650 <_dtoa_r+0x618>)
 800a520:	4431      	add	r1, r6
 800a522:	910d      	str	r1, [sp, #52]	; 0x34
 800a524:	9908      	ldr	r1, [sp, #32]
 800a526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a52a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a52e:	2900      	cmp	r1, #0
 800a530:	d043      	beq.n	800a5ba <_dtoa_r+0x582>
 800a532:	494d      	ldr	r1, [pc, #308]	; (800a668 <_dtoa_r+0x630>)
 800a534:	2000      	movs	r0, #0
 800a536:	f7f6 f991 	bl	800085c <__aeabi_ddiv>
 800a53a:	4652      	mov	r2, sl
 800a53c:	465b      	mov	r3, fp
 800a53e:	f7f5 feab 	bl	8000298 <__aeabi_dsub>
 800a542:	9d01      	ldr	r5, [sp, #4]
 800a544:	4682      	mov	sl, r0
 800a546:	468b      	mov	fp, r1
 800a548:	4649      	mov	r1, r9
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7f6 fb0c 	bl	8000b68 <__aeabi_d2iz>
 800a550:	4606      	mov	r6, r0
 800a552:	f7f5 ffef 	bl	8000534 <__aeabi_i2d>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	f7f5 fe9b 	bl	8000298 <__aeabi_dsub>
 800a562:	3630      	adds	r6, #48	; 0x30
 800a564:	f805 6b01 	strb.w	r6, [r5], #1
 800a568:	4652      	mov	r2, sl
 800a56a:	465b      	mov	r3, fp
 800a56c:	4680      	mov	r8, r0
 800a56e:	4689      	mov	r9, r1
 800a570:	f7f6 fabc 	bl	8000aec <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d163      	bne.n	800a640 <_dtoa_r+0x608>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	4936      	ldr	r1, [pc, #216]	; (800a658 <_dtoa_r+0x620>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fe8a 	bl	8000298 <__aeabi_dsub>
 800a584:	4652      	mov	r2, sl
 800a586:	465b      	mov	r3, fp
 800a588:	f7f6 fab0 	bl	8000aec <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f040 80b5 	bne.w	800a6fc <_dtoa_r+0x6c4>
 800a592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a594:	429d      	cmp	r5, r3
 800a596:	d081      	beq.n	800a49c <_dtoa_r+0x464>
 800a598:	4b30      	ldr	r3, [pc, #192]	; (800a65c <_dtoa_r+0x624>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	4650      	mov	r0, sl
 800a59e:	4659      	mov	r1, fp
 800a5a0:	f7f6 f832 	bl	8000608 <__aeabi_dmul>
 800a5a4:	4b2d      	ldr	r3, [pc, #180]	; (800a65c <_dtoa_r+0x624>)
 800a5a6:	4682      	mov	sl, r0
 800a5a8:	468b      	mov	fp, r1
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7f6 f82a 	bl	8000608 <__aeabi_dmul>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	e7c6      	b.n	800a548 <_dtoa_r+0x510>
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	f7f6 f823 	bl	8000608 <__aeabi_dmul>
 800a5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c4:	9d01      	ldr	r5, [sp, #4]
 800a5c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	f7f6 faca 	bl	8000b68 <__aeabi_d2iz>
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	f7f5 ffad 	bl	8000534 <__aeabi_i2d>
 800a5da:	3630      	adds	r6, #48	; 0x30
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	4689      	mov	r9, r1
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	d124      	bne.n	800a644 <_dtoa_r+0x60c>
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <_dtoa_r+0x630>)
 800a5fc:	4650      	mov	r0, sl
 800a5fe:	4659      	mov	r1, fp
 800a600:	f7f5 fe4c 	bl	800029c <__adddf3>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f6 fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 800a610:	2800      	cmp	r0, #0
 800a612:	d173      	bne.n	800a6fc <_dtoa_r+0x6c4>
 800a614:	4652      	mov	r2, sl
 800a616:	465b      	mov	r3, fp
 800a618:	4913      	ldr	r1, [pc, #76]	; (800a668 <_dtoa_r+0x630>)
 800a61a:	2000      	movs	r0, #0
 800a61c:	f7f5 fe3c 	bl	8000298 <__aeabi_dsub>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f6 fa60 	bl	8000aec <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f af35 	beq.w	800a49c <_dtoa_r+0x464>
 800a632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a634:	1e6b      	subs	r3, r5, #1
 800a636:	930f      	str	r3, [sp, #60]	; 0x3c
 800a638:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a63c:	2b30      	cmp	r3, #48	; 0x30
 800a63e:	d0f8      	beq.n	800a632 <_dtoa_r+0x5fa>
 800a640:	9700      	str	r7, [sp, #0]
 800a642:	e049      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <_dtoa_r+0x624>)
 800a646:	f7f5 ffdf 	bl	8000608 <__aeabi_dmul>
 800a64a:	4680      	mov	r8, r0
 800a64c:	4689      	mov	r9, r1
 800a64e:	e7bd      	b.n	800a5cc <_dtoa_r+0x594>
 800a650:	0800bf60 	.word	0x0800bf60
 800a654:	0800bf38 	.word	0x0800bf38
 800a658:	3ff00000 	.word	0x3ff00000
 800a65c:	40240000 	.word	0x40240000
 800a660:	401c0000 	.word	0x401c0000
 800a664:	40140000 	.word	0x40140000
 800a668:	3fe00000 	.word	0x3fe00000
 800a66c:	9d01      	ldr	r5, [sp, #4]
 800a66e:	4656      	mov	r6, sl
 800a670:	465f      	mov	r7, fp
 800a672:	4642      	mov	r2, r8
 800a674:	464b      	mov	r3, r9
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f6 f8ef 	bl	800085c <__aeabi_ddiv>
 800a67e:	f7f6 fa73 	bl	8000b68 <__aeabi_d2iz>
 800a682:	4682      	mov	sl, r0
 800a684:	f7f5 ff56 	bl	8000534 <__aeabi_i2d>
 800a688:	4642      	mov	r2, r8
 800a68a:	464b      	mov	r3, r9
 800a68c:	f7f5 ffbc 	bl	8000608 <__aeabi_dmul>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a69c:	f7f5 fdfc 	bl	8000298 <__aeabi_dsub>
 800a6a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a4:	9e01      	ldr	r6, [sp, #4]
 800a6a6:	9f03      	ldr	r7, [sp, #12]
 800a6a8:	1bae      	subs	r6, r5, r6
 800a6aa:	42b7      	cmp	r7, r6
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	d135      	bne.n	800a71e <_dtoa_r+0x6e6>
 800a6b2:	f7f5 fdf3 	bl	800029c <__adddf3>
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	f7f6 fa33 	bl	8000b28 <__aeabi_dcmpgt>
 800a6c2:	b9d0      	cbnz	r0, 800a6fa <_dtoa_r+0x6c2>
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f7f6 fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6d0:	b110      	cbz	r0, 800a6d8 <_dtoa_r+0x6a0>
 800a6d2:	f01a 0f01 	tst.w	sl, #1
 800a6d6:	d110      	bne.n	800a6fa <_dtoa_r+0x6c2>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	ee18 1a10 	vmov	r1, s16
 800a6de:	f000 fbc5 	bl	800ae6c <_Bfree>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9800      	ldr	r0, [sp, #0]
 800a6e6:	702b      	strb	r3, [r5, #0]
 800a6e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	6018      	str	r0, [r3, #0]
 800a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f43f acf1 	beq.w	800a0d8 <_dtoa_r+0xa0>
 800a6f6:	601d      	str	r5, [r3, #0]
 800a6f8:	e4ee      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a6fa:	9f00      	ldr	r7, [sp, #0]
 800a6fc:	462b      	mov	r3, r5
 800a6fe:	461d      	mov	r5, r3
 800a700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a704:	2a39      	cmp	r2, #57	; 0x39
 800a706:	d106      	bne.n	800a716 <_dtoa_r+0x6de>
 800a708:	9a01      	ldr	r2, [sp, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d1f7      	bne.n	800a6fe <_dtoa_r+0x6c6>
 800a70e:	9901      	ldr	r1, [sp, #4]
 800a710:	2230      	movs	r2, #48	; 0x30
 800a712:	3701      	adds	r7, #1
 800a714:	700a      	strb	r2, [r1, #0]
 800a716:	781a      	ldrb	r2, [r3, #0]
 800a718:	3201      	adds	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
 800a71c:	e790      	b.n	800a640 <_dtoa_r+0x608>
 800a71e:	4ba6      	ldr	r3, [pc, #664]	; (800a9b8 <_dtoa_r+0x980>)
 800a720:	2200      	movs	r2, #0
 800a722:	f7f5 ff71 	bl	8000608 <__aeabi_dmul>
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	4606      	mov	r6, r0
 800a72c:	460f      	mov	r7, r1
 800a72e:	f7f6 f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a732:	2800      	cmp	r0, #0
 800a734:	d09d      	beq.n	800a672 <_dtoa_r+0x63a>
 800a736:	e7cf      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a738:	9a08      	ldr	r2, [sp, #32]
 800a73a:	2a00      	cmp	r2, #0
 800a73c:	f000 80d7 	beq.w	800a8ee <_dtoa_r+0x8b6>
 800a740:	9a06      	ldr	r2, [sp, #24]
 800a742:	2a01      	cmp	r2, #1
 800a744:	f300 80ba 	bgt.w	800a8bc <_dtoa_r+0x884>
 800a748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	f000 80b2 	beq.w	800a8b4 <_dtoa_r+0x87c>
 800a750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a754:	9e07      	ldr	r6, [sp, #28]
 800a756:	9d04      	ldr	r5, [sp, #16]
 800a758:	9a04      	ldr	r2, [sp, #16]
 800a75a:	441a      	add	r2, r3
 800a75c:	9204      	str	r2, [sp, #16]
 800a75e:	9a05      	ldr	r2, [sp, #20]
 800a760:	2101      	movs	r1, #1
 800a762:	441a      	add	r2, r3
 800a764:	4620      	mov	r0, r4
 800a766:	9205      	str	r2, [sp, #20]
 800a768:	f000 fc38 	bl	800afdc <__i2b>
 800a76c:	4607      	mov	r7, r0
 800a76e:	2d00      	cmp	r5, #0
 800a770:	dd0c      	ble.n	800a78c <_dtoa_r+0x754>
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd09      	ble.n	800a78c <_dtoa_r+0x754>
 800a778:	42ab      	cmp	r3, r5
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	bfa8      	it	ge
 800a77e:	462b      	movge	r3, r5
 800a780:	1ad2      	subs	r2, r2, r3
 800a782:	9204      	str	r2, [sp, #16]
 800a784:	9a05      	ldr	r2, [sp, #20]
 800a786:	1aed      	subs	r5, r5, r3
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	9305      	str	r3, [sp, #20]
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	b31b      	cbz	r3, 800a7d8 <_dtoa_r+0x7a0>
 800a790:	9b08      	ldr	r3, [sp, #32]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 80af 	beq.w	800a8f6 <_dtoa_r+0x8be>
 800a798:	2e00      	cmp	r6, #0
 800a79a:	dd13      	ble.n	800a7c4 <_dtoa_r+0x78c>
 800a79c:	4639      	mov	r1, r7
 800a79e:	4632      	mov	r2, r6
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 fcdb 	bl	800b15c <__pow5mult>
 800a7a6:	ee18 2a10 	vmov	r2, s16
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fc2a 	bl	800b008 <__multiply>
 800a7b4:	ee18 1a10 	vmov	r1, s16
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fb56 	bl	800ae6c <_Bfree>
 800a7c0:	ee08 8a10 	vmov	s16, r8
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	1b9a      	subs	r2, r3, r6
 800a7c8:	d006      	beq.n	800a7d8 <_dtoa_r+0x7a0>
 800a7ca:	ee18 1a10 	vmov	r1, s16
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fcc4 	bl	800b15c <__pow5mult>
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	2101      	movs	r1, #1
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 fbfe 	bl	800afdc <__i2b>
 800a7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	f340 8088 	ble.w	800a8fa <_dtoa_r+0x8c2>
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fcb4 	bl	800b15c <__pow5mult>
 800a7f4:	9b06      	ldr	r3, [sp, #24]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	f340 8081 	ble.w	800a900 <_dtoa_r+0x8c8>
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	6933      	ldr	r3, [r6, #16]
 800a804:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a808:	6918      	ldr	r0, [r3, #16]
 800a80a:	f000 fb97 	bl	800af3c <__hi0bits>
 800a80e:	f1c0 0020 	rsb	r0, r0, #32
 800a812:	9b05      	ldr	r3, [sp, #20]
 800a814:	4418      	add	r0, r3
 800a816:	f010 001f 	ands.w	r0, r0, #31
 800a81a:	f000 8092 	beq.w	800a942 <_dtoa_r+0x90a>
 800a81e:	f1c0 0320 	rsb	r3, r0, #32
 800a822:	2b04      	cmp	r3, #4
 800a824:	f340 808a 	ble.w	800a93c <_dtoa_r+0x904>
 800a828:	f1c0 001c 	rsb	r0, r0, #28
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	4403      	add	r3, r0
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	4403      	add	r3, r0
 800a836:	4405      	add	r5, r0
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dd07      	ble.n	800a850 <_dtoa_r+0x818>
 800a840:	ee18 1a10 	vmov	r1, s16
 800a844:	461a      	mov	r2, r3
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fce2 	bl	800b210 <__lshift>
 800a84c:	ee08 0a10 	vmov	s16, r0
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x82a>
 800a856:	4631      	mov	r1, r6
 800a858:	461a      	mov	r2, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fcd8 	bl	800b210 <__lshift>
 800a860:	4606      	mov	r6, r0
 800a862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d06e      	beq.n	800a946 <_dtoa_r+0x90e>
 800a868:	ee18 0a10 	vmov	r0, s16
 800a86c:	4631      	mov	r1, r6
 800a86e:	f000 fd3f 	bl	800b2f0 <__mcmp>
 800a872:	2800      	cmp	r0, #0
 800a874:	da67      	bge.n	800a946 <_dtoa_r+0x90e>
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	3b01      	subs	r3, #1
 800a87a:	ee18 1a10 	vmov	r1, s16
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	220a      	movs	r2, #10
 800a882:	2300      	movs	r3, #0
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fb13 	bl	800aeb0 <__multadd>
 800a88a:	9b08      	ldr	r3, [sp, #32]
 800a88c:	ee08 0a10 	vmov	s16, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 81b1 	beq.w	800abf8 <_dtoa_r+0xbc0>
 800a896:	2300      	movs	r3, #0
 800a898:	4639      	mov	r1, r7
 800a89a:	220a      	movs	r2, #10
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fb07 	bl	800aeb0 <__multadd>
 800a8a2:	9b02      	ldr	r3, [sp, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	f300 808e 	bgt.w	800a9c8 <_dtoa_r+0x990>
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	dc51      	bgt.n	800a956 <_dtoa_r+0x91e>
 800a8b2:	e089      	b.n	800a9c8 <_dtoa_r+0x990>
 800a8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8ba:	e74b      	b.n	800a754 <_dtoa_r+0x71c>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	1e5e      	subs	r6, r3, #1
 800a8c0:	9b07      	ldr	r3, [sp, #28]
 800a8c2:	42b3      	cmp	r3, r6
 800a8c4:	bfbf      	itttt	lt
 800a8c6:	9b07      	ldrlt	r3, [sp, #28]
 800a8c8:	9607      	strlt	r6, [sp, #28]
 800a8ca:	1af2      	sublt	r2, r6, r3
 800a8cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8ce:	bfb6      	itet	lt
 800a8d0:	189b      	addlt	r3, r3, r2
 800a8d2:	1b9e      	subge	r6, r3, r6
 800a8d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	bfb8      	it	lt
 800a8da:	2600      	movlt	r6, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bfb7      	itett	lt
 800a8e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a8e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a8e8:	1a9d      	sublt	r5, r3, r2
 800a8ea:	2300      	movlt	r3, #0
 800a8ec:	e734      	b.n	800a758 <_dtoa_r+0x720>
 800a8ee:	9e07      	ldr	r6, [sp, #28]
 800a8f0:	9d04      	ldr	r5, [sp, #16]
 800a8f2:	9f08      	ldr	r7, [sp, #32]
 800a8f4:	e73b      	b.n	800a76e <_dtoa_r+0x736>
 800a8f6:	9a07      	ldr	r2, [sp, #28]
 800a8f8:	e767      	b.n	800a7ca <_dtoa_r+0x792>
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	dc18      	bgt.n	800a932 <_dtoa_r+0x8fa>
 800a900:	f1ba 0f00 	cmp.w	sl, #0
 800a904:	d115      	bne.n	800a932 <_dtoa_r+0x8fa>
 800a906:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a90a:	b993      	cbnz	r3, 800a932 <_dtoa_r+0x8fa>
 800a90c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a910:	0d1b      	lsrs	r3, r3, #20
 800a912:	051b      	lsls	r3, r3, #20
 800a914:	b183      	cbz	r3, 800a938 <_dtoa_r+0x900>
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	3301      	adds	r3, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	9b05      	ldr	r3, [sp, #20]
 800a91e:	3301      	adds	r3, #1
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f04f 0801 	mov.w	r8, #1
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f47f af6a 	bne.w	800a802 <_dtoa_r+0x7ca>
 800a92e:	2001      	movs	r0, #1
 800a930:	e76f      	b.n	800a812 <_dtoa_r+0x7da>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	e7f6      	b.n	800a926 <_dtoa_r+0x8ee>
 800a938:	4698      	mov	r8, r3
 800a93a:	e7f4      	b.n	800a926 <_dtoa_r+0x8ee>
 800a93c:	f43f af7d 	beq.w	800a83a <_dtoa_r+0x802>
 800a940:	4618      	mov	r0, r3
 800a942:	301c      	adds	r0, #28
 800a944:	e772      	b.n	800a82c <_dtoa_r+0x7f4>
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dc37      	bgt.n	800a9bc <_dtoa_r+0x984>
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	dd34      	ble.n	800a9bc <_dtoa_r+0x984>
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	b96b      	cbnz	r3, 800a976 <_dtoa_r+0x93e>
 800a95a:	4631      	mov	r1, r6
 800a95c:	2205      	movs	r2, #5
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 faa6 	bl	800aeb0 <__multadd>
 800a964:	4601      	mov	r1, r0
 800a966:	4606      	mov	r6, r0
 800a968:	ee18 0a10 	vmov	r0, s16
 800a96c:	f000 fcc0 	bl	800b2f0 <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	f73f adbb 	bgt.w	800a4ec <_dtoa_r+0x4b4>
 800a976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a978:	9d01      	ldr	r5, [sp, #4]
 800a97a:	43db      	mvns	r3, r3
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	4631      	mov	r1, r6
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fa71 	bl	800ae6c <_Bfree>
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	f43f aea4 	beq.w	800a6d8 <_dtoa_r+0x6a0>
 800a990:	f1b8 0f00 	cmp.w	r8, #0
 800a994:	d005      	beq.n	800a9a2 <_dtoa_r+0x96a>
 800a996:	45b8      	cmp	r8, r7
 800a998:	d003      	beq.n	800a9a2 <_dtoa_r+0x96a>
 800a99a:	4641      	mov	r1, r8
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 fa65 	bl	800ae6c <_Bfree>
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fa61 	bl	800ae6c <_Bfree>
 800a9aa:	e695      	b.n	800a6d8 <_dtoa_r+0x6a0>
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	4637      	mov	r7, r6
 800a9b0:	e7e1      	b.n	800a976 <_dtoa_r+0x93e>
 800a9b2:	9700      	str	r7, [sp, #0]
 800a9b4:	4637      	mov	r7, r6
 800a9b6:	e599      	b.n	800a4ec <_dtoa_r+0x4b4>
 800a9b8:	40240000 	.word	0x40240000
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 80ca 	beq.w	800ab58 <_dtoa_r+0xb20>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	9302      	str	r3, [sp, #8]
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	dd05      	ble.n	800a9d8 <_dtoa_r+0x9a0>
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fc1d 	bl	800b210 <__lshift>
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f1b8 0f00 	cmp.w	r8, #0
 800a9dc:	d05b      	beq.n	800aa96 <_dtoa_r+0xa5e>
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 fa03 	bl	800adec <_Balloc>
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b928      	cbnz	r0, 800a9f6 <_dtoa_r+0x9be>
 800a9ea:	4b87      	ldr	r3, [pc, #540]	; (800ac08 <_dtoa_r+0xbd0>)
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9f2:	f7ff bb3b 	b.w	800a06c <_dtoa_r+0x34>
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	3202      	adds	r2, #2
 800a9fa:	0092      	lsls	r2, r2, #2
 800a9fc:	f107 010c 	add.w	r1, r7, #12
 800aa00:	300c      	adds	r0, #12
 800aa02:	f7fe fc96 	bl	8009332 <memcpy>
 800aa06:	2201      	movs	r2, #1
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fc00 	bl	800b210 <__lshift>
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f103 0901 	add.w	r9, r3, #1
 800aa16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	f00a 0301 	and.w	r3, sl, #1
 800aa22:	46b8      	mov	r8, r7
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	4607      	mov	r7, r0
 800aa28:	4631      	mov	r1, r6
 800aa2a:	ee18 0a10 	vmov	r0, s16
 800aa2e:	f7ff fa75 	bl	8009f1c <quorem>
 800aa32:	4641      	mov	r1, r8
 800aa34:	9002      	str	r0, [sp, #8]
 800aa36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa3a:	ee18 0a10 	vmov	r0, s16
 800aa3e:	f000 fc57 	bl	800b2f0 <__mcmp>
 800aa42:	463a      	mov	r2, r7
 800aa44:	9003      	str	r0, [sp, #12]
 800aa46:	4631      	mov	r1, r6
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fc6d 	bl	800b328 <__mdiff>
 800aa4e:	68c2      	ldr	r2, [r0, #12]
 800aa50:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa54:	4605      	mov	r5, r0
 800aa56:	bb02      	cbnz	r2, 800aa9a <_dtoa_r+0xa62>
 800aa58:	4601      	mov	r1, r0
 800aa5a:	ee18 0a10 	vmov	r0, s16
 800aa5e:	f000 fc47 	bl	800b2f0 <__mcmp>
 800aa62:	4602      	mov	r2, r0
 800aa64:	4629      	mov	r1, r5
 800aa66:	4620      	mov	r0, r4
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	f000 f9ff 	bl	800ae6c <_Bfree>
 800aa6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa72:	ea43 0102 	orr.w	r1, r3, r2
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	464d      	mov	r5, r9
 800aa7c:	d10f      	bne.n	800aa9e <_dtoa_r+0xa66>
 800aa7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa82:	d02a      	beq.n	800aada <_dtoa_r+0xaa2>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	dd02      	ble.n	800aa90 <_dtoa_r+0xa58>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa90:	f88b a000 	strb.w	sl, [fp]
 800aa94:	e775      	b.n	800a982 <_dtoa_r+0x94a>
 800aa96:	4638      	mov	r0, r7
 800aa98:	e7ba      	b.n	800aa10 <_dtoa_r+0x9d8>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	e7e2      	b.n	800aa64 <_dtoa_r+0xa2c>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	db04      	blt.n	800aaae <_dtoa_r+0xa76>
 800aaa4:	9906      	ldr	r1, [sp, #24]
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	9904      	ldr	r1, [sp, #16]
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	d122      	bne.n	800aaf4 <_dtoa_r+0xabc>
 800aaae:	2a00      	cmp	r2, #0
 800aab0:	ddee      	ble.n	800aa90 <_dtoa_r+0xa58>
 800aab2:	ee18 1a10 	vmov	r1, s16
 800aab6:	2201      	movs	r2, #1
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fba9 	bl	800b210 <__lshift>
 800aabe:	4631      	mov	r1, r6
 800aac0:	ee08 0a10 	vmov	s16, r0
 800aac4:	f000 fc14 	bl	800b2f0 <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	dc03      	bgt.n	800aad4 <_dtoa_r+0xa9c>
 800aacc:	d1e0      	bne.n	800aa90 <_dtoa_r+0xa58>
 800aace:	f01a 0f01 	tst.w	sl, #1
 800aad2:	d0dd      	beq.n	800aa90 <_dtoa_r+0xa58>
 800aad4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aad8:	d1d7      	bne.n	800aa8a <_dtoa_r+0xa52>
 800aada:	2339      	movs	r3, #57	; 0x39
 800aadc:	f88b 3000 	strb.w	r3, [fp]
 800aae0:	462b      	mov	r3, r5
 800aae2:	461d      	mov	r5, r3
 800aae4:	3b01      	subs	r3, #1
 800aae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aaea:	2a39      	cmp	r2, #57	; 0x39
 800aaec:	d071      	beq.n	800abd2 <_dtoa_r+0xb9a>
 800aaee:	3201      	adds	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e746      	b.n	800a982 <_dtoa_r+0x94a>
 800aaf4:	2a00      	cmp	r2, #0
 800aaf6:	dd07      	ble.n	800ab08 <_dtoa_r+0xad0>
 800aaf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aafc:	d0ed      	beq.n	800aada <_dtoa_r+0xaa2>
 800aafe:	f10a 0301 	add.w	r3, sl, #1
 800ab02:	f88b 3000 	strb.w	r3, [fp]
 800ab06:	e73c      	b.n	800a982 <_dtoa_r+0x94a>
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab0e:	4599      	cmp	r9, r3
 800ab10:	d047      	beq.n	800aba2 <_dtoa_r+0xb6a>
 800ab12:	ee18 1a10 	vmov	r1, s16
 800ab16:	2300      	movs	r3, #0
 800ab18:	220a      	movs	r2, #10
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f9c8 	bl	800aeb0 <__multadd>
 800ab20:	45b8      	cmp	r8, r7
 800ab22:	ee08 0a10 	vmov	s16, r0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	f04f 020a 	mov.w	r2, #10
 800ab2e:	4641      	mov	r1, r8
 800ab30:	4620      	mov	r0, r4
 800ab32:	d106      	bne.n	800ab42 <_dtoa_r+0xb0a>
 800ab34:	f000 f9bc 	bl	800aeb0 <__multadd>
 800ab38:	4680      	mov	r8, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	f109 0901 	add.w	r9, r9, #1
 800ab40:	e772      	b.n	800aa28 <_dtoa_r+0x9f0>
 800ab42:	f000 f9b5 	bl	800aeb0 <__multadd>
 800ab46:	4639      	mov	r1, r7
 800ab48:	4680      	mov	r8, r0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 f9ae 	bl	800aeb0 <__multadd>
 800ab54:	4607      	mov	r7, r0
 800ab56:	e7f1      	b.n	800ab3c <_dtoa_r+0xb04>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	9302      	str	r3, [sp, #8]
 800ab5c:	9d01      	ldr	r5, [sp, #4]
 800ab5e:	ee18 0a10 	vmov	r0, s16
 800ab62:	4631      	mov	r1, r6
 800ab64:	f7ff f9da 	bl	8009f1c <quorem>
 800ab68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ab72:	1aea      	subs	r2, r5, r3
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	4293      	cmp	r3, r2
 800ab78:	dd09      	ble.n	800ab8e <_dtoa_r+0xb56>
 800ab7a:	ee18 1a10 	vmov	r1, s16
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f994 	bl	800aeb0 <__multadd>
 800ab88:	ee08 0a10 	vmov	s16, r0
 800ab8c:	e7e7      	b.n	800ab5e <_dtoa_r+0xb26>
 800ab8e:	9b02      	ldr	r3, [sp, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bfc8      	it	gt
 800ab94:	461d      	movgt	r5, r3
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	bfd8      	it	le
 800ab9a:	2501      	movle	r5, #1
 800ab9c:	441d      	add	r5, r3
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	ee18 1a10 	vmov	r1, s16
 800aba6:	2201      	movs	r2, #1
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 fb31 	bl	800b210 <__lshift>
 800abae:	4631      	mov	r1, r6
 800abb0:	ee08 0a10 	vmov	s16, r0
 800abb4:	f000 fb9c 	bl	800b2f0 <__mcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	dc91      	bgt.n	800aae0 <_dtoa_r+0xaa8>
 800abbc:	d102      	bne.n	800abc4 <_dtoa_r+0xb8c>
 800abbe:	f01a 0f01 	tst.w	sl, #1
 800abc2:	d18d      	bne.n	800aae0 <_dtoa_r+0xaa8>
 800abc4:	462b      	mov	r3, r5
 800abc6:	461d      	mov	r5, r3
 800abc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abcc:	2a30      	cmp	r2, #48	; 0x30
 800abce:	d0fa      	beq.n	800abc6 <_dtoa_r+0xb8e>
 800abd0:	e6d7      	b.n	800a982 <_dtoa_r+0x94a>
 800abd2:	9a01      	ldr	r2, [sp, #4]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d184      	bne.n	800aae2 <_dtoa_r+0xaaa>
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	3301      	adds	r3, #1
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	2331      	movs	r3, #49	; 0x31
 800abe0:	7013      	strb	r3, [r2, #0]
 800abe2:	e6ce      	b.n	800a982 <_dtoa_r+0x94a>
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <_dtoa_r+0xbd4>)
 800abe6:	f7ff ba95 	b.w	800a114 <_dtoa_r+0xdc>
 800abea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abec:	2b00      	cmp	r3, #0
 800abee:	f47f aa6e 	bne.w	800a0ce <_dtoa_r+0x96>
 800abf2:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <_dtoa_r+0xbd8>)
 800abf4:	f7ff ba8e 	b.w	800a114 <_dtoa_r+0xdc>
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dcae      	bgt.n	800ab5c <_dtoa_r+0xb24>
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	f73f aea8 	bgt.w	800a956 <_dtoa_r+0x91e>
 800ac06:	e7a9      	b.n	800ab5c <_dtoa_r+0xb24>
 800ac08:	0800bec7 	.word	0x0800bec7
 800ac0c:	0800be24 	.word	0x0800be24
 800ac10:	0800be48 	.word	0x0800be48

0800ac14 <__sflush_r>:
 800ac14:	898a      	ldrh	r2, [r1, #12]
 800ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	0710      	lsls	r0, r2, #28
 800ac1e:	460c      	mov	r4, r1
 800ac20:	d458      	bmi.n	800acd4 <__sflush_r+0xc0>
 800ac22:	684b      	ldr	r3, [r1, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dc05      	bgt.n	800ac34 <__sflush_r+0x20>
 800ac28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dc02      	bgt.n	800ac34 <__sflush_r+0x20>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d0f9      	beq.n	800ac2e <__sflush_r+0x1a>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac40:	682f      	ldr	r7, [r5, #0]
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	d032      	beq.n	800acac <__sflush_r+0x98>
 800ac46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	075a      	lsls	r2, r3, #29
 800ac4c:	d505      	bpl.n	800ac5a <__sflush_r+0x46>
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	1ac0      	subs	r0, r0, r3
 800ac52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac54:	b10b      	cbz	r3, 800ac5a <__sflush_r+0x46>
 800ac56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac58:	1ac0      	subs	r0, r0, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac60:	6a21      	ldr	r1, [r4, #32]
 800ac62:	4628      	mov	r0, r5
 800ac64:	47b0      	blx	r6
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	d106      	bne.n	800ac7a <__sflush_r+0x66>
 800ac6c:	6829      	ldr	r1, [r5, #0]
 800ac6e:	291d      	cmp	r1, #29
 800ac70:	d82c      	bhi.n	800accc <__sflush_r+0xb8>
 800ac72:	4a2a      	ldr	r2, [pc, #168]	; (800ad1c <__sflush_r+0x108>)
 800ac74:	40ca      	lsrs	r2, r1
 800ac76:	07d6      	lsls	r6, r2, #31
 800ac78:	d528      	bpl.n	800accc <__sflush_r+0xb8>
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	6062      	str	r2, [r4, #4]
 800ac7e:	04d9      	lsls	r1, r3, #19
 800ac80:	6922      	ldr	r2, [r4, #16]
 800ac82:	6022      	str	r2, [r4, #0]
 800ac84:	d504      	bpl.n	800ac90 <__sflush_r+0x7c>
 800ac86:	1c42      	adds	r2, r0, #1
 800ac88:	d101      	bne.n	800ac8e <__sflush_r+0x7a>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b903      	cbnz	r3, 800ac90 <__sflush_r+0x7c>
 800ac8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac92:	602f      	str	r7, [r5, #0]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d0ca      	beq.n	800ac2e <__sflush_r+0x1a>
 800ac98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac9c:	4299      	cmp	r1, r3
 800ac9e:	d002      	beq.n	800aca6 <__sflush_r+0x92>
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 fc3d 	bl	800b520 <_free_r>
 800aca6:	2000      	movs	r0, #0
 800aca8:	6360      	str	r0, [r4, #52]	; 0x34
 800acaa:	e7c1      	b.n	800ac30 <__sflush_r+0x1c>
 800acac:	6a21      	ldr	r1, [r4, #32]
 800acae:	2301      	movs	r3, #1
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b0      	blx	r6
 800acb4:	1c41      	adds	r1, r0, #1
 800acb6:	d1c7      	bne.n	800ac48 <__sflush_r+0x34>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0c4      	beq.n	800ac48 <__sflush_r+0x34>
 800acbe:	2b1d      	cmp	r3, #29
 800acc0:	d001      	beq.n	800acc6 <__sflush_r+0xb2>
 800acc2:	2b16      	cmp	r3, #22
 800acc4:	d101      	bne.n	800acca <__sflush_r+0xb6>
 800acc6:	602f      	str	r7, [r5, #0]
 800acc8:	e7b1      	b.n	800ac2e <__sflush_r+0x1a>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd0:	81a3      	strh	r3, [r4, #12]
 800acd2:	e7ad      	b.n	800ac30 <__sflush_r+0x1c>
 800acd4:	690f      	ldr	r7, [r1, #16]
 800acd6:	2f00      	cmp	r7, #0
 800acd8:	d0a9      	beq.n	800ac2e <__sflush_r+0x1a>
 800acda:	0793      	lsls	r3, r2, #30
 800acdc:	680e      	ldr	r6, [r1, #0]
 800acde:	bf08      	it	eq
 800ace0:	694b      	ldreq	r3, [r1, #20]
 800ace2:	600f      	str	r7, [r1, #0]
 800ace4:	bf18      	it	ne
 800ace6:	2300      	movne	r3, #0
 800ace8:	eba6 0807 	sub.w	r8, r6, r7
 800acec:	608b      	str	r3, [r1, #8]
 800acee:	f1b8 0f00 	cmp.w	r8, #0
 800acf2:	dd9c      	ble.n	800ac2e <__sflush_r+0x1a>
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acf8:	4643      	mov	r3, r8
 800acfa:	463a      	mov	r2, r7
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b0      	blx	r6
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dc06      	bgt.n	800ad12 <__sflush_r+0xfe>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e78e      	b.n	800ac30 <__sflush_r+0x1c>
 800ad12:	4407      	add	r7, r0
 800ad14:	eba8 0800 	sub.w	r8, r8, r0
 800ad18:	e7e9      	b.n	800acee <__sflush_r+0xda>
 800ad1a:	bf00      	nop
 800ad1c:	20400001 	.word	0x20400001

0800ad20 <_fflush_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	690b      	ldr	r3, [r1, #16]
 800ad24:	4605      	mov	r5, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	b913      	cbnz	r3, 800ad30 <_fflush_r+0x10>
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	b118      	cbz	r0, 800ad3a <_fflush_r+0x1a>
 800ad32:	6983      	ldr	r3, [r0, #24]
 800ad34:	b90b      	cbnz	r3, 800ad3a <_fflush_r+0x1a>
 800ad36:	f7fe fa37 	bl	80091a8 <__sinit>
 800ad3a:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <_fflush_r+0x6c>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d11b      	bne.n	800ad78 <_fflush_r+0x58>
 800ad40:	686c      	ldr	r4, [r5, #4]
 800ad42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0ef      	beq.n	800ad2a <_fflush_r+0xa>
 800ad4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad4c:	07d0      	lsls	r0, r2, #31
 800ad4e:	d404      	bmi.n	800ad5a <_fflush_r+0x3a>
 800ad50:	0599      	lsls	r1, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_fflush_r+0x3a>
 800ad54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad56:	f7fe faea 	bl	800932e <__retarget_lock_acquire_recursive>
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	f7ff ff59 	bl	800ac14 <__sflush_r>
 800ad62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad64:	07da      	lsls	r2, r3, #31
 800ad66:	4605      	mov	r5, r0
 800ad68:	d4e0      	bmi.n	800ad2c <_fflush_r+0xc>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	059b      	lsls	r3, r3, #22
 800ad6e:	d4dd      	bmi.n	800ad2c <_fflush_r+0xc>
 800ad70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad72:	f7fe fadd 	bl	8009330 <__retarget_lock_release_recursive>
 800ad76:	e7d9      	b.n	800ad2c <_fflush_r+0xc>
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <_fflush_r+0x70>)
 800ad7a:	429c      	cmp	r4, r3
 800ad7c:	d101      	bne.n	800ad82 <_fflush_r+0x62>
 800ad7e:	68ac      	ldr	r4, [r5, #8]
 800ad80:	e7df      	b.n	800ad42 <_fflush_r+0x22>
 800ad82:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <_fflush_r+0x74>)
 800ad84:	429c      	cmp	r4, r3
 800ad86:	bf08      	it	eq
 800ad88:	68ec      	ldreq	r4, [r5, #12]
 800ad8a:	e7da      	b.n	800ad42 <_fflush_r+0x22>
 800ad8c:	0800bdd0 	.word	0x0800bdd0
 800ad90:	0800bdf0 	.word	0x0800bdf0
 800ad94:	0800bdb0 	.word	0x0800bdb0

0800ad98 <_localeconv_r>:
 800ad98:	4800      	ldr	r0, [pc, #0]	; (800ad9c <_localeconv_r+0x4>)
 800ad9a:	4770      	bx	lr
 800ad9c:	20000164 	.word	0x20000164

0800ada0 <_lseek_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	; (800adc0 <_lseek_r+0x20>)
 800ada4:	4604      	mov	r4, r0
 800ada6:	4608      	mov	r0, r1
 800ada8:	4611      	mov	r1, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	602a      	str	r2, [r5, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7f8 fb04 	bl	80033bc <_lseek>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_lseek_r+0x1e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_lseek_r+0x1e>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20004d40 	.word	0x20004d40

0800adc4 <malloc>:
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <malloc+0xc>)
 800adc6:	4601      	mov	r1, r0
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f7fe bae9 	b.w	80093a0 <_malloc_r>
 800adce:	bf00      	nop
 800add0:	20000010 	.word	0x20000010

0800add4 <__malloc_lock>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__malloc_lock+0x8>)
 800add6:	f7fe baaa 	b.w	800932e <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	20004d34 	.word	0x20004d34

0800ade0 <__malloc_unlock>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__malloc_unlock+0x8>)
 800ade2:	f7fe baa5 	b.w	8009330 <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	20004d34 	.word	0x20004d34

0800adec <_Balloc>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	b976      	cbnz	r6, 800ae14 <_Balloc+0x28>
 800adf6:	2010      	movs	r0, #16
 800adf8:	f7ff ffe4 	bl	800adc4 <malloc>
 800adfc:	4602      	mov	r2, r0
 800adfe:	6260      	str	r0, [r4, #36]	; 0x24
 800ae00:	b920      	cbnz	r0, 800ae0c <_Balloc+0x20>
 800ae02:	4b18      	ldr	r3, [pc, #96]	; (800ae64 <_Balloc+0x78>)
 800ae04:	4818      	ldr	r0, [pc, #96]	; (800ae68 <_Balloc+0x7c>)
 800ae06:	2166      	movs	r1, #102	; 0x66
 800ae08:	f000 fbe8 	bl	800b5dc <__assert_func>
 800ae0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae10:	6006      	str	r6, [r0, #0]
 800ae12:	60c6      	str	r6, [r0, #12]
 800ae14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae16:	68f3      	ldr	r3, [r6, #12]
 800ae18:	b183      	cbz	r3, 800ae3c <_Balloc+0x50>
 800ae1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae22:	b9b8      	cbnz	r0, 800ae54 <_Balloc+0x68>
 800ae24:	2101      	movs	r1, #1
 800ae26:	fa01 f605 	lsl.w	r6, r1, r5
 800ae2a:	1d72      	adds	r2, r6, #5
 800ae2c:	0092      	lsls	r2, r2, #2
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fb60 	bl	800b4f4 <_calloc_r>
 800ae34:	b160      	cbz	r0, 800ae50 <_Balloc+0x64>
 800ae36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae3a:	e00e      	b.n	800ae5a <_Balloc+0x6e>
 800ae3c:	2221      	movs	r2, #33	; 0x21
 800ae3e:	2104      	movs	r1, #4
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fb57 	bl	800b4f4 <_calloc_r>
 800ae46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae48:	60f0      	str	r0, [r6, #12]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e4      	bne.n	800ae1a <_Balloc+0x2e>
 800ae50:	2000      	movs	r0, #0
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	6802      	ldr	r2, [r0, #0]
 800ae56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae60:	e7f7      	b.n	800ae52 <_Balloc+0x66>
 800ae62:	bf00      	nop
 800ae64:	0800be55 	.word	0x0800be55
 800ae68:	0800bed8 	.word	0x0800bed8

0800ae6c <_Bfree>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae70:	4605      	mov	r5, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b976      	cbnz	r6, 800ae94 <_Bfree+0x28>
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7ff ffa4 	bl	800adc4 <malloc>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ae80:	b920      	cbnz	r0, 800ae8c <_Bfree+0x20>
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <_Bfree+0x3c>)
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <_Bfree+0x40>)
 800ae86:	218a      	movs	r1, #138	; 0x8a
 800ae88:	f000 fba8 	bl	800b5dc <__assert_func>
 800ae8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae90:	6006      	str	r6, [r0, #0]
 800ae92:	60c6      	str	r6, [r0, #12]
 800ae94:	b13c      	cbz	r4, 800aea6 <_Bfree+0x3a>
 800ae96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae98:	6862      	ldr	r2, [r4, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aea0:	6021      	str	r1, [r4, #0]
 800aea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	0800be55 	.word	0x0800be55
 800aeac:	0800bed8 	.word	0x0800bed8

0800aeb0 <__multadd>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	690d      	ldr	r5, [r1, #16]
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	460c      	mov	r4, r1
 800aeba:	461e      	mov	r6, r3
 800aebc:	f101 0c14 	add.w	ip, r1, #20
 800aec0:	2000      	movs	r0, #0
 800aec2:	f8dc 3000 	ldr.w	r3, [ip]
 800aec6:	b299      	uxth	r1, r3
 800aec8:	fb02 6101 	mla	r1, r2, r1, r6
 800aecc:	0c1e      	lsrs	r6, r3, #16
 800aece:	0c0b      	lsrs	r3, r1, #16
 800aed0:	fb02 3306 	mla	r3, r2, r6, r3
 800aed4:	b289      	uxth	r1, r1
 800aed6:	3001      	adds	r0, #1
 800aed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aedc:	4285      	cmp	r5, r0
 800aede:	f84c 1b04 	str.w	r1, [ip], #4
 800aee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aee6:	dcec      	bgt.n	800aec2 <__multadd+0x12>
 800aee8:	b30e      	cbz	r6, 800af2e <__multadd+0x7e>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	dc19      	bgt.n	800af24 <__multadd+0x74>
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	4638      	mov	r0, r7
 800aef4:	3101      	adds	r1, #1
 800aef6:	f7ff ff79 	bl	800adec <_Balloc>
 800aefa:	4680      	mov	r8, r0
 800aefc:	b928      	cbnz	r0, 800af0a <__multadd+0x5a>
 800aefe:	4602      	mov	r2, r0
 800af00:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <__multadd+0x84>)
 800af02:	480d      	ldr	r0, [pc, #52]	; (800af38 <__multadd+0x88>)
 800af04:	21b5      	movs	r1, #181	; 0xb5
 800af06:	f000 fb69 	bl	800b5dc <__assert_func>
 800af0a:	6922      	ldr	r2, [r4, #16]
 800af0c:	3202      	adds	r2, #2
 800af0e:	f104 010c 	add.w	r1, r4, #12
 800af12:	0092      	lsls	r2, r2, #2
 800af14:	300c      	adds	r0, #12
 800af16:	f7fe fa0c 	bl	8009332 <memcpy>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff ffa5 	bl	800ae6c <_Bfree>
 800af22:	4644      	mov	r4, r8
 800af24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af28:	3501      	adds	r5, #1
 800af2a:	615e      	str	r6, [r3, #20]
 800af2c:	6125      	str	r5, [r4, #16]
 800af2e:	4620      	mov	r0, r4
 800af30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af34:	0800bec7 	.word	0x0800bec7
 800af38:	0800bed8 	.word	0x0800bed8

0800af3c <__hi0bits>:
 800af3c:	0c03      	lsrs	r3, r0, #16
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	b9d3      	cbnz	r3, 800af78 <__hi0bits+0x3c>
 800af42:	0400      	lsls	r0, r0, #16
 800af44:	2310      	movs	r3, #16
 800af46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af4a:	bf04      	itt	eq
 800af4c:	0200      	lsleq	r0, r0, #8
 800af4e:	3308      	addeq	r3, #8
 800af50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af54:	bf04      	itt	eq
 800af56:	0100      	lsleq	r0, r0, #4
 800af58:	3304      	addeq	r3, #4
 800af5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af5e:	bf04      	itt	eq
 800af60:	0080      	lsleq	r0, r0, #2
 800af62:	3302      	addeq	r3, #2
 800af64:	2800      	cmp	r0, #0
 800af66:	db05      	blt.n	800af74 <__hi0bits+0x38>
 800af68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af6c:	f103 0301 	add.w	r3, r3, #1
 800af70:	bf08      	it	eq
 800af72:	2320      	moveq	r3, #32
 800af74:	4618      	mov	r0, r3
 800af76:	4770      	bx	lr
 800af78:	2300      	movs	r3, #0
 800af7a:	e7e4      	b.n	800af46 <__hi0bits+0xa>

0800af7c <__lo0bits>:
 800af7c:	6803      	ldr	r3, [r0, #0]
 800af7e:	f013 0207 	ands.w	r2, r3, #7
 800af82:	4601      	mov	r1, r0
 800af84:	d00b      	beq.n	800af9e <__lo0bits+0x22>
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d423      	bmi.n	800afd2 <__lo0bits+0x56>
 800af8a:	0798      	lsls	r0, r3, #30
 800af8c:	bf49      	itett	mi
 800af8e:	085b      	lsrmi	r3, r3, #1
 800af90:	089b      	lsrpl	r3, r3, #2
 800af92:	2001      	movmi	r0, #1
 800af94:	600b      	strmi	r3, [r1, #0]
 800af96:	bf5c      	itt	pl
 800af98:	600b      	strpl	r3, [r1, #0]
 800af9a:	2002      	movpl	r0, #2
 800af9c:	4770      	bx	lr
 800af9e:	b298      	uxth	r0, r3
 800afa0:	b9a8      	cbnz	r0, 800afce <__lo0bits+0x52>
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	2010      	movs	r0, #16
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	b90a      	cbnz	r2, 800afae <__lo0bits+0x32>
 800afaa:	3008      	adds	r0, #8
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	071a      	lsls	r2, r3, #28
 800afb0:	bf04      	itt	eq
 800afb2:	091b      	lsreq	r3, r3, #4
 800afb4:	3004      	addeq	r0, #4
 800afb6:	079a      	lsls	r2, r3, #30
 800afb8:	bf04      	itt	eq
 800afba:	089b      	lsreq	r3, r3, #2
 800afbc:	3002      	addeq	r0, #2
 800afbe:	07da      	lsls	r2, r3, #31
 800afc0:	d403      	bmi.n	800afca <__lo0bits+0x4e>
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	f100 0001 	add.w	r0, r0, #1
 800afc8:	d005      	beq.n	800afd6 <__lo0bits+0x5a>
 800afca:	600b      	str	r3, [r1, #0]
 800afcc:	4770      	bx	lr
 800afce:	4610      	mov	r0, r2
 800afd0:	e7e9      	b.n	800afa6 <__lo0bits+0x2a>
 800afd2:	2000      	movs	r0, #0
 800afd4:	4770      	bx	lr
 800afd6:	2020      	movs	r0, #32
 800afd8:	4770      	bx	lr
	...

0800afdc <__i2b>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	2101      	movs	r1, #1
 800afe2:	f7ff ff03 	bl	800adec <_Balloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__i2b+0x1a>
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <__i2b+0x24>)
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <__i2b+0x28>)
 800afee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aff2:	f000 faf3 	bl	800b5dc <__assert_func>
 800aff6:	2301      	movs	r3, #1
 800aff8:	6144      	str	r4, [r0, #20]
 800affa:	6103      	str	r3, [r0, #16]
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop
 800b000:	0800bec7 	.word	0x0800bec7
 800b004:	0800bed8 	.word	0x0800bed8

0800b008 <__multiply>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4691      	mov	r9, r2
 800b00e:	690a      	ldr	r2, [r1, #16]
 800b010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b014:	429a      	cmp	r2, r3
 800b016:	bfb8      	it	lt
 800b018:	460b      	movlt	r3, r1
 800b01a:	460c      	mov	r4, r1
 800b01c:	bfbc      	itt	lt
 800b01e:	464c      	movlt	r4, r9
 800b020:	4699      	movlt	r9, r3
 800b022:	6927      	ldr	r7, [r4, #16]
 800b024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b028:	68a3      	ldr	r3, [r4, #8]
 800b02a:	6861      	ldr	r1, [r4, #4]
 800b02c:	eb07 060a 	add.w	r6, r7, sl
 800b030:	42b3      	cmp	r3, r6
 800b032:	b085      	sub	sp, #20
 800b034:	bfb8      	it	lt
 800b036:	3101      	addlt	r1, #1
 800b038:	f7ff fed8 	bl	800adec <_Balloc>
 800b03c:	b930      	cbnz	r0, 800b04c <__multiply+0x44>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b44      	ldr	r3, [pc, #272]	; (800b154 <__multiply+0x14c>)
 800b042:	4845      	ldr	r0, [pc, #276]	; (800b158 <__multiply+0x150>)
 800b044:	f240 115d 	movw	r1, #349	; 0x15d
 800b048:	f000 fac8 	bl	800b5dc <__assert_func>
 800b04c:	f100 0514 	add.w	r5, r0, #20
 800b050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b054:	462b      	mov	r3, r5
 800b056:	2200      	movs	r2, #0
 800b058:	4543      	cmp	r3, r8
 800b05a:	d321      	bcc.n	800b0a0 <__multiply+0x98>
 800b05c:	f104 0314 	add.w	r3, r4, #20
 800b060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b064:	f109 0314 	add.w	r3, r9, #20
 800b068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	1b3a      	subs	r2, r7, r4
 800b070:	3a15      	subs	r2, #21
 800b072:	f022 0203 	bic.w	r2, r2, #3
 800b076:	3204      	adds	r2, #4
 800b078:	f104 0115 	add.w	r1, r4, #21
 800b07c:	428f      	cmp	r7, r1
 800b07e:	bf38      	it	cc
 800b080:	2204      	movcc	r2, #4
 800b082:	9201      	str	r2, [sp, #4]
 800b084:	9a02      	ldr	r2, [sp, #8]
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d80c      	bhi.n	800b0a6 <__multiply+0x9e>
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	dd03      	ble.n	800b098 <__multiply+0x90>
 800b090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b094:	2b00      	cmp	r3, #0
 800b096:	d05a      	beq.n	800b14e <__multiply+0x146>
 800b098:	6106      	str	r6, [r0, #16]
 800b09a:	b005      	add	sp, #20
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	f843 2b04 	str.w	r2, [r3], #4
 800b0a4:	e7d8      	b.n	800b058 <__multiply+0x50>
 800b0a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0aa:	f1ba 0f00 	cmp.w	sl, #0
 800b0ae:	d024      	beq.n	800b0fa <__multiply+0xf2>
 800b0b0:	f104 0e14 	add.w	lr, r4, #20
 800b0b4:	46a9      	mov	r9, r5
 800b0b6:	f04f 0c00 	mov.w	ip, #0
 800b0ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0be:	f8d9 1000 	ldr.w	r1, [r9]
 800b0c2:	fa1f fb82 	uxth.w	fp, r2
 800b0c6:	b289      	uxth	r1, r1
 800b0c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d4:	4461      	add	r1, ip
 800b0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0e2:	b289      	uxth	r1, r1
 800b0e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0e8:	4577      	cmp	r7, lr
 800b0ea:	f849 1b04 	str.w	r1, [r9], #4
 800b0ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0f2:	d8e2      	bhi.n	800b0ba <__multiply+0xb2>
 800b0f4:	9a01      	ldr	r2, [sp, #4]
 800b0f6:	f845 c002 	str.w	ip, [r5, r2]
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b100:	3304      	adds	r3, #4
 800b102:	f1b9 0f00 	cmp.w	r9, #0
 800b106:	d020      	beq.n	800b14a <__multiply+0x142>
 800b108:	6829      	ldr	r1, [r5, #0]
 800b10a:	f104 0c14 	add.w	ip, r4, #20
 800b10e:	46ae      	mov	lr, r5
 800b110:	f04f 0a00 	mov.w	sl, #0
 800b114:	f8bc b000 	ldrh.w	fp, [ip]
 800b118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b11c:	fb09 220b 	mla	r2, r9, fp, r2
 800b120:	4492      	add	sl, r2
 800b122:	b289      	uxth	r1, r1
 800b124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b128:	f84e 1b04 	str.w	r1, [lr], #4
 800b12c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b130:	f8be 1000 	ldrh.w	r1, [lr]
 800b134:	0c12      	lsrs	r2, r2, #16
 800b136:	fb09 1102 	mla	r1, r9, r2, r1
 800b13a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b13e:	4567      	cmp	r7, ip
 800b140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b144:	d8e6      	bhi.n	800b114 <__multiply+0x10c>
 800b146:	9a01      	ldr	r2, [sp, #4]
 800b148:	50a9      	str	r1, [r5, r2]
 800b14a:	3504      	adds	r5, #4
 800b14c:	e79a      	b.n	800b084 <__multiply+0x7c>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e79c      	b.n	800b08c <__multiply+0x84>
 800b152:	bf00      	nop
 800b154:	0800bec7 	.word	0x0800bec7
 800b158:	0800bed8 	.word	0x0800bed8

0800b15c <__pow5mult>:
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	4615      	mov	r5, r2
 800b162:	f012 0203 	ands.w	r2, r2, #3
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	d007      	beq.n	800b17c <__pow5mult+0x20>
 800b16c:	4c25      	ldr	r4, [pc, #148]	; (800b204 <__pow5mult+0xa8>)
 800b16e:	3a01      	subs	r2, #1
 800b170:	2300      	movs	r3, #0
 800b172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b176:	f7ff fe9b 	bl	800aeb0 <__multadd>
 800b17a:	4607      	mov	r7, r0
 800b17c:	10ad      	asrs	r5, r5, #2
 800b17e:	d03d      	beq.n	800b1fc <__pow5mult+0xa0>
 800b180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b182:	b97c      	cbnz	r4, 800b1a4 <__pow5mult+0x48>
 800b184:	2010      	movs	r0, #16
 800b186:	f7ff fe1d 	bl	800adc4 <malloc>
 800b18a:	4602      	mov	r2, r0
 800b18c:	6270      	str	r0, [r6, #36]	; 0x24
 800b18e:	b928      	cbnz	r0, 800b19c <__pow5mult+0x40>
 800b190:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <__pow5mult+0xac>)
 800b192:	481e      	ldr	r0, [pc, #120]	; (800b20c <__pow5mult+0xb0>)
 800b194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b198:	f000 fa20 	bl	800b5dc <__assert_func>
 800b19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1a0:	6004      	str	r4, [r0, #0]
 800b1a2:	60c4      	str	r4, [r0, #12]
 800b1a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1ac:	b94c      	cbnz	r4, 800b1c2 <__pow5mult+0x66>
 800b1ae:	f240 2171 	movw	r1, #625	; 0x271
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ff12 	bl	800afdc <__i2b>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1be:	4604      	mov	r4, r0
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	07eb      	lsls	r3, r5, #31
 800b1c8:	d50a      	bpl.n	800b1e0 <__pow5mult+0x84>
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff ff1a 	bl	800b008 <__multiply>
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff fe47 	bl	800ae6c <_Bfree>
 800b1de:	4647      	mov	r7, r8
 800b1e0:	106d      	asrs	r5, r5, #1
 800b1e2:	d00b      	beq.n	800b1fc <__pow5mult+0xa0>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	b938      	cbnz	r0, 800b1f8 <__pow5mult+0x9c>
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f7ff ff0b 	bl	800b008 <__multiply>
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	f8c0 9000 	str.w	r9, [r0]
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	e7e4      	b.n	800b1c6 <__pow5mult+0x6a>
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	bf00      	nop
 800b204:	0800c028 	.word	0x0800c028
 800b208:	0800be55 	.word	0x0800be55
 800b20c:	0800bed8 	.word	0x0800bed8

0800b210 <__lshift>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	460c      	mov	r4, r1
 800b216:	6849      	ldr	r1, [r1, #4]
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b21e:	68a3      	ldr	r3, [r4, #8]
 800b220:	4607      	mov	r7, r0
 800b222:	4691      	mov	r9, r2
 800b224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b228:	f108 0601 	add.w	r6, r8, #1
 800b22c:	42b3      	cmp	r3, r6
 800b22e:	db0b      	blt.n	800b248 <__lshift+0x38>
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff fddb 	bl	800adec <_Balloc>
 800b236:	4605      	mov	r5, r0
 800b238:	b948      	cbnz	r0, 800b24e <__lshift+0x3e>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b2a      	ldr	r3, [pc, #168]	; (800b2e8 <__lshift+0xd8>)
 800b23e:	482b      	ldr	r0, [pc, #172]	; (800b2ec <__lshift+0xdc>)
 800b240:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b244:	f000 f9ca 	bl	800b5dc <__assert_func>
 800b248:	3101      	adds	r1, #1
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	e7ee      	b.n	800b22c <__lshift+0x1c>
 800b24e:	2300      	movs	r3, #0
 800b250:	f100 0114 	add.w	r1, r0, #20
 800b254:	f100 0210 	add.w	r2, r0, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	4553      	cmp	r3, sl
 800b25c:	db37      	blt.n	800b2ce <__lshift+0xbe>
 800b25e:	6920      	ldr	r0, [r4, #16]
 800b260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b264:	f104 0314 	add.w	r3, r4, #20
 800b268:	f019 091f 	ands.w	r9, r9, #31
 800b26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b274:	d02f      	beq.n	800b2d6 <__lshift+0xc6>
 800b276:	f1c9 0e20 	rsb	lr, r9, #32
 800b27a:	468a      	mov	sl, r1
 800b27c:	f04f 0c00 	mov.w	ip, #0
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	fa02 f209 	lsl.w	r2, r2, r9
 800b286:	ea42 020c 	orr.w	r2, r2, ip
 800b28a:	f84a 2b04 	str.w	r2, [sl], #4
 800b28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b292:	4298      	cmp	r0, r3
 800b294:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b298:	d8f2      	bhi.n	800b280 <__lshift+0x70>
 800b29a:	1b03      	subs	r3, r0, r4
 800b29c:	3b15      	subs	r3, #21
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	f104 0215 	add.w	r2, r4, #21
 800b2a8:	4290      	cmp	r0, r2
 800b2aa:	bf38      	it	cc
 800b2ac:	2304      	movcc	r3, #4
 800b2ae:	f841 c003 	str.w	ip, [r1, r3]
 800b2b2:	f1bc 0f00 	cmp.w	ip, #0
 800b2b6:	d001      	beq.n	800b2bc <__lshift+0xac>
 800b2b8:	f108 0602 	add.w	r6, r8, #2
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4638      	mov	r0, r7
 800b2c0:	612e      	str	r6, [r5, #16]
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f7ff fdd2 	bl	800ae6c <_Bfree>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	e7c1      	b.n	800b25a <__lshift+0x4a>
 800b2d6:	3904      	subs	r1, #4
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2e0:	4298      	cmp	r0, r3
 800b2e2:	d8f9      	bhi.n	800b2d8 <__lshift+0xc8>
 800b2e4:	e7ea      	b.n	800b2bc <__lshift+0xac>
 800b2e6:	bf00      	nop
 800b2e8:	0800bec7 	.word	0x0800bec7
 800b2ec:	0800bed8 	.word	0x0800bed8

0800b2f0 <__mcmp>:
 800b2f0:	b530      	push	{r4, r5, lr}
 800b2f2:	6902      	ldr	r2, [r0, #16]
 800b2f4:	690c      	ldr	r4, [r1, #16]
 800b2f6:	1b12      	subs	r2, r2, r4
 800b2f8:	d10e      	bne.n	800b318 <__mcmp+0x28>
 800b2fa:	f100 0314 	add.w	r3, r0, #20
 800b2fe:	3114      	adds	r1, #20
 800b300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b30c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b310:	42a5      	cmp	r5, r4
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	d305      	bcc.n	800b322 <__mcmp+0x32>
 800b316:	2201      	movs	r2, #1
 800b318:	4610      	mov	r0, r2
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	4283      	cmp	r3, r0
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fa      	b.n	800b318 <__mcmp+0x28>
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	e7f7      	b.n	800b318 <__mcmp+0x28>

0800b328 <__mdiff>:
 800b328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	4611      	mov	r1, r2
 800b332:	4620      	mov	r0, r4
 800b334:	4690      	mov	r8, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d110      	bne.n	800b360 <__mdiff+0x38>
 800b33e:	4629      	mov	r1, r5
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fd53 	bl	800adec <_Balloc>
 800b346:	b930      	cbnz	r0, 800b356 <__mdiff+0x2e>
 800b348:	4b3a      	ldr	r3, [pc, #232]	; (800b434 <__mdiff+0x10c>)
 800b34a:	4602      	mov	r2, r0
 800b34c:	f240 2132 	movw	r1, #562	; 0x232
 800b350:	4839      	ldr	r0, [pc, #228]	; (800b438 <__mdiff+0x110>)
 800b352:	f000 f943 	bl	800b5dc <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b35c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	bfa4      	itt	ge
 800b362:	4643      	movge	r3, r8
 800b364:	46a0      	movge	r8, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b36c:	bfa6      	itte	ge
 800b36e:	461c      	movge	r4, r3
 800b370:	2500      	movge	r5, #0
 800b372:	2501      	movlt	r5, #1
 800b374:	f7ff fd3a 	bl	800adec <_Balloc>
 800b378:	b920      	cbnz	r0, 800b384 <__mdiff+0x5c>
 800b37a:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <__mdiff+0x10c>)
 800b37c:	4602      	mov	r2, r0
 800b37e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b382:	e7e5      	b.n	800b350 <__mdiff+0x28>
 800b384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b388:	6926      	ldr	r6, [r4, #16]
 800b38a:	60c5      	str	r5, [r0, #12]
 800b38c:	f104 0914 	add.w	r9, r4, #20
 800b390:	f108 0514 	add.w	r5, r8, #20
 800b394:	f100 0e14 	add.w	lr, r0, #20
 800b398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b39c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3a0:	f108 0210 	add.w	r2, r8, #16
 800b3a4:	46f2      	mov	sl, lr
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3b0:	fa1f f883 	uxth.w	r8, r3
 800b3b4:	fa11 f18b 	uxtah	r1, r1, fp
 800b3b8:	0c1b      	lsrs	r3, r3, #16
 800b3ba:	eba1 0808 	sub.w	r8, r1, r8
 800b3be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3c6:	fa1f f888 	uxth.w	r8, r8
 800b3ca:	1419      	asrs	r1, r3, #16
 800b3cc:	454e      	cmp	r6, r9
 800b3ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b3d6:	d8e7      	bhi.n	800b3a8 <__mdiff+0x80>
 800b3d8:	1b33      	subs	r3, r6, r4
 800b3da:	3b15      	subs	r3, #21
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	3415      	adds	r4, #21
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	bf38      	it	cc
 800b3e8:	2304      	movcc	r3, #4
 800b3ea:	441d      	add	r5, r3
 800b3ec:	4473      	add	r3, lr
 800b3ee:	469e      	mov	lr, r3
 800b3f0:	462e      	mov	r6, r5
 800b3f2:	4566      	cmp	r6, ip
 800b3f4:	d30e      	bcc.n	800b414 <__mdiff+0xec>
 800b3f6:	f10c 0203 	add.w	r2, ip, #3
 800b3fa:	1b52      	subs	r2, r2, r5
 800b3fc:	f022 0203 	bic.w	r2, r2, #3
 800b400:	3d03      	subs	r5, #3
 800b402:	45ac      	cmp	ip, r5
 800b404:	bf38      	it	cc
 800b406:	2200      	movcc	r2, #0
 800b408:	441a      	add	r2, r3
 800b40a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b40e:	b17b      	cbz	r3, 800b430 <__mdiff+0x108>
 800b410:	6107      	str	r7, [r0, #16]
 800b412:	e7a3      	b.n	800b35c <__mdiff+0x34>
 800b414:	f856 8b04 	ldr.w	r8, [r6], #4
 800b418:	fa11 f288 	uxtah	r2, r1, r8
 800b41c:	1414      	asrs	r4, r2, #16
 800b41e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b422:	b292      	uxth	r2, r2
 800b424:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b428:	f84e 2b04 	str.w	r2, [lr], #4
 800b42c:	1421      	asrs	r1, r4, #16
 800b42e:	e7e0      	b.n	800b3f2 <__mdiff+0xca>
 800b430:	3f01      	subs	r7, #1
 800b432:	e7ea      	b.n	800b40a <__mdiff+0xe2>
 800b434:	0800bec7 	.word	0x0800bec7
 800b438:	0800bed8 	.word	0x0800bed8

0800b43c <__d2b>:
 800b43c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4689      	mov	r9, r1
 800b442:	2101      	movs	r1, #1
 800b444:	ec57 6b10 	vmov	r6, r7, d0
 800b448:	4690      	mov	r8, r2
 800b44a:	f7ff fccf 	bl	800adec <_Balloc>
 800b44e:	4604      	mov	r4, r0
 800b450:	b930      	cbnz	r0, 800b460 <__d2b+0x24>
 800b452:	4602      	mov	r2, r0
 800b454:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <__d2b+0xb0>)
 800b456:	4826      	ldr	r0, [pc, #152]	; (800b4f0 <__d2b+0xb4>)
 800b458:	f240 310a 	movw	r1, #778	; 0x30a
 800b45c:	f000 f8be 	bl	800b5dc <__assert_func>
 800b460:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b464:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b468:	bb35      	cbnz	r5, 800b4b8 <__d2b+0x7c>
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	d028      	beq.n	800b4c2 <__d2b+0x86>
 800b470:	4668      	mov	r0, sp
 800b472:	9600      	str	r6, [sp, #0]
 800b474:	f7ff fd82 	bl	800af7c <__lo0bits>
 800b478:	9900      	ldr	r1, [sp, #0]
 800b47a:	b300      	cbz	r0, 800b4be <__d2b+0x82>
 800b47c:	9a01      	ldr	r2, [sp, #4]
 800b47e:	f1c0 0320 	rsb	r3, r0, #32
 800b482:	fa02 f303 	lsl.w	r3, r2, r3
 800b486:	430b      	orrs	r3, r1
 800b488:	40c2      	lsrs	r2, r0
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	9201      	str	r2, [sp, #4]
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	61a3      	str	r3, [r4, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bf14      	ite	ne
 800b496:	2202      	movne	r2, #2
 800b498:	2201      	moveq	r2, #1
 800b49a:	6122      	str	r2, [r4, #16]
 800b49c:	b1d5      	cbz	r5, 800b4d4 <__d2b+0x98>
 800b49e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4a2:	4405      	add	r5, r0
 800b4a4:	f8c9 5000 	str.w	r5, [r9]
 800b4a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4ac:	f8c8 0000 	str.w	r0, [r8]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	b003      	add	sp, #12
 800b4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4bc:	e7d5      	b.n	800b46a <__d2b+0x2e>
 800b4be:	6161      	str	r1, [r4, #20]
 800b4c0:	e7e5      	b.n	800b48e <__d2b+0x52>
 800b4c2:	a801      	add	r0, sp, #4
 800b4c4:	f7ff fd5a 	bl	800af7c <__lo0bits>
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	6163      	str	r3, [r4, #20]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	6122      	str	r2, [r4, #16]
 800b4d0:	3020      	adds	r0, #32
 800b4d2:	e7e3      	b.n	800b49c <__d2b+0x60>
 800b4d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4dc:	f8c9 0000 	str.w	r0, [r9]
 800b4e0:	6918      	ldr	r0, [r3, #16]
 800b4e2:	f7ff fd2b 	bl	800af3c <__hi0bits>
 800b4e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4ea:	e7df      	b.n	800b4ac <__d2b+0x70>
 800b4ec:	0800bec7 	.word	0x0800bec7
 800b4f0:	0800bed8 	.word	0x0800bed8

0800b4f4 <_calloc_r>:
 800b4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f6:	fba1 2402 	umull	r2, r4, r1, r2
 800b4fa:	b94c      	cbnz	r4, 800b510 <_calloc_r+0x1c>
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	9201      	str	r2, [sp, #4]
 800b500:	f7fd ff4e 	bl	80093a0 <_malloc_r>
 800b504:	9a01      	ldr	r2, [sp, #4]
 800b506:	4605      	mov	r5, r0
 800b508:	b930      	cbnz	r0, 800b518 <_calloc_r+0x24>
 800b50a:	4628      	mov	r0, r5
 800b50c:	b003      	add	sp, #12
 800b50e:	bd30      	pop	{r4, r5, pc}
 800b510:	220c      	movs	r2, #12
 800b512:	6002      	str	r2, [r0, #0]
 800b514:	2500      	movs	r5, #0
 800b516:	e7f8      	b.n	800b50a <_calloc_r+0x16>
 800b518:	4621      	mov	r1, r4
 800b51a:	f7fd ff18 	bl	800934e <memset>
 800b51e:	e7f4      	b.n	800b50a <_calloc_r+0x16>

0800b520 <_free_r>:
 800b520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b522:	2900      	cmp	r1, #0
 800b524:	d044      	beq.n	800b5b0 <_free_r+0x90>
 800b526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b52a:	9001      	str	r0, [sp, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f1a1 0404 	sub.w	r4, r1, #4
 800b532:	bfb8      	it	lt
 800b534:	18e4      	addlt	r4, r4, r3
 800b536:	f7ff fc4d 	bl	800add4 <__malloc_lock>
 800b53a:	4a1e      	ldr	r2, [pc, #120]	; (800b5b4 <_free_r+0x94>)
 800b53c:	9801      	ldr	r0, [sp, #4]
 800b53e:	6813      	ldr	r3, [r2, #0]
 800b540:	b933      	cbnz	r3, 800b550 <_free_r+0x30>
 800b542:	6063      	str	r3, [r4, #4]
 800b544:	6014      	str	r4, [r2, #0]
 800b546:	b003      	add	sp, #12
 800b548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b54c:	f7ff bc48 	b.w	800ade0 <__malloc_unlock>
 800b550:	42a3      	cmp	r3, r4
 800b552:	d908      	bls.n	800b566 <_free_r+0x46>
 800b554:	6825      	ldr	r5, [r4, #0]
 800b556:	1961      	adds	r1, r4, r5
 800b558:	428b      	cmp	r3, r1
 800b55a:	bf01      	itttt	eq
 800b55c:	6819      	ldreq	r1, [r3, #0]
 800b55e:	685b      	ldreq	r3, [r3, #4]
 800b560:	1949      	addeq	r1, r1, r5
 800b562:	6021      	streq	r1, [r4, #0]
 800b564:	e7ed      	b.n	800b542 <_free_r+0x22>
 800b566:	461a      	mov	r2, r3
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	b10b      	cbz	r3, 800b570 <_free_r+0x50>
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d9fa      	bls.n	800b566 <_free_r+0x46>
 800b570:	6811      	ldr	r1, [r2, #0]
 800b572:	1855      	adds	r5, r2, r1
 800b574:	42a5      	cmp	r5, r4
 800b576:	d10b      	bne.n	800b590 <_free_r+0x70>
 800b578:	6824      	ldr	r4, [r4, #0]
 800b57a:	4421      	add	r1, r4
 800b57c:	1854      	adds	r4, r2, r1
 800b57e:	42a3      	cmp	r3, r4
 800b580:	6011      	str	r1, [r2, #0]
 800b582:	d1e0      	bne.n	800b546 <_free_r+0x26>
 800b584:	681c      	ldr	r4, [r3, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	6053      	str	r3, [r2, #4]
 800b58a:	4421      	add	r1, r4
 800b58c:	6011      	str	r1, [r2, #0]
 800b58e:	e7da      	b.n	800b546 <_free_r+0x26>
 800b590:	d902      	bls.n	800b598 <_free_r+0x78>
 800b592:	230c      	movs	r3, #12
 800b594:	6003      	str	r3, [r0, #0]
 800b596:	e7d6      	b.n	800b546 <_free_r+0x26>
 800b598:	6825      	ldr	r5, [r4, #0]
 800b59a:	1961      	adds	r1, r4, r5
 800b59c:	428b      	cmp	r3, r1
 800b59e:	bf04      	itt	eq
 800b5a0:	6819      	ldreq	r1, [r3, #0]
 800b5a2:	685b      	ldreq	r3, [r3, #4]
 800b5a4:	6063      	str	r3, [r4, #4]
 800b5a6:	bf04      	itt	eq
 800b5a8:	1949      	addeq	r1, r1, r5
 800b5aa:	6021      	streq	r1, [r4, #0]
 800b5ac:	6054      	str	r4, [r2, #4]
 800b5ae:	e7ca      	b.n	800b546 <_free_r+0x26>
 800b5b0:	b003      	add	sp, #12
 800b5b2:	bd30      	pop	{r4, r5, pc}
 800b5b4:	20004d38 	.word	0x20004d38

0800b5b8 <_read_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	; (800b5d8 <_read_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f7 fe98 	bl	80032fc <_read>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_read_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_read_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20004d40 	.word	0x20004d40

0800b5dc <__assert_func>:
 800b5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5de:	4614      	mov	r4, r2
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <__assert_func+0x2c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	68d8      	ldr	r0, [r3, #12]
 800b5ea:	b14c      	cbz	r4, 800b600 <__assert_func+0x24>
 800b5ec:	4b07      	ldr	r3, [pc, #28]	; (800b60c <__assert_func+0x30>)
 800b5ee:	9100      	str	r1, [sp, #0]
 800b5f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5f4:	4906      	ldr	r1, [pc, #24]	; (800b610 <__assert_func+0x34>)
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	f000 f80e 	bl	800b618 <fiprintf>
 800b5fc:	f000 fa58 	bl	800bab0 <abort>
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <__assert_func+0x38>)
 800b602:	461c      	mov	r4, r3
 800b604:	e7f3      	b.n	800b5ee <__assert_func+0x12>
 800b606:	bf00      	nop
 800b608:	20000010 	.word	0x20000010
 800b60c:	0800c034 	.word	0x0800c034
 800b610:	0800c041 	.word	0x0800c041
 800b614:	0800c06f 	.word	0x0800c06f

0800b618 <fiprintf>:
 800b618:	b40e      	push	{r1, r2, r3}
 800b61a:	b503      	push	{r0, r1, lr}
 800b61c:	4601      	mov	r1, r0
 800b61e:	ab03      	add	r3, sp, #12
 800b620:	4805      	ldr	r0, [pc, #20]	; (800b638 <fiprintf+0x20>)
 800b622:	f853 2b04 	ldr.w	r2, [r3], #4
 800b626:	6800      	ldr	r0, [r0, #0]
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f000 f843 	bl	800b6b4 <_vfiprintf_r>
 800b62e:	b002      	add	sp, #8
 800b630:	f85d eb04 	ldr.w	lr, [sp], #4
 800b634:	b003      	add	sp, #12
 800b636:	4770      	bx	lr
 800b638:	20000010 	.word	0x20000010

0800b63c <__ascii_mbtowc>:
 800b63c:	b082      	sub	sp, #8
 800b63e:	b901      	cbnz	r1, 800b642 <__ascii_mbtowc+0x6>
 800b640:	a901      	add	r1, sp, #4
 800b642:	b142      	cbz	r2, 800b656 <__ascii_mbtowc+0x1a>
 800b644:	b14b      	cbz	r3, 800b65a <__ascii_mbtowc+0x1e>
 800b646:	7813      	ldrb	r3, [r2, #0]
 800b648:	600b      	str	r3, [r1, #0]
 800b64a:	7812      	ldrb	r2, [r2, #0]
 800b64c:	1e10      	subs	r0, r2, #0
 800b64e:	bf18      	it	ne
 800b650:	2001      	movne	r0, #1
 800b652:	b002      	add	sp, #8
 800b654:	4770      	bx	lr
 800b656:	4610      	mov	r0, r2
 800b658:	e7fb      	b.n	800b652 <__ascii_mbtowc+0x16>
 800b65a:	f06f 0001 	mvn.w	r0, #1
 800b65e:	e7f8      	b.n	800b652 <__ascii_mbtowc+0x16>

0800b660 <__sfputc_r>:
 800b660:	6893      	ldr	r3, [r2, #8]
 800b662:	3b01      	subs	r3, #1
 800b664:	2b00      	cmp	r3, #0
 800b666:	b410      	push	{r4}
 800b668:	6093      	str	r3, [r2, #8]
 800b66a:	da08      	bge.n	800b67e <__sfputc_r+0x1e>
 800b66c:	6994      	ldr	r4, [r2, #24]
 800b66e:	42a3      	cmp	r3, r4
 800b670:	db01      	blt.n	800b676 <__sfputc_r+0x16>
 800b672:	290a      	cmp	r1, #10
 800b674:	d103      	bne.n	800b67e <__sfputc_r+0x1e>
 800b676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67a:	f000 b94b 	b.w	800b914 <__swbuf_r>
 800b67e:	6813      	ldr	r3, [r2, #0]
 800b680:	1c58      	adds	r0, r3, #1
 800b682:	6010      	str	r0, [r2, #0]
 800b684:	7019      	strb	r1, [r3, #0]
 800b686:	4608      	mov	r0, r1
 800b688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <__sfputs_r>:
 800b68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	4614      	mov	r4, r2
 800b696:	18d5      	adds	r5, r2, r3
 800b698:	42ac      	cmp	r4, r5
 800b69a:	d101      	bne.n	800b6a0 <__sfputs_r+0x12>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e007      	b.n	800b6b0 <__sfputs_r+0x22>
 800b6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a4:	463a      	mov	r2, r7
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7ff ffda 	bl	800b660 <__sfputc_r>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d1f3      	bne.n	800b698 <__sfputs_r+0xa>
 800b6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6b4 <_vfiprintf_r>:
 800b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b8:	460d      	mov	r5, r1
 800b6ba:	b09d      	sub	sp, #116	; 0x74
 800b6bc:	4614      	mov	r4, r2
 800b6be:	4698      	mov	r8, r3
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	b118      	cbz	r0, 800b6cc <_vfiprintf_r+0x18>
 800b6c4:	6983      	ldr	r3, [r0, #24]
 800b6c6:	b90b      	cbnz	r3, 800b6cc <_vfiprintf_r+0x18>
 800b6c8:	f7fd fd6e 	bl	80091a8 <__sinit>
 800b6cc:	4b89      	ldr	r3, [pc, #548]	; (800b8f4 <_vfiprintf_r+0x240>)
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	d11b      	bne.n	800b70a <_vfiprintf_r+0x56>
 800b6d2:	6875      	ldr	r5, [r6, #4]
 800b6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	d405      	bmi.n	800b6e6 <_vfiprintf_r+0x32>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	059a      	lsls	r2, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_vfiprintf_r+0x32>
 800b6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e2:	f7fd fe24 	bl	800932e <__retarget_lock_acquire_recursive>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	071b      	lsls	r3, r3, #28
 800b6ea:	d501      	bpl.n	800b6f0 <_vfiprintf_r+0x3c>
 800b6ec:	692b      	ldr	r3, [r5, #16]
 800b6ee:	b9eb      	cbnz	r3, 800b72c <_vfiprintf_r+0x78>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 f96e 	bl	800b9d4 <__swsetup_r>
 800b6f8:	b1c0      	cbz	r0, 800b72c <_vfiprintf_r+0x78>
 800b6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fc:	07dc      	lsls	r4, r3, #31
 800b6fe:	d50e      	bpl.n	800b71e <_vfiprintf_r+0x6a>
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	b01d      	add	sp, #116	; 0x74
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	4b7b      	ldr	r3, [pc, #492]	; (800b8f8 <_vfiprintf_r+0x244>)
 800b70c:	429d      	cmp	r5, r3
 800b70e:	d101      	bne.n	800b714 <_vfiprintf_r+0x60>
 800b710:	68b5      	ldr	r5, [r6, #8]
 800b712:	e7df      	b.n	800b6d4 <_vfiprintf_r+0x20>
 800b714:	4b79      	ldr	r3, [pc, #484]	; (800b8fc <_vfiprintf_r+0x248>)
 800b716:	429d      	cmp	r5, r3
 800b718:	bf08      	it	eq
 800b71a:	68f5      	ldreq	r5, [r6, #12]
 800b71c:	e7da      	b.n	800b6d4 <_vfiprintf_r+0x20>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	0598      	lsls	r0, r3, #22
 800b722:	d4ed      	bmi.n	800b700 <_vfiprintf_r+0x4c>
 800b724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b726:	f7fd fe03 	bl	8009330 <__retarget_lock_release_recursive>
 800b72a:	e7e9      	b.n	800b700 <_vfiprintf_r+0x4c>
 800b72c:	2300      	movs	r3, #0
 800b72e:	9309      	str	r3, [sp, #36]	; 0x24
 800b730:	2320      	movs	r3, #32
 800b732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b736:	f8cd 800c 	str.w	r8, [sp, #12]
 800b73a:	2330      	movs	r3, #48	; 0x30
 800b73c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b900 <_vfiprintf_r+0x24c>
 800b740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b744:	f04f 0901 	mov.w	r9, #1
 800b748:	4623      	mov	r3, r4
 800b74a:	469a      	mov	sl, r3
 800b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b750:	b10a      	cbz	r2, 800b756 <_vfiprintf_r+0xa2>
 800b752:	2a25      	cmp	r2, #37	; 0x25
 800b754:	d1f9      	bne.n	800b74a <_vfiprintf_r+0x96>
 800b756:	ebba 0b04 	subs.w	fp, sl, r4
 800b75a:	d00b      	beq.n	800b774 <_vfiprintf_r+0xc0>
 800b75c:	465b      	mov	r3, fp
 800b75e:	4622      	mov	r2, r4
 800b760:	4629      	mov	r1, r5
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff93 	bl	800b68e <__sfputs_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	f000 80aa 	beq.w	800b8c2 <_vfiprintf_r+0x20e>
 800b76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b770:	445a      	add	r2, fp
 800b772:	9209      	str	r2, [sp, #36]	; 0x24
 800b774:	f89a 3000 	ldrb.w	r3, [sl]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 80a2 	beq.w	800b8c2 <_vfiprintf_r+0x20e>
 800b77e:	2300      	movs	r3, #0
 800b780:	f04f 32ff 	mov.w	r2, #4294967295
 800b784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b788:	f10a 0a01 	add.w	sl, sl, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	9307      	str	r3, [sp, #28]
 800b790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b794:	931a      	str	r3, [sp, #104]	; 0x68
 800b796:	4654      	mov	r4, sl
 800b798:	2205      	movs	r2, #5
 800b79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79e:	4858      	ldr	r0, [pc, #352]	; (800b900 <_vfiprintf_r+0x24c>)
 800b7a0:	f7f4 fd26 	bl	80001f0 <memchr>
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	b9d8      	cbnz	r0, 800b7e0 <_vfiprintf_r+0x12c>
 800b7a8:	06d1      	lsls	r1, r2, #27
 800b7aa:	bf44      	itt	mi
 800b7ac:	2320      	movmi	r3, #32
 800b7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b2:	0713      	lsls	r3, r2, #28
 800b7b4:	bf44      	itt	mi
 800b7b6:	232b      	movmi	r3, #43	; 0x2b
 800b7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c2:	d015      	beq.n	800b7f0 <_vfiprintf_r+0x13c>
 800b7c4:	9a07      	ldr	r2, [sp, #28]
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d4:	3b30      	subs	r3, #48	; 0x30
 800b7d6:	2b09      	cmp	r3, #9
 800b7d8:	d94e      	bls.n	800b878 <_vfiprintf_r+0x1c4>
 800b7da:	b1b0      	cbz	r0, 800b80a <_vfiprintf_r+0x156>
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	e014      	b.n	800b80a <_vfiprintf_r+0x156>
 800b7e0:	eba0 0308 	sub.w	r3, r0, r8
 800b7e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	46a2      	mov	sl, r4
 800b7ee:	e7d2      	b.n	800b796 <_vfiprintf_r+0xe2>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	1d19      	adds	r1, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9103      	str	r1, [sp, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bfbb      	ittet	lt
 800b7fc:	425b      	neglt	r3, r3
 800b7fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b802:	9307      	strge	r3, [sp, #28]
 800b804:	9307      	strlt	r3, [sp, #28]
 800b806:	bfb8      	it	lt
 800b808:	9204      	strlt	r2, [sp, #16]
 800b80a:	7823      	ldrb	r3, [r4, #0]
 800b80c:	2b2e      	cmp	r3, #46	; 0x2e
 800b80e:	d10c      	bne.n	800b82a <_vfiprintf_r+0x176>
 800b810:	7863      	ldrb	r3, [r4, #1]
 800b812:	2b2a      	cmp	r3, #42	; 0x2a
 800b814:	d135      	bne.n	800b882 <_vfiprintf_r+0x1ce>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d1a      	adds	r2, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9203      	str	r2, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfb8      	it	lt
 800b822:	f04f 33ff 	movlt.w	r3, #4294967295
 800b826:	3402      	adds	r4, #2
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b910 <_vfiprintf_r+0x25c>
 800b82e:	7821      	ldrb	r1, [r4, #0]
 800b830:	2203      	movs	r2, #3
 800b832:	4650      	mov	r0, sl
 800b834:	f7f4 fcdc 	bl	80001f0 <memchr>
 800b838:	b140      	cbz	r0, 800b84c <_vfiprintf_r+0x198>
 800b83a:	2340      	movs	r3, #64	; 0x40
 800b83c:	eba0 000a 	sub.w	r0, r0, sl
 800b840:	fa03 f000 	lsl.w	r0, r3, r0
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	4303      	orrs	r3, r0
 800b848:	3401      	adds	r4, #1
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b850:	482c      	ldr	r0, [pc, #176]	; (800b904 <_vfiprintf_r+0x250>)
 800b852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b856:	2206      	movs	r2, #6
 800b858:	f7f4 fcca 	bl	80001f0 <memchr>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d03f      	beq.n	800b8e0 <_vfiprintf_r+0x22c>
 800b860:	4b29      	ldr	r3, [pc, #164]	; (800b908 <_vfiprintf_r+0x254>)
 800b862:	bb1b      	cbnz	r3, 800b8ac <_vfiprintf_r+0x1f8>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	3307      	adds	r3, #7
 800b868:	f023 0307 	bic.w	r3, r3, #7
 800b86c:	3308      	adds	r3, #8
 800b86e:	9303      	str	r3, [sp, #12]
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	443b      	add	r3, r7
 800b874:	9309      	str	r3, [sp, #36]	; 0x24
 800b876:	e767      	b.n	800b748 <_vfiprintf_r+0x94>
 800b878:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87c:	460c      	mov	r4, r1
 800b87e:	2001      	movs	r0, #1
 800b880:	e7a5      	b.n	800b7ce <_vfiprintf_r+0x11a>
 800b882:	2300      	movs	r3, #0
 800b884:	3401      	adds	r4, #1
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	4619      	mov	r1, r3
 800b88a:	f04f 0c0a 	mov.w	ip, #10
 800b88e:	4620      	mov	r0, r4
 800b890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b894:	3a30      	subs	r2, #48	; 0x30
 800b896:	2a09      	cmp	r2, #9
 800b898:	d903      	bls.n	800b8a2 <_vfiprintf_r+0x1ee>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d0c5      	beq.n	800b82a <_vfiprintf_r+0x176>
 800b89e:	9105      	str	r1, [sp, #20]
 800b8a0:	e7c3      	b.n	800b82a <_vfiprintf_r+0x176>
 800b8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e7f0      	b.n	800b88e <_vfiprintf_r+0x1da>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b16      	ldr	r3, [pc, #88]	; (800b90c <_vfiprintf_r+0x258>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fd fe86 	bl	80095c8 <_printf_float>
 800b8bc:	4607      	mov	r7, r0
 800b8be:	1c78      	adds	r0, r7, #1
 800b8c0:	d1d6      	bne.n	800b870 <_vfiprintf_r+0x1bc>
 800b8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c4:	07d9      	lsls	r1, r3, #31
 800b8c6:	d405      	bmi.n	800b8d4 <_vfiprintf_r+0x220>
 800b8c8:	89ab      	ldrh	r3, [r5, #12]
 800b8ca:	059a      	lsls	r2, r3, #22
 800b8cc:	d402      	bmi.n	800b8d4 <_vfiprintf_r+0x220>
 800b8ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d0:	f7fd fd2e 	bl	8009330 <__retarget_lock_release_recursive>
 800b8d4:	89ab      	ldrh	r3, [r5, #12]
 800b8d6:	065b      	lsls	r3, r3, #25
 800b8d8:	f53f af12 	bmi.w	800b700 <_vfiprintf_r+0x4c>
 800b8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8de:	e711      	b.n	800b704 <_vfiprintf_r+0x50>
 800b8e0:	ab03      	add	r3, sp, #12
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4b09      	ldr	r3, [pc, #36]	; (800b90c <_vfiprintf_r+0x258>)
 800b8e8:	a904      	add	r1, sp, #16
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7fe f910 	bl	8009b10 <_printf_i>
 800b8f0:	e7e4      	b.n	800b8bc <_vfiprintf_r+0x208>
 800b8f2:	bf00      	nop
 800b8f4:	0800bdd0 	.word	0x0800bdd0
 800b8f8:	0800bdf0 	.word	0x0800bdf0
 800b8fc:	0800bdb0 	.word	0x0800bdb0
 800b900:	0800c07a 	.word	0x0800c07a
 800b904:	0800c084 	.word	0x0800c084
 800b908:	080095c9 	.word	0x080095c9
 800b90c:	0800b68f 	.word	0x0800b68f
 800b910:	0800c080 	.word	0x0800c080

0800b914 <__swbuf_r>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	460e      	mov	r6, r1
 800b918:	4614      	mov	r4, r2
 800b91a:	4605      	mov	r5, r0
 800b91c:	b118      	cbz	r0, 800b926 <__swbuf_r+0x12>
 800b91e:	6983      	ldr	r3, [r0, #24]
 800b920:	b90b      	cbnz	r3, 800b926 <__swbuf_r+0x12>
 800b922:	f7fd fc41 	bl	80091a8 <__sinit>
 800b926:	4b21      	ldr	r3, [pc, #132]	; (800b9ac <__swbuf_r+0x98>)
 800b928:	429c      	cmp	r4, r3
 800b92a:	d12b      	bne.n	800b984 <__swbuf_r+0x70>
 800b92c:	686c      	ldr	r4, [r5, #4]
 800b92e:	69a3      	ldr	r3, [r4, #24]
 800b930:	60a3      	str	r3, [r4, #8]
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	071a      	lsls	r2, r3, #28
 800b936:	d52f      	bpl.n	800b998 <__swbuf_r+0x84>
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	b36b      	cbz	r3, 800b998 <__swbuf_r+0x84>
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	6820      	ldr	r0, [r4, #0]
 800b940:	1ac0      	subs	r0, r0, r3
 800b942:	6963      	ldr	r3, [r4, #20]
 800b944:	b2f6      	uxtb	r6, r6
 800b946:	4283      	cmp	r3, r0
 800b948:	4637      	mov	r7, r6
 800b94a:	dc04      	bgt.n	800b956 <__swbuf_r+0x42>
 800b94c:	4621      	mov	r1, r4
 800b94e:	4628      	mov	r0, r5
 800b950:	f7ff f9e6 	bl	800ad20 <_fflush_r>
 800b954:	bb30      	cbnz	r0, 800b9a4 <__swbuf_r+0x90>
 800b956:	68a3      	ldr	r3, [r4, #8]
 800b958:	3b01      	subs	r3, #1
 800b95a:	60a3      	str	r3, [r4, #8]
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	6022      	str	r2, [r4, #0]
 800b962:	701e      	strb	r6, [r3, #0]
 800b964:	6963      	ldr	r3, [r4, #20]
 800b966:	3001      	adds	r0, #1
 800b968:	4283      	cmp	r3, r0
 800b96a:	d004      	beq.n	800b976 <__swbuf_r+0x62>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	07db      	lsls	r3, r3, #31
 800b970:	d506      	bpl.n	800b980 <__swbuf_r+0x6c>
 800b972:	2e0a      	cmp	r6, #10
 800b974:	d104      	bne.n	800b980 <__swbuf_r+0x6c>
 800b976:	4621      	mov	r1, r4
 800b978:	4628      	mov	r0, r5
 800b97a:	f7ff f9d1 	bl	800ad20 <_fflush_r>
 800b97e:	b988      	cbnz	r0, 800b9a4 <__swbuf_r+0x90>
 800b980:	4638      	mov	r0, r7
 800b982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b984:	4b0a      	ldr	r3, [pc, #40]	; (800b9b0 <__swbuf_r+0x9c>)
 800b986:	429c      	cmp	r4, r3
 800b988:	d101      	bne.n	800b98e <__swbuf_r+0x7a>
 800b98a:	68ac      	ldr	r4, [r5, #8]
 800b98c:	e7cf      	b.n	800b92e <__swbuf_r+0x1a>
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <__swbuf_r+0xa0>)
 800b990:	429c      	cmp	r4, r3
 800b992:	bf08      	it	eq
 800b994:	68ec      	ldreq	r4, [r5, #12]
 800b996:	e7ca      	b.n	800b92e <__swbuf_r+0x1a>
 800b998:	4621      	mov	r1, r4
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 f81a 	bl	800b9d4 <__swsetup_r>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d0cb      	beq.n	800b93c <__swbuf_r+0x28>
 800b9a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b9a8:	e7ea      	b.n	800b980 <__swbuf_r+0x6c>
 800b9aa:	bf00      	nop
 800b9ac:	0800bdd0 	.word	0x0800bdd0
 800b9b0:	0800bdf0 	.word	0x0800bdf0
 800b9b4:	0800bdb0 	.word	0x0800bdb0

0800b9b8 <__ascii_wctomb>:
 800b9b8:	b149      	cbz	r1, 800b9ce <__ascii_wctomb+0x16>
 800b9ba:	2aff      	cmp	r2, #255	; 0xff
 800b9bc:	bf85      	ittet	hi
 800b9be:	238a      	movhi	r3, #138	; 0x8a
 800b9c0:	6003      	strhi	r3, [r0, #0]
 800b9c2:	700a      	strbls	r2, [r1, #0]
 800b9c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9c8:	bf98      	it	ls
 800b9ca:	2001      	movls	r0, #1
 800b9cc:	4770      	bx	lr
 800b9ce:	4608      	mov	r0, r1
 800b9d0:	4770      	bx	lr
	...

0800b9d4 <__swsetup_r>:
 800b9d4:	4b32      	ldr	r3, [pc, #200]	; (800baa0 <__swsetup_r+0xcc>)
 800b9d6:	b570      	push	{r4, r5, r6, lr}
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	4606      	mov	r6, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	b125      	cbz	r5, 800b9ea <__swsetup_r+0x16>
 800b9e0:	69ab      	ldr	r3, [r5, #24]
 800b9e2:	b913      	cbnz	r3, 800b9ea <__swsetup_r+0x16>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f7fd fbdf 	bl	80091a8 <__sinit>
 800b9ea:	4b2e      	ldr	r3, [pc, #184]	; (800baa4 <__swsetup_r+0xd0>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	d10f      	bne.n	800ba10 <__swsetup_r+0x3c>
 800b9f0:	686c      	ldr	r4, [r5, #4]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9f8:	0719      	lsls	r1, r3, #28
 800b9fa:	d42c      	bmi.n	800ba56 <__swsetup_r+0x82>
 800b9fc:	06dd      	lsls	r5, r3, #27
 800b9fe:	d411      	bmi.n	800ba24 <__swsetup_r+0x50>
 800ba00:	2309      	movs	r3, #9
 800ba02:	6033      	str	r3, [r6, #0]
 800ba04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0e:	e03e      	b.n	800ba8e <__swsetup_r+0xba>
 800ba10:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <__swsetup_r+0xd4>)
 800ba12:	429c      	cmp	r4, r3
 800ba14:	d101      	bne.n	800ba1a <__swsetup_r+0x46>
 800ba16:	68ac      	ldr	r4, [r5, #8]
 800ba18:	e7eb      	b.n	800b9f2 <__swsetup_r+0x1e>
 800ba1a:	4b24      	ldr	r3, [pc, #144]	; (800baac <__swsetup_r+0xd8>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	bf08      	it	eq
 800ba20:	68ec      	ldreq	r4, [r5, #12]
 800ba22:	e7e6      	b.n	800b9f2 <__swsetup_r+0x1e>
 800ba24:	0758      	lsls	r0, r3, #29
 800ba26:	d512      	bpl.n	800ba4e <__swsetup_r+0x7a>
 800ba28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba2a:	b141      	cbz	r1, 800ba3e <__swsetup_r+0x6a>
 800ba2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba30:	4299      	cmp	r1, r3
 800ba32:	d002      	beq.n	800ba3a <__swsetup_r+0x66>
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff fd73 	bl	800b520 <_free_r>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	2300      	movs	r3, #0
 800ba48:	6063      	str	r3, [r4, #4]
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f043 0308 	orr.w	r3, r3, #8
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	b94b      	cbnz	r3, 800ba6e <__swsetup_r+0x9a>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba64:	d003      	beq.n	800ba6e <__swsetup_r+0x9a>
 800ba66:	4621      	mov	r1, r4
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f84d 	bl	800bb08 <__smakebuf_r>
 800ba6e:	89a0      	ldrh	r0, [r4, #12]
 800ba70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba74:	f010 0301 	ands.w	r3, r0, #1
 800ba78:	d00a      	beq.n	800ba90 <__swsetup_r+0xbc>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60a3      	str	r3, [r4, #8]
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	425b      	negs	r3, r3
 800ba82:	61a3      	str	r3, [r4, #24]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	b943      	cbnz	r3, 800ba9a <__swsetup_r+0xc6>
 800ba88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba8c:	d1ba      	bne.n	800ba04 <__swsetup_r+0x30>
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	0781      	lsls	r1, r0, #30
 800ba92:	bf58      	it	pl
 800ba94:	6963      	ldrpl	r3, [r4, #20]
 800ba96:	60a3      	str	r3, [r4, #8]
 800ba98:	e7f4      	b.n	800ba84 <__swsetup_r+0xb0>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e7f7      	b.n	800ba8e <__swsetup_r+0xba>
 800ba9e:	bf00      	nop
 800baa0:	20000010 	.word	0x20000010
 800baa4:	0800bdd0 	.word	0x0800bdd0
 800baa8:	0800bdf0 	.word	0x0800bdf0
 800baac:	0800bdb0 	.word	0x0800bdb0

0800bab0 <abort>:
 800bab0:	b508      	push	{r3, lr}
 800bab2:	2006      	movs	r0, #6
 800bab4:	f000 f890 	bl	800bbd8 <raise>
 800bab8:	2001      	movs	r0, #1
 800baba:	f7f7 fc15 	bl	80032e8 <_exit>

0800babe <__swhatbuf_r>:
 800babe:	b570      	push	{r4, r5, r6, lr}
 800bac0:	460e      	mov	r6, r1
 800bac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac6:	2900      	cmp	r1, #0
 800bac8:	b096      	sub	sp, #88	; 0x58
 800baca:	4614      	mov	r4, r2
 800bacc:	461d      	mov	r5, r3
 800bace:	da08      	bge.n	800bae2 <__swhatbuf_r+0x24>
 800bad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	602a      	str	r2, [r5, #0]
 800bad8:	061a      	lsls	r2, r3, #24
 800bada:	d410      	bmi.n	800bafe <__swhatbuf_r+0x40>
 800badc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae0:	e00e      	b.n	800bb00 <__swhatbuf_r+0x42>
 800bae2:	466a      	mov	r2, sp
 800bae4:	f000 f894 	bl	800bc10 <_fstat_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	dbf1      	blt.n	800bad0 <__swhatbuf_r+0x12>
 800baec:	9a01      	ldr	r2, [sp, #4]
 800baee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baf6:	425a      	negs	r2, r3
 800baf8:	415a      	adcs	r2, r3
 800bafa:	602a      	str	r2, [r5, #0]
 800bafc:	e7ee      	b.n	800badc <__swhatbuf_r+0x1e>
 800bafe:	2340      	movs	r3, #64	; 0x40
 800bb00:	2000      	movs	r0, #0
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	b016      	add	sp, #88	; 0x58
 800bb06:	bd70      	pop	{r4, r5, r6, pc}

0800bb08 <__smakebuf_r>:
 800bb08:	898b      	ldrh	r3, [r1, #12]
 800bb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb0c:	079d      	lsls	r5, r3, #30
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	d507      	bpl.n	800bb24 <__smakebuf_r+0x1c>
 800bb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	b002      	add	sp, #8
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	ab01      	add	r3, sp, #4
 800bb26:	466a      	mov	r2, sp
 800bb28:	f7ff ffc9 	bl	800babe <__swhatbuf_r>
 800bb2c:	9900      	ldr	r1, [sp, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7fd fc35 	bl	80093a0 <_malloc_r>
 800bb36:	b948      	cbnz	r0, 800bb4c <__smakebuf_r+0x44>
 800bb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3c:	059a      	lsls	r2, r3, #22
 800bb3e:	d4ef      	bmi.n	800bb20 <__smakebuf_r+0x18>
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	f043 0302 	orr.w	r3, r3, #2
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	e7e3      	b.n	800bb14 <__smakebuf_r+0xc>
 800bb4c:	4b0d      	ldr	r3, [pc, #52]	; (800bb84 <__smakebuf_r+0x7c>)
 800bb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	6020      	str	r0, [r4, #0]
 800bb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	9b00      	ldr	r3, [sp, #0]
 800bb5c:	6163      	str	r3, [r4, #20]
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	6120      	str	r0, [r4, #16]
 800bb62:	b15b      	cbz	r3, 800bb7c <__smakebuf_r+0x74>
 800bb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f000 f863 	bl	800bc34 <_isatty_r>
 800bb6e:	b128      	cbz	r0, 800bb7c <__smakebuf_r+0x74>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	f043 0301 	orr.w	r3, r3, #1
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	89a0      	ldrh	r0, [r4, #12]
 800bb7e:	4305      	orrs	r5, r0
 800bb80:	81a5      	strh	r5, [r4, #12]
 800bb82:	e7cd      	b.n	800bb20 <__smakebuf_r+0x18>
 800bb84:	08009141 	.word	0x08009141

0800bb88 <_raise_r>:
 800bb88:	291f      	cmp	r1, #31
 800bb8a:	b538      	push	{r3, r4, r5, lr}
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	460d      	mov	r5, r1
 800bb90:	d904      	bls.n	800bb9c <_raise_r+0x14>
 800bb92:	2316      	movs	r3, #22
 800bb94:	6003      	str	r3, [r0, #0]
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb9e:	b112      	cbz	r2, 800bba6 <_raise_r+0x1e>
 800bba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bba4:	b94b      	cbnz	r3, 800bbba <_raise_r+0x32>
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 f830 	bl	800bc0c <_getpid_r>
 800bbac:	462a      	mov	r2, r5
 800bbae:	4601      	mov	r1, r0
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbb6:	f000 b817 	b.w	800bbe8 <_kill_r>
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d00a      	beq.n	800bbd4 <_raise_r+0x4c>
 800bbbe:	1c59      	adds	r1, r3, #1
 800bbc0:	d103      	bne.n	800bbca <_raise_r+0x42>
 800bbc2:	2316      	movs	r3, #22
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	e7e7      	b.n	800bb9a <_raise_r+0x12>
 800bbca:	2400      	movs	r4, #0
 800bbcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	4798      	blx	r3
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e7e0      	b.n	800bb9a <_raise_r+0x12>

0800bbd8 <raise>:
 800bbd8:	4b02      	ldr	r3, [pc, #8]	; (800bbe4 <raise+0xc>)
 800bbda:	4601      	mov	r1, r0
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f7ff bfd3 	b.w	800bb88 <_raise_r>
 800bbe2:	bf00      	nop
 800bbe4:	20000010 	.word	0x20000010

0800bbe8 <_kill_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d07      	ldr	r5, [pc, #28]	; (800bc08 <_kill_r+0x20>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	602b      	str	r3, [r5, #0]
 800bbf6:	f7f7 fb67 	bl	80032c8 <_kill>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	d102      	bne.n	800bc04 <_kill_r+0x1c>
 800bbfe:	682b      	ldr	r3, [r5, #0]
 800bc00:	b103      	cbz	r3, 800bc04 <_kill_r+0x1c>
 800bc02:	6023      	str	r3, [r4, #0]
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
 800bc06:	bf00      	nop
 800bc08:	20004d40 	.word	0x20004d40

0800bc0c <_getpid_r>:
 800bc0c:	f7f7 bb54 	b.w	80032b8 <_getpid>

0800bc10 <_fstat_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4d07      	ldr	r5, [pc, #28]	; (800bc30 <_fstat_r+0x20>)
 800bc14:	2300      	movs	r3, #0
 800bc16:	4604      	mov	r4, r0
 800bc18:	4608      	mov	r0, r1
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	602b      	str	r3, [r5, #0]
 800bc1e:	f7f7 fbb2 	bl	8003386 <_fstat>
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	d102      	bne.n	800bc2c <_fstat_r+0x1c>
 800bc26:	682b      	ldr	r3, [r5, #0]
 800bc28:	b103      	cbz	r3, 800bc2c <_fstat_r+0x1c>
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	bd38      	pop	{r3, r4, r5, pc}
 800bc2e:	bf00      	nop
 800bc30:	20004d40 	.word	0x20004d40

0800bc34 <_isatty_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d06      	ldr	r5, [pc, #24]	; (800bc50 <_isatty_r+0x1c>)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	f7f7 fbb1 	bl	80033a6 <_isatty>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_isatty_r+0x1a>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_isatty_r+0x1a>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	20004d40 	.word	0x20004d40

0800bc54 <_init>:
 800bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc56:	bf00      	nop
 800bc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5a:	bc08      	pop	{r3}
 800bc5c:	469e      	mov	lr, r3
 800bc5e:	4770      	bx	lr

0800bc60 <_fini>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr
